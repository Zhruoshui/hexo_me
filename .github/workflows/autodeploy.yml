name: Deploy # 部署

on: # 触发条件
  push:
    branches:
      - main # 推送到 main 分支（这里的分支名很重要，不要弄错了

  workflow_dispatch: # 手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 1. 检出仓库 # Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 2. 安装 Node.js # Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "20.11.0"

      - name: 3. 安装 Hexo # Install Hexo
        run: |
          npm install hexo@6.3.0

      - name: 4. 缓存 Node 插件 # Cache Modules
        uses: actions/cache@v4
        id: cache-modules
        with:
          path: node_modules
          key: ${{runner.OS}}-${{hashFiles('**/package-lock.json')}}

      - name: 5. 安装依赖 # Install Dependencies 如果没有缓存或 插件有更新，则安装插件
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: | # **如果仓库里没有 package-lock.json，上传一下，npm ci 必须要有 package-lock.json**
          npm ci

      - name: 6. 生成静态文件 # Generate，其中hexo algolia为algolia搜索，hexo gulp为全站压缩，如果没安装则按需删除
        run: |
          npx hexo clean
          npx hexo generate
        # npx hexo algolia

      - name: 8. 推送到服务器私有仓库
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }} # 服务器生成的私钥，例如 -----BEGIN RSA PRIVATE KEY-----xxxx-----END RSA PRIVATE KEY-----
          ARGS: "-avz --delete" # rsync参数
          SOURCE: "public/"
          REMOTE_HOST: ${{ secrets.SERVER_HOST }} # 服务器ip地址，例如 1.2.3.4
          REMOTE_USER: ${{ secrets.SERVER_USER }} # 登录用户，例如 ubuntu 注意应拥有该文件夹的权限，可以在root下为用户赋权 chown -R ubuntu:755 /www/wwwroot/hexo
          TARGET: ${{ secrets.SERVER_PATH }}    # 服务器目录，例如 /www/wwwroot/hexo
          EXCLUDE: ".git/,.user.ini"            # 排除源路径中.git/ 目标路径中.user.ini 这俩不做同步操作

