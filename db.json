{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/bitbug_favicon.ico","path":"img/bitbug_favicon.ico","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/Navigation_bar.css","path":"css/Navigation_bar.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/iconfont.css","path":"css/iconfont.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/iconfont.ttf","path":"css/iconfont.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/iconfont.woff","path":"css/iconfont.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/iconfont.woff2","path":"css/iconfont.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/this_mouse.css","path":"css/this_mouse.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/universe.css","path":"css/universe.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/nav.js","path":"js/nav.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/sun_moon.js","path":"js/sun_moon.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/snow.js","path":"js/snow.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/universe.js","path":"js/universe.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/mouse/Handwriting.cur","path":"css/mouse/Handwriting.cur","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/mouse/ArrowUp.cur","path":"css/mouse/ArrowUp.cur","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/mouse/Arrow.cur","path":"css/mouse/Arrow.cur","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/mouse/Link.cur","path":"css/mouse/Link.cur","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/mouse/Link_alt.cur","path":"css/mouse/Link_alt.cur","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/mouse/Move.cur","path":"css/mouse/Move.cur","modified":1,"renderable":1},{"_id":"source/about/index.pdf","path":"about/index.pdf","modified":1,"renderable":0},{"_id":"source/img/1.gif","path":"img/1.gif","modified":1,"renderable":0},{"_id":"source/img/WeChat_20240229225803.mp4","path":"img/WeChat_20240229225803.mp4","modified":1,"renderable":0},{"_id":"source/img/fly_speed.gif","path":"img/fly_speed.gif","modified":1,"renderable":0},{"_id":"source/img/dashang.jpg","path":"img/dashang.jpg","modified":1,"renderable":0},{"_id":"source/img/bitbug_favicon.ico","path":"img/bitbug_favicon.ico","modified":1,"renderable":0},{"_id":"source/img/pic_zh.jpg","path":"img/pic_zh.jpg","modified":1,"renderable":0},{"_id":"source/img/yaokongqi.mp4","path":"img/yaokongqi.mp4","modified":1,"renderable":0}],"Cache":[{"_id":"source/img/test.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1736782081500},{"_id":"source/_posts/AI编程体验.md","hash":"390871bf73b7e2604a38906243bad0a12ea75174","modified":1753845914328},{"_id":"source/about/index.md","hash":"12e06f0278840669f3fc477c00197ca939b9f429","modified":1740393073863},{"_id":"source/_data/link.yml","hash":"88eb8fcefc7140523715eede19a735731ac8f2bf","modified":1709211706271},{"_id":"source/_posts/Buildroot.md","hash":"8245081f14c3654df8164d7b03dbab8a5a9e52e3","modified":1739530990704},{"_id":"source/_posts/BEVDet.md","hash":"80e88af1f645f5c4623ed1e0e2a49d2a88288ca0","modified":1735644359454},{"_id":"source/_posts/AutoCube.md","hash":"ce61757365bab2d26122c5b9f3a6cd037c6f4a23","modified":1735644282577},{"_id":"source/_posts/FreeRTOS.md","hash":"8584d5bb6f20ab0167d115c94116d15754748f14","modified":1735640189645},{"_id":"source/_posts/Linux-kernel-compile.md","hash":"6ec8320e12e78b926ff2dded9f69db449a58cfc7","modified":1739528493774},{"_id":"source/_posts/GDB调试工具.md","hash":"9c102130b7141c6ed9a22cb02b9230f6aee6093c","modified":1741178129967},{"_id":"source/_posts/Nginx学习笔记.md","hash":"ddfb8175052af51d2b096716445b19b9d2363ec3","modified":1710422091065},{"_id":"source/_posts/OpenIPC.md","hash":"94ef617e6eaf5c0499cc4bc2ea2c37b04e1528da","modified":1749526765444},{"_id":"source/_posts/arm架构.md","hash":"8eb524c43eee96f0b39ab4b7e23c2e628612b777","modified":1739370141858},{"_id":"source/_posts/ROS-BEVDet开发日记.md","hash":"5e2b5f04838b093675f50d3b1b7dc218709bfa46","modified":1735644300129},{"_id":"source/_posts/bevdet-tensorrt-cpp-master.md","hash":"194bb70499aa356f7f35ed8359f9b9f8770a747e","modified":1729521512988},{"_id":"source/_posts/linxu-kernel-syscall.md","hash":"a96252d405d787d5bc69fad48c264e14734bcc9d","modified":1744716719033},{"_id":"source/_posts/bootloader嵌入式芯片启动过程全解析.md","hash":"cde1a4049c8cd5c13ed86dfa3191b9b96b2ec2bd","modified":1739528564526},{"_id":"source/_posts/docker学习记录.md","hash":"79d85aff44dd8445c1dd2c73f67949973081e86c","modified":1735545152495},{"_id":"source/_posts/MathJax.md","hash":"35aa8b6cee4567312940f974ffd6c89ea7c666c2","modified":1735644332982},{"_id":"source/_posts/linxu内核学习_模块机制.md","hash":"94f2013aaa4d2d6c28646c8c84c7f38a2a9ece23","modified":1752064183608},{"_id":"source/_posts/CapsWriter-Offline.md","hash":"6d25ef6b8fc5a07d883379737a1c7d49c8cc20e4","modified":1710343686539},{"_id":"source/_posts/makefile工程项目.md","hash":"90daba2bada55631aaa889ea406f42d4018d2f14","modified":1741176084862},{"_id":"source/_posts/linxu-kernel-interrupt.md","hash":"23dfcd2f9efade6677747643435ae8122052f2c3","modified":1752151815249},{"_id":"source/_posts/test.md","hash":"f3fd45fa72952ee247e0c95804382003ec1ed48c","modified":1735644316346},{"_id":"source/_posts/从0手搓无人机.md","hash":"9201d8bd3c7522254d10c179c4d0d93556d5b5ab","modified":1735644180909},{"_id":"source/_posts/基础算法.md","hash":"1dde3351a5ebf1a6ddb9aa907489779de4c94c12","modified":1739528432294},{"_id":"source/_posts/与SSH的今生今世.md","hash":"4d5ec5c342728df7038cbd96a1f0ca292dcb8cbc","modified":1735799146925},{"_id":"source/_posts/嵌入式系统启动流程.md","hash":"5b0239caa84768d59e11650e61f93383861ab805","modified":1748339159546},{"_id":"source/_posts/外挂标签.md","hash":"281968dfd2388fe6313b61343204d8c96f0afea0","modified":1735644219477},{"_id":"source/_posts/巡检机器人项目经历优化.md","hash":"3dbcc1b47b121a43c07789655425d3585be2c8a0","modified":1739868838950},{"_id":"source/_posts/抓包工具wireshark的学习笔记.md","hash":"039b98821bf245a759402ec58f12234d919f4aee","modified":1735644271650},{"_id":"source/_posts/qemu模拟开发板开发.md","hash":"cb1fd8fd9d43959dfe1ad4c252a72e4cb24996f7","modified":1740317246601},{"_id":"source/_posts/无人机研究报告.md","hash":"30571902c833af69f4493c140c210414575867cd","modified":1735644235266},{"_id":"source/_posts/数据结构复习.md","hash":"fb8297a3d6dc6f3770034958994ee55521a6d7aa","modified":1719576067085},{"_id":"source/_posts/无线链路Wifibroadcast.md","hash":"64147c877c3401322f032e935ad3b7e892829ac7","modified":1748341511929},{"_id":"source/_posts/语法.md","hash":"12a967be20af163cac1587e603d1a3ddbb662b47","modified":1709643758491},{"_id":"source/_posts/视频编码技术.md","hash":"a8821f6715a7ecf4a047474b9aa656b8de31c1a8","modified":1735803213609},{"_id":"source/_posts/这是个小秘密噢.md","hash":"18aa12e7316e03857b99764472f63e2578bfdfde","modified":1735644261981},{"_id":"source/categories/index.md","hash":"fffeacbed17e9bb30ce7e515e8dc5df1f18e3b3c","modified":1735642921049},{"_id":"source/_posts/生活离不开git.md","hash":"6dcf78303a4e94da9ab070ecbaae221635a80d3b","modified":1735644201832},{"_id":"source/img/dashang.jpg","hash":"412c35c01b49f90320bc8339451237394df904e0","modified":1707813571823},{"_id":"source/link/index.md","hash":"ce8489394681e88b0caae833b174bdfde045cf7d","modified":1735643478700},{"_id":"source/some_sourse/bounce.css","hash":"dd6db171ba43402ccc280a92d8cde6d9610bf7af","modified":1707841404800},{"_id":"source/img/bitbug_favicon.ico","hash":"c8d39641b4ec0c113962f74ee873036ebdf5a3fb","modified":1709214042490},{"_id":"source/tags/index.md","hash":"bf6030dff277320cf9373f1fd6d3ddae1fc7e8bb","modified":1735643759976},{"_id":"source/Box/myGame/index.md","hash":"09c6499d7f9927e03433a5215c3a27753501dfde","modified":1710410284398},{"_id":"source/Box/Gallery/index.md","hash":"4edf0d60d5052324a37a33a84c0078c581cd1d8a","modified":1710417721723},{"_id":"source/Box/myLove/index.md","hash":"6a276ccef97b9a925ca92cdcb38d12b2813591c5","modified":1735643526239},{"_id":"source/Box/webShare/index.md","hash":"556bc66f24e79979120e1b146b6dc2dfb6be9325","modified":1735643587890},{"_id":"source/Box/movie/index.md","hash":"818a4db5ca44fd379be9c750ba50e93871efc4ca","modified":1710410509662},{"_id":"source/_posts/OpenIPC开发文档.md","hash":"f597c97ad49fa8629c8b984b677e0aeda81eb179","modified":1748345477358},{"_id":"source/img/pic_zh.jpg","hash":"960cb351e592fe898bbe5b7420424a4a835d935c","modified":1736571733508},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1706112905797},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"4e01b47448d9f3a02afc04eef644e2321253f6f4","modified":1706112905889},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"34fef6c7278de23832bed000e270bf86c6c96650","modified":1706527037272},{"_id":"node_modules/hexo-theme-butterfly/model_list.json","hash":"c633c7ebc65c1a10277def5a96936edb8645ae23","modified":1708061942005},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"148da187d16033624ceccce8b8561835296f5a5a","modified":1706112905888},{"_id":"node_modules/hexo-theme-butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1706112906017},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"1f8b5e0a533a59f91d760a5f96e61d81a8a9b7d2","modified":1706112906018},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1706112905899},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1706112905935},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1706112905913},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1706112905944},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1706112905950},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"af5603b1a888f167dc80be6d53a19437b5cf6bef","modified":1706112906016},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1706112905959},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"90a6dc361de67532437d819a55ec64945ca5404b","modified":1706112906015},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"5aeca0522902fc5a9e5f92850143fae9585f0677","modified":1706112905887},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"5004faee365139521f161babd66649a8107e4008","modified":1706112906021},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"03629d1d13a7be09d4933aa5dc0dcbe45e79140c","modified":1706112906021},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"6e34b565ea013812d5e363b6de5fa1f9078d4e12","modified":1706112906014},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1706112906018},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1706112906014},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1706112905890},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1706112906016},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1706112906020},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1706112905892},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"cf634962cd61db504425e632f0a7fa34a2363016","modified":1708014836483},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"58dbcacc96b61f6c4982d142f4364446149a0f4d","modified":1710413136606},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1706112905937},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1706112905957},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"0e295b8c66be04e9518d93a9794ec0413f293559","modified":1708015047695},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1706112905945},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sun_moon.pug","hash":"8924013bd2e1ae1bdfb33c4730a69a49107ebc39","modified":1708014715001},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1706112905850},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1706112905845},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1706112905853},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1706112905851},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1706112905843},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1706112905876},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1706112905887},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/merge_config.js","hash":"2ac43fd4103ba3c6897da7c13015cb05f39fd695","modified":1706112905872},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"9a9115a378f1c4b27948b0b58921b684a3070398","modified":1707999091703},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"e196a99733d7f90899bceed5d12488e8234817d5","modified":1706112905882},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1706112905877},{"_id":"node_modules/hexo-theme-butterfly/source/img/bitbug_favicon.ico","hash":"c8d39641b4ec0c113962f74ee873036ebdf5a3fb","modified":1709214042490},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1706112905834},{"_id":"node_modules/hexo-theme-butterfly/source/css/Navigation_bar.css","hash":"6278e748af3c4dab26596d1fe17981d6f4362c18","modified":1710412545226},{"_id":"node_modules/hexo-theme-butterfly/source/css/iconfont.css","hash":"c61ba7720315af72dfa51e2287cb8638926408f9","modified":1710407744454},{"_id":"node_modules/hexo-theme-butterfly/source/css/iconfont.woff","hash":"442026f3d66a2894e5c1992b70ea01a1d632ecd5","modified":1710407008000},{"_id":"node_modules/hexo-theme-butterfly/source/css/iconfont.woff2","hash":"2fa574710b748cb6ba3aa0a88a7c9d8ca29e724b","modified":1710407008000},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1706112905997},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1706112905870},{"_id":"node_modules/hexo-theme-butterfly/source/css/this_mouse.css","hash":"8c0ad61f662bf55242be810a82e29ea47bdc62af","modified":1708003673398},{"_id":"node_modules/hexo-theme-butterfly/source/css/universe.css","hash":"e0fc94d45e3147970c9f30663f7bec21cdd9ec92","modified":1708088830241},{"_id":"node_modules/hexo-theme-butterfly/source/js/nav.js","hash":"9087f7124174155b5aebde1529c3c70e3882f640","modified":1708008541072},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"152b6bd4b6285165541a71f5a1c913f8ee6a602b","modified":1706112906011},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1706112905885},{"_id":"node_modules/hexo-theme-butterfly/source/js/sun_moon.js","hash":"4359f7063f483f45a34c7a2d8e3b3d8f2509c331","modified":1708014783524},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1706112905848},{"_id":"node_modules/hexo-theme-butterfly/source/js/universe.js","hash":"ea22ec4b15698ad46493cf57cb3809cfae4bbf3d","modified":1708088829128},{"_id":"node_modules/hexo-theme-butterfly/source/js/snow.js","hash":"bc7a5ad33051a21cda052118d945e8224507f06b","modified":1708088166570},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1706112905885},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":1706112905851},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"96f861151e3b889ef0ffe78821d489ad2625ee43","modified":1706112905848},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"d5c7e61257b08a9648404f6f48ce4d471cd5fa55","modified":1706112905854},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"e2a8a09bfe47da26eab242a36f516e6c452c799a","modified":1706112905874},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1706112905878},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":1706112905850},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":1706112905880},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1706112905853},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1706112905855},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1706112905852},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"418684993a3a3a2ac534257a2d9ecbcead6808c1","modified":1706112905852},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":1706112905855},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1706112905873},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1706112905873},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":1706112905881},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1706112905880},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":1706112905883},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1706112905943},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"ffc62222f8d7b4d44c1c0726c8a08824a2201039","modified":1706112905882},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1706112905896},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"63fed4548367a3663cdbaffa1df48167b0a2397b","modified":1706112905915},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1706112905926},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1706112905914},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1706112905951},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1706112905950},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1706112905957},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1706112905929},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1706112905903},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1706112905941},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"a5c7d362ae63474c1a4e3eb5cd09804b3684e984","modified":1706112905948},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"07b416a73ac38d109017371d39e7a713488f0baf","modified":1708011039823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1706112905924},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1706112905958},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"50d1b08367f709e5416140043933e79cd8d77559","modified":1709285312029},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1706112905929},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1706112905944},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1706112905917},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1706112905912},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":1706112905955},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"5574804fdea5edf7fd52aad2caf030614d5e7f2f","modified":1706112905947},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1706112905922},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1706112905959},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"f19694a42dbe28eda4b39a1696e8fbcd277bc76c","modified":1706112905988},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1706112905904},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"c8ff6ddd5bfe1190b7b8056b68ce41114fd79dcb","modified":1706112905994},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"a3ec715db05b7bfe82f9b9fde3b99881baaa5284","modified":1709214448063},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1706112905905},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1706112905906},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1706112905906},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1706112905907},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1706112905907},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"a658a274c5f7896ee5122725bee45548693bdd66","modified":1706112905908},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1706112905905},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1706112905910},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1706112905908},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1706112905910},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1706112905911},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1706112905934},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1706112905946},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1706112905897},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1706112905920},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"12e57491e94fa00d953bbda9db0b6d6169e2358c","modified":1706112905947},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1706112905951},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1706112905958},{"_id":"node_modules/hexo-theme-butterfly/source/css/_index_card_style/slidecard.styl","hash":"0483c7972838cfbd8766de32acc08120fbf08160","modified":1709284547239},{"_id":"node_modules/hexo-theme-butterfly/source/css/_index_card_style/multicard.styl","hash":"20b6918f0811b0acf2024893816054b70baab6f1","modified":1709284901723},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"4dcd468e4d11a0ac75406162678feffcd89fee00","modified":1706112905991},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1706112906009},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1706112905978},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"fad650f88778b33a6358e38cf50dfafc0974d28f","modified":1706112905974},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"e549d24ad81a7d93326a509ff8dcfcc58c80729e","modified":1706112906004},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"0db591a1f4ed5adcb8668a549bbee5c9d62682cf","modified":1706112905980},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1706112905985},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1706112905978},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"029eebbdcb3c682780d1de629fa06858cbe9782b","modified":1706112905989},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1706112906005},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1706112906002},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"a2eb44fa5eaea1325319a2064439cf36d0f35a2f","modified":1706112906002},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1706112905999},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"f845b9b4efdee750f70c023aab27432611f83059","modified":1706112906006},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1706112905970},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"b7a6a585dbc38d177c9aba75df3a467415d0488a","modified":1706112906006},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":1706112906005},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1706112906010},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1706112905973},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1706112905977},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sun_moon.styl","hash":"6d7b2f48e04dca561eaec6d8f5b02140106d0377","modified":1708014757030},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1706112905979},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":1709285313890},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1706112905985},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1706112906009},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1706112905976},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1706112905972},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1706112905996},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"961589da3c0a532c4709a4a4ea96bd579257f766","modified":1706112906000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1706112905990},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"5cddbb5f4eae695a26685e415d821b523e0f17bf","modified":1706112905989},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1706112905990},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1706112905997},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1706112905998},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1706112905811},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1706112905846},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1706112906001},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1706112906011},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1706112905856},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"2d02e52b360f6e6cae47c293ae57ed78e2554663","modified":1706112906008},{"_id":"node_modules/hexo-theme-butterfly/source/css/mouse/Handwriting.cur","hash":"4a6d3fb44af464817ecfa21f4440ad4338924024","modified":1695472544517},{"_id":"node_modules/hexo-theme-butterfly/source/css/mouse/ArrowUp.cur","hash":"635d038b6e4ca0589b5fd338212f86583081cb08","modified":1695472544365},{"_id":"node_modules/hexo-theme-butterfly/source/css/mouse/Arrow.cur","hash":"e7142b9412b51ea44599e2ced2bebd4526e08dfd","modified":1695472544332},{"_id":"node_modules/hexo-theme-butterfly/source/css/mouse/Link.cur","hash":"fa9655f7e754324cde997dac42081dedeaeb0445","modified":1695472544681},{"_id":"node_modules/hexo-theme-butterfly/source/css/mouse/Link_alt.cur","hash":"bda5a5bff132cdf85a02e7ece46f01c73b2f0992","modified":1695472544716},{"_id":"node_modules/hexo-theme-butterfly/source/css/mouse/Move.cur","hash":"6ba10d1d4c6e1dc19ef353535ba86f8ca031c882","modified":1695472544775},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1706112905930},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1706112905918},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"f7299f9fef5bf94bb58c8cd3be8ee660ad2f9cd4","modified":1706112905892},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1706112905899},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1706112905922},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1706112905962},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1706112905931},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1706112905953},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1706112905964},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1706112905913},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1706112905915},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1706112905966},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1706112905931},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1706112905916},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1706112905942},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":1706112905918},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1706112905960},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5c2bf7d7a4b9df3fb2794b0b32e96158f0de673f","modified":1706112905900},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"46aec6466959baec1c3d71a5dbc510fbeb00c91d","modified":1706112905921},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"2d7b0b09678adba09481e3152e0b32962677f650","modified":1706112905925},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":1706112905953},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3bc4c1b91568561f0491bdac65b75aa0bfd01f27","modified":1706112905919},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1706112905931},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0d378ee8a671982a46213a4bfb223b4f3409aea9","modified":1706112905925},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1706112905935},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":1706112905937},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1995a654ba7ad62775a0a6e2922209cd1a85f2e3","modified":1706112905963},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"46865e3f52096acb07d0212174b4e8751b123aea","modified":1706112905964},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"894bf60ff5170cf1e4f276a8cedaf8301bceb824","modified":1706112905962},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1706112905932},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"9b70eea4b1ff083e2b8769493a5b5aea71a02318","modified":1706112905968},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"6b67982bb7a3713b5bffd6a23ba2810425c504d0","modified":1706112905941},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1706112905936},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1706112905940},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1706112905893},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":1706112905934},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1706112905982},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1706112905994},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"9a3617f5e90c4e4176aa2ee2e904c22466e9663b","modified":1706112905901},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"2609bc2656aaaa9b59e8d575e711776512a62192","modified":1706112905917},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0f0b46d637a9a1b6ae35148923abecc80b866276","modified":1706112905926},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1706112905956},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1706112905932},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"de2c4d02b520dd49a0a59fc0f33295e5bbb2c624","modified":1706112905954},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"4104f96faa6040f111ebfb9a90eeb470857c3b86","modified":1706112905961},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"1f9f51023e9e33081c2add2ca73643c0edc5e9d5","modified":1706112905965},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1706112905984},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"24804ab6da9727ed793655c1262fa3f1a9746f70","modified":1706112905969},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1706112905895},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1706112905995},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"25914321762e30aacc610bc4dfb9de3e1cb556a3","modified":1706112905999},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1706112905933},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"b928be14d1b47a9fadb1bcc5f5072a7328752d4b","modified":1706112905919},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"3335024ba91f55ccf3858571b7898f46881c455c","modified":1706112905938},{"_id":"node_modules/hexo-theme-butterfly/source/css/iconfont.ttf","hash":"d169037497c5698789e596cc031a53729a55e11d","modified":1710407007000},{"_id":"source/about/index.pdf","hash":"dffb773281e98ea2efc944a552042128c95540b0","modified":1740374990782},{"_id":"source/img/yaokongqi.mp4","hash":"4854a333d2ac5fcf277248061691c1a6b2fa3eb3","modified":1719577032363},{"_id":"source/img/WeChat_20240229225803.mp4","hash":"163f9924fae72610a9f943b6c50021a928ad26ab","modified":1709120171316},{"_id":"source/img/fly_speed.gif","hash":"8b6ed5abb8e6931bd08b7fb43e70039bcf372fa3","modified":1722694399705},{"_id":"source/img/1.gif","hash":"2b981bfd50246e8befa77825e5f803decf912d66","modified":1716817708861},{"_id":"public/some_sourse/bounce.css","hash":"dd6db171ba43402ccc280a92d8cde6d9610bf7af","modified":1754575884213},{"_id":"public/404.html","hash":"ed8cf77cf560bc5301916d11be7f57d702dca6b7","modified":1754575884213},{"_id":"public/categories/index.html","hash":"91691bd86b9658ad818bc7b2e2beced20404e44c","modified":1754575884213},{"_id":"public/about/index.html","hash":"c9ad17f04cd0cc433120fd2106f85fff959cafa6","modified":1754575884213},{"_id":"public/img/test.html","hash":"89c82d16fa4368f0d18012af49d17f6aeb0ac66c","modified":1754575884213},{"_id":"public/tags/index.html","hash":"cbce78b3a64d0c5ccbed5932b81f558a7260adc6","modified":1754575884213},{"_id":"public/link/index.html","hash":"7e6795ebdbd3a2e8bad1f9c83f6886c95176214b","modified":1754575884213},{"_id":"public/Box/Gallery/index.html","hash":"e67f0885f1d481bed179af09d6952dd1914d0417","modified":1754575884213},{"_id":"public/Box/myGame/index.html","hash":"bfc853e3c3a3927d9c455dc82e4670f6b4f46dcd","modified":1754575884213},{"_id":"public/Box/movie/index.html","hash":"c52b62a0fd57eaf9886379c35b083c7c119a4e4d","modified":1754575884213},{"_id":"public/Box/myLove/index.html","hash":"25d2817b2a798f339833504344187cd5b86b6fe2","modified":1754575884213},{"_id":"public/Box/webShare/index.html","hash":"349347ef4c52da2c5971975376695e695efa89e4","modified":1754575884213},{"_id":"public/posts/58749.html","hash":"ce42c6144d92e4caa9f561eeb242323e626f650a","modified":1754575884213},{"_id":"public/posts/18712.html","hash":"9accf85af6ee35a81de92b2c454bdd57beeb4c69","modified":1754575884213},{"_id":"public/posts/54939.html","hash":"7bbd8b2b9be241ada4dbe18fe8e66d427891dafa","modified":1754575884213},{"_id":"public/posts/6793.html","hash":"45209c9394dfec01bc7a553949fbbc1e672398a5","modified":1754575884213},{"_id":"public/posts/42415.html","hash":"369f242983ad78a747bc8b65880138a5dbd94f6b","modified":1754575884213},{"_id":"public/posts/65043.html","hash":"03cce27d3f6845e01dfd91466d3cd496813dca75","modified":1754575884213},{"_id":"public/posts/59205.html","hash":"a7835ea0628b44cb0cd12643942da566ab635616","modified":1754575884213},{"_id":"public/posts/53135.html","hash":"0a0f7962cb076b591bbfaf5fef18e506973903da","modified":1754575884213},{"_id":"public/posts/34218.html","hash":"799ec5c52c8a086aa80e7d409385b6cc56dece6f","modified":1754575884213},{"_id":"public/posts/undefined.html","hash":"90cd3cbe7de1eacc777f45f0d2536594b110e7f2","modified":1754575884213},{"_id":"public/posts/22013.html","hash":"53fbfe5101b2df47fb9fe9bc8c633b1fea1fcb94","modified":1754575884213},{"_id":"public/posts/9117.html","hash":"5b061d352d31886d611716519869d5d98ceb02ea","modified":1754575884213},{"_id":"public/posts/13129.html","hash":"b47129357405648854d701cb3a0706dfff4d7d2c","modified":1754575884213},{"_id":"public/posts/50266.html","hash":"0727b9b56e14f84301f87ffdbe94b05f7131d168","modified":1754575884213},{"_id":"public/posts/45126.html","hash":"51f4f915205e9ae2b886a5684c7017272b7f0ac1","modified":1754575884213},{"_id":"public/posts/43574.html","hash":"d03511cdad689c7f6865f1586f5bb84557bdc98f","modified":1754575884213},{"_id":"public/posts/61504.html","hash":"75b27afbb64c0597c2d2ee7ad118ce36e668a4ea","modified":1754575884213},{"_id":"public/posts/34230.html","hash":"fe7d0c58ffac93ea273993f4149d083968055e33","modified":1754575884213},{"_id":"public/posts/61537.html","hash":"b007c9b4aee5d852eb25a79da161061c9dd072e0","modified":1754575884213},{"_id":"public/posts/11651.html","hash":"4e01686e1a3aff4ab43e76d3fba3461de5b51ac8","modified":1754575884213},{"_id":"public/posts/14994.html","hash":"a555471f5d783091beb5726acbd1ddd796972e36","modified":1754575884213},{"_id":"public/posts/2661.html","hash":"7d8081a9db33c65874e48d6841a004528b6c866c","modified":1754575884213},{"_id":"public/posts/26256.html","hash":"57583d9d18ea56c6eaab15e551127a42f92a4049","modified":1754575884213},{"_id":"public/posts/42679.html","hash":"9bcd372cc27a19f2b067a905b052e65a479ffe7b","modified":1754575884213},{"_id":"public/posts/12699.html","hash":"c09b4b1ae91a3a09fa5e252c63ee9df85da7fdfc","modified":1754575884213},{"_id":"public/posts/39886.html","hash":"01c7cd2fbb9b115d069d709acb7c640df7692236","modified":1754575884213},{"_id":"public/posts/55158.html","hash":"f492f64dc77425b327e798fd09e90cb5e5d67db6","modified":1754575884213},{"_id":"public/posts/34757.html","hash":"29d93fd1670ad3742ee1dbe7906b11a40335e18e","modified":1754575884213},{"_id":"public/posts/14250.html","hash":"54c0be8489f262939de41b71ef54d3a6956c23a4","modified":1754575884213},{"_id":"public/posts/37842.html","hash":"1ea332b37bc22dfa3f18d0727e9f0ac904bbd154","modified":1754575884213},{"_id":"public/posts/34887.html","hash":"3d72a93c469f290455b8e79f22258b141e3770b5","modified":1754575884213},{"_id":"public/posts/26988.html","hash":"69f906e568afeee6183abbd1f76e3387eb69f1f0","modified":1754575884213},{"_id":"public/posts/1976.html","hash":"3c18537bc76528c3999ffe73cef156c543692ec7","modified":1754575884213},{"_id":"public/posts/53696.html","hash":"598849cc910def2cc347d8cba9e477ed7a00ca2a","modified":1754575884213},{"_id":"public/posts/31281.html","hash":"b45230918b4a50f0b340423e4d4ed007bd3062e0","modified":1754575884213},{"_id":"public/posts/13495.html","hash":"93a7932cdff2aa0c31ea280d305705caafff932d","modified":1754575884213},{"_id":"public/posts/63534.html","hash":"0b9d46e9a4668af40357623b96e332f6786270f9","modified":1754575884213},{"_id":"public/comments/index.html","hash":"aba3d77a4daff666fd735876ab2189e5cbbf78c5","modified":1754575884213},{"_id":"public/archives/index.html","hash":"c0e9ecb73870269e2dd8a1adddeac45e7eff3538","modified":1754575884213},{"_id":"public/archives/page/2/index.html","hash":"50bb54b2733fcd7f1f18542e794db8622240df8d","modified":1754575884213},{"_id":"public/archives/page/3/index.html","hash":"9a59d9b907dd1a3c304e25f15164629b0c489b85","modified":1754575884213},{"_id":"public/archives/page/4/index.html","hash":"9d466c5afe9ebfd3110226360025ba4b940fee04","modified":1754575884213},{"_id":"public/archives/2024/index.html","hash":"5bd50da26b123bcba1457501654158d3dd13f890","modified":1754575884213},{"_id":"public/archives/2024/page/2/index.html","hash":"d7a2b03a996867c4b6ffb07630fc9b31356bebb1","modified":1754575884213},{"_id":"public/archives/2024/page/3/index.html","hash":"89fb5e1d2e0865f8f75052ac35d18fe20bbfaacd","modified":1754575884213},{"_id":"public/archives/2024/01/index.html","hash":"2a96e516ee1ea7ce5e0023c0ad915ff75dcf8f18","modified":1754575884213},{"_id":"public/archives/2024/02/index.html","hash":"6ce1d6b9d2d3f1f2670aaa51f7636a6b05a9c810","modified":1754575884213},{"_id":"public/archives/2024/03/index.html","hash":"bf678f0ab7c2b1215a924f7f91045312d549a551","modified":1754575884213},{"_id":"public/archives/2024/04/index.html","hash":"55aaedd5e981bbef3c28139be8912e60158c956a","modified":1754575884213},{"_id":"public/archives/2024/05/index.html","hash":"05a5f2af8dc20ac94a0711e472f04796c20e6d39","modified":1754575884213},{"_id":"public/archives/2024/06/index.html","hash":"6ad4b5ad04bd01b26e977784661fef92b8c41bc1","modified":1754575884213},{"_id":"public/archives/2024/07/index.html","hash":"0f1b2abc6c10853a17af603124a53b7d91a5d6c5","modified":1754575884213},{"_id":"public/archives/2024/08/index.html","hash":"63d2675676b1261131483d8543ec2e5d9f41e804","modified":1754575884213},{"_id":"public/archives/2024/10/index.html","hash":"234c48443067f4f8967d2f72bc04b1c7f35ebb03","modified":1754575884213},{"_id":"public/archives/2024/12/index.html","hash":"4373b788ec8c6ae10af92ae5d2896550263efcdd","modified":1754575884213},{"_id":"public/archives/2025/index.html","hash":"3d8b99bd9cfc39930ed39f7c2d292ca83b0dee75","modified":1754575884213},{"_id":"public/archives/2025/page/2/index.html","hash":"d869f1c532aa7fcab51f324a1bbc8818fc1fbc09","modified":1754575884213},{"_id":"public/archives/2025/01/index.html","hash":"2cfd22b3fe2552569b636232a43cfd484e124570","modified":1754575884213},{"_id":"public/archives/2025/02/index.html","hash":"e29ac44f89f55b733227a58ca195acd996d552d9","modified":1754575884213},{"_id":"public/archives/2025/04/index.html","hash":"9c2d68601a7bc77e2b9a3f5f2ef65ca187d27298","modified":1754575884213},{"_id":"public/archives/2025/07/index.html","hash":"69d8d800e85eef54876a1569f466640456cb63d0","modified":1754575884213},{"_id":"public/categories/一些有趣的小项目/index.html","hash":"38d97ab9cf9e2c7a3c7bea2e24bfe1181e059d11","modified":1754575884213},{"_id":"public/categories/AI/index.html","hash":"550220db367e778e7b5a9c734bf36ad32b394df5","modified":1754575884213},{"_id":"public/categories/嵌入式Linux/index.html","hash":"324cff4a557849a2bd404842ec0bc9bb1a0baf7a","modified":1754575884213},{"_id":"public/categories/一些有用的小工具/index.html","hash":"e9d761c390fff224c809df7576452bcbd1f73b48","modified":1754575884213},{"_id":"public/categories/Math/index.html","hash":"d0c7c3ab3fa417c9551261c5c8587aa6d08dd724","modified":1754575884213},{"_id":"public/categories/嵌入式开发/index.html","hash":"a30bb021d76c3e5c3b28bc60bc8234c69630294d","modified":1754575884213},{"_id":"public/categories/嵌入式项目/index.html","hash":"e2f76dc8f10ab20497144a930c7db967f3bc972a","modified":1754575884213},{"_id":"public/categories/必学开发技能/index.html","hash":"f936890475641fff7010f3d9bf3d134c9f9e2118","modified":1754575884213},{"_id":"public/categories/嵌入式开发/机器人技术/index.html","hash":"51dd6b7d339cfc48803c0b7d70b55466a6540b74","modified":1754575884213},{"_id":"public/categories/演示/index.html","hash":"11c5b46f5f0b42275f879d3c3ea229efe745bc08","modified":1754575884213},{"_id":"public/index.html","hash":"3c1684eb366ccd61be1722abc0c0c3072ed3f956","modified":1754575884213},{"_id":"public/categories/开发基础/index.html","hash":"458c5648f964de6e3cab42f24875a89ba30dffcf","modified":1754575884213},{"_id":"public/categories/写作/index.html","hash":"17d7a583793a8b3eedf12874ed4f0f7e4d915169","modified":1754575884213},{"_id":"public/page/2/index.html","hash":"8d8ff5700ee29b38cdbac05e18a540dd3d646bb9","modified":1754575884213},{"_id":"public/page/4/index.html","hash":"76307df03eca480d4ddb902ad4a3975ef4464a0d","modified":1754575884213},{"_id":"public/page/3/index.html","hash":"ed8d57012553540dceae5c1c5251f97b29ba636c","modified":1754575884213},{"_id":"public/tags/OpenCV/index.html","hash":"dead6ae528cba4c1053315870e19e44cff8697cb","modified":1754575884213},{"_id":"public/tags/BEV/index.html","hash":"da765c9960d5e6ae0a90b49ce355b81748a7e184","modified":1754575884213},{"_id":"public/tags/目标检测/index.html","hash":"5acd88bd61a656569d2f9bb9c4e4b18cad938466","modified":1754575884213},{"_id":"public/tags/语音识别/index.html","hash":"3bb4e5859f6083764837d1ed8ee9bec273cd31cd","modified":1754575884213},{"_id":"public/tags/科研工具/index.html","hash":"e3e4145f04ce721f56b8922124e10756b96f4071","modified":1754575884213},{"_id":"public/tags/数学表达式/index.html","hash":"428c63ff1fa1e10e0e4fb8a6110ab12966811045","modified":1754575884213},{"_id":"public/tags/嵌入式操作系统/index.html","hash":"8fa5b46261a4c5f7580306eab19be2e39aca1d02","modified":1754575884213},{"_id":"public/tags/数字图传/index.html","hash":"f2bbe5b3dae944768f04fbafbb5d650cafb7ebba","modified":1754575884213},{"_id":"public/tags/无线链路传输/index.html","hash":"d6f57a0099511c722fba34069754f7d178be43f3","modified":1754575884213},{"_id":"public/tags/容器/index.html","hash":"ef1e21311ccc13c6089087e06dd640b549727fbf","modified":1754575884213},{"_id":"public/tags/Bootloader/index.html","hash":"ef9b0840fd3d4fc8b415f1ea9e95055d4dc426ec","modified":1754575884213},{"_id":"public/tags/飞控/index.html","hash":"405a56b8a329c696fdfd898f9bf3ce08863f4ad6","modified":1754575884213},{"_id":"public/tags/单片机/index.html","hash":"ccbacd117549bb846f0823ac2a8acd1442f0478f","modified":1754575884213},{"_id":"public/tags/端口/index.html","hash":"8a01537c9cae9996a0277427028f155f26d29339","modified":1754575884213},{"_id":"public/tags/网络传输协议/index.html","hash":"6b15bd878e75125714d01b5325f3474d1a15e99e","modified":1754575884213},{"_id":"public/tags/加密/index.html","hash":"cb000b9fc2c181ae3e8838cbe68fbd4e8a0092b2","modified":1754575884213},{"_id":"public/tags/网络安全/index.html","hash":"0ef26e2515db43cd82ecd25b1803ba9235a44ff8","modified":1754575884213},{"_id":"public/tags/3D视觉/index.html","hash":"c941367d87aff39d81c1c716e881d958639c357c","modified":1754575884213},{"_id":"public/tags/BEVDet/index.html","hash":"1064331c4768bfa52bb42922590b194909588c3f","modified":1754575884213},{"_id":"public/tags/TensorRT/index.html","hash":"18da1dc4737f38ffcd9444d9208e9f72dca8e88f","modified":1754575884213},{"_id":"public/tags/ROS/index.html","hash":"0fd35e765e3ffe66e61deab3287e997df0a364ba","modified":1754575884213},{"_id":"public/tags/巡检机器人/index.html","hash":"243cd7f2e6fd6eaabd32444ca65f29d6f91bfcea","modified":1754575884213},{"_id":"public/tags/Markdown/index.html","hash":"9e87d43cd63f80ea8b72423edb84a752fdad840f","modified":1754575884213},{"_id":"public/tags/外挂标签/index.html","hash":"10cf72d3793f2140f7bf3bd0482efc144fe16ad9","modified":1754575884213},{"_id":"public/tags/抓包/index.html","hash":"13e31e7efd42b9e9300a7fefc6eb9b7684634f26","modified":1754575884213},{"_id":"public/tags/分布式版本控制系统/index.html","hash":"1d7b5bc57a92f04e3821bcb710f14bfd0417200e","modified":1754575884213},{"_id":"public/tags/开发/index.html","hash":"e814a221d4c6d3a7e787b22fc05da22db01c6862","modified":1754575884213},{"_id":"public/tags/音视频开发/index.html","hash":"f631c2c559b46dd81a1f909e483f0bad45b28e3f","modified":1754575884213},{"_id":"public/tags/加密文章/index.html","hash":"7ec45a6a393fa46d593af6cc1e19348cc4f9a2db","modified":1754575884213},{"_id":"public/img/bitbug_favicon.ico","hash":"c8d39641b4ec0c113962f74ee873036ebdf5a3fb","modified":1754575884213},{"_id":"public/img/favicon.png","hash":"9a9115a378f1c4b27948b0b58921b684a3070398","modified":1754575884213},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1754575884213},{"_id":"public/css/iconfont.woff2","hash":"2fa574710b748cb6ba3aa0a88a7c9d8ca29e724b","modified":1754575884213},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1754575884213},{"_id":"public/css/mouse/Handwriting.cur","hash":"4a6d3fb44af464817ecfa21f4440ad4338924024","modified":1754575884213},{"_id":"public/css/iconfont.woff","hash":"442026f3d66a2894e5c1992b70ea01a1d632ecd5","modified":1754575884213},{"_id":"public/css/mouse/ArrowUp.cur","hash":"635d038b6e4ca0589b5fd338212f86583081cb08","modified":1754575884213},{"_id":"public/css/mouse/Link_alt.cur","hash":"bda5a5bff132cdf85a02e7ece46f01c73b2f0992","modified":1754575884213},{"_id":"public/css/mouse/Arrow.cur","hash":"e7142b9412b51ea44599e2ced2bebd4526e08dfd","modified":1754575884213},{"_id":"public/css/mouse/Move.cur","hash":"6ba10d1d4c6e1dc19ef353535ba86f8ca031c882","modified":1754575884213},{"_id":"public/css/mouse/Link.cur","hash":"fa9655f7e754324cde997dac42081dedeaeb0445","modified":1754575884213},{"_id":"public/img/dashang.jpg","hash":"412c35c01b49f90320bc8339451237394df904e0","modified":1754575884213},{"_id":"public/css/hbe.style.css","hash":"72959894400fd5c350106cb558c39fa51f722cbd","modified":1754575884213},{"_id":"public/css/iconfont.ttf","hash":"d169037497c5698789e596cc031a53729a55e11d","modified":1754575884213},{"_id":"public/lib/hbe.js","hash":"fb05fcd82bb28d3b2887d388cabea7f9b1a318eb","modified":1754575884213},{"_id":"public/css/Navigation_bar.css","hash":"32e81a5219105eb2111936a3747c2c682b8d338c","modified":1754575884213},{"_id":"public/css/iconfont.css","hash":"c61ba7720315af72dfa51e2287cb8638926408f9","modified":1754575884213},{"_id":"public/css/this_mouse.css","hash":"9920cd171473018496525e38171e2c97a25a9961","modified":1754575884213},{"_id":"public/css/index.css","hash":"670d0cca4413c307a553421e01c8155560eb294d","modified":1754575884213},{"_id":"public/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1754575884213},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1754575884213},{"_id":"public/css/universe.css","hash":"5da771baf876582c40d3334c3d3e50bcc95f725a","modified":1754575884213},{"_id":"public/js/sun_moon.js","hash":"5ec88838d58c0eaf61bcabcb1714d467e1e8c62e","modified":1754575884213},{"_id":"public/js/nav.js","hash":"3b189c50a6893cc4e8e18d0ae5d1c6d1e9cff86e","modified":1754575884213},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1754575884213},{"_id":"public/js/snow.js","hash":"f4e3e0d3f0690f04a9645547eebd0d23b3821017","modified":1754575884213},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1754575884213},{"_id":"public/js/universe.js","hash":"fb0de0b3d7842d41b46dd113723dc77f82a4d530","modified":1754575884213},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1754575884213},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1754575884213},{"_id":"public/img/pic_zh.jpg","hash":"960cb351e592fe898bbe5b7420424a4a835d935c","modified":1754575884213},{"_id":"public/about/index.pdf","hash":"dffb773281e98ea2efc944a552042128c95540b0","modified":1754575884213},{"_id":"public/img/yaokongqi.mp4","hash":"4854a333d2ac5fcf277248061691c1a6b2fa3eb3","modified":1754575884213},{"_id":"public/img/WeChat_20240229225803.mp4","hash":"163f9924fae72610a9f943b6c50021a928ad26ab","modified":1754575884213},{"_id":"public/img/fly_speed.gif","hash":"8b6ed5abb8e6931bd08b7fb43e70039bcf372fa3","modified":1754575884213},{"_id":"public/img/1.gif","hash":"2b981bfd50246e8befa77825e5f803decf912d66","modified":1754575884213}],"Category":[{"name":"一些有趣的小项目","_id":"cme1h6ins0006mktt5ds5cvc7"},{"name":"AI","_id":"cme1h6inu000emktt2ri74af5"},{"name":"嵌入式Linux","_id":"cme1h6inw000mmktt38e00n4o"},{"name":"一些有用的小工具","_id":"cme1h6inx000tmktt38rb0trq"},{"name":"Math","_id":"cme1h6inz0017mktt6w5g54ks"},{"name":"嵌入式开发","_id":"cme1h6io0001gmkttf7ugdhqx"},{"name":"嵌入式项目","_id":"cme1h6io1001nmkttcdpu9hbn"},{"name":"必学开发技能","_id":"cme1h6io2001smktt6ibg2kl1"},{"name":"机器人技术","parent":"cme1h6io0001gmkttf7ugdhqx","_id":"cme1h6io6002jmkttep8s67fv"},{"name":"演示","_id":"cme1h6io7002pmktt1az20ixs"},{"name":"开发基础","_id":"cme1h6io80030mktt6jxkfiv9"},{"name":"写作","_id":"cme1h6ioa003zmktt94s0d423"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"categories","date":"2024-03-13T15:36:48.000Z","type":"categories","top_img":"https://image.aruoshui.fun/i/2024/12/31/vg27cp-0.webp","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-03-13 23:36:48\ntype: \"categories\"\ntop_img: https://image.aruoshui.fun/i/2024/12/31/vg27cp-0.webp\n---\n","updated":"2024-12-31T11:02:01.049Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cme1h6ino0000mkttatk1gflx","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqsz0s-0.webp","cover_type":"img","excerpt":"","more":""},{"_content":".pace {\n\twidth: 140px;\n\theight: 300px;\n\tposition: fixed;\n\ttop: -90px;\n\tright: -20px;\n\tz-index: 2000;\n\t-webkit-transform: scale(0);\n\t-moz-transform: scale(0);\n\t-ms-transform: scale(0);\n\t-o-transform: scale(0);\n\ttransform: scale(0);\n\topacity: 0;\n\t-webkit-transition: all 2s linear 0s;\n\t-moz-transition: all 2s linear 0s;\n\ttransition: all 2s linear 0s;\n}\n\n.pace.pace-active {\n\t-webkit-transform: scale(.25);\n\t-moz-transform: scale(.25);\n\t-ms-transform: scale(.25);\n\t-o-transform: scale(.25);\n\ttransform: scale(.25);\n\topacity: 1;\n}\n\n.pace .pace-activity {\n\twidth: 140px;\n\theight: 140px;\n\tborder-radius: 70px;\n\tbackground: #29d;\n\tposition: absolute;\n\ttop: 0;\n\tz-index: 1911;\n\t-webkit-animation: pace-bounce 1s infinite;\n\t-moz-animation: pace-bounce 1s infinite;\n\t-o-animation: pace-bounce 1s infinite;\n\t-ms-animation: pace-bounce 1s infinite;\n\tanimation: pace-bounce 1s infinite;\n}\n\n.pace .pace-progress {\n\tposition: absolute;\n\tdisplay: block;\n\tleft: 50%;\n\tbottom: 0;\n\tz-index: 1910;\n\tmargin-left: -30px;\n\twidth: 60px;\n\theight: 75px;\n\tbackground: rgba(20, 20, 20, .1);\n\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\tborder-radius: 30px / 40px;\n\t-webkit-transform: scaleY(.3) !important;\n\t-moz-transform: scaleY(.3) !important;\n\t-ms-transform: scaleY(.3) !important;\n\t-o-transform: scaleY(.3) !important;\n\ttransform: scaleY(.3) !important;\n\t-webkit-animation: pace-compress .5s infinite alternate;\n\t-moz-animation: pace-compress .5s infinite alternate;\n\t-o-animation: pace-compress .5s infinite alternate;\n\t-ms-animation: pace-compress .5s infinite alternate;\n\tanimation: pace-compress .5s infinite alternate;\n}\n\n@-webkit-keyframes pace-bounce {\n\t0% {\n\t\ttop: 0;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t40% {}\n\t50% {\n\t\ttop: 140px;\n\t\theight: 140px;\n\t\t-webkit-animation-timing-function: ease-out;\n\t}\n\t55% {\n\t\ttop: 160px;\n\t\theight: 120px;\n\t\tborder-radius: 70px / 60px;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t65% {\n\t\ttop: 120px;\n\t\theight: 140px;\n\t\tborder-radius: 70px;\n\t\t-webkit-animation-timing-function: ease-out;\n\t}\n\t95% {\n\t\ttop: 0;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t100% {\n\t\ttop: 0;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n}\n\n@-moz-keyframes pace-bounce {\n\t0% {\n\t\ttop: 0;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t40% {}\n\t50% {\n\t\ttop: 140px;\n\t\theight: 140px;\n\t\t-moz-animation-timing-function: ease-out;\n\t}\n\t55% {\n\t\ttop: 160px;\n\t\theight: 120px;\n\t\tborder-radius: 70px / 60px;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t65% {\n\t\ttop: 120px;\n\t\theight: 140px;\n\t\tborder-radius: 70px;\n\t\t-moz-animation-timing-function: ease-out;}\n\t95% {\n\t\ttop: 0;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t100% {top: 0;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n}\n\n@keyframes pace-bounce {\n\t0% {\n\t\ttop: 0;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t50% {\n\t\ttop: 140px;\n\t\theight: 140px;\n\t\tanimation-timing-function: ease-out;\n\t}\n\t55% {\n\t\ttop: 160px;\n\t\theight: 120px;\n\t\tborder-radius: 70px / 60px;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t65% {\n\t\ttop: 120px;\n\t\theight: 140px;\n\t\tborder-radius: 70px;\n\t\tanimation-timing-function: ease-out;\n\t}\n\t95% {\n\t\ttop: 0;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t100% {\n\t\ttop: 0;\n\t\tanimation-timing-function: ease-in;\n\t}\n}\n\n@-webkit-keyframes pace-compress {\n\t0% {\n\t\tbottom: 0;\n\t\tmargin-left: -30px;\n\t\twidth: 60px;\n\t\theight: 75px;\n\t\tbackground: rgba(20, 20, 20, .1);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\t\tborder-radius: 30px / 40px;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t100% {\n\t\tbottom: 30px;\n\t\tmargin-left: -10px;\n\t\twidth: 20px;\n\t\theight: 5px;\n\t\tbackground: rgba(20, 20, 20, .3);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .3);\n\t\tborder-radius: 20px / 20px;\n\t\t-webkit-animation-timing-function: ease-out;\n\t}\n}\n\n@-moz-keyframes pace-compress {\n\t0% {\n\t\tbottom: 0;\n\t\tmargin-left: -30px;\n\t\twidth: 60px;\n\t\theight: 75px;\n\t\tbackground: rgba(20, 20, 20, .1);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\t\tborder-radius: 30px / 40px;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t100% {\n\t\tbottom: 30px;\n\t\tmargin-left: -10px;\n\t\twidth: 20px;\n\t\theight: 5px;\n\t\tbackground: rgba(20, 20, 20, .3);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .3);\n\t\tborder-radius: 20px / 20px;\n\t\t-moz-animation-timing-function: ease-out;\n\t}\n}\n\n@keyframes pace-compress {\n\t0% {\n\t\tbottom: 0;\n\t\tmargin-left: -30px;\n\t\twidth: 60px;\n\t\theight: 75px;\n\t\tbackground: rgba(20, 20, 20, .1);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\t\tborder-radius: 30px / 40px;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t100% {\n\t\tbottom: 30px;\n\t\tmargin-left: -10px;\n\t\twidth: 20px;\n\t\theight: 5px;\n\t\tbackground: rgba(20, 20, 20, .3);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .3);\n\t\tborder-radius: 20px / 20px;\n\t\tanimation-timing-function: ease-out;\n\t}\n}","source":"some_sourse/bounce.css","raw":".pace {\n\twidth: 140px;\n\theight: 300px;\n\tposition: fixed;\n\ttop: -90px;\n\tright: -20px;\n\tz-index: 2000;\n\t-webkit-transform: scale(0);\n\t-moz-transform: scale(0);\n\t-ms-transform: scale(0);\n\t-o-transform: scale(0);\n\ttransform: scale(0);\n\topacity: 0;\n\t-webkit-transition: all 2s linear 0s;\n\t-moz-transition: all 2s linear 0s;\n\ttransition: all 2s linear 0s;\n}\n\n.pace.pace-active {\n\t-webkit-transform: scale(.25);\n\t-moz-transform: scale(.25);\n\t-ms-transform: scale(.25);\n\t-o-transform: scale(.25);\n\ttransform: scale(.25);\n\topacity: 1;\n}\n\n.pace .pace-activity {\n\twidth: 140px;\n\theight: 140px;\n\tborder-radius: 70px;\n\tbackground: #29d;\n\tposition: absolute;\n\ttop: 0;\n\tz-index: 1911;\n\t-webkit-animation: pace-bounce 1s infinite;\n\t-moz-animation: pace-bounce 1s infinite;\n\t-o-animation: pace-bounce 1s infinite;\n\t-ms-animation: pace-bounce 1s infinite;\n\tanimation: pace-bounce 1s infinite;\n}\n\n.pace .pace-progress {\n\tposition: absolute;\n\tdisplay: block;\n\tleft: 50%;\n\tbottom: 0;\n\tz-index: 1910;\n\tmargin-left: -30px;\n\twidth: 60px;\n\theight: 75px;\n\tbackground: rgba(20, 20, 20, .1);\n\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\tborder-radius: 30px / 40px;\n\t-webkit-transform: scaleY(.3) !important;\n\t-moz-transform: scaleY(.3) !important;\n\t-ms-transform: scaleY(.3) !important;\n\t-o-transform: scaleY(.3) !important;\n\ttransform: scaleY(.3) !important;\n\t-webkit-animation: pace-compress .5s infinite alternate;\n\t-moz-animation: pace-compress .5s infinite alternate;\n\t-o-animation: pace-compress .5s infinite alternate;\n\t-ms-animation: pace-compress .5s infinite alternate;\n\tanimation: pace-compress .5s infinite alternate;\n}\n\n@-webkit-keyframes pace-bounce {\n\t0% {\n\t\ttop: 0;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t40% {}\n\t50% {\n\t\ttop: 140px;\n\t\theight: 140px;\n\t\t-webkit-animation-timing-function: ease-out;\n\t}\n\t55% {\n\t\ttop: 160px;\n\t\theight: 120px;\n\t\tborder-radius: 70px / 60px;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t65% {\n\t\ttop: 120px;\n\t\theight: 140px;\n\t\tborder-radius: 70px;\n\t\t-webkit-animation-timing-function: ease-out;\n\t}\n\t95% {\n\t\ttop: 0;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t100% {\n\t\ttop: 0;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n}\n\n@-moz-keyframes pace-bounce {\n\t0% {\n\t\ttop: 0;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t40% {}\n\t50% {\n\t\ttop: 140px;\n\t\theight: 140px;\n\t\t-moz-animation-timing-function: ease-out;\n\t}\n\t55% {\n\t\ttop: 160px;\n\t\theight: 120px;\n\t\tborder-radius: 70px / 60px;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t65% {\n\t\ttop: 120px;\n\t\theight: 140px;\n\t\tborder-radius: 70px;\n\t\t-moz-animation-timing-function: ease-out;}\n\t95% {\n\t\ttop: 0;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t100% {top: 0;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n}\n\n@keyframes pace-bounce {\n\t0% {\n\t\ttop: 0;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t50% {\n\t\ttop: 140px;\n\t\theight: 140px;\n\t\tanimation-timing-function: ease-out;\n\t}\n\t55% {\n\t\ttop: 160px;\n\t\theight: 120px;\n\t\tborder-radius: 70px / 60px;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t65% {\n\t\ttop: 120px;\n\t\theight: 140px;\n\t\tborder-radius: 70px;\n\t\tanimation-timing-function: ease-out;\n\t}\n\t95% {\n\t\ttop: 0;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t100% {\n\t\ttop: 0;\n\t\tanimation-timing-function: ease-in;\n\t}\n}\n\n@-webkit-keyframes pace-compress {\n\t0% {\n\t\tbottom: 0;\n\t\tmargin-left: -30px;\n\t\twidth: 60px;\n\t\theight: 75px;\n\t\tbackground: rgba(20, 20, 20, .1);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\t\tborder-radius: 30px / 40px;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t100% {\n\t\tbottom: 30px;\n\t\tmargin-left: -10px;\n\t\twidth: 20px;\n\t\theight: 5px;\n\t\tbackground: rgba(20, 20, 20, .3);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .3);\n\t\tborder-radius: 20px / 20px;\n\t\t-webkit-animation-timing-function: ease-out;\n\t}\n}\n\n@-moz-keyframes pace-compress {\n\t0% {\n\t\tbottom: 0;\n\t\tmargin-left: -30px;\n\t\twidth: 60px;\n\t\theight: 75px;\n\t\tbackground: rgba(20, 20, 20, .1);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\t\tborder-radius: 30px / 40px;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t100% {\n\t\tbottom: 30px;\n\t\tmargin-left: -10px;\n\t\twidth: 20px;\n\t\theight: 5px;\n\t\tbackground: rgba(20, 20, 20, .3);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .3);\n\t\tborder-radius: 20px / 20px;\n\t\t-moz-animation-timing-function: ease-out;\n\t}\n}\n\n@keyframes pace-compress {\n\t0% {\n\t\tbottom: 0;\n\t\tmargin-left: -30px;\n\t\twidth: 60px;\n\t\theight: 75px;\n\t\tbackground: rgba(20, 20, 20, .1);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\t\tborder-radius: 30px / 40px;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t100% {\n\t\tbottom: 30px;\n\t\tmargin-left: -10px;\n\t\twidth: 20px;\n\t\theight: 5px;\n\t\tbackground: rgba(20, 20, 20, .3);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .3);\n\t\tborder-radius: 20px / 20px;\n\t\tanimation-timing-function: ease-out;\n\t}\n}","date":"2024-02-13T16:23:24.800Z","updated":"2024-02-13T16:23:24.800Z","path":"some_sourse/bounce.css","layout":"false","title":"","comments":1,"_id":"cme1h6inq0002mkttfmqlftp7","content":".pace {\n\twidth: 140px;\n\theight: 300px;\n\tposition: fixed;\n\ttop: -90px;\n\tright: -20px;\n\tz-index: 2000;\n\t-webkit-transform: scale(0);\n\t-moz-transform: scale(0);\n\t-ms-transform: scale(0);\n\t-o-transform: scale(0);\n\ttransform: scale(0);\n\topacity: 0;\n\t-webkit-transition: all 2s linear 0s;\n\t-moz-transition: all 2s linear 0s;\n\ttransition: all 2s linear 0s;\n}\n\n.pace.pace-active {\n\t-webkit-transform: scale(.25);\n\t-moz-transform: scale(.25);\n\t-ms-transform: scale(.25);\n\t-o-transform: scale(.25);\n\ttransform: scale(.25);\n\topacity: 1;\n}\n\n.pace .pace-activity {\n\twidth: 140px;\n\theight: 140px;\n\tborder-radius: 70px;\n\tbackground: #29d;\n\tposition: absolute;\n\ttop: 0;\n\tz-index: 1911;\n\t-webkit-animation: pace-bounce 1s infinite;\n\t-moz-animation: pace-bounce 1s infinite;\n\t-o-animation: pace-bounce 1s infinite;\n\t-ms-animation: pace-bounce 1s infinite;\n\tanimation: pace-bounce 1s infinite;\n}\n\n.pace .pace-progress {\n\tposition: absolute;\n\tdisplay: block;\n\tleft: 50%;\n\tbottom: 0;\n\tz-index: 1910;\n\tmargin-left: -30px;\n\twidth: 60px;\n\theight: 75px;\n\tbackground: rgba(20, 20, 20, .1);\n\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\tborder-radius: 30px / 40px;\n\t-webkit-transform: scaleY(.3) !important;\n\t-moz-transform: scaleY(.3) !important;\n\t-ms-transform: scaleY(.3) !important;\n\t-o-transform: scaleY(.3) !important;\n\ttransform: scaleY(.3) !important;\n\t-webkit-animation: pace-compress .5s infinite alternate;\n\t-moz-animation: pace-compress .5s infinite alternate;\n\t-o-animation: pace-compress .5s infinite alternate;\n\t-ms-animation: pace-compress .5s infinite alternate;\n\tanimation: pace-compress .5s infinite alternate;\n}\n\n@-webkit-keyframes pace-bounce {\n\t0% {\n\t\ttop: 0;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t40% {}\n\t50% {\n\t\ttop: 140px;\n\t\theight: 140px;\n\t\t-webkit-animation-timing-function: ease-out;\n\t}\n\t55% {\n\t\ttop: 160px;\n\t\theight: 120px;\n\t\tborder-radius: 70px / 60px;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t65% {\n\t\ttop: 120px;\n\t\theight: 140px;\n\t\tborder-radius: 70px;\n\t\t-webkit-animation-timing-function: ease-out;\n\t}\n\t95% {\n\t\ttop: 0;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t100% {\n\t\ttop: 0;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n}\n\n@-moz-keyframes pace-bounce {\n\t0% {\n\t\ttop: 0;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t40% {}\n\t50% {\n\t\ttop: 140px;\n\t\theight: 140px;\n\t\t-moz-animation-timing-function: ease-out;\n\t}\n\t55% {\n\t\ttop: 160px;\n\t\theight: 120px;\n\t\tborder-radius: 70px / 60px;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t65% {\n\t\ttop: 120px;\n\t\theight: 140px;\n\t\tborder-radius: 70px;\n\t\t-moz-animation-timing-function: ease-out;}\n\t95% {\n\t\ttop: 0;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t100% {top: 0;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n}\n\n@keyframes pace-bounce {\n\t0% {\n\t\ttop: 0;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t50% {\n\t\ttop: 140px;\n\t\theight: 140px;\n\t\tanimation-timing-function: ease-out;\n\t}\n\t55% {\n\t\ttop: 160px;\n\t\theight: 120px;\n\t\tborder-radius: 70px / 60px;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t65% {\n\t\ttop: 120px;\n\t\theight: 140px;\n\t\tborder-radius: 70px;\n\t\tanimation-timing-function: ease-out;\n\t}\n\t95% {\n\t\ttop: 0;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t100% {\n\t\ttop: 0;\n\t\tanimation-timing-function: ease-in;\n\t}\n}\n\n@-webkit-keyframes pace-compress {\n\t0% {\n\t\tbottom: 0;\n\t\tmargin-left: -30px;\n\t\twidth: 60px;\n\t\theight: 75px;\n\t\tbackground: rgba(20, 20, 20, .1);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\t\tborder-radius: 30px / 40px;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t100% {\n\t\tbottom: 30px;\n\t\tmargin-left: -10px;\n\t\twidth: 20px;\n\t\theight: 5px;\n\t\tbackground: rgba(20, 20, 20, .3);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .3);\n\t\tborder-radius: 20px / 20px;\n\t\t-webkit-animation-timing-function: ease-out;\n\t}\n}\n\n@-moz-keyframes pace-compress {\n\t0% {\n\t\tbottom: 0;\n\t\tmargin-left: -30px;\n\t\twidth: 60px;\n\t\theight: 75px;\n\t\tbackground: rgba(20, 20, 20, .1);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\t\tborder-radius: 30px / 40px;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t100% {\n\t\tbottom: 30px;\n\t\tmargin-left: -10px;\n\t\twidth: 20px;\n\t\theight: 5px;\n\t\tbackground: rgba(20, 20, 20, .3);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .3);\n\t\tborder-radius: 20px / 20px;\n\t\t-moz-animation-timing-function: ease-out;\n\t}\n}\n\n@keyframes pace-compress {\n\t0% {\n\t\tbottom: 0;\n\t\tmargin-left: -30px;\n\t\twidth: 60px;\n\t\theight: 75px;\n\t\tbackground: rgba(20, 20, 20, .1);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\t\tborder-radius: 30px / 40px;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t100% {\n\t\tbottom: 30px;\n\t\tmargin-left: -10px;\n\t\twidth: 20px;\n\t\theight: 5px;\n\t\tbackground: rgba(20, 20, 20, .3);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .3);\n\t\tborder-radius: 20px / 20px;\n\t\tanimation-timing-function: ease-out;\n\t}\n}","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqsz0s-0.webp","cover_type":"img","excerpt":"","more":".pace {\n\twidth: 140px;\n\theight: 300px;\n\tposition: fixed;\n\ttop: -90px;\n\tright: -20px;\n\tz-index: 2000;\n\t-webkit-transform: scale(0);\n\t-moz-transform: scale(0);\n\t-ms-transform: scale(0);\n\t-o-transform: scale(0);\n\ttransform: scale(0);\n\topacity: 0;\n\t-webkit-transition: all 2s linear 0s;\n\t-moz-transition: all 2s linear 0s;\n\ttransition: all 2s linear 0s;\n}\n\n.pace.pace-active {\n\t-webkit-transform: scale(.25);\n\t-moz-transform: scale(.25);\n\t-ms-transform: scale(.25);\n\t-o-transform: scale(.25);\n\ttransform: scale(.25);\n\topacity: 1;\n}\n\n.pace .pace-activity {\n\twidth: 140px;\n\theight: 140px;\n\tborder-radius: 70px;\n\tbackground: #29d;\n\tposition: absolute;\n\ttop: 0;\n\tz-index: 1911;\n\t-webkit-animation: pace-bounce 1s infinite;\n\t-moz-animation: pace-bounce 1s infinite;\n\t-o-animation: pace-bounce 1s infinite;\n\t-ms-animation: pace-bounce 1s infinite;\n\tanimation: pace-bounce 1s infinite;\n}\n\n.pace .pace-progress {\n\tposition: absolute;\n\tdisplay: block;\n\tleft: 50%;\n\tbottom: 0;\n\tz-index: 1910;\n\tmargin-left: -30px;\n\twidth: 60px;\n\theight: 75px;\n\tbackground: rgba(20, 20, 20, .1);\n\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\tborder-radius: 30px / 40px;\n\t-webkit-transform: scaleY(.3) !important;\n\t-moz-transform: scaleY(.3) !important;\n\t-ms-transform: scaleY(.3) !important;\n\t-o-transform: scaleY(.3) !important;\n\ttransform: scaleY(.3) !important;\n\t-webkit-animation: pace-compress .5s infinite alternate;\n\t-moz-animation: pace-compress .5s infinite alternate;\n\t-o-animation: pace-compress .5s infinite alternate;\n\t-ms-animation: pace-compress .5s infinite alternate;\n\tanimation: pace-compress .5s infinite alternate;\n}\n\n@-webkit-keyframes pace-bounce {\n\t0% {\n\t\ttop: 0;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t40% {}\n\t50% {\n\t\ttop: 140px;\n\t\theight: 140px;\n\t\t-webkit-animation-timing-function: ease-out;\n\t}\n\t55% {\n\t\ttop: 160px;\n\t\theight: 120px;\n\t\tborder-radius: 70px / 60px;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t65% {\n\t\ttop: 120px;\n\t\theight: 140px;\n\t\tborder-radius: 70px;\n\t\t-webkit-animation-timing-function: ease-out;\n\t}\n\t95% {\n\t\ttop: 0;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t100% {\n\t\ttop: 0;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n}\n\n@-moz-keyframes pace-bounce {\n\t0% {\n\t\ttop: 0;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t40% {}\n\t50% {\n\t\ttop: 140px;\n\t\theight: 140px;\n\t\t-moz-animation-timing-function: ease-out;\n\t}\n\t55% {\n\t\ttop: 160px;\n\t\theight: 120px;\n\t\tborder-radius: 70px / 60px;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t65% {\n\t\ttop: 120px;\n\t\theight: 140px;\n\t\tborder-radius: 70px;\n\t\t-moz-animation-timing-function: ease-out;}\n\t95% {\n\t\ttop: 0;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t100% {top: 0;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n}\n\n@keyframes pace-bounce {\n\t0% {\n\t\ttop: 0;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t50% {\n\t\ttop: 140px;\n\t\theight: 140px;\n\t\tanimation-timing-function: ease-out;\n\t}\n\t55% {\n\t\ttop: 160px;\n\t\theight: 120px;\n\t\tborder-radius: 70px / 60px;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t65% {\n\t\ttop: 120px;\n\t\theight: 140px;\n\t\tborder-radius: 70px;\n\t\tanimation-timing-function: ease-out;\n\t}\n\t95% {\n\t\ttop: 0;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t100% {\n\t\ttop: 0;\n\t\tanimation-timing-function: ease-in;\n\t}\n}\n\n@-webkit-keyframes pace-compress {\n\t0% {\n\t\tbottom: 0;\n\t\tmargin-left: -30px;\n\t\twidth: 60px;\n\t\theight: 75px;\n\t\tbackground: rgba(20, 20, 20, .1);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\t\tborder-radius: 30px / 40px;\n\t\t-webkit-animation-timing-function: ease-in;\n\t}\n\t100% {\n\t\tbottom: 30px;\n\t\tmargin-left: -10px;\n\t\twidth: 20px;\n\t\theight: 5px;\n\t\tbackground: rgba(20, 20, 20, .3);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .3);\n\t\tborder-radius: 20px / 20px;\n\t\t-webkit-animation-timing-function: ease-out;\n\t}\n}\n\n@-moz-keyframes pace-compress {\n\t0% {\n\t\tbottom: 0;\n\t\tmargin-left: -30px;\n\t\twidth: 60px;\n\t\theight: 75px;\n\t\tbackground: rgba(20, 20, 20, .1);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\t\tborder-radius: 30px / 40px;\n\t\t-moz-animation-timing-function: ease-in;\n\t}\n\t100% {\n\t\tbottom: 30px;\n\t\tmargin-left: -10px;\n\t\twidth: 20px;\n\t\theight: 5px;\n\t\tbackground: rgba(20, 20, 20, .3);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .3);\n\t\tborder-radius: 20px / 20px;\n\t\t-moz-animation-timing-function: ease-out;\n\t}\n}\n\n@keyframes pace-compress {\n\t0% {\n\t\tbottom: 0;\n\t\tmargin-left: -30px;\n\t\twidth: 60px;\n\t\theight: 75px;\n\t\tbackground: rgba(20, 20, 20, .1);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .1);\n\t\tborder-radius: 30px / 40px;\n\t\tanimation-timing-function: ease-in;\n\t}\n\t100% {\n\t\tbottom: 30px;\n\t\tmargin-left: -10px;\n\t\twidth: 20px;\n\t\theight: 5px;\n\t\tbackground: rgba(20, 20, 20, .3);\n\t\tbox-shadow: 0 0 20px 35px rgba(20, 20, 20, .3);\n\t\tborder-radius: 20px / 20px;\n\t\tanimation-timing-function: ease-out;\n\t}\n}"},{"title":"about","date":"2024-03-14T09:34:13.000Z","aside":false,"top_img":"https://image.aruoshui.fun/i/2024/12/31/vkrcfa-0.webp","_content":"\n\n<table>\n    <tr style=\"height: 50px;\">\n        <td style=\"font-size: 1.8em;\"><strong>张恒👨‍💻</strong></td>\n        <td style=\"font-size: 1.5em;\"><strong>求职意向：嵌入式软件开发工程师</strong></td>\n        <td rowspan=\"5\">\n            <img src=\"https://image.aruoshui.fun/i/2025/02/18/re9xn2-0.webp\" height=\"200\" alt=\"\">\n        </td>\n    </tr>\n    <tr>\n        <td>政治面貌：中共党员</td>\n        <td>电话：18183863998</td>\n    </tr>\n    <tr>\n        <td>出生年月：2002年12月</td>\n        <td>邮箱：2021011074@bistu.edu.cn</td>\n    </tr>\n    <tr>\n        <td>现住址：北京市昌平区</td>\n        <td>学历：统招一本</td>\n    </tr>\n    <tr>\n        <td colspan=\"2\">博客：https://blog.aruoshui.fun/（文章：20篇，访问量：2993，访客1443）</td>\n    </tr>\n</table>\n\n<hr/>\n\n### 🏆校园经历\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2021-09 ~ 2025-07</span><span>北京信息科技大学</span><span>计算机科学与技术</span>\n</h4>\n\n- 绩点**3.69/4.0**，年级前**15%**\n- 担任人工智能社团副社长、AI_LAB无人机群体感知组成员\n- 多次获得学校学习优秀奖学金和科技创新奖学金\n- 十六届国际先进机器人及仿真技术大赛，人工智能物流挑战赛国赛一等奖[2023年]\n- 一作身份发表一篇EI会议论文[2023年]\n\n\n### 😎专业技能\n熟悉 C/C++ 嵌入式开发，使用 Python 进行自动化脚本编写及算法验证\n具备 MCU 和 SOC 开发基础，理解 Bootloader 的原理\n了解 ARM 架构及 ARM 汇编，使用过 ARM 架构处理器 M、A系列\n熟悉 FreeRTOS 和 μc/OS Ⅱ ，运用队列、信号量、互斥锁等开发实际任务\n能够配置常见的通信协议，例如：UART，I2C，SPI。具备各类常见传感器及模块的开发能力\n熟悉 Linux 开发，了解 Linux 驱动层开发，具有设备树移植及内核裁剪的经验\n理解 Linux 启动过程，能够参与内核调试，能够使用QEMU进行片上测试及开发\n具备深度学习理论及 Pytorch 深度学习模型的搭建的基础，具备嵌入式 AI 领域应用开发能力\n掌握Git、GCC、CMake、Docker、Shell脚本等常见开发工具的使用\n有一定硬件基础，能看懂基本原理图，简单的3d建模\n\n\n\n<hr/>\n\n### 💻项目经历\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2024-8 ~ 2024-12</span><span>基于OpenIPC的数字图传系统开发</span><span>延伸项目</span>\n</h4>\n适用于无人机FPV图传、工业巡检等需要轻量化低延迟视频传输的领域，通过\"\nJetson+OpenIPC\"组合，便于扩展AI检测功能，是对无人巡检摄像头采集的一次全新尝试\n\n- 完成嵌入式Linux系统深度定制：基于Buildroot构建OpenIPC系统镜像，SSC338Q芯片搭载系统，系统启动Bootloader\n- 双频无线传输：采用WFB-ng协议栈搭建5.8GHz/2.4GHz双频链路（RTL8812au网卡MIMO模式）\n- 实现端到端低延迟流水线：集成GStreamer多媒体框架（硬件加速H.264编解码），优化视频采集→编码→传输→解码全链路时延，达成43ms超低延迟，支持1080P@60fps高清视频流\n\n\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2023-11 ~ 2024-12</span><span>变电站巡检机器人（实验室横向课题）</span><span>组长</span>\n</h4>\n\n实现变电站场景下3D环境感知与路径规划，针对复杂电力设备环境优化BEVDet算法，检测精度提升15%（需补充具体指标），支持实时障碍物分类（含导线悬挂物、绝缘子破损等电力场景特有目标）\n- 3D目标检测算法选取与ROS部署。\n- 参与模型部署ROS节点的编写及测试，设计多摄像头数据同步机制（六路海康GSM相机RTSP流接入+图像畸变校正），实现巡检机器人环视检测。\n- 构建ROS多节点数据管道（含图像预处理、BEV特征融合模块）\n\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2024-5 ~ 2024-8</span><span>基于GD32的无人机飞控</span><span>组长</span>\n</h4>\n\n针对市面无人机飞控系统封闭性强、二次开发困难的问题，社团实验室基于国产GD32F470微控制器设计开源飞控系统，实现飞行姿态控制、稳定悬停及集群通信扩展能力，为后续多机协同研究提供硬件与算法基础\n- 任务调度：FreeRTOS多任务调度框架搭建，划分传感器采集（IMU/气压计/GPS）、PID控制、通信等任务优先级\n- 传感器及数据： IMU 传感器、气压计、GPS 等传感器获取飞行数据，数据进行飞行控制。\n- 数据传输任务：负责创建队列进行数据传输并进行覆盖，通过使用互斥锁防止冲突，并建立临界区确保数据放入时的一致性。\n- 数据处理工作：负责处理陀螺仪和加速度计的数据。通过利用偏置值确定方差和重力加速度缩放因子进行校准，结合二阶低通滤波减少噪音，最终保证了输出的实时性，并提高了输出准确率10%。\n\n\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2023-03 ~ 2023-11</span><span>基于机器视觉的蘑菇分类识别小程序（国家级大创项目）</span><span>组长</span>\n</h4>\n\n针对设计识别野生蘑菇的轻量化视觉模型，实现蘑菇分类检测，部署并开发小程序实现上层应用，相关成果发表于IEEE GCRAIT会议（一作）。\n- 基于MobileViTv3设计多模态特征融合架构，结合CNN的局部特征提取能力与Transformer的全局语义建模优势。\n- 通过知识蒸馏技术（教师模型：VIT，学生模型：MobileViTv3）压缩模型规模，参数量由5.2M降至2.3M（压缩率55.8%），FLOPs优化至728M，推理速度提升2.1倍，Top-1准确率仅下降1.5%（91.2%→89.7%）。\n- 参与部署于Jetson orin nano平台，通过TensorRT量化模型至FP16精度，实现实时推理（32 FPS），CPU/GPU利用率分别稳定在18%/76%，内存占用＜450MB，满足户外无服务器场景需求。\n\n\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2023-03 ~ 2023-11</span><span>基于STM32的智能物流机器人</span><span>组长</span>\n</h4>\n基于微处理器和传感器的小型机器人在模拟的工厂完成货物运送、环境避障、识别货物及机械臂抓取、跟踪指示物并放置货物，最终返回停车充电台的任务。项目获得了国赛一等奖的成绩\n\n- 构建基于有限状态机的任务调度系统，协调路径规划、避障决策、视觉识别等核心功能模块\n- 基于OpenMV嵌入式视觉模块，采用YOLOv3-Tiny模型实现货物识别（95%准确率）\n- 设计全向麦轮底盘驱动方案，采用角度PID闭环控制实现±2°转向精度\n- 通过Ymodem协议进行蓝牙OTA升级STM32固件\n\n\n\n<hr/>\n\n\n\n<style>\n    #write {\n        padding: 25px 25px 0px;\n    }\n    hr {\n        margin: 6px;\n    }\n    li {\n        margin: 4px;\n    }\n    p {\n        margin: 4px 13px;\n    }\n    li p{\n        margin: 5px 0;\n    }\n    h1 {\n        margin: 8px 15px;\n    }\n    h3 {\n        margin: 9px;\n    }\n    h4 {\n        margin: 7px;\n    }\n    figure {\n        margin: 7px 0px;\n    }\n    blockquote {\n        padding-left: 16px;\n    }\n    /* 链接下划线 */\n    a {\n        text-decoration:underline;\n    }\n    /* 图片阴影效果 */\n    img {\n        box-shadow: 0px 0px 10px rgba(0,0,0,.5);\n    }\n    /* 表格样式，去除边框显示 */\n    table, table td, table tr, table th, th {\n        font-weight: normal;\n        padding: 3px 13px;\n        border: 0px;\n        background-color: #ffffff;\n    }\n</style>","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-03-14 17:34:13\naside: false \ntop_img: https://image.aruoshui.fun/i/2024/12/31/vkrcfa-0.webp\n\n---\n\n\n<table>\n    <tr style=\"height: 50px;\">\n        <td style=\"font-size: 1.8em;\"><strong>张恒👨‍💻</strong></td>\n        <td style=\"font-size: 1.5em;\"><strong>求职意向：嵌入式软件开发工程师</strong></td>\n        <td rowspan=\"5\">\n            <img src=\"https://image.aruoshui.fun/i/2025/02/18/re9xn2-0.webp\" height=\"200\" alt=\"\">\n        </td>\n    </tr>\n    <tr>\n        <td>政治面貌：中共党员</td>\n        <td>电话：18183863998</td>\n    </tr>\n    <tr>\n        <td>出生年月：2002年12月</td>\n        <td>邮箱：2021011074@bistu.edu.cn</td>\n    </tr>\n    <tr>\n        <td>现住址：北京市昌平区</td>\n        <td>学历：统招一本</td>\n    </tr>\n    <tr>\n        <td colspan=\"2\">博客：https://blog.aruoshui.fun/（文章：20篇，访问量：2993，访客1443）</td>\n    </tr>\n</table>\n\n<hr/>\n\n### 🏆校园经历\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2021-09 ~ 2025-07</span><span>北京信息科技大学</span><span>计算机科学与技术</span>\n</h4>\n\n- 绩点**3.69/4.0**，年级前**15%**\n- 担任人工智能社团副社长、AI_LAB无人机群体感知组成员\n- 多次获得学校学习优秀奖学金和科技创新奖学金\n- 十六届国际先进机器人及仿真技术大赛，人工智能物流挑战赛国赛一等奖[2023年]\n- 一作身份发表一篇EI会议论文[2023年]\n\n\n### 😎专业技能\n熟悉 C/C++ 嵌入式开发，使用 Python 进行自动化脚本编写及算法验证\n具备 MCU 和 SOC 开发基础，理解 Bootloader 的原理\n了解 ARM 架构及 ARM 汇编，使用过 ARM 架构处理器 M、A系列\n熟悉 FreeRTOS 和 μc/OS Ⅱ ，运用队列、信号量、互斥锁等开发实际任务\n能够配置常见的通信协议，例如：UART，I2C，SPI。具备各类常见传感器及模块的开发能力\n熟悉 Linux 开发，了解 Linux 驱动层开发，具有设备树移植及内核裁剪的经验\n理解 Linux 启动过程，能够参与内核调试，能够使用QEMU进行片上测试及开发\n具备深度学习理论及 Pytorch 深度学习模型的搭建的基础，具备嵌入式 AI 领域应用开发能力\n掌握Git、GCC、CMake、Docker、Shell脚本等常见开发工具的使用\n有一定硬件基础，能看懂基本原理图，简单的3d建模\n\n\n\n<hr/>\n\n### 💻项目经历\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2024-8 ~ 2024-12</span><span>基于OpenIPC的数字图传系统开发</span><span>延伸项目</span>\n</h4>\n适用于无人机FPV图传、工业巡检等需要轻量化低延迟视频传输的领域，通过\"\nJetson+OpenIPC\"组合，便于扩展AI检测功能，是对无人巡检摄像头采集的一次全新尝试\n\n- 完成嵌入式Linux系统深度定制：基于Buildroot构建OpenIPC系统镜像，SSC338Q芯片搭载系统，系统启动Bootloader\n- 双频无线传输：采用WFB-ng协议栈搭建5.8GHz/2.4GHz双频链路（RTL8812au网卡MIMO模式）\n- 实现端到端低延迟流水线：集成GStreamer多媒体框架（硬件加速H.264编解码），优化视频采集→编码→传输→解码全链路时延，达成43ms超低延迟，支持1080P@60fps高清视频流\n\n\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2023-11 ~ 2024-12</span><span>变电站巡检机器人（实验室横向课题）</span><span>组长</span>\n</h4>\n\n实现变电站场景下3D环境感知与路径规划，针对复杂电力设备环境优化BEVDet算法，检测精度提升15%（需补充具体指标），支持实时障碍物分类（含导线悬挂物、绝缘子破损等电力场景特有目标）\n- 3D目标检测算法选取与ROS部署。\n- 参与模型部署ROS节点的编写及测试，设计多摄像头数据同步机制（六路海康GSM相机RTSP流接入+图像畸变校正），实现巡检机器人环视检测。\n- 构建ROS多节点数据管道（含图像预处理、BEV特征融合模块）\n\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2024-5 ~ 2024-8</span><span>基于GD32的无人机飞控</span><span>组长</span>\n</h4>\n\n针对市面无人机飞控系统封闭性强、二次开发困难的问题，社团实验室基于国产GD32F470微控制器设计开源飞控系统，实现飞行姿态控制、稳定悬停及集群通信扩展能力，为后续多机协同研究提供硬件与算法基础\n- 任务调度：FreeRTOS多任务调度框架搭建，划分传感器采集（IMU/气压计/GPS）、PID控制、通信等任务优先级\n- 传感器及数据： IMU 传感器、气压计、GPS 等传感器获取飞行数据，数据进行飞行控制。\n- 数据传输任务：负责创建队列进行数据传输并进行覆盖，通过使用互斥锁防止冲突，并建立临界区确保数据放入时的一致性。\n- 数据处理工作：负责处理陀螺仪和加速度计的数据。通过利用偏置值确定方差和重力加速度缩放因子进行校准，结合二阶低通滤波减少噪音，最终保证了输出的实时性，并提高了输出准确率10%。\n\n\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2023-03 ~ 2023-11</span><span>基于机器视觉的蘑菇分类识别小程序（国家级大创项目）</span><span>组长</span>\n</h4>\n\n针对设计识别野生蘑菇的轻量化视觉模型，实现蘑菇分类检测，部署并开发小程序实现上层应用，相关成果发表于IEEE GCRAIT会议（一作）。\n- 基于MobileViTv3设计多模态特征融合架构，结合CNN的局部特征提取能力与Transformer的全局语义建模优势。\n- 通过知识蒸馏技术（教师模型：VIT，学生模型：MobileViTv3）压缩模型规模，参数量由5.2M降至2.3M（压缩率55.8%），FLOPs优化至728M，推理速度提升2.1倍，Top-1准确率仅下降1.5%（91.2%→89.7%）。\n- 参与部署于Jetson orin nano平台，通过TensorRT量化模型至FP16精度，实现实时推理（32 FPS），CPU/GPU利用率分别稳定在18%/76%，内存占用＜450MB，满足户外无服务器场景需求。\n\n\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2023-03 ~ 2023-11</span><span>基于STM32的智能物流机器人</span><span>组长</span>\n</h4>\n基于微处理器和传感器的小型机器人在模拟的工厂完成货物运送、环境避障、识别货物及机械臂抓取、跟踪指示物并放置货物，最终返回停车充电台的任务。项目获得了国赛一等奖的成绩\n\n- 构建基于有限状态机的任务调度系统，协调路径规划、避障决策、视觉识别等核心功能模块\n- 基于OpenMV嵌入式视觉模块，采用YOLOv3-Tiny模型实现货物识别（95%准确率）\n- 设计全向麦轮底盘驱动方案，采用角度PID闭环控制实现±2°转向精度\n- 通过Ymodem协议进行蓝牙OTA升级STM32固件\n\n\n\n<hr/>\n\n\n\n<style>\n    #write {\n        padding: 25px 25px 0px;\n    }\n    hr {\n        margin: 6px;\n    }\n    li {\n        margin: 4px;\n    }\n    p {\n        margin: 4px 13px;\n    }\n    li p{\n        margin: 5px 0;\n    }\n    h1 {\n        margin: 8px 15px;\n    }\n    h3 {\n        margin: 9px;\n    }\n    h4 {\n        margin: 7px;\n    }\n    figure {\n        margin: 7px 0px;\n    }\n    blockquote {\n        padding-left: 16px;\n    }\n    /* 链接下划线 */\n    a {\n        text-decoration:underline;\n    }\n    /* 图片阴影效果 */\n    img {\n        box-shadow: 0px 0px 10px rgba(0,0,0,.5);\n    }\n    /* 表格样式，去除边框显示 */\n    table, table td, table tr, table th, th {\n        font-weight: normal;\n        padding: 3px 13px;\n        border: 0px;\n        background-color: #ffffff;\n    }\n</style>","updated":"2025-02-24T10:31:13.863Z","path":"about/index.html","comments":1,"layout":"page","_id":"cme1h6inr0004mktt3k25ga3v","content":"<table>\n    <tr style=\"height: 50px;\">\n        <td style=\"font-size: 1.8em;\"><strong>张恒👨‍💻</strong></td>\n        <td style=\"font-size: 1.5em;\"><strong>求职意向：嵌入式软件开发工程师</strong></td>\n        <td rowspan=\"5\">\n            <img src=\"https://image.aruoshui.fun/i/2025/02/18/re9xn2-0.webp\" height=\"200\" alt=\"\">\n        </td>\n    </tr>\n    <tr>\n        <td>政治面貌：中共党员</td>\n        <td>电话：18183863998</td>\n    </tr>\n    <tr>\n        <td>出生年月：2002年12月</td>\n        <td>邮箱：2021011074@bistu.edu.cn</td>\n    </tr>\n    <tr>\n        <td>现住址：北京市昌平区</td>\n        <td>学历：统招一本</td>\n    </tr>\n    <tr>\n        <td colspan=\"2\">博客：https://blog.aruoshui.fun/（文章：20篇，访问量：2993，访客1443）</td>\n    </tr>\n</table>\n<hr/>\n<h3 id=\"🏆校园经历\">🏆校园经历</h3>\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2021-09 ~ 2025-07</span><span>北京信息科技大学</span><span>计算机科学与技术</span>\n</h4>\n<ul>\n<li>绩点<strong>3.69/4.0</strong>，年级前<strong>15%</strong></li>\n<li>担任人工智能社团副社长、AI_LAB无人机群体感知组成员</li>\n<li>多次获得学校学习优秀奖学金和科技创新奖学金</li>\n<li>十六届国际先进机器人及仿真技术大赛，人工智能物流挑战赛国赛一等奖[2023年]</li>\n<li>一作身份发表一篇EI会议论文[2023年]</li>\n</ul>\n<h3 id=\"😎专业技能\">😎专业技能</h3>\n<p>熟悉 C/C++ 嵌入式开发，使用 Python 进行自动化脚本编写及算法验证<br>\n具备 MCU 和 SOC 开发基础，理解 Bootloader 的原理<br>\n了解 ARM 架构及 ARM 汇编，使用过 ARM 架构处理器 M、A系列<br>\n熟悉 FreeRTOS 和 μc/OS Ⅱ ，运用队列、信号量、互斥锁等开发实际任务<br>\n能够配置常见的通信协议，例如：UART，I2C，SPI。具备各类常见传感器及模块的开发能力<br>\n熟悉 Linux 开发，了解 Linux 驱动层开发，具有设备树移植及内核裁剪的经验<br>\n理解 Linux 启动过程，能够参与内核调试，能够使用QEMU进行片上测试及开发<br>\n具备深度学习理论及 Pytorch 深度学习模型的搭建的基础，具备嵌入式 AI 领域应用开发能力<br>\n掌握Git、GCC、CMake、Docker、Shell脚本等常见开发工具的使用<br>\n有一定硬件基础，能看懂基本原理图，简单的3d建模</p>\n<hr/>\n<h3 id=\"💻项目经历\">💻项目经历</h3>\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2024-8 ~ 2024-12</span><span>基于OpenIPC的数字图传系统开发</span><span>延伸项目</span>\n</h4>\n适用于无人机FPV图传、工业巡检等需要轻量化低延迟视频传输的领域，通过\"\nJetson+OpenIPC\"组合，便于扩展AI检测功能，是对无人巡检摄像头采集的一次全新尝试\n<ul>\n<li>完成嵌入式Linux系统深度定制：基于Buildroot构建OpenIPC系统镜像，SSC338Q芯片搭载系统，系统启动Bootloader</li>\n<li>双频无线传输：采用WFB-ng协议栈搭建5.8GHz/2.4GHz双频链路（RTL8812au网卡MIMO模式）</li>\n<li>实现端到端低延迟流水线：集成GStreamer多媒体框架（硬件加速H.264编解码），优化视频采集→编码→传输→解码全链路时延，达成43ms超低延迟，支持1080P@60fps高清视频流</li>\n</ul>\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2023-11 ~ 2024-12</span><span>变电站巡检机器人（实验室横向课题）</span><span>组长</span>\n</h4>\n<p>实现变电站场景下3D环境感知与路径规划，针对复杂电力设备环境优化BEVDet算法，检测精度提升15%（需补充具体指标），支持实时障碍物分类（含导线悬挂物、绝缘子破损等电力场景特有目标）</p>\n<ul>\n<li>3D目标检测算法选取与ROS部署。</li>\n<li>参与模型部署ROS节点的编写及测试，设计多摄像头数据同步机制（六路海康GSM相机RTSP流接入+图像畸变校正），实现巡检机器人环视检测。</li>\n<li>构建ROS多节点数据管道（含图像预处理、BEV特征融合模块）</li>\n</ul>\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2024-5 ~ 2024-8</span><span>基于GD32的无人机飞控</span><span>组长</span>\n</h4>\n<p>针对市面无人机飞控系统封闭性强、二次开发困难的问题，社团实验室基于国产GD32F470微控制器设计开源飞控系统，实现飞行姿态控制、稳定悬停及集群通信扩展能力，为后续多机协同研究提供硬件与算法基础</p>\n<ul>\n<li>任务调度：FreeRTOS多任务调度框架搭建，划分传感器采集（IMU/气压计/GPS）、PID控制、通信等任务优先级</li>\n<li>传感器及数据： IMU 传感器、气压计、GPS 等传感器获取飞行数据，数据进行飞行控制。</li>\n<li>数据传输任务：负责创建队列进行数据传输并进行覆盖，通过使用互斥锁防止冲突，并建立临界区确保数据放入时的一致性。</li>\n<li>数据处理工作：负责处理陀螺仪和加速度计的数据。通过利用偏置值确定方差和重力加速度缩放因子进行校准，结合二阶低通滤波减少噪音，最终保证了输出的实时性，并提高了输出准确率10%。</li>\n</ul>\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2023-03 ~ 2023-11</span><span>基于机器视觉的蘑菇分类识别小程序（国家级大创项目）</span><span>组长</span>\n</h4>\n<p>针对设计识别野生蘑菇的轻量化视觉模型，实现蘑菇分类检测，部署并开发小程序实现上层应用，相关成果发表于IEEE GCRAIT会议（一作）。</p>\n<ul>\n<li>基于MobileViTv3设计多模态特征融合架构，结合CNN的局部特征提取能力与Transformer的全局语义建模优势。</li>\n<li>通过知识蒸馏技术（教师模型：VIT，学生模型：MobileViTv3）压缩模型规模，参数量由5.2M降至2.3M（压缩率55.8%），FLOPs优化至728M，推理速度提升2.1倍，Top-1准确率仅下降1.5%（91.2%→89.7%）。</li>\n<li>参与部署于Jetson orin nano平台，通过TensorRT量化模型至FP16精度，实现实时推理（32 FPS），CPU/GPU利用率分别稳定在18%/76%，内存占用＜450MB，满足户外无服务器场景需求。</li>\n</ul>\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2023-03 ~ 2023-11</span><span>基于STM32的智能物流机器人</span><span>组长</span>\n</h4>\n基于微处理器和传感器的小型机器人在模拟的工厂完成货物运送、环境避障、识别货物及机械臂抓取、跟踪指示物并放置货物，最终返回停车充电台的任务。项目获得了国赛一等奖的成绩\n<ul>\n<li>构建基于有限状态机的任务调度系统，协调路径规划、避障决策、视觉识别等核心功能模块</li>\n<li>基于OpenMV嵌入式视觉模块，采用YOLOv3-Tiny模型实现货物识别（95%准确率）</li>\n<li>设计全向麦轮底盘驱动方案，采用角度PID闭环控制实现±2°转向精度</li>\n<li>通过Ymodem协议进行蓝牙OTA升级STM32固件</li>\n</ul>\n<hr/>\n<style>\n    #write {\n        padding: 25px 25px 0px;\n    }\n    hr {\n        margin: 6px;\n    }\n    li {\n        margin: 4px;\n    }\n    p {\n        margin: 4px 13px;\n    }\n    li p{\n        margin: 5px 0;\n    }\n    h1 {\n        margin: 8px 15px;\n    }\n    h3 {\n        margin: 9px;\n    }\n    h4 {\n        margin: 7px;\n    }\n    figure {\n        margin: 7px 0px;\n    }\n    blockquote {\n        padding-left: 16px;\n    }\n    /* 链接下划线 */\n    a {\n        text-decoration:underline;\n    }\n    /* 图片阴影效果 */\n    img {\n        box-shadow: 0px 0px 10px rgba(0,0,0,.5);\n    }\n    /* 表格样式，去除边框显示 */\n    table, table td, table tr, table th, th {\n        font-weight: normal;\n        padding: 3px 13px;\n        border: 0px;\n        background-color: #ffffff;\n    }\n</style>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqu1jr-0.webp","cover_type":"img","excerpt":"","more":"<table>\n    <tr style=\"height: 50px;\">\n        <td style=\"font-size: 1.8em;\"><strong>张恒👨‍💻</strong></td>\n        <td style=\"font-size: 1.5em;\"><strong>求职意向：嵌入式软件开发工程师</strong></td>\n        <td rowspan=\"5\">\n            <img src=\"https://image.aruoshui.fun/i/2025/02/18/re9xn2-0.webp\" height=\"200\" alt=\"\">\n        </td>\n    </tr>\n    <tr>\n        <td>政治面貌：中共党员</td>\n        <td>电话：18183863998</td>\n    </tr>\n    <tr>\n        <td>出生年月：2002年12月</td>\n        <td>邮箱：2021011074@bistu.edu.cn</td>\n    </tr>\n    <tr>\n        <td>现住址：北京市昌平区</td>\n        <td>学历：统招一本</td>\n    </tr>\n    <tr>\n        <td colspan=\"2\">博客：https://blog.aruoshui.fun/（文章：20篇，访问量：2993，访客1443）</td>\n    </tr>\n</table>\n<hr/>\n<h3 id=\"🏆校园经历\">🏆校园经历</h3>\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2021-09 ~ 2025-07</span><span>北京信息科技大学</span><span>计算机科学与技术</span>\n</h4>\n<ul>\n<li>绩点<strong>3.69/4.0</strong>，年级前<strong>15%</strong></li>\n<li>担任人工智能社团副社长、AI_LAB无人机群体感知组成员</li>\n<li>多次获得学校学习优秀奖学金和科技创新奖学金</li>\n<li>十六届国际先进机器人及仿真技术大赛，人工智能物流挑战赛国赛一等奖[2023年]</li>\n<li>一作身份发表一篇EI会议论文[2023年]</li>\n</ul>\n<h3 id=\"😎专业技能\">😎专业技能</h3>\n<p>熟悉 C/C++ 嵌入式开发，使用 Python 进行自动化脚本编写及算法验证<br>\n具备 MCU 和 SOC 开发基础，理解 Bootloader 的原理<br>\n了解 ARM 架构及 ARM 汇编，使用过 ARM 架构处理器 M、A系列<br>\n熟悉 FreeRTOS 和 μc/OS Ⅱ ，运用队列、信号量、互斥锁等开发实际任务<br>\n能够配置常见的通信协议，例如：UART，I2C，SPI。具备各类常见传感器及模块的开发能力<br>\n熟悉 Linux 开发，了解 Linux 驱动层开发，具有设备树移植及内核裁剪的经验<br>\n理解 Linux 启动过程，能够参与内核调试，能够使用QEMU进行片上测试及开发<br>\n具备深度学习理论及 Pytorch 深度学习模型的搭建的基础，具备嵌入式 AI 领域应用开发能力<br>\n掌握Git、GCC、CMake、Docker、Shell脚本等常见开发工具的使用<br>\n有一定硬件基础，能看懂基本原理图，简单的3d建模</p>\n<hr/>\n<h3 id=\"💻项目经历\">💻项目经历</h3>\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2024-8 ~ 2024-12</span><span>基于OpenIPC的数字图传系统开发</span><span>延伸项目</span>\n</h4>\n适用于无人机FPV图传、工业巡检等需要轻量化低延迟视频传输的领域，通过\"\nJetson+OpenIPC\"组合，便于扩展AI检测功能，是对无人巡检摄像头采集的一次全新尝试\n<ul>\n<li>完成嵌入式Linux系统深度定制：基于Buildroot构建OpenIPC系统镜像，SSC338Q芯片搭载系统，系统启动Bootloader</li>\n<li>双频无线传输：采用WFB-ng协议栈搭建5.8GHz/2.4GHz双频链路（RTL8812au网卡MIMO模式）</li>\n<li>实现端到端低延迟流水线：集成GStreamer多媒体框架（硬件加速H.264编解码），优化视频采集→编码→传输→解码全链路时延，达成43ms超低延迟，支持1080P@60fps高清视频流</li>\n</ul>\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2023-11 ~ 2024-12</span><span>变电站巡检机器人（实验室横向课题）</span><span>组长</span>\n</h4>\n<p>实现变电站场景下3D环境感知与路径规划，针对复杂电力设备环境优化BEVDet算法，检测精度提升15%（需补充具体指标），支持实时障碍物分类（含导线悬挂物、绝缘子破损等电力场景特有目标）</p>\n<ul>\n<li>3D目标检测算法选取与ROS部署。</li>\n<li>参与模型部署ROS节点的编写及测试，设计多摄像头数据同步机制（六路海康GSM相机RTSP流接入+图像畸变校正），实现巡检机器人环视检测。</li>\n<li>构建ROS多节点数据管道（含图像预处理、BEV特征融合模块）</li>\n</ul>\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2024-5 ~ 2024-8</span><span>基于GD32的无人机飞控</span><span>组长</span>\n</h4>\n<p>针对市面无人机飞控系统封闭性强、二次开发困难的问题，社团实验室基于国产GD32F470微控制器设计开源飞控系统，实现飞行姿态控制、稳定悬停及集群通信扩展能力，为后续多机协同研究提供硬件与算法基础</p>\n<ul>\n<li>任务调度：FreeRTOS多任务调度框架搭建，划分传感器采集（IMU/气压计/GPS）、PID控制、通信等任务优先级</li>\n<li>传感器及数据： IMU 传感器、气压计、GPS 等传感器获取飞行数据，数据进行飞行控制。</li>\n<li>数据传输任务：负责创建队列进行数据传输并进行覆盖，通过使用互斥锁防止冲突，并建立临界区确保数据放入时的一致性。</li>\n<li>数据处理工作：负责处理陀螺仪和加速度计的数据。通过利用偏置值确定方差和重力加速度缩放因子进行校准，结合二阶低通滤波减少噪音，最终保证了输出的实时性，并提高了输出准确率10%。</li>\n</ul>\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2023-03 ~ 2023-11</span><span>基于机器视觉的蘑菇分类识别小程序（国家级大创项目）</span><span>组长</span>\n</h4>\n<p>针对设计识别野生蘑菇的轻量化视觉模型，实现蘑菇分类检测，部署并开发小程序实现上层应用，相关成果发表于IEEE GCRAIT会议（一作）。</p>\n<ul>\n<li>基于MobileViTv3设计多模态特征融合架构，结合CNN的局部特征提取能力与Transformer的全局语义建模优势。</li>\n<li>通过知识蒸馏技术（教师模型：VIT，学生模型：MobileViTv3）压缩模型规模，参数量由5.2M降至2.3M（压缩率55.8%），FLOPs优化至728M，推理速度提升2.1倍，Top-1准确率仅下降1.5%（91.2%→89.7%）。</li>\n<li>参与部署于Jetson orin nano平台，通过TensorRT量化模型至FP16精度，实现实时推理（32 FPS），CPU/GPU利用率分别稳定在18%/76%，内存占用＜450MB，满足户外无服务器场景需求。</li>\n</ul>\n<h4 style=\"display: flex;justify-content: space-between;\">\n<span>2023-03 ~ 2023-11</span><span>基于STM32的智能物流机器人</span><span>组长</span>\n</h4>\n基于微处理器和传感器的小型机器人在模拟的工厂完成货物运送、环境避障、识别货物及机械臂抓取、跟踪指示物并放置货物，最终返回停车充电台的任务。项目获得了国赛一等奖的成绩\n<ul>\n<li>构建基于有限状态机的任务调度系统，协调路径规划、避障决策、视觉识别等核心功能模块</li>\n<li>基于OpenMV嵌入式视觉模块，采用YOLOv3-Tiny模型实现货物识别（95%准确率）</li>\n<li>设计全向麦轮底盘驱动方案，采用角度PID闭环控制实现±2°转向精度</li>\n<li>通过Ymodem协议进行蓝牙OTA升级STM32固件</li>\n</ul>\n<hr/>\n<style>\n    #write {\n        padding: 25px 25px 0px;\n    }\n    hr {\n        margin: 6px;\n    }\n    li {\n        margin: 4px;\n    }\n    p {\n        margin: 4px 13px;\n    }\n    li p{\n        margin: 5px 0;\n    }\n    h1 {\n        margin: 8px 15px;\n    }\n    h3 {\n        margin: 9px;\n    }\n    h4 {\n        margin: 7px;\n    }\n    figure {\n        margin: 7px 0px;\n    }\n    blockquote {\n        padding-left: 16px;\n    }\n    /* 链接下划线 */\n    a {\n        text-decoration:underline;\n    }\n    /* 图片阴影效果 */\n    img {\n        box-shadow: 0px 0px 10px rgba(0,0,0,.5);\n    }\n    /* 表格样式，去除边框显示 */\n    table, table td, table tr, table th, th {\n        font-weight: normal;\n        padding: 3px 13px;\n        border: 0px;\n        background-color: #ffffff;\n    }\n</style>"},{"_content":"","source":"img/test.html","raw":"","date":"2025-01-13T15:28:01.500Z","updated":"2025-01-13T15:28:01.500Z","path":"img/test.html","title":"","comments":1,"layout":"page","_id":"cme1h6int0008mktt26nd1rjp","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqsz0s-0.webp","cover_type":"img","excerpt":"","more":""},{"title":"tags","date":"2024-01-29T10:42:56.000Z","type":"tags","orderby":"random","order":1,"top_img":"https://image.aruoshui.fun/i/2024/12/31/vgolkt-0.webp","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-01-29 18:42:56\ntype: \"tags\"\norderby: random\norder: 1\ntop_img: https://image.aruoshui.fun/i/2024/12/31/vgolkt-0.webp\n---\n\n","updated":"2024-12-31T11:15:59.976Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cme1h6int000amktt12rxdzje","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqv6e5-0.webp","cover_type":"img","excerpt":"","more":""},{"title":"link","date":"2024-01-29T10:54:36.000Z","type":"link","top_img":"https://image.aruoshui.fun/i/2024/12/31/vltvs7-0.webp","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2024-01-29 18:54:36\ntype: \"link\"\ntop_img: https://image.aruoshui.fun/i/2024/12/31/vltvs7-0.webp\n---\n","updated":"2024-12-31T11:11:18.700Z","path":"link/index.html","comments":1,"layout":"page","_id":"cme1h6inu000cmktt5x9j5pcg","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqtghh-0.webp","cover_type":"img","excerpt":"","more":""},{"title":"Gallery","date":"2024-01-29T12:01:13.000Z","type":"Gallery","_content":"\n<div class=\"gallery-group-main\">\n{% galleryGroup '壁纸' '收藏的一些壁纸' '/Gallery/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '关于漫威的图片' '/Gallery/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n</div>\n\n","source":"Box/Gallery/index.md","raw":"---\ntitle: Gallery\ndate: 2024-01-29 20:01:13\ntype: \"Gallery\"\n---\n\n<div class=\"gallery-group-main\">\n{% galleryGroup '壁纸' '收藏的一些壁纸' '/Gallery/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '关于漫威的图片' '/Gallery/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n</div>\n\n","updated":"2024-03-14T12:02:01.723Z","path":"Box/Gallery/index.html","comments":1,"layout":"page","_id":"cme1h6inv000hmktta6ky2kgp","content":"<div class=\"gallery-group-main\">\n<figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁纸</div>\n  <p>收藏的一些壁纸</p>\n  <a href='/Gallery/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n<figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>关于漫威的图片</p>\n  <a href='/Gallery/marvel'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqtp10-0.webp","cover_type":"img","excerpt":"","more":"<div class=\"gallery-group-main\">\n<figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁纸</div>\n  <p>收藏的一些壁纸</p>\n  <a href='/Gallery/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n<figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>关于漫威的图片</p>\n  <a href='/Gallery/marvel'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n"},{"title":"myGame","date":"2024-03-14T09:58:04.000Z","_content":"","source":"Box/myGame/index.md","raw":"---\ntitle: myGame\ndate: 2024-03-14 17:58:04\n---\n","updated":"2024-03-14T09:58:04.398Z","path":"Box/myGame/index.html","comments":1,"layout":"page","_id":"cme1h6inv000jmktt3v3d50mc","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqt6nt-0.webp","cover_type":"img","excerpt":"","more":""},{"title":"movie","date":"2024-03-14T09:53:12.000Z","_content":"","source":"Box/movie/index.md","raw":"---\ntitle: movie\ndate: 2024-03-14 17:53:12\n---\n","updated":"2024-03-14T10:01:49.662Z","path":"Box/movie/index.html","comments":1,"layout":"page","_id":"cme1h6inw000omkttglpzcf5q","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqtlg9-0.webp","cover_type":"img","excerpt":"","more":""},{"title":"myLove","date":"2024-03-14T09:18:04.000Z","password":null,"abstract":"有东西被加密了, 请输入密码查看.","message":"您好, 这里需要密码.","theme":"xray","wrong_pass_message":"抱歉, 这个密码看着不太对, 请再试试.","wrong_hash_message":"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.","top_img":"https://image.aruoshui.fun/i/2024/12/31/vmctyh-0.webp","aside":false,"_content":"","source":"Box/myLove/index.md","raw":"---\ntitle: myLove\ndate: 2024-03-14 17:18:04\npassword:   \nabstract: 有东西被加密了, 请输入密码查看.\nmessage: 您好, 这里需要密码.\ntheme: xray\nwrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试.\nwrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\ntop_img: https://image.aruoshui.fun/i/2024/12/31/vmctyh-0.webp\naside: false\n\n---\n","updated":"2024-12-31T11:12:06.239Z","path":"Box/myLove/index.html","comments":1,"layout":"page","_id":"cme1h6inw000qmktt1tl27otx","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqu1jr-0.webp","cover_type":"img","excerpt":"","more":""},{"title":"webShare","date":"2024-03-14T09:18:20.000Z","top_img":"https://image.aruoshui.fun/i/2024/12/31/vmy92p-0.webp","_content":"","source":"Box/webShare/index.md","raw":"---\ntitle: webShare\ndate: 2024-03-14 17:18:20\ntop_img: https://image.aruoshui.fun/i/2024/12/31/vmy92p-0.webp\n---\n","updated":"2024-12-31T11:13:07.890Z","path":"Box/webShare/index.html","comments":1,"layout":"page","_id":"cme1h6inx000vmktt3fl897tc","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqvf20-0.webp","cover_type":"img","excerpt":"","more":""}],"Post":[{"title":"AI编程体验","date":"2025-07-30T01:33:07.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqvet7-0.webp","swiper_index":null,"_content":"\n# 参考文章\n{% link 知乎, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n{% link CSDN, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n\n{% link github, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp%} \n\n# augment Code\n# Claude Code\n\n","source":"_posts/AI编程体验.md","raw":"---\ntitle: AI编程体验\ndate: 2025-07-30 09:33:07\ntags:\ndescription:\ncategories:\ncover:\nswiper_index:\n---\n\n# 参考文章\n{% link 知乎, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n{% link CSDN, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n\n{% link github, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp%} \n\n# augment Code\n# Claude Code\n\n","slug":"AI编程体验","published":1,"updated":"2025-07-30T03:25:14.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6inp0001mktt1fu035qp","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"知乎\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">知乎</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"CSDN\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">CSDN</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"github\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp\"/></div><div class=\"right\"><p class=\"text\">github</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<h1>augment Code</h1>\n<h1>Claude Code</h1>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","abbrlink":58749,"excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"知乎\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">知乎</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"CSDN\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">CSDN</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"github\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp\"/></div><div class=\"right\"><p class=\"text\">github</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<h1>augment Code</h1>\n<h1>Claude Code</h1>\n"},{"title":"AutoCube","description":"闲逛github看到的一个有趣的项目","cover":"https://image.aruoshui.fun/i/2024/12/31/vsjrzz-0.webp","swiper_index":2,"abbrlink":37842,"date":"2024-03-05T11:32:05.000Z","_content":"\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/3/4 -->\n按照文档配置完成，后续逐步掌握代码\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 项目来源\n{% link 魔方自动还原, https://github.com/RexWzh/rubik_cube.py?tab=readme-ov-file, http://image.aruoshui.fun/i/2024/12/31/qrh9hd-0.webp %}\n\n# 项目概述\n利用opencv进行模版匹配识别，识别结果结合三阶魔方[科先巴二阶段算法](https://github.com/muodov/kociemba)，计算还原步数（根据算法，任何打乱的三阶魔方都可以在21步以内还原完成【不包括扭角捣乱的】，得到还原步数利用Python的[pyautogui](https://github.com/asweigart/pyautogui)库进行自动化执行）","source":"_posts/AutoCube.md","raw":"---\ntitle: AutoCube\ndescription: 闲逛github看到的一个有趣的项目\ntags:\n  - OpenCV\ncategories:\n  - 一些有趣的小项目\ncover: 'https://image.aruoshui.fun/i/2024/12/31/vsjrzz-0.webp'\nswiper_index: 2\nabbrlink: 37842\ndate: 2024-03-05 19:32:05\n---\n\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/3/4 -->\n按照文档配置完成，后续逐步掌握代码\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 项目来源\n{% link 魔方自动还原, https://github.com/RexWzh/rubik_cube.py?tab=readme-ov-file, http://image.aruoshui.fun/i/2024/12/31/qrh9hd-0.webp %}\n\n# 项目概述\n利用opencv进行模版匹配识别，识别结果结合三阶魔方[科先巴二阶段算法](https://github.com/muodov/kociemba)，计算还原步数（根据算法，任何打乱的三阶魔方都可以在21步以内还原完成【不包括扭角捣乱的】，得到还原步数利用Python的[pyautogui](https://github.com/asweigart/pyautogui)库进行自动化执行）","slug":"AutoCube","published":1,"updated":"2024-12-31T11:24:42.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6inr0003mktt5xigb3c9","content":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/4</p>\n</div></div><div class='timeline-item-content'><p>按照文档配置完成，后续逐步掌握代码</p>\n</div></div></div>\n<h1>项目来源</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"魔方自动还原\" href=\"https://github.com/RexWzh/rubik_cube.py?tab=readme-ov-file\"><div class=\"left\"><img src=\"http://image.aruoshui.fun/i/2024/12/31/qrh9hd-0.webp\"/></div><div class=\"right\"><p class=\"text\">魔方自动还原</p><p class=\"url\">https://github.com/RexWzh/rubik_cube.py?tab=readme-ov-file</p></div></a></div>\n<h1>项目概述</h1>\n<p>利用opencv进行模版匹配识别，识别结果结合三阶魔方<a href=\"https://github.com/muodov/kociemba\">科先巴二阶段算法</a>，计算还原步数（根据算法，任何打乱的三阶魔方都可以在21步以内还原完成【不包括扭角捣乱的】，得到还原步数利用Python的<a href=\"https://github.com/asweigart/pyautogui\">pyautogui</a>库进行自动化执行）</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/4</p>\n</div></div><div class='timeline-item-content'><p>按照文档配置完成，后续逐步掌握代码</p>\n</div></div></div>\n<h1>项目来源</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"魔方自动还原\" href=\"https://github.com/RexWzh/rubik_cube.py?tab=readme-ov-file\"><div class=\"left\"><img src=\"http://image.aruoshui.fun/i/2024/12/31/qrh9hd-0.webp\"/></div><div class=\"right\"><p class=\"text\">魔方自动还原</p><p class=\"url\">https://github.com/RexWzh/rubik_cube.py?tab=readme-ov-file</p></div></a></div>\n<h1>项目概述</h1>\n<p>利用opencv进行模版匹配识别，识别结果结合三阶魔方<a href=\"https://github.com/muodov/kociemba\">科先巴二阶段算法</a>，计算还原步数（根据算法，任何打乱的三阶魔方都可以在21步以内还原完成【不包括扭角捣乱的】，得到还原步数利用Python的<a href=\"https://github.com/asweigart/pyautogui\">pyautogui</a>库进行自动化执行）</p>\n"},{"title":"BEVDet","description":"本文用于记录BEVDet学习过程中出现的问题和相关的解决过程","abbrlink":1976,"cover":"https://image.aruoshui.fun/i/2024/12/31/vuewo5-0.webp","swiper_index":3,"date":"2024-02-26T05:44:30.000Z","_content":"# 1.环境配置\n{% note info flat %}\n参考：[官方文档](https://github.com/HuangJunJie2017/BEVDet)\n参考：[BEVDet复现](https://blog.csdn.net/h904798869/article/details/133363474)\n{% endnote %}\n\n## 1. 基本配置\n需求：ubuntu20.04，python-3.8, torch1.13.0, cuda-11.7, cudnn-8.6, conda \n[未安装可以参考](https://blog.csdn.net/h904798869/article/details/131719404)\n\n## 2. 基本依赖\n```bash \napt-get install -y vim libsm6 libxext6 libxrender-dev libgl1-mesa-glx git wget libssl-dev libopencv-dev libspdlog-dev\n```\n\n## 3. 拉取源码\n```bash\n# 1 下载源码   目前默认是dev3.1\ngit clone https://github.com/HuangJunJie2017/BEVDet.git\n\n# 2 查看代码版本号 显示dev3.1版本\ngit checkout\n\n# 3 如果要切换版本号，如dev2.1，输入\ngit checkout dev2.1\n\n```\n## 4. 配置bevdet的python虚拟环境\n```bash\n# 1 创建虚拟环境\nconda create -n bevdet python=3.8\n\n# 2 激活python环境\nconda activate bevdet\n\n# 3 虚拟环境bevdet中安装torch\npip install torch==1.13.0+cu117 torchvision==0.14.0+cu117 torchaudio==0.13.0 --extra-index-url https://download.pytorch.org/whl/cu117\n\n# 4 虚拟环境bevdet中安装openlib相关库\npip install mmcv-full==1.5.3 onnxruntime-gpu==1.8.1 mmdet==2.25.1 mmsegmentation==0.25.0\n\n# 5 进入BEVDet工程目录,安装mmdet3d\npip install -e -v .\n\n# 6 安装其他依赖 numpy==1.23.4 setuptools==58.2.0等\npip install pycuda lyft_dataset_sdk networkx==2.2 numba==0.53.0 numpy==1.23.4 nuscenes-devkit plyfile scikit-image tensorboard trimesh==2.35.39 setuptools==58.2.0 yapf==0.40.1\n \n```\n\n\n# 2. 解决问题\n## 2.1 pip装包编译错误\n{% note info flat %}\n参考：[https://blog.csdn.net/h904798869/article/details/131719404](https://blog.csdn.net/h904798869/article/details/131719404) \n参考：[https://blog.csdn.net/weixin_62075168/article/details/129758163](https://blog.csdn.net/weixin_62075168/article/details/129758163)\n\n{% endnote %}\n\n#### 问题：\n```bash\n    src/cpp/cuda.hpp:14:10: fatal error: cuda.h: 没有那个文件或目录\n       #include <cuda.h>\n                ^~~~~~~~\n      compilation terminated.\n      /tmp/pip-build-env-lze7ntp3/overlay/lib/python3.8/site-packages/setuptools/command/build_py.py:207: _Warning: Package 'pycuda.cuda' is absent from the `pa                                                                              ckages` configuration.\n      !!\n\n              ********************************************************************************\n              ############################\n              # Package would be ignored #\n              ############################\n              Python recognizes 'pycuda.cuda' as an importable package[^1],\n              but it is absent from setuptools' `packages` configuration.\n\n              This leads to an ambiguous overall configuration. If you want to distribute this\n              package, please make sure that 'pycuda.cuda' is explicitly added\n              to the `packages` configuration field.\n\n              Alternatively, you can also rely on setuptools' discovery methods\n              (for example by using `find_namespace_packages(...)`/`find_namespace:`\n              instead of `find_packages(...)`/`find:`).\n\n              You can read more about \"package discovery\" on setuptools documentation page:\n\n              - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html\n\n              If you don't want 'pycuda.cuda' to be distributed and are\n              already explicitly excluding 'pycuda.cuda' via\n              `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,\n              you can try to use `exclude_package_data`, or `include-package-data=False` in\n              combination with a more fine grained `package-data` configuration.\n\n              You can read more about \"package data files\" on setuptools documentation page:\n\n              - https://setuptools.pypa.io/en/latest/userguide/datafiles.html\n\n\n              [^1]: For Python, any directory (with suitable naming) can be imported,\n                    even if it does not contain any `.py` files.\n                    On the other hand, currently there is no concept of package data\n                    directory, all directories are treated like packages.\n              ********************************************************************************\n\n      !!\n        check.warn(importable)\n      error: command '/usr/bin/gcc' failed with exit code 1\n      [end of output]\n\n  note: This error originates from a subprocess, and is likely not a problem with pip.\n  ERROR: Failed building wheel for pycuda\nFailed to build pycuda\nERROR: Could not build wheels for pycuda, which is required to install pyproject.toml-based projects\n```\n\n#### 解决思路：\n`required to install pyproject.toml-based projects`这个问题主要出现在C++构建工具未安装 \n{% tabs 分栏 %}\n\n<!-- tab Windows平台解决思路 -->\n在Windows平台安装比较繁琐，首先要下载[Vs](https://go.microsoft.com/fwlink/?linkid=836911),一般来说可以直接安装Visual Studio，但是占用空间大，只安装构建也能解决问题 \n\n在其中标题栏选择下载一栏，并在下载的搜索框键入：build tools，并回车进入下载界面  \n\n下载如图的工具，下载完成以后是一个ISO结尾的光盘映射文件，注意下载的时候将类型改为DVD![](https://s2.loli.net/2024/02/29/IjWZexPbcrX4ziv.png)  \n\n双击运行该光盘映射文件，点击exe文件，一路进行安装 \n\n![](https://s2.loli.net/2024/02/29/TiVSqzGMhrpuelQ.png)  \n\n按图片勾选的工具进行安装，即可解决\n\n<!-- endtab -->\n\n<!-- tab Linux平台解决思路 -->\n下载依赖\n```bash\nsudo apt install g++ make\n```\n<!-- endtab -->\n{% endtabs %}\n\n解决完问题接下来就继续`pip`安装即可。\n\n\n## 2.2 MMCV工具安装\n#### 问题：\n```bash\n(bevdet) root@wahaha-System-Product-Name:/media/wahaha/222/BEVDet/bev/BEVDet2/BEVDet# python tools/create_data_bevdet.py                                   /root/miniconda3/envs/bevdet/lib/python3.8/site-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\n  warnings.warn(\nTraceback (most recent call last):\n  File \"tools/create_data_bevdet.py\", line 9, in <module>\n    from tools.data_converter import nuscenes_converter as nuscenes_converter\n  File \"/media/wahaha/222/BEVDet/bev/BEVDet2/BEVDet/tools/data_converter/nuscenes_converter.py\", line 14, in <module>\n    from mmdet3d.core.bbox import points_cam2img\n  File \"/media/wahaha/222/BEVDet/bev/BEVDet2/BEVDet/mmdet3d/__init__.py\", line 4, in <module>\n    import mmdet\n  File \"/root/miniconda3/envs/bevdet/lib/python3.8/site-packages/mmdet/__init__.py\", line 24, in <module>\n    assert (mmcv_version >= digit_version(mmcv_minimum_version)\nAssertionError: MMCV==1.7.0 is used but incompatible. Please install mmcv>=1.3.17, <=1.6.0.\n```\n在运行脚本创建数据集时，按照官方配置安装的MMCV工具提示版本不兼容，需要安装其他版本的，但是安装完所推荐的版本，又会提示不兼容，安装其他的版本，反复横跳 \n\n#### 解决思路\n自己修改MMCV工具版本需求范围\n打开MMCV工具目录，找到`__init__.py`文件，找到如下的[范围](https://s2.loli.net/2024/02/29/JMU9wfo3mdEgVHx.png) \n把这三个文件的`__init__.py`文件中的MMCV_MIN,MMCV_MAX改成包含你现在拥有的版本，忽略版本范围\n![如图](https://s2.loli.net/2024/02/29/PTVHlDAIMZWr4aG.png)\n![如图](https://s2.loli.net/2024/02/29/PBhF3rvkVtjAWlS.png)\n再次运行脚本，发现脚本运行成功\n![](https://s2.loli.net/2024/02/29/HfIUOBLZX6YmWAp.png)\n自动生成了训练集与验证集\n\n## 2.3 其他问题···\n\n\n\n# 3.数据集的创建\n{% note info flat %}\n参考：[https://blog.csdn.net/h904798869/article/details/133363474](https://blog.csdn.net/h904798869/article/details/133363474) \n参考：[https://blog.csdn.net/h904798869/article/details/130317240?spm=1001.2014.3001.5502](https://blog.csdn.net/h904798869/article/details/130317240?spm=1001.2014.3001.5502)\n{% endnote %}\n\n## 3.1 下载数据集\n[nuscenes下载地址](https://www.nuscenes.org/nuscenes#download)\n下载细节参考 [FastBEV](https://blog.csdn.net/h904798869/article/details/130317240?spm=1001.2014.3001.5502)\n\n由于我们使用的mini数据集进行测试，而源码中需要full数据集，将v1.0-mini复制一份并命名为v1.0-trainval``./data\n文件结构如下：\n```bash\ndata\n  └──nuscenes\n    ├── gts\n    ├── maps\n    ├── samples\n    ├── sweeps\n    ├── v1.0-mini\n    └── v1.0-trainval  # 复制的文件夹\n\n```\n## 3.2 生成bevdet数据集\n运行tools/create_data_bevdet.py生成数据集\n\n```python\npython tools/create_data_bevdet.py\n```\n\n结果如图：\n![](https://s2.loli.net/2024/02/29/HfIUOBLZX6YmWAp.png)\n\n# 4.测试\n首先通过测试来实现论文效果，直接使用官方训练好的权重，[详情请见](https://github.com/HuangJunJie2017/BEVDet/blob/dev2.1/README.md)，[官方权重](https://pan.baidu.com/s/1237QyV18zvRJ1pU3YzRItw?pwd=npe1#list/path=%2F)\n```python\npython tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --eval mAP\n``` \n\n\n# 5.可视化\n## 5.1 生成json\n```bash\n# 运行test.py 必须--out\", \"--eval\", \"--format-only\", \"--show\" or \"--show-dir至少跟一个\n# json文件生成需要增加 --eval-options参数 jsonfile_prefix=test_dirs\n# 实在搞不清楚请看test.py的源码，看如何加载参数即可\n\n# 1 直接测试\npython tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --format-only\n\n# 2 测试保存json文件\npython tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --format-only --eval-options jsonfile_prefix=test_dirs\n# 保留json位于目录test_dirs下\n\n# 3 直接生成保存为pkl格式\npython tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --out=./test_dirs/out.pkl\n\n```\n\n## 5.2 json文件转可视化\n```python\npython tools/analysis_tools/vis.py ./work_dir/results_nusc.json\n```\n生成视频./vis/vis.mp4文件, 如下：\n<video\nsrc=\"/img/WeChat_20240229225803.mp4\" controls=\"\"\nheight=400 \nwidth=600> \n</video>\n\n# 6.训练\n![](https://cdnimg103.lizhi.fm/audio_cover/2017/08/17/2619367354329486855_580x580.jpg)\n\n\n# 7. 鸣谢\n{% note info flat %}\n最感谢的是LHL小可爱的支持和努力，解决了无数的问题，完成了配置测试\n{% endnote %}\n\n","source":"_posts/BEVDet.md","raw":"---\ntitle: BEVDet\ndescription: 本文用于记录BEVDet学习过程中出现的问题和相关的解决过程\ntags:\n  - BEV\n  - 目标检测\ncategories:\n  - AI\nabbrlink: 1976\ncover: 'https://image.aruoshui.fun/i/2024/12/31/vuewo5-0.webp'\nswiper_index: 3 #置顶轮播图顺序，非负整数，数字越大越靠前\ndate: 2024-02-26 13:44:30\n---\n# 1.环境配置\n{% note info flat %}\n参考：[官方文档](https://github.com/HuangJunJie2017/BEVDet)\n参考：[BEVDet复现](https://blog.csdn.net/h904798869/article/details/133363474)\n{% endnote %}\n\n## 1. 基本配置\n需求：ubuntu20.04，python-3.8, torch1.13.0, cuda-11.7, cudnn-8.6, conda \n[未安装可以参考](https://blog.csdn.net/h904798869/article/details/131719404)\n\n## 2. 基本依赖\n```bash \napt-get install -y vim libsm6 libxext6 libxrender-dev libgl1-mesa-glx git wget libssl-dev libopencv-dev libspdlog-dev\n```\n\n## 3. 拉取源码\n```bash\n# 1 下载源码   目前默认是dev3.1\ngit clone https://github.com/HuangJunJie2017/BEVDet.git\n\n# 2 查看代码版本号 显示dev3.1版本\ngit checkout\n\n# 3 如果要切换版本号，如dev2.1，输入\ngit checkout dev2.1\n\n```\n## 4. 配置bevdet的python虚拟环境\n```bash\n# 1 创建虚拟环境\nconda create -n bevdet python=3.8\n\n# 2 激活python环境\nconda activate bevdet\n\n# 3 虚拟环境bevdet中安装torch\npip install torch==1.13.0+cu117 torchvision==0.14.0+cu117 torchaudio==0.13.0 --extra-index-url https://download.pytorch.org/whl/cu117\n\n# 4 虚拟环境bevdet中安装openlib相关库\npip install mmcv-full==1.5.3 onnxruntime-gpu==1.8.1 mmdet==2.25.1 mmsegmentation==0.25.0\n\n# 5 进入BEVDet工程目录,安装mmdet3d\npip install -e -v .\n\n# 6 安装其他依赖 numpy==1.23.4 setuptools==58.2.0等\npip install pycuda lyft_dataset_sdk networkx==2.2 numba==0.53.0 numpy==1.23.4 nuscenes-devkit plyfile scikit-image tensorboard trimesh==2.35.39 setuptools==58.2.0 yapf==0.40.1\n \n```\n\n\n# 2. 解决问题\n## 2.1 pip装包编译错误\n{% note info flat %}\n参考：[https://blog.csdn.net/h904798869/article/details/131719404](https://blog.csdn.net/h904798869/article/details/131719404) \n参考：[https://blog.csdn.net/weixin_62075168/article/details/129758163](https://blog.csdn.net/weixin_62075168/article/details/129758163)\n\n{% endnote %}\n\n#### 问题：\n```bash\n    src/cpp/cuda.hpp:14:10: fatal error: cuda.h: 没有那个文件或目录\n       #include <cuda.h>\n                ^~~~~~~~\n      compilation terminated.\n      /tmp/pip-build-env-lze7ntp3/overlay/lib/python3.8/site-packages/setuptools/command/build_py.py:207: _Warning: Package 'pycuda.cuda' is absent from the `pa                                                                              ckages` configuration.\n      !!\n\n              ********************************************************************************\n              ############################\n              # Package would be ignored #\n              ############################\n              Python recognizes 'pycuda.cuda' as an importable package[^1],\n              but it is absent from setuptools' `packages` configuration.\n\n              This leads to an ambiguous overall configuration. If you want to distribute this\n              package, please make sure that 'pycuda.cuda' is explicitly added\n              to the `packages` configuration field.\n\n              Alternatively, you can also rely on setuptools' discovery methods\n              (for example by using `find_namespace_packages(...)`/`find_namespace:`\n              instead of `find_packages(...)`/`find:`).\n\n              You can read more about \"package discovery\" on setuptools documentation page:\n\n              - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html\n\n              If you don't want 'pycuda.cuda' to be distributed and are\n              already explicitly excluding 'pycuda.cuda' via\n              `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,\n              you can try to use `exclude_package_data`, or `include-package-data=False` in\n              combination with a more fine grained `package-data` configuration.\n\n              You can read more about \"package data files\" on setuptools documentation page:\n\n              - https://setuptools.pypa.io/en/latest/userguide/datafiles.html\n\n\n              [^1]: For Python, any directory (with suitable naming) can be imported,\n                    even if it does not contain any `.py` files.\n                    On the other hand, currently there is no concept of package data\n                    directory, all directories are treated like packages.\n              ********************************************************************************\n\n      !!\n        check.warn(importable)\n      error: command '/usr/bin/gcc' failed with exit code 1\n      [end of output]\n\n  note: This error originates from a subprocess, and is likely not a problem with pip.\n  ERROR: Failed building wheel for pycuda\nFailed to build pycuda\nERROR: Could not build wheels for pycuda, which is required to install pyproject.toml-based projects\n```\n\n#### 解决思路：\n`required to install pyproject.toml-based projects`这个问题主要出现在C++构建工具未安装 \n{% tabs 分栏 %}\n\n<!-- tab Windows平台解决思路 -->\n在Windows平台安装比较繁琐，首先要下载[Vs](https://go.microsoft.com/fwlink/?linkid=836911),一般来说可以直接安装Visual Studio，但是占用空间大，只安装构建也能解决问题 \n\n在其中标题栏选择下载一栏，并在下载的搜索框键入：build tools，并回车进入下载界面  \n\n下载如图的工具，下载完成以后是一个ISO结尾的光盘映射文件，注意下载的时候将类型改为DVD![](https://s2.loli.net/2024/02/29/IjWZexPbcrX4ziv.png)  \n\n双击运行该光盘映射文件，点击exe文件，一路进行安装 \n\n![](https://s2.loli.net/2024/02/29/TiVSqzGMhrpuelQ.png)  \n\n按图片勾选的工具进行安装，即可解决\n\n<!-- endtab -->\n\n<!-- tab Linux平台解决思路 -->\n下载依赖\n```bash\nsudo apt install g++ make\n```\n<!-- endtab -->\n{% endtabs %}\n\n解决完问题接下来就继续`pip`安装即可。\n\n\n## 2.2 MMCV工具安装\n#### 问题：\n```bash\n(bevdet) root@wahaha-System-Product-Name:/media/wahaha/222/BEVDet/bev/BEVDet2/BEVDet# python tools/create_data_bevdet.py                                   /root/miniconda3/envs/bevdet/lib/python3.8/site-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\n  warnings.warn(\nTraceback (most recent call last):\n  File \"tools/create_data_bevdet.py\", line 9, in <module>\n    from tools.data_converter import nuscenes_converter as nuscenes_converter\n  File \"/media/wahaha/222/BEVDet/bev/BEVDet2/BEVDet/tools/data_converter/nuscenes_converter.py\", line 14, in <module>\n    from mmdet3d.core.bbox import points_cam2img\n  File \"/media/wahaha/222/BEVDet/bev/BEVDet2/BEVDet/mmdet3d/__init__.py\", line 4, in <module>\n    import mmdet\n  File \"/root/miniconda3/envs/bevdet/lib/python3.8/site-packages/mmdet/__init__.py\", line 24, in <module>\n    assert (mmcv_version >= digit_version(mmcv_minimum_version)\nAssertionError: MMCV==1.7.0 is used but incompatible. Please install mmcv>=1.3.17, <=1.6.0.\n```\n在运行脚本创建数据集时，按照官方配置安装的MMCV工具提示版本不兼容，需要安装其他版本的，但是安装完所推荐的版本，又会提示不兼容，安装其他的版本，反复横跳 \n\n#### 解决思路\n自己修改MMCV工具版本需求范围\n打开MMCV工具目录，找到`__init__.py`文件，找到如下的[范围](https://s2.loli.net/2024/02/29/JMU9wfo3mdEgVHx.png) \n把这三个文件的`__init__.py`文件中的MMCV_MIN,MMCV_MAX改成包含你现在拥有的版本，忽略版本范围\n![如图](https://s2.loli.net/2024/02/29/PTVHlDAIMZWr4aG.png)\n![如图](https://s2.loli.net/2024/02/29/PBhF3rvkVtjAWlS.png)\n再次运行脚本，发现脚本运行成功\n![](https://s2.loli.net/2024/02/29/HfIUOBLZX6YmWAp.png)\n自动生成了训练集与验证集\n\n## 2.3 其他问题···\n\n\n\n# 3.数据集的创建\n{% note info flat %}\n参考：[https://blog.csdn.net/h904798869/article/details/133363474](https://blog.csdn.net/h904798869/article/details/133363474) \n参考：[https://blog.csdn.net/h904798869/article/details/130317240?spm=1001.2014.3001.5502](https://blog.csdn.net/h904798869/article/details/130317240?spm=1001.2014.3001.5502)\n{% endnote %}\n\n## 3.1 下载数据集\n[nuscenes下载地址](https://www.nuscenes.org/nuscenes#download)\n下载细节参考 [FastBEV](https://blog.csdn.net/h904798869/article/details/130317240?spm=1001.2014.3001.5502)\n\n由于我们使用的mini数据集进行测试，而源码中需要full数据集，将v1.0-mini复制一份并命名为v1.0-trainval``./data\n文件结构如下：\n```bash\ndata\n  └──nuscenes\n    ├── gts\n    ├── maps\n    ├── samples\n    ├── sweeps\n    ├── v1.0-mini\n    └── v1.0-trainval  # 复制的文件夹\n\n```\n## 3.2 生成bevdet数据集\n运行tools/create_data_bevdet.py生成数据集\n\n```python\npython tools/create_data_bevdet.py\n```\n\n结果如图：\n![](https://s2.loli.net/2024/02/29/HfIUOBLZX6YmWAp.png)\n\n# 4.测试\n首先通过测试来实现论文效果，直接使用官方训练好的权重，[详情请见](https://github.com/HuangJunJie2017/BEVDet/blob/dev2.1/README.md)，[官方权重](https://pan.baidu.com/s/1237QyV18zvRJ1pU3YzRItw?pwd=npe1#list/path=%2F)\n```python\npython tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --eval mAP\n``` \n\n\n# 5.可视化\n## 5.1 生成json\n```bash\n# 运行test.py 必须--out\", \"--eval\", \"--format-only\", \"--show\" or \"--show-dir至少跟一个\n# json文件生成需要增加 --eval-options参数 jsonfile_prefix=test_dirs\n# 实在搞不清楚请看test.py的源码，看如何加载参数即可\n\n# 1 直接测试\npython tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --format-only\n\n# 2 测试保存json文件\npython tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --format-only --eval-options jsonfile_prefix=test_dirs\n# 保留json位于目录test_dirs下\n\n# 3 直接生成保存为pkl格式\npython tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --out=./test_dirs/out.pkl\n\n```\n\n## 5.2 json文件转可视化\n```python\npython tools/analysis_tools/vis.py ./work_dir/results_nusc.json\n```\n生成视频./vis/vis.mp4文件, 如下：\n<video\nsrc=\"/img/WeChat_20240229225803.mp4\" controls=\"\"\nheight=400 \nwidth=600> \n</video>\n\n# 6.训练\n![](https://cdnimg103.lizhi.fm/audio_cover/2017/08/17/2619367354329486855_580x580.jpg)\n\n\n# 7. 鸣谢\n{% note info flat %}\n最感谢的是LHL小可爱的支持和努力，解决了无数的问题，完成了配置测试\n{% endnote %}\n\n","slug":"BEVDet","published":1,"updated":"2024-12-31T11:25:59.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6inr0005mkttckqqdmwo","content":"<h1>1.环境配置</h1>\n<div class=\"note info flat\"><p>参考：<a href=\"https://github.com/HuangJunJie2017/BEVDet\">官方文档</a><br>\n参考：<a href=\"https://blog.csdn.net/h904798869/article/details/133363474\">BEVDet复现</a></p>\n</div>\n<h2 id=\"1-基本配置\">1. 基本配置</h2>\n<p>需求：ubuntu20.04，python-3.8, torch1.13.0, cuda-11.7, cudnn-8.6, conda<br>\n<a href=\"https://blog.csdn.net/h904798869/article/details/131719404\">未安装可以参考</a></p>\n<h2 id=\"2-基本依赖\">2. 基本依赖</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install -y vim libsm6 libxext6 libxrender-dev libgl1-mesa-glx git wget libssl-dev libopencv-dev libspdlog-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-拉取源码\">3. 拉取源码</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 下载源码   目前默认是dev3.1</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/HuangJunJie2017/BEVDet.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 查看代码版本号 显示dev3.1版本</span></span><br><span class=\"line\">git checkout</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 如果要切换版本号，如dev2.1，输入</span></span><br><span class=\"line\">git checkout dev2.1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-配置bevdet的python虚拟环境\">4. 配置bevdet的python虚拟环境</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 创建虚拟环境</span></span><br><span class=\"line\">conda create -n bevdet python=3.8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 激活python环境</span></span><br><span class=\"line\">conda activate bevdet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 虚拟环境bevdet中安装torch</span></span><br><span class=\"line\">pip install torch==1.13.0+cu117 torchvision==0.14.0+cu117 torchaudio==0.13.0 --extra-index-url https://download.pytorch.org/whl/cu117</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4 虚拟环境bevdet中安装openlib相关库</span></span><br><span class=\"line\">pip install mmcv-full==1.5.3 onnxruntime-gpu==1.8.1 mmdet==2.25.1 mmsegmentation==0.25.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5 进入BEVDet工程目录,安装mmdet3d</span></span><br><span class=\"line\">pip install -e -v .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6 安装其他依赖 numpy==1.23.4 setuptools==58.2.0等</span></span><br><span class=\"line\">pip install pycuda lyft_dataset_sdk networkx==2.2 numba==0.53.0 numpy==1.23.4 nuscenes-devkit plyfile scikit-image tensorboard trimesh==2.35.39 setuptools==58.2.0 yapf==0.40.1</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<h1>2. 解决问题</h1>\n<h2 id=\"2-1-pip装包编译错误\">2.1 pip装包编译错误</h2>\n<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/h904798869/article/details/131719404\">https://blog.csdn.net/h904798869/article/details/131719404</a><br>\n参考：<a href=\"https://blog.csdn.net/weixin_62075168/article/details/129758163\">https://blog.csdn.net/weixin_62075168/article/details/129758163</a></p>\n</div>\n<h4 id=\"问题：\">问题：</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    src/cpp/cuda.hpp:14:10: fatal error: cuda.h: 没有那个文件或目录</span><br><span class=\"line\">       <span class=\"comment\">#include &lt;cuda.h&gt;</span></span><br><span class=\"line\">                ^~~~~~~~</span><br><span class=\"line\">      compilation terminated.</span><br><span class=\"line\">      /tmp/pip-build-env-lze7ntp3/overlay/lib/python3.8/site-packages/setuptools/command/build_py.py:207: _Warning: Package <span class=\"string\">&#x27;pycuda.cuda&#x27;</span> is absent from the `pa                                                                              ckages` configuration.</span><br><span class=\"line\">      !!</span><br><span class=\"line\"></span><br><span class=\"line\">              ********************************************************************************</span><br><span class=\"line\">              <span class=\"comment\">############################</span></span><br><span class=\"line\">              <span class=\"comment\"># Package would be ignored #</span></span><br><span class=\"line\">              <span class=\"comment\">############################</span></span><br><span class=\"line\">              Python recognizes <span class=\"string\">&#x27;pycuda.cuda&#x27;</span> as an importable package[^1],</span><br><span class=\"line\">              but it is absent from setuptools<span class=\"string\">&#x27; `packages` configuration.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">              This leads to an ambiguous overall configuration. If you want to distribute this</span></span><br><span class=\"line\"><span class=\"string\">              package, please make sure that &#x27;</span>pycuda.cuda<span class=\"string\">&#x27; is explicitly added</span></span><br><span class=\"line\"><span class=\"string\">              to the `packages` configuration field.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">              Alternatively, you can also rely on setuptools&#x27;</span> discovery methods</span><br><span class=\"line\">              (<span class=\"keyword\">for</span> example by using `find_namespace_packages(...)`/`find_namespace:`</span><br><span class=\"line\">              instead of `find_packages(...)`/`find:`).</span><br><span class=\"line\"></span><br><span class=\"line\">              You can <span class=\"built_in\">read</span> more about <span class=\"string\">&quot;package discovery&quot;</span> on setuptools documentation page:</span><br><span class=\"line\"></span><br><span class=\"line\">              - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html</span><br><span class=\"line\"></span><br><span class=\"line\">              If you don<span class=\"string\">&#x27;t want &#x27;</span>pycuda.cuda<span class=\"string\">&#x27; to be distributed and are</span></span><br><span class=\"line\"><span class=\"string\">              already explicitly excluding &#x27;</span>pycuda.cuda<span class=\"string\">&#x27; via</span></span><br><span class=\"line\"><span class=\"string\">              `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,</span></span><br><span class=\"line\"><span class=\"string\">              you can try to use `exclude_package_data`, or `include-package-data=False` in</span></span><br><span class=\"line\"><span class=\"string\">              combination with a more fine grained `package-data` configuration.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">              You can read more about &quot;package data files&quot; on setuptools documentation page:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">              - https://setuptools.pypa.io/en/latest/userguide/datafiles.html</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">              [^1]: For Python, any directory (with suitable naming) can be imported,</span></span><br><span class=\"line\"><span class=\"string\">                    even if it does not contain any `.py` files.</span></span><br><span class=\"line\"><span class=\"string\">                    On the other hand, currently there is no concept of package data</span></span><br><span class=\"line\"><span class=\"string\">                    directory, all directories are treated like packages.</span></span><br><span class=\"line\"><span class=\"string\">              ********************************************************************************</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      !!</span></span><br><span class=\"line\"><span class=\"string\">        check.warn(importable)</span></span><br><span class=\"line\"><span class=\"string\">      error: command &#x27;</span>/usr/bin/gcc<span class=\"string\">&#x27; failed with exit code 1</span></span><br><span class=\"line\"><span class=\"string\">      [end of output]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  note: This error originates from a subprocess, and is likely not a problem with pip.</span></span><br><span class=\"line\"><span class=\"string\">  ERROR: Failed building wheel for pycuda</span></span><br><span class=\"line\"><span class=\"string\">Failed to build pycuda</span></span><br><span class=\"line\"><span class=\"string\">ERROR: Could not build wheels for pycuda, which is required to install pyproject.toml-based projects</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"解决思路：\">解决思路：</h4>\n<p><code>required to install pyproject.toml-based projects</code>这个问题主要出现在C++构建工具未安装</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">Windows平台解决思路</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">Linux平台解决思路</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><p>在Windows平台安装比较繁琐，首先要下载<a href=\"https://go.microsoft.com/fwlink/?linkid=836911\">Vs</a>,一般来说可以直接安装Visual Studio，但是占用空间大，只安装构建也能解决问题</p>\n<p>在其中标题栏选择下载一栏，并在下载的搜索框键入：build tools，并回车进入下载界面</p>\n<p>下载如图的工具，下载完成以后是一个ISO结尾的光盘映射文件，注意下载的时候将类型改为DVD<img src=\"https://s2.loli.net/2024/02/29/IjWZexPbcrX4ziv.png\" alt=\"\"></p>\n<p>双击运行该光盘映射文件，点击exe文件，一路进行安装</p>\n<p><img src=\"https://s2.loli.net/2024/02/29/TiVSqzGMhrpuelQ.png\" alt=\"\"></p>\n<p>按图片勾选的工具进行安装，即可解决</p></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>下载依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install g++ make</span><br></pre></td></tr></table></figure></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<p>解决完问题接下来就继续<code>pip</code>安装即可。</p>\n<h2 id=\"2-2-MMCV工具安装\">2.2 MMCV工具安装</h2>\n<h4 id=\"问题：-2\">问题：</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(bevdet) root@wahaha-System-Product-Name:/media/wahaha/222/BEVDet/bev/BEVDet2/BEVDet<span class=\"comment\"># python tools/create_data_bevdet.py                                   /root/miniconda3/envs/bevdet/lib/python3.8/site-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.</span></span><br><span class=\"line\">  warnings.warn(</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;tools/create_data_bevdet.py&quot;</span>, line 9, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    from tools.data_converter import nuscenes_converter as nuscenes_converter</span><br><span class=\"line\">  File <span class=\"string\">&quot;/media/wahaha/222/BEVDet/bev/BEVDet2/BEVDet/tools/data_converter/nuscenes_converter.py&quot;</span>, line 14, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    from mmdet3d.core.bbox import points_cam2img</span><br><span class=\"line\">  File <span class=\"string\">&quot;/media/wahaha/222/BEVDet/bev/BEVDet2/BEVDet/mmdet3d/__init__.py&quot;</span>, line 4, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    import mmdet</span><br><span class=\"line\">  File <span class=\"string\">&quot;/root/miniconda3/envs/bevdet/lib/python3.8/site-packages/mmdet/__init__.py&quot;</span>, line 24, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    assert (mmcv_version &gt;= digit_version(mmcv_minimum_version)</span><br><span class=\"line\">AssertionError: MMCV==1.7.0 is used but incompatible. Please install mmcv&gt;=1.3.17, &lt;=1.6.0.</span><br></pre></td></tr></table></figure>\n<p>在运行脚本创建数据集时，按照官方配置安装的MMCV工具提示版本不兼容，需要安装其他版本的，但是安装完所推荐的版本，又会提示不兼容，安装其他的版本，反复横跳</p>\n<h4 id=\"解决思路\">解决思路</h4>\n<p>自己修改MMCV工具版本需求范围<br>\n打开MMCV工具目录，找到<code>__init__.py</code>文件，找到如下的<a href=\"https://s2.loli.net/2024/02/29/JMU9wfo3mdEgVHx.png\">范围</a><br>\n把这三个文件的<code>__init__.py</code>文件中的MMCV_MIN,MMCV_MAX改成包含你现在拥有的版本，忽略版本范围<br>\n<img src=\"https://s2.loli.net/2024/02/29/PTVHlDAIMZWr4aG.png\" alt=\"如图\"><br>\n<img src=\"https://s2.loli.net/2024/02/29/PBhF3rvkVtjAWlS.png\" alt=\"如图\"><br>\n再次运行脚本，发现脚本运行成功<br>\n<img src=\"https://s2.loli.net/2024/02/29/HfIUOBLZX6YmWAp.png\" alt=\"\"><br>\n自动生成了训练集与验证集</p>\n<h2 id=\"2-3-其他问题···\">2.3 其他问题···</h2>\n<h1>3.数据集的创建</h1>\n<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/h904798869/article/details/133363474\">https://blog.csdn.net/h904798869/article/details/133363474</a><br>\n参考：<a href=\"https://blog.csdn.net/h904798869/article/details/130317240?spm=1001.2014.3001.5502\">https://blog.csdn.net/h904798869/article/details/130317240?spm=1001.2014.3001.5502</a></p>\n</div>\n<h2 id=\"3-1-下载数据集\">3.1 下载数据集</h2>\n<p><a href=\"https://www.nuscenes.org/nuscenes#download\">nuscenes下载地址</a><br>\n下载细节参考 <a href=\"https://blog.csdn.net/h904798869/article/details/130317240?spm=1001.2014.3001.5502\">FastBEV</a></p>\n<p>由于我们使用的mini数据集进行测试，而源码中需要full数据集，将v1.0-mini复制一份并命名为v1.0-trainval``./data<br>\n文件结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">data</span><br><span class=\"line\">  └──nuscenes</span><br><span class=\"line\">    ├── gts</span><br><span class=\"line\">    ├── maps</span><br><span class=\"line\">    ├── samples</span><br><span class=\"line\">    ├── sweeps</span><br><span class=\"line\">    ├── v1.0-mini</span><br><span class=\"line\">    └── v1.0-trainval  <span class=\"comment\"># 复制的文件夹</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-生成bevdet数据集\">3.2 生成bevdet数据集</h2>\n<p>运行tools/create_data_bevdet.py生成数据集</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python tools/create_data_bevdet.py</span><br></pre></td></tr></table></figure>\n<p>结果如图：<br>\n<img src=\"https://s2.loli.net/2024/02/29/HfIUOBLZX6YmWAp.png\" alt=\"\"></p>\n<h1>4.测试</h1>\n<p>首先通过测试来实现论文效果，直接使用官方训练好的权重，<a href=\"https://github.com/HuangJunJie2017/BEVDet/blob/dev2.1/README.md\">详情请见</a>，<a href=\"https://pan.baidu.com/s/1237QyV18zvRJ1pU3YzRItw?pwd=npe1#list/path=%2F\">官方权重</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --<span class=\"built_in\">eval</span> mAP</span><br></pre></td></tr></table></figure>\n<h1>5.可视化</h1>\n<h2 id=\"5-1-生成json\">5.1 生成json</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 运行test.py 必须--out&quot;, &quot;--eval&quot;, &quot;--format-only&quot;, &quot;--show&quot; or &quot;--show-dir至少跟一个</span></span><br><span class=\"line\"><span class=\"comment\"># json文件生成需要增加 --eval-options参数 jsonfile_prefix=test_dirs</span></span><br><span class=\"line\"><span class=\"comment\"># 实在搞不清楚请看test.py的源码，看如何加载参数即可</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 直接测试</span></span><br><span class=\"line\">python tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --format-only</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 测试保存json文件</span></span><br><span class=\"line\">python tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --format-only --eval-options jsonfile_prefix=test_dirs</span><br><span class=\"line\"><span class=\"comment\"># 保留json位于目录test_dirs下</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 直接生成保存为pkl格式</span></span><br><span class=\"line\">python tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --out=./test_dirs/out.pkl</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2-json文件转可视化\">5.2 json文件转可视化</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python tools/analysis_tools/vis.py ./work_dir/results_nusc.json</span><br></pre></td></tr></table></figure>\n<p>生成视频./vis/vis.mp4文件, 如下：<br>\n<video\nsrc=\"/img/WeChat_20240229225803.mp4\" controls=\"\"\nheight=400 \nwidth=600><br>\n</video></p>\n<h1>6.训练</h1>\n<p><img src=\"https://cdnimg103.lizhi.fm/audio_cover/2017/08/17/2619367354329486855_580x580.jpg\" alt=\"\"></p>\n<h1>7. 鸣谢</h1>\n<div class=\"note info flat\"><p>最感谢的是LHL小可爱的支持和努力，解决了无数的问题，完成了配置测试</p>\n</div>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>1.环境配置</h1>\n<div class=\"note info flat\"><p>参考：<a href=\"https://github.com/HuangJunJie2017/BEVDet\">官方文档</a><br>\n参考：<a href=\"https://blog.csdn.net/h904798869/article/details/133363474\">BEVDet复现</a></p>\n</div>\n<h2 id=\"1-基本配置\">1. 基本配置</h2>\n<p>需求：ubuntu20.04，python-3.8, torch1.13.0, cuda-11.7, cudnn-8.6, conda<br>\n<a href=\"https://blog.csdn.net/h904798869/article/details/131719404\">未安装可以参考</a></p>\n<h2 id=\"2-基本依赖\">2. 基本依赖</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install -y vim libsm6 libxext6 libxrender-dev libgl1-mesa-glx git wget libssl-dev libopencv-dev libspdlog-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-拉取源码\">3. 拉取源码</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 下载源码   目前默认是dev3.1</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/HuangJunJie2017/BEVDet.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 查看代码版本号 显示dev3.1版本</span></span><br><span class=\"line\">git checkout</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 如果要切换版本号，如dev2.1，输入</span></span><br><span class=\"line\">git checkout dev2.1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-配置bevdet的python虚拟环境\">4. 配置bevdet的python虚拟环境</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 创建虚拟环境</span></span><br><span class=\"line\">conda create -n bevdet python=3.8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 激活python环境</span></span><br><span class=\"line\">conda activate bevdet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 虚拟环境bevdet中安装torch</span></span><br><span class=\"line\">pip install torch==1.13.0+cu117 torchvision==0.14.0+cu117 torchaudio==0.13.0 --extra-index-url https://download.pytorch.org/whl/cu117</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4 虚拟环境bevdet中安装openlib相关库</span></span><br><span class=\"line\">pip install mmcv-full==1.5.3 onnxruntime-gpu==1.8.1 mmdet==2.25.1 mmsegmentation==0.25.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5 进入BEVDet工程目录,安装mmdet3d</span></span><br><span class=\"line\">pip install -e -v .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6 安装其他依赖 numpy==1.23.4 setuptools==58.2.0等</span></span><br><span class=\"line\">pip install pycuda lyft_dataset_sdk networkx==2.2 numba==0.53.0 numpy==1.23.4 nuscenes-devkit plyfile scikit-image tensorboard trimesh==2.35.39 setuptools==58.2.0 yapf==0.40.1</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<h1>2. 解决问题</h1>\n<h2 id=\"2-1-pip装包编译错误\">2.1 pip装包编译错误</h2>\n<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/h904798869/article/details/131719404\">https://blog.csdn.net/h904798869/article/details/131719404</a><br>\n参考：<a href=\"https://blog.csdn.net/weixin_62075168/article/details/129758163\">https://blog.csdn.net/weixin_62075168/article/details/129758163</a></p>\n</div>\n<h4 id=\"问题：\">问题：</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    src/cpp/cuda.hpp:14:10: fatal error: cuda.h: 没有那个文件或目录</span><br><span class=\"line\">       <span class=\"comment\">#include &lt;cuda.h&gt;</span></span><br><span class=\"line\">                ^~~~~~~~</span><br><span class=\"line\">      compilation terminated.</span><br><span class=\"line\">      /tmp/pip-build-env-lze7ntp3/overlay/lib/python3.8/site-packages/setuptools/command/build_py.py:207: _Warning: Package <span class=\"string\">&#x27;pycuda.cuda&#x27;</span> is absent from the `pa                                                                              ckages` configuration.</span><br><span class=\"line\">      !!</span><br><span class=\"line\"></span><br><span class=\"line\">              ********************************************************************************</span><br><span class=\"line\">              <span class=\"comment\">############################</span></span><br><span class=\"line\">              <span class=\"comment\"># Package would be ignored #</span></span><br><span class=\"line\">              <span class=\"comment\">############################</span></span><br><span class=\"line\">              Python recognizes <span class=\"string\">&#x27;pycuda.cuda&#x27;</span> as an importable package[^1],</span><br><span class=\"line\">              but it is absent from setuptools<span class=\"string\">&#x27; `packages` configuration.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">              This leads to an ambiguous overall configuration. If you want to distribute this</span></span><br><span class=\"line\"><span class=\"string\">              package, please make sure that &#x27;</span>pycuda.cuda<span class=\"string\">&#x27; is explicitly added</span></span><br><span class=\"line\"><span class=\"string\">              to the `packages` configuration field.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">              Alternatively, you can also rely on setuptools&#x27;</span> discovery methods</span><br><span class=\"line\">              (<span class=\"keyword\">for</span> example by using `find_namespace_packages(...)`/`find_namespace:`</span><br><span class=\"line\">              instead of `find_packages(...)`/`find:`).</span><br><span class=\"line\"></span><br><span class=\"line\">              You can <span class=\"built_in\">read</span> more about <span class=\"string\">&quot;package discovery&quot;</span> on setuptools documentation page:</span><br><span class=\"line\"></span><br><span class=\"line\">              - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html</span><br><span class=\"line\"></span><br><span class=\"line\">              If you don<span class=\"string\">&#x27;t want &#x27;</span>pycuda.cuda<span class=\"string\">&#x27; to be distributed and are</span></span><br><span class=\"line\"><span class=\"string\">              already explicitly excluding &#x27;</span>pycuda.cuda<span class=\"string\">&#x27; via</span></span><br><span class=\"line\"><span class=\"string\">              `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,</span></span><br><span class=\"line\"><span class=\"string\">              you can try to use `exclude_package_data`, or `include-package-data=False` in</span></span><br><span class=\"line\"><span class=\"string\">              combination with a more fine grained `package-data` configuration.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">              You can read more about &quot;package data files&quot; on setuptools documentation page:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">              - https://setuptools.pypa.io/en/latest/userguide/datafiles.html</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">              [^1]: For Python, any directory (with suitable naming) can be imported,</span></span><br><span class=\"line\"><span class=\"string\">                    even if it does not contain any `.py` files.</span></span><br><span class=\"line\"><span class=\"string\">                    On the other hand, currently there is no concept of package data</span></span><br><span class=\"line\"><span class=\"string\">                    directory, all directories are treated like packages.</span></span><br><span class=\"line\"><span class=\"string\">              ********************************************************************************</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      !!</span></span><br><span class=\"line\"><span class=\"string\">        check.warn(importable)</span></span><br><span class=\"line\"><span class=\"string\">      error: command &#x27;</span>/usr/bin/gcc<span class=\"string\">&#x27; failed with exit code 1</span></span><br><span class=\"line\"><span class=\"string\">      [end of output]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  note: This error originates from a subprocess, and is likely not a problem with pip.</span></span><br><span class=\"line\"><span class=\"string\">  ERROR: Failed building wheel for pycuda</span></span><br><span class=\"line\"><span class=\"string\">Failed to build pycuda</span></span><br><span class=\"line\"><span class=\"string\">ERROR: Could not build wheels for pycuda, which is required to install pyproject.toml-based projects</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"解决思路：\">解决思路：</h4>\n<p><code>required to install pyproject.toml-based projects</code>这个问题主要出现在C++构建工具未安装</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">Windows平台解决思路</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">Linux平台解决思路</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><p>在Windows平台安装比较繁琐，首先要下载<a href=\"https://go.microsoft.com/fwlink/?linkid=836911\">Vs</a>,一般来说可以直接安装Visual Studio，但是占用空间大，只安装构建也能解决问题</p>\n<p>在其中标题栏选择下载一栏，并在下载的搜索框键入：build tools，并回车进入下载界面</p>\n<p>下载如图的工具，下载完成以后是一个ISO结尾的光盘映射文件，注意下载的时候将类型改为DVD<img src=\"https://s2.loli.net/2024/02/29/IjWZexPbcrX4ziv.png\" alt=\"\"></p>\n<p>双击运行该光盘映射文件，点击exe文件，一路进行安装</p>\n<p><img src=\"https://s2.loli.net/2024/02/29/TiVSqzGMhrpuelQ.png\" alt=\"\"></p>\n<p>按图片勾选的工具进行安装，即可解决</p></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>下载依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install g++ make</span><br></pre></td></tr></table></figure></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<p>解决完问题接下来就继续<code>pip</code>安装即可。</p>\n<h2 id=\"2-2-MMCV工具安装\">2.2 MMCV工具安装</h2>\n<h4 id=\"问题：-2\">问题：</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(bevdet) root@wahaha-System-Product-Name:/media/wahaha/222/BEVDet/bev/BEVDet2/BEVDet<span class=\"comment\"># python tools/create_data_bevdet.py                                   /root/miniconda3/envs/bevdet/lib/python3.8/site-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.</span></span><br><span class=\"line\">  warnings.warn(</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;tools/create_data_bevdet.py&quot;</span>, line 9, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    from tools.data_converter import nuscenes_converter as nuscenes_converter</span><br><span class=\"line\">  File <span class=\"string\">&quot;/media/wahaha/222/BEVDet/bev/BEVDet2/BEVDet/tools/data_converter/nuscenes_converter.py&quot;</span>, line 14, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    from mmdet3d.core.bbox import points_cam2img</span><br><span class=\"line\">  File <span class=\"string\">&quot;/media/wahaha/222/BEVDet/bev/BEVDet2/BEVDet/mmdet3d/__init__.py&quot;</span>, line 4, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    import mmdet</span><br><span class=\"line\">  File <span class=\"string\">&quot;/root/miniconda3/envs/bevdet/lib/python3.8/site-packages/mmdet/__init__.py&quot;</span>, line 24, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    assert (mmcv_version &gt;= digit_version(mmcv_minimum_version)</span><br><span class=\"line\">AssertionError: MMCV==1.7.0 is used but incompatible. Please install mmcv&gt;=1.3.17, &lt;=1.6.0.</span><br></pre></td></tr></table></figure>\n<p>在运行脚本创建数据集时，按照官方配置安装的MMCV工具提示版本不兼容，需要安装其他版本的，但是安装完所推荐的版本，又会提示不兼容，安装其他的版本，反复横跳</p>\n<h4 id=\"解决思路\">解决思路</h4>\n<p>自己修改MMCV工具版本需求范围<br>\n打开MMCV工具目录，找到<code>__init__.py</code>文件，找到如下的<a href=\"https://s2.loli.net/2024/02/29/JMU9wfo3mdEgVHx.png\">范围</a><br>\n把这三个文件的<code>__init__.py</code>文件中的MMCV_MIN,MMCV_MAX改成包含你现在拥有的版本，忽略版本范围<br>\n<img src=\"https://s2.loli.net/2024/02/29/PTVHlDAIMZWr4aG.png\" alt=\"如图\"><br>\n<img src=\"https://s2.loli.net/2024/02/29/PBhF3rvkVtjAWlS.png\" alt=\"如图\"><br>\n再次运行脚本，发现脚本运行成功<br>\n<img src=\"https://s2.loli.net/2024/02/29/HfIUOBLZX6YmWAp.png\" alt=\"\"><br>\n自动生成了训练集与验证集</p>\n<h2 id=\"2-3-其他问题···\">2.3 其他问题···</h2>\n<h1>3.数据集的创建</h1>\n<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/h904798869/article/details/133363474\">https://blog.csdn.net/h904798869/article/details/133363474</a><br>\n参考：<a href=\"https://blog.csdn.net/h904798869/article/details/130317240?spm=1001.2014.3001.5502\">https://blog.csdn.net/h904798869/article/details/130317240?spm=1001.2014.3001.5502</a></p>\n</div>\n<h2 id=\"3-1-下载数据集\">3.1 下载数据集</h2>\n<p><a href=\"https://www.nuscenes.org/nuscenes#download\">nuscenes下载地址</a><br>\n下载细节参考 <a href=\"https://blog.csdn.net/h904798869/article/details/130317240?spm=1001.2014.3001.5502\">FastBEV</a></p>\n<p>由于我们使用的mini数据集进行测试，而源码中需要full数据集，将v1.0-mini复制一份并命名为v1.0-trainval``./data<br>\n文件结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">data</span><br><span class=\"line\">  └──nuscenes</span><br><span class=\"line\">    ├── gts</span><br><span class=\"line\">    ├── maps</span><br><span class=\"line\">    ├── samples</span><br><span class=\"line\">    ├── sweeps</span><br><span class=\"line\">    ├── v1.0-mini</span><br><span class=\"line\">    └── v1.0-trainval  <span class=\"comment\"># 复制的文件夹</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-生成bevdet数据集\">3.2 生成bevdet数据集</h2>\n<p>运行tools/create_data_bevdet.py生成数据集</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python tools/create_data_bevdet.py</span><br></pre></td></tr></table></figure>\n<p>结果如图：<br>\n<img src=\"https://s2.loli.net/2024/02/29/HfIUOBLZX6YmWAp.png\" alt=\"\"></p>\n<h1>4.测试</h1>\n<p>首先通过测试来实现论文效果，直接使用官方训练好的权重，<a href=\"https://github.com/HuangJunJie2017/BEVDet/blob/dev2.1/README.md\">详情请见</a>，<a href=\"https://pan.baidu.com/s/1237QyV18zvRJ1pU3YzRItw?pwd=npe1#list/path=%2F\">官方权重</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --<span class=\"built_in\">eval</span> mAP</span><br></pre></td></tr></table></figure>\n<h1>5.可视化</h1>\n<h2 id=\"5-1-生成json\">5.1 生成json</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 运行test.py 必须--out&quot;, &quot;--eval&quot;, &quot;--format-only&quot;, &quot;--show&quot; or &quot;--show-dir至少跟一个</span></span><br><span class=\"line\"><span class=\"comment\"># json文件生成需要增加 --eval-options参数 jsonfile_prefix=test_dirs</span></span><br><span class=\"line\"><span class=\"comment\"># 实在搞不清楚请看test.py的源码，看如何加载参数即可</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 直接测试</span></span><br><span class=\"line\">python tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --format-only</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 测试保存json文件</span></span><br><span class=\"line\">python tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --format-only --eval-options jsonfile_prefix=test_dirs</span><br><span class=\"line\"><span class=\"comment\"># 保留json位于目录test_dirs下</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 直接生成保存为pkl格式</span></span><br><span class=\"line\">python tools/test.py ./configs/bevdet/bevdet-r50.py ckpts/bevdet-r50.pth --out=./test_dirs/out.pkl</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2-json文件转可视化\">5.2 json文件转可视化</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python tools/analysis_tools/vis.py ./work_dir/results_nusc.json</span><br></pre></td></tr></table></figure>\n<p>生成视频./vis/vis.mp4文件, 如下：<br>\n<video\nsrc=\"/img/WeChat_20240229225803.mp4\" controls=\"\"\nheight=400 \nwidth=600><br>\n</video></p>\n<h1>6.训练</h1>\n<p><img src=\"https://cdnimg103.lizhi.fm/audio_cover/2017/08/17/2619367354329486855_580x580.jpg\" alt=\"\"></p>\n<h1>7. 鸣谢</h1>\n<div class=\"note info flat\"><p>最感谢的是LHL小可爱的支持和努力，解决了无数的问题，完成了配置测试</p>\n</div>\n"},{"layout":"嵌入式linux","title":"Buildroot","date":"2025-02-06T11:31:46.000Z","_content":"\n# 参考文章\n{% link Linux发行版列表, https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88%E5%88%97%E8%A1%A8, https://image.aruoshui.fun/i/2025/02/12/s7cjv0-0.webp %} \n\n\n\n# Linux的启动过程\n![过程](https://image.aruoshui.fun/i/2025/02/12/rb5kqt-0.webp)\n\n# 发行版Linux操作系统\nLinux发行版(也叫做GNUlinux发行版)，为一般用户预先集成好的Linux操作系统及各种应用软件。一般用户不需要重新编泽，在直接安装之后，只需要小幅度更改设置就可以使用，通常以软件包管理系统来进行应用软件的营理，Linux发行板通常包含了包括桌面环境办公包、媒体播放器、数据车等应用软件。这些保作系统通总由Linux内核、以及来自GNU计划的大量的函数库，和基于x Window或者Wayland的图形界面。\n\n## Debian系列\nDebian及其派生发行版使用deb软件包格式，并使用dpkg及其前端作为软件包管理器。\n旗下最著名的就是Ubuntux系列和国内优麒麟和Deepin\n\n## Red Hat系\nRed Hat Linux和SUSE Linux是最早使用RPM格式软件包的发行版，如今RPM格式已广泛运用于众多的发行版。\n旗下最著名的是CentOS\n\n## GNU和Linux\nGNU与Linux是密不可分的\n1. GNU构建系统 - 包含autoconf和automake\n2. GNU make   - GNU make 程序\n3. GNU编译器套装(GNU Compiler Collection)\n4. GNU Debugger-高级调试器(gdb)\n5. GNUC函数库(glibc)-符合POSIX的C语言库\n6. GNU pth-POSIX兼容操作系统的软件线程。\n7. GNU m4-宏处理器\n8. GTK+-GIMP工具包，包含GTK、+GDK和一套GLib库(由GIMP和GNOME使用)\n9. GNOME-GNU网络对象模型环境(GNUNetwork Object Model Environment)GNU的官方桌面。\n10. Bash-GNU的UNIX兼容shell\n11. Coreutils- 基本命令、\n\n# 编译构建系统\n## 交叉编译\n之所以需要交叉编译，就是由于目标平台ARM板资源受限\n![](https://image.aruoshui.fun/i/2025/02/12/z106ea-0.webp)\n\n## 交叉编译工具链\n![工具链](https://image.aruoshui.fun/i/2025/02/13/ny3psg-0.webp)\n- Build(构建机器)，使用GCC的源码，制作交叉编译工具链。 \n- Host(主机)，使用交叉编译工具链，编译出程序。 \n- Target(目标机器)，程序执行的地方\n\n## 工具链元祖\nautoconf 定义了system definitions 的概念，表示为tuples(元组)\n系统定义描述了一个系统:CPU架构、操作系统、芯片厂商、ABI、C库\n定义方式:\n- `<arch>-<vendor>-<os>-<libc/abi>(完整名称)`\n- `<arch>-<os>-<libc/abi>`\n\n![工具链组成](https://image.aruoshui.fun/i/2025/02/13/o12v2i-0.webp)\n\n![裸机和Linux工具链](https://image.aruoshui.fun/i/2025/02/13/p3zc07-0.webp)\n\n## ABI\n调用约定和反汇编就是ABI\n\n详细文章可以看\n{% link 什么是应用程序二进制接口ABI, https://zhuanlan.zhihu.com/p/386106883, https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp %} \n\n## 工具链和SDK的区别\n![区别](https://image.aruoshui.fun/i/2025/02/13/p8085j-0.webp)\n\n## 嵌入式Linux系统的编译构建\n![过程](https://image.aruoshui.fun/i/2025/02/12/z10alx-0.webp)\n\n## 交叉编译工具链\n![说明](https://image.aruoshui.fun/i/2025/02/13/pan0pk-0.webp)\n\n\n## 自动结构构建\n前面展示了编译过程，在之前都是一部分手工编译，现在有了很多自动化编译工具，就比如Buildroot、OpenWrt、Yocto\n\n![alt text](https://image.aruoshui.fun/i/2025/02/12/z10ie9-0.webp)\n\n\n# Buildroot\nbuildroot是Linux平台上一个构建嵌入式Linux系统的框架。整个Buildroot是由Makefile脚本和Kconfig配置文件构成的。你可以和编译Linux内核一样，通过buildroot配置，menuconfig修改，编译出一个完整的可以直接烧写到机器上运行的Linux系统软件(包含boot、kernel、rootfs以及rootfs中的各种库和应用程序)。\n**项目主要特点**\n1. 制作启动映像\n2. 不支持rpm deb等风格的包管理\n3. 系统固件生成器从源代码构建所有组件\n4. 注重简单\n   \n**支持**\n1. 根文件系统映像\n2. 内核、引导加载程序、工具链\n\n## buildroot的使用\n直接看buildroot的官方文档，介绍的相当详细，参考以下文章即可\n{% link buildroot使用介绍, https://blog.csdn.net/maizaozao/article/details/139241440, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n## 具体项目实践\n","source":"_posts/Buildroot.md","raw":"---\nlayout: 嵌入式linux\ntitle: Buildroot\ndate: 2025-02-06 19:31:46\ntags:\ncategories: 嵌入式Linux\n---\n\n# 参考文章\n{% link Linux发行版列表, https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88%E5%88%97%E8%A1%A8, https://image.aruoshui.fun/i/2025/02/12/s7cjv0-0.webp %} \n\n\n\n# Linux的启动过程\n![过程](https://image.aruoshui.fun/i/2025/02/12/rb5kqt-0.webp)\n\n# 发行版Linux操作系统\nLinux发行版(也叫做GNUlinux发行版)，为一般用户预先集成好的Linux操作系统及各种应用软件。一般用户不需要重新编泽，在直接安装之后，只需要小幅度更改设置就可以使用，通常以软件包管理系统来进行应用软件的营理，Linux发行板通常包含了包括桌面环境办公包、媒体播放器、数据车等应用软件。这些保作系统通总由Linux内核、以及来自GNU计划的大量的函数库，和基于x Window或者Wayland的图形界面。\n\n## Debian系列\nDebian及其派生发行版使用deb软件包格式，并使用dpkg及其前端作为软件包管理器。\n旗下最著名的就是Ubuntux系列和国内优麒麟和Deepin\n\n## Red Hat系\nRed Hat Linux和SUSE Linux是最早使用RPM格式软件包的发行版，如今RPM格式已广泛运用于众多的发行版。\n旗下最著名的是CentOS\n\n## GNU和Linux\nGNU与Linux是密不可分的\n1. GNU构建系统 - 包含autoconf和automake\n2. GNU make   - GNU make 程序\n3. GNU编译器套装(GNU Compiler Collection)\n4. GNU Debugger-高级调试器(gdb)\n5. GNUC函数库(glibc)-符合POSIX的C语言库\n6. GNU pth-POSIX兼容操作系统的软件线程。\n7. GNU m4-宏处理器\n8. GTK+-GIMP工具包，包含GTK、+GDK和一套GLib库(由GIMP和GNOME使用)\n9. GNOME-GNU网络对象模型环境(GNUNetwork Object Model Environment)GNU的官方桌面。\n10. Bash-GNU的UNIX兼容shell\n11. Coreutils- 基本命令、\n\n# 编译构建系统\n## 交叉编译\n之所以需要交叉编译，就是由于目标平台ARM板资源受限\n![](https://image.aruoshui.fun/i/2025/02/12/z106ea-0.webp)\n\n## 交叉编译工具链\n![工具链](https://image.aruoshui.fun/i/2025/02/13/ny3psg-0.webp)\n- Build(构建机器)，使用GCC的源码，制作交叉编译工具链。 \n- Host(主机)，使用交叉编译工具链，编译出程序。 \n- Target(目标机器)，程序执行的地方\n\n## 工具链元祖\nautoconf 定义了system definitions 的概念，表示为tuples(元组)\n系统定义描述了一个系统:CPU架构、操作系统、芯片厂商、ABI、C库\n定义方式:\n- `<arch>-<vendor>-<os>-<libc/abi>(完整名称)`\n- `<arch>-<os>-<libc/abi>`\n\n![工具链组成](https://image.aruoshui.fun/i/2025/02/13/o12v2i-0.webp)\n\n![裸机和Linux工具链](https://image.aruoshui.fun/i/2025/02/13/p3zc07-0.webp)\n\n## ABI\n调用约定和反汇编就是ABI\n\n详细文章可以看\n{% link 什么是应用程序二进制接口ABI, https://zhuanlan.zhihu.com/p/386106883, https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp %} \n\n## 工具链和SDK的区别\n![区别](https://image.aruoshui.fun/i/2025/02/13/p8085j-0.webp)\n\n## 嵌入式Linux系统的编译构建\n![过程](https://image.aruoshui.fun/i/2025/02/12/z10alx-0.webp)\n\n## 交叉编译工具链\n![说明](https://image.aruoshui.fun/i/2025/02/13/pan0pk-0.webp)\n\n\n## 自动结构构建\n前面展示了编译过程，在之前都是一部分手工编译，现在有了很多自动化编译工具，就比如Buildroot、OpenWrt、Yocto\n\n![alt text](https://image.aruoshui.fun/i/2025/02/12/z10ie9-0.webp)\n\n\n# Buildroot\nbuildroot是Linux平台上一个构建嵌入式Linux系统的框架。整个Buildroot是由Makefile脚本和Kconfig配置文件构成的。你可以和编译Linux内核一样，通过buildroot配置，menuconfig修改，编译出一个完整的可以直接烧写到机器上运行的Linux系统软件(包含boot、kernel、rootfs以及rootfs中的各种库和应用程序)。\n**项目主要特点**\n1. 制作启动映像\n2. 不支持rpm deb等风格的包管理\n3. 系统固件生成器从源代码构建所有组件\n4. 注重简单\n   \n**支持**\n1. 根文件系统映像\n2. 内核、引导加载程序、工具链\n\n## buildroot的使用\n直接看buildroot的官方文档，介绍的相当详细，参考以下文章即可\n{% link buildroot使用介绍, https://blog.csdn.net/maizaozao/article/details/139241440, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n## 具体项目实践\n","slug":"Buildroot","published":1,"updated":"2025-02-14T11:03:10.704Z","comments":1,"photos":[],"link":"","_id":"cme1h6int0009mktt94vh9760","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"Linux发行版列表\" href=\"https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88%E5%88%97%E8%A1%A8\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/12/s7cjv0-0.webp\"/></div><div class=\"right\"><p class=\"text\">Linux发行版列表</p><p class=\"url\">https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88%E5%88%97%E8%A1%A8</p></div></a></div> \n<h1>Linux的启动过程</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/rb5kqt-0.webp\" alt=\"过程\"></p>\n<h1>发行版Linux操作系统</h1>\n<p>Linux发行版(也叫做GNUlinux发行版)，为一般用户预先集成好的Linux操作系统及各种应用软件。一般用户不需要重新编泽，在直接安装之后，只需要小幅度更改设置就可以使用，通常以软件包管理系统来进行应用软件的营理，Linux发行板通常包含了包括桌面环境办公包、媒体播放器、数据车等应用软件。这些保作系统通总由Linux内核、以及来自GNU计划的大量的函数库，和基于x Window或者Wayland的图形界面。</p>\n<h2 id=\"Debian系列\">Debian系列</h2>\n<p>Debian及其派生发行版使用deb软件包格式，并使用dpkg及其前端作为软件包管理器。<br>\n旗下最著名的就是Ubuntux系列和国内优麒麟和Deepin</p>\n<h2 id=\"Red-Hat系\">Red Hat系</h2>\n<p>Red Hat Linux和SUSE Linux是最早使用RPM格式软件包的发行版，如今RPM格式已广泛运用于众多的发行版。<br>\n旗下最著名的是CentOS</p>\n<h2 id=\"GNU和Linux\">GNU和Linux</h2>\n<p>GNU与Linux是密不可分的</p>\n<ol>\n<li>GNU构建系统 - 包含autoconf和automake</li>\n<li>GNU make   - GNU make 程序</li>\n<li>GNU编译器套装(GNU Compiler Collection)</li>\n<li>GNU Debugger-高级调试器(gdb)</li>\n<li>GNUC函数库(glibc)-符合POSIX的C语言库</li>\n<li>GNU pth-POSIX兼容操作系统的软件线程。</li>\n<li>GNU m4-宏处理器</li>\n<li>GTK±GIMP工具包，包含GTK、+GDK和一套GLib库(由GIMP和GNOME使用)</li>\n<li>GNOME-GNU网络对象模型环境(GNUNetwork Object Model Environment)GNU的官方桌面。</li>\n<li>Bash-GNU的UNIX兼容shell</li>\n<li>Coreutils- 基本命令、</li>\n</ol>\n<h1>编译构建系统</h1>\n<h2 id=\"交叉编译\">交叉编译</h2>\n<p>之所以需要交叉编译，就是由于目标平台ARM板资源受限<br>\n<img src=\"https://image.aruoshui.fun/i/2025/02/12/z106ea-0.webp\" alt=\"\"></p>\n<h2 id=\"交叉编译工具链\">交叉编译工具链</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/13/ny3psg-0.webp\" alt=\"工具链\"></p>\n<ul>\n<li>Build(构建机器)，使用GCC的源码，制作交叉编译工具链。</li>\n<li>Host(主机)，使用交叉编译工具链，编译出程序。</li>\n<li>Target(目标机器)，程序执行的地方</li>\n</ul>\n<h2 id=\"工具链元祖\">工具链元祖</h2>\n<p>autoconf 定义了system definitions 的概念，表示为tuples(元组)<br>\n系统定义描述了一个系统:CPU架构、操作系统、芯片厂商、ABI、C库<br>\n定义方式:</p>\n<ul>\n<li><code>&lt;arch&gt;-&lt;vendor&gt;-&lt;os&gt;-&lt;libc/abi&gt;(完整名称)</code></li>\n<li><code>&lt;arch&gt;-&lt;os&gt;-&lt;libc/abi&gt;</code></li>\n</ul>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/13/o12v2i-0.webp\" alt=\"工具链组成\"></p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/13/p3zc07-0.webp\" alt=\"裸机和Linux工具链\"></p>\n<h2 id=\"ABI\">ABI</h2>\n<p>调用约定和反汇编就是ABI</p>\n<p>详细文章可以看</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"什么是应用程序二进制接口ABI\" href=\"https://zhuanlan.zhihu.com/p/386106883\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">什么是应用程序二进制接口ABI</p><p class=\"url\">https://zhuanlan.zhihu.com/p/386106883</p></div></a></div> \n<h2 id=\"工具链和SDK的区别\">工具链和SDK的区别</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/13/p8085j-0.webp\" alt=\"区别\"></p>\n<h2 id=\"嵌入式Linux系统的编译构建\">嵌入式Linux系统的编译构建</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/z10alx-0.webp\" alt=\"过程\"></p>\n<h2 id=\"交叉编译工具链-2\">交叉编译工具链</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/13/pan0pk-0.webp\" alt=\"说明\"></p>\n<h2 id=\"自动结构构建\">自动结构构建</h2>\n<p>前面展示了编译过程，在之前都是一部分手工编译，现在有了很多自动化编译工具，就比如Buildroot、OpenWrt、Yocto</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/z10ie9-0.webp\" alt=\"alt text\"></p>\n<h1>Buildroot</h1>\n<p>buildroot是Linux平台上一个构建嵌入式Linux系统的框架。整个Buildroot是由Makefile脚本和Kconfig配置文件构成的。你可以和编译Linux内核一样，通过buildroot配置，menuconfig修改，编译出一个完整的可以直接烧写到机器上运行的Linux系统软件(包含boot、kernel、rootfs以及rootfs中的各种库和应用程序)。<br>\n<strong>项目主要特点</strong></p>\n<ol>\n<li>制作启动映像</li>\n<li>不支持rpm deb等风格的包管理</li>\n<li>系统固件生成器从源代码构建所有组件</li>\n<li>注重简单</li>\n</ol>\n<p><strong>支持</strong></p>\n<ol>\n<li>根文件系统映像</li>\n<li>内核、引导加载程序、工具链</li>\n</ol>\n<h2 id=\"buildroot的使用\">buildroot的使用</h2>\n<p>直接看buildroot的官方文档，介绍的相当详细，参考以下文章即可</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"buildroot使用介绍\" href=\"https://blog.csdn.net/maizaozao/article/details/139241440\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">buildroot使用介绍</p><p class=\"url\">https://blog.csdn.net/maizaozao/article/details/139241440</p></div></a></div> \n<h2 id=\"具体项目实践\">具体项目实践</h2>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqvf20-0.webp","cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"Linux发行版列表\" href=\"https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88%E5%88%97%E8%A1%A8\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/12/s7cjv0-0.webp\"/></div><div class=\"right\"><p class=\"text\">Linux发行版列表</p><p class=\"url\">https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88%E5%88%97%E8%A1%A8</p></div></a></div> \n<h1>Linux的启动过程</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/rb5kqt-0.webp\" alt=\"过程\"></p>\n<h1>发行版Linux操作系统</h1>\n<p>Linux发行版(也叫做GNUlinux发行版)，为一般用户预先集成好的Linux操作系统及各种应用软件。一般用户不需要重新编泽，在直接安装之后，只需要小幅度更改设置就可以使用，通常以软件包管理系统来进行应用软件的营理，Linux发行板通常包含了包括桌面环境办公包、媒体播放器、数据车等应用软件。这些保作系统通总由Linux内核、以及来自GNU计划的大量的函数库，和基于x Window或者Wayland的图形界面。</p>\n<h2 id=\"Debian系列\">Debian系列</h2>\n<p>Debian及其派生发行版使用deb软件包格式，并使用dpkg及其前端作为软件包管理器。<br>\n旗下最著名的就是Ubuntux系列和国内优麒麟和Deepin</p>\n<h2 id=\"Red-Hat系\">Red Hat系</h2>\n<p>Red Hat Linux和SUSE Linux是最早使用RPM格式软件包的发行版，如今RPM格式已广泛运用于众多的发行版。<br>\n旗下最著名的是CentOS</p>\n<h2 id=\"GNU和Linux\">GNU和Linux</h2>\n<p>GNU与Linux是密不可分的</p>\n<ol>\n<li>GNU构建系统 - 包含autoconf和automake</li>\n<li>GNU make   - GNU make 程序</li>\n<li>GNU编译器套装(GNU Compiler Collection)</li>\n<li>GNU Debugger-高级调试器(gdb)</li>\n<li>GNUC函数库(glibc)-符合POSIX的C语言库</li>\n<li>GNU pth-POSIX兼容操作系统的软件线程。</li>\n<li>GNU m4-宏处理器</li>\n<li>GTK±GIMP工具包，包含GTK、+GDK和一套GLib库(由GIMP和GNOME使用)</li>\n<li>GNOME-GNU网络对象模型环境(GNUNetwork Object Model Environment)GNU的官方桌面。</li>\n<li>Bash-GNU的UNIX兼容shell</li>\n<li>Coreutils- 基本命令、</li>\n</ol>\n<h1>编译构建系统</h1>\n<h2 id=\"交叉编译\">交叉编译</h2>\n<p>之所以需要交叉编译，就是由于目标平台ARM板资源受限<br>\n<img src=\"https://image.aruoshui.fun/i/2025/02/12/z106ea-0.webp\" alt=\"\"></p>\n<h2 id=\"交叉编译工具链\">交叉编译工具链</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/13/ny3psg-0.webp\" alt=\"工具链\"></p>\n<ul>\n<li>Build(构建机器)，使用GCC的源码，制作交叉编译工具链。</li>\n<li>Host(主机)，使用交叉编译工具链，编译出程序。</li>\n<li>Target(目标机器)，程序执行的地方</li>\n</ul>\n<h2 id=\"工具链元祖\">工具链元祖</h2>\n<p>autoconf 定义了system definitions 的概念，表示为tuples(元组)<br>\n系统定义描述了一个系统:CPU架构、操作系统、芯片厂商、ABI、C库<br>\n定义方式:</p>\n<ul>\n<li><code>&lt;arch&gt;-&lt;vendor&gt;-&lt;os&gt;-&lt;libc/abi&gt;(完整名称)</code></li>\n<li><code>&lt;arch&gt;-&lt;os&gt;-&lt;libc/abi&gt;</code></li>\n</ul>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/13/o12v2i-0.webp\" alt=\"工具链组成\"></p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/13/p3zc07-0.webp\" alt=\"裸机和Linux工具链\"></p>\n<h2 id=\"ABI\">ABI</h2>\n<p>调用约定和反汇编就是ABI</p>\n<p>详细文章可以看</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"什么是应用程序二进制接口ABI\" href=\"https://zhuanlan.zhihu.com/p/386106883\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">什么是应用程序二进制接口ABI</p><p class=\"url\">https://zhuanlan.zhihu.com/p/386106883</p></div></a></div> \n<h2 id=\"工具链和SDK的区别\">工具链和SDK的区别</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/13/p8085j-0.webp\" alt=\"区别\"></p>\n<h2 id=\"嵌入式Linux系统的编译构建\">嵌入式Linux系统的编译构建</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/z10alx-0.webp\" alt=\"过程\"></p>\n<h2 id=\"交叉编译工具链-2\">交叉编译工具链</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/13/pan0pk-0.webp\" alt=\"说明\"></p>\n<h2 id=\"自动结构构建\">自动结构构建</h2>\n<p>前面展示了编译过程，在之前都是一部分手工编译，现在有了很多自动化编译工具，就比如Buildroot、OpenWrt、Yocto</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/z10ie9-0.webp\" alt=\"alt text\"></p>\n<h1>Buildroot</h1>\n<p>buildroot是Linux平台上一个构建嵌入式Linux系统的框架。整个Buildroot是由Makefile脚本和Kconfig配置文件构成的。你可以和编译Linux内核一样，通过buildroot配置，menuconfig修改，编译出一个完整的可以直接烧写到机器上运行的Linux系统软件(包含boot、kernel、rootfs以及rootfs中的各种库和应用程序)。<br>\n<strong>项目主要特点</strong></p>\n<ol>\n<li>制作启动映像</li>\n<li>不支持rpm deb等风格的包管理</li>\n<li>系统固件生成器从源代码构建所有组件</li>\n<li>注重简单</li>\n</ol>\n<p><strong>支持</strong></p>\n<ol>\n<li>根文件系统映像</li>\n<li>内核、引导加载程序、工具链</li>\n</ol>\n<h2 id=\"buildroot的使用\">buildroot的使用</h2>\n<p>直接看buildroot的官方文档，介绍的相当详细，参考以下文章即可</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"buildroot使用介绍\" href=\"https://blog.csdn.net/maizaozao/article/details/139241440\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">buildroot使用介绍</p><p class=\"url\">https://blog.csdn.net/maizaozao/article/details/139241440</p></div></a></div> \n<h2 id=\"具体项目实践\">具体项目实践</h2>\n"},{"title":"CapsWriter-Offline","description":"一个 PC 端的语音输入、字幕转录工具","cover":"https://qnwebstaticstorage.aoscdn.com/lightpdf/wp-content/uploads/2022/03/speech-to-text2-1.jpg.webp","swiper_index":1,"abbrlink":55158,"date":"2024-03-13T14:39:32.000Z","_content":"\n{% note info flat %}有时候需要记录一些视频资料，光手打记录累且麻烦，国内有做语音转录很牛的（如：讯飞输入法），但是碍于到🪜后的访问速度。最近发现了一款离线语音输入软件，而且能方便的进行字幕转录，不管是视频学习还是给自己做的视频配音，都很不错{% endnote %}\n\n# 来源\n{% link 一个 PC 端的语音输入、字幕转录工具, https://github.com/HaujetZhao/CapsWriter-Offline, https://qnwebstaticstorage.aoscdn.com/lightpdf/wp-content/uploads/2022/03/speech-to-text2-1.jpg.webp %}\n\n# 功能\n- 1. 按下键盘上的`大写锁定键`，录音开始，当松开`大写锁定键`时，就会识别你的录音，并将识别结果立刻输出\n- 2.  将音视频文件拖动到客户端打开，可以转录生成srt字幕文件\n\n# 详细展示\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=623379019&bvid=BV1tt4y1d75s&cid=1399238093&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n# 特性\n- 完全离线、无限时长、低延迟、高准确率、中英混输、自动阿拉伯数字、自动调整中英间隔\n- 热词功能：可以在 `hot-en.txt` `hot-zh.txt` `hot-rule.txt` 中添加三种热词，客户端动态载入\n- 日记功能：默认每次录音识别后，识别结果记录在 `年份/月份/日期.md` ，录音文件保存在 `年份/月份/assets`\n- 关键词日记：识别结果若以关键词开头，会被记录在 `年份/月份/关键词-日期.md`，关键词在 `keywords.txt` 中定义\n- 转录功能：将音视频文件拖动到客户端打开，即可转录生成 `srt` 字幕\n- 服务端、客户端分离，可以服务多台客户端\n- 编辑 `config.py` ，可以配置服务端地址、快捷键、录音开关……\n\n# 下载:\n参照[官方开源库](https://github.com/HaujetZhao/CapsWriter-Offline)即可，也有其他大佬改的GUI：[增加图形界面包](https://github.com/HaujetZhao/CapsWriter-Offline/pull/53)，基于`pyside6`，并添加了语音翻译功能\n![alt text](https://github.com/H1DDENADM1N/CapsWriter-Offline/blob/GUI-(PySide6)-and-Portable-(PyStand)/assets/start_server_or_client_in_tray.gif?raw=true)\n\n# 其他\n关于工具中的核心，`sherpa-onnx`部署的`Paraformer`模型，细节可以参照以下卡片：\n\n{% link sherpa-onnx, https://k2-fsa.github.io/sherpa/onnx/index.html,https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %}\n\n{% link Paraformer, https://www.modelscope.cn/models/iic/speech_paraformer-large-vad-punc_asr_nat-zh-cn-16k-common-vocab8404-pytorch/summary,https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %}\n\n{% link sherpa-onnx, https://github.com/k2-fsa/sherpa-onnx, https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %}","source":"_posts/CapsWriter-Offline.md","raw":"---\ntitle: CapsWriter-Offline\ndescription: 一个 PC 端的语音输入、字幕转录工具\n\ntags:\n  - 语音识别\ncategories:\n  - 一些有用的小工具\ncover: 'https://qnwebstaticstorage.aoscdn.com/lightpdf/wp-content/uploads/2022/03/speech-to-text2-1.jpg.webp'\nswiper_index: 1\nabbrlink: 55158\ndate: 2024-03-13 22:39:32\n\n---\n\n{% note info flat %}有时候需要记录一些视频资料，光手打记录累且麻烦，国内有做语音转录很牛的（如：讯飞输入法），但是碍于到🪜后的访问速度。最近发现了一款离线语音输入软件，而且能方便的进行字幕转录，不管是视频学习还是给自己做的视频配音，都很不错{% endnote %}\n\n# 来源\n{% link 一个 PC 端的语音输入、字幕转录工具, https://github.com/HaujetZhao/CapsWriter-Offline, https://qnwebstaticstorage.aoscdn.com/lightpdf/wp-content/uploads/2022/03/speech-to-text2-1.jpg.webp %}\n\n# 功能\n- 1. 按下键盘上的`大写锁定键`，录音开始，当松开`大写锁定键`时，就会识别你的录音，并将识别结果立刻输出\n- 2.  将音视频文件拖动到客户端打开，可以转录生成srt字幕文件\n\n# 详细展示\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=623379019&bvid=BV1tt4y1d75s&cid=1399238093&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n# 特性\n- 完全离线、无限时长、低延迟、高准确率、中英混输、自动阿拉伯数字、自动调整中英间隔\n- 热词功能：可以在 `hot-en.txt` `hot-zh.txt` `hot-rule.txt` 中添加三种热词，客户端动态载入\n- 日记功能：默认每次录音识别后，识别结果记录在 `年份/月份/日期.md` ，录音文件保存在 `年份/月份/assets`\n- 关键词日记：识别结果若以关键词开头，会被记录在 `年份/月份/关键词-日期.md`，关键词在 `keywords.txt` 中定义\n- 转录功能：将音视频文件拖动到客户端打开，即可转录生成 `srt` 字幕\n- 服务端、客户端分离，可以服务多台客户端\n- 编辑 `config.py` ，可以配置服务端地址、快捷键、录音开关……\n\n# 下载:\n参照[官方开源库](https://github.com/HaujetZhao/CapsWriter-Offline)即可，也有其他大佬改的GUI：[增加图形界面包](https://github.com/HaujetZhao/CapsWriter-Offline/pull/53)，基于`pyside6`，并添加了语音翻译功能\n![alt text](https://github.com/H1DDENADM1N/CapsWriter-Offline/blob/GUI-(PySide6)-and-Portable-(PyStand)/assets/start_server_or_client_in_tray.gif?raw=true)\n\n# 其他\n关于工具中的核心，`sherpa-onnx`部署的`Paraformer`模型，细节可以参照以下卡片：\n\n{% link sherpa-onnx, https://k2-fsa.github.io/sherpa/onnx/index.html,https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %}\n\n{% link Paraformer, https://www.modelscope.cn/models/iic/speech_paraformer-large-vad-punc_asr_nat-zh-cn-16k-common-vocab8404-pytorch/summary,https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %}\n\n{% link sherpa-onnx, https://github.com/k2-fsa/sherpa-onnx, https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %}","slug":"CapsWriter-Offline","published":1,"updated":"2024-03-13T15:28:06.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6inu000bmktt1u33bx2l","content":"<div class=\"note info flat\"><p>有时候需要记录一些视频资料，光手打记录累且麻烦，国内有做语音转录很牛的（如：讯飞输入法），但是碍于到🪜后的访问速度。最近发现了一款离线语音输入软件，而且能方便的进行字幕转录，不管是视频学习还是给自己做的视频配音，都很不错</p>\n</div>\n<h1>来源</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"一个 PC 端的语音输入、字幕转录工具\" href=\"https://github.com/HaujetZhao/CapsWriter-Offline\"><div class=\"left\"><img src=\"https://qnwebstaticstorage.aoscdn.com/lightpdf/wp-content/uploads/2022/03/speech-to-text2-1.jpg.webp\"/></div><div class=\"right\"><p class=\"text\">一个 PC 端的语音输入、字幕转录工具</p><p class=\"url\">https://github.com/HaujetZhao/CapsWriter-Offline</p></div></a></div>\n<h1>功能</h1>\n<ul>\n<li>\n<ol>\n<li>按下键盘上的<code>大写锁定键</code>，录音开始，当松开<code>大写锁定键</code>时，就会识别你的录音，并将识别结果立刻输出</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>将音视频文件拖动到客户端打开，可以转录生成srt字幕文件</li>\n</ol>\n</li>\n</ul>\n<h1>详细展示</h1>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=623379019&bvid=BV1tt4y1d75s&cid=1399238093&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<h1>特性</h1>\n<ul>\n<li>完全离线、无限时长、低延迟、高准确率、中英混输、自动阿拉伯数字、自动调整中英间隔</li>\n<li>热词功能：可以在 <code>hot-en.txt</code> <code>hot-zh.txt</code> <code>hot-rule.txt</code> 中添加三种热词，客户端动态载入</li>\n<li>日记功能：默认每次录音识别后，识别结果记录在 <code>年份/月份/日期.md</code> ，录音文件保存在 <code>年份/月份/assets</code></li>\n<li>关键词日记：识别结果若以关键词开头，会被记录在 <code>年份/月份/关键词-日期.md</code>，关键词在 <code>keywords.txt</code> 中定义</li>\n<li>转录功能：将音视频文件拖动到客户端打开，即可转录生成 <code>srt</code> 字幕</li>\n<li>服务端、客户端分离，可以服务多台客户端</li>\n<li>编辑 <code>config.py</code> ，可以配置服务端地址、快捷键、录音开关……</li>\n</ul>\n<h1>下载:</h1>\n<p>参照<a href=\"https://github.com/HaujetZhao/CapsWriter-Offline\">官方开源库</a>即可，也有其他大佬改的GUI：<a href=\"https://github.com/HaujetZhao/CapsWriter-Offline/pull/53\">增加图形界面包</a>，基于<code>pyside6</code>，并添加了语音翻译功能<br>\n<img src=\"https://github.com/H1DDENADM1N/CapsWriter-Offline/blob/GUI-(PySide6)-and-Portable-(PyStand)/assets/start_server_or_client_in_tray.gif?raw=true\" alt=\"alt text\"></p>\n<h1>其他</h1>\n<p>关于工具中的核心，<code>sherpa-onnx</code>部署的<code>Paraformer</code>模型，细节可以参照以下卡片：</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"sherpa-onnx\" href=\"https://k2-fsa.github.io/sherpa/onnx/index.html\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg\"/></div><div class=\"right\"><p class=\"text\">sherpa-onnx</p><p class=\"url\">https://k2-fsa.github.io/sherpa/onnx/index.html</p></div></a></div>\n<div class=\"tag link\"><a class=\"link-card\" title=\"Paraformer\" href=\"https://www.modelscope.cn/models/iic/speech_paraformer-large-vad-punc_asr_nat-zh-cn-16k-common-vocab8404-pytorch/summary\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg\"/></div><div class=\"right\"><p class=\"text\">Paraformer</p><p class=\"url\">https://www.modelscope.cn/models/iic/speech_paraformer-large-vad-punc_asr_nat-zh-cn-16k-common-vocab8404-pytorch/summary</p></div></a></div>\n<div class=\"tag link\"><a class=\"link-card\" title=\"sherpa-onnx\" href=\"https://github.com/k2-fsa/sherpa-onnx\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg\"/></div><div class=\"right\"><p class=\"text\">sherpa-onnx</p><p class=\"url\">https://github.com/k2-fsa/sherpa-onnx</p></div></a></div>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<div class=\"note info flat\"><p>有时候需要记录一些视频资料，光手打记录累且麻烦，国内有做语音转录很牛的（如：讯飞输入法），但是碍于到🪜后的访问速度。最近发现了一款离线语音输入软件，而且能方便的进行字幕转录，不管是视频学习还是给自己做的视频配音，都很不错</p>\n</div>\n<h1>来源</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"一个 PC 端的语音输入、字幕转录工具\" href=\"https://github.com/HaujetZhao/CapsWriter-Offline\"><div class=\"left\"><img src=\"https://qnwebstaticstorage.aoscdn.com/lightpdf/wp-content/uploads/2022/03/speech-to-text2-1.jpg.webp\"/></div><div class=\"right\"><p class=\"text\">一个 PC 端的语音输入、字幕转录工具</p><p class=\"url\">https://github.com/HaujetZhao/CapsWriter-Offline</p></div></a></div>\n<h1>功能</h1>\n<ul>\n<li>\n<ol>\n<li>按下键盘上的<code>大写锁定键</code>，录音开始，当松开<code>大写锁定键</code>时，就会识别你的录音，并将识别结果立刻输出</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>将音视频文件拖动到客户端打开，可以转录生成srt字幕文件</li>\n</ol>\n</li>\n</ul>\n<h1>详细展示</h1>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=623379019&bvid=BV1tt4y1d75s&cid=1399238093&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<h1>特性</h1>\n<ul>\n<li>完全离线、无限时长、低延迟、高准确率、中英混输、自动阿拉伯数字、自动调整中英间隔</li>\n<li>热词功能：可以在 <code>hot-en.txt</code> <code>hot-zh.txt</code> <code>hot-rule.txt</code> 中添加三种热词，客户端动态载入</li>\n<li>日记功能：默认每次录音识别后，识别结果记录在 <code>年份/月份/日期.md</code> ，录音文件保存在 <code>年份/月份/assets</code></li>\n<li>关键词日记：识别结果若以关键词开头，会被记录在 <code>年份/月份/关键词-日期.md</code>，关键词在 <code>keywords.txt</code> 中定义</li>\n<li>转录功能：将音视频文件拖动到客户端打开，即可转录生成 <code>srt</code> 字幕</li>\n<li>服务端、客户端分离，可以服务多台客户端</li>\n<li>编辑 <code>config.py</code> ，可以配置服务端地址、快捷键、录音开关……</li>\n</ul>\n<h1>下载:</h1>\n<p>参照<a href=\"https://github.com/HaujetZhao/CapsWriter-Offline\">官方开源库</a>即可，也有其他大佬改的GUI：<a href=\"https://github.com/HaujetZhao/CapsWriter-Offline/pull/53\">增加图形界面包</a>，基于<code>pyside6</code>，并添加了语音翻译功能<br>\n<img src=\"https://github.com/H1DDENADM1N/CapsWriter-Offline/blob/GUI-(PySide6)-and-Portable-(PyStand)/assets/start_server_or_client_in_tray.gif?raw=true\" alt=\"alt text\"></p>\n<h1>其他</h1>\n<p>关于工具中的核心，<code>sherpa-onnx</code>部署的<code>Paraformer</code>模型，细节可以参照以下卡片：</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"sherpa-onnx\" href=\"https://k2-fsa.github.io/sherpa/onnx/index.html\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg\"/></div><div class=\"right\"><p class=\"text\">sherpa-onnx</p><p class=\"url\">https://k2-fsa.github.io/sherpa/onnx/index.html</p></div></a></div>\n<div class=\"tag link\"><a class=\"link-card\" title=\"Paraformer\" href=\"https://www.modelscope.cn/models/iic/speech_paraformer-large-vad-punc_asr_nat-zh-cn-16k-common-vocab8404-pytorch/summary\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg\"/></div><div class=\"right\"><p class=\"text\">Paraformer</p><p class=\"url\">https://www.modelscope.cn/models/iic/speech_paraformer-large-vad-punc_asr_nat-zh-cn-16k-common-vocab8404-pytorch/summary</p></div></a></div>\n<div class=\"tag link\"><a class=\"link-card\" title=\"sherpa-onnx\" href=\"https://github.com/k2-fsa/sherpa-onnx\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg\"/></div><div class=\"right\"><p class=\"text\">sherpa-onnx</p><p class=\"url\">https://github.com/k2-fsa/sherpa-onnx</p></div></a></div>"},{"title":"Linux_kernel","abbrlink":59205,"date":"2025-02-13T11:16:28.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqtp10-0.webp","swiper_index":null,"_content":"\n# 参考文章\n{% link 内核模块, https://blog.csdn.net/weixin_45093118/article/details/139397775, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n\n# Linux kernel开发模式\n![开发模式](https://image.aruoshui.fun/i/2025/02/13/tu9wiw-0.webp)\n\n# 如何构建kernel\n1. 获取配套的交叉编译工具链\n - SOC原厂提供:NXPST Rockchip Amlogic Allwinnertech 等\n - 社区下载:Linrao Debian ARM Bootlin下载kernel源码\n2. 获取Linux Kernel主线LTS源码\n - Git方式获取: git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git\n - 压缩版下载: https://mirrors.edge.kernel.org/pub/linux/kernel/获取芯片原厂Kernel源码\n3. Host下配置开发环境\n - 安装必要依赖包\n - 解压配置合适的工具链\n4. 指定编译板子配置文件\n - make BOARDNAME defconfig\n5. 编译\n - 编译内核镜像 make -jN\n - 编译设备树 make dtbs\n - 编译安装模块驱动 make modules\n\n## kernel两种源码\n1. 官方主线版本\n   - 遵循内核的开发模式\n   - 可能尚未包含特定领域的最新特性\n2. 芯片厂商自己的内核源\n   - 芯片厂商优先关注硬件的支持\n   - 与Linux有非常重要的增量支持\n   -  许多SOC供应商同时参与主线的开发\n3. 许多内核社区维护自己的内核版本\n   - 架构社区(ARM、MIPS、PowerPC等)设备驱动社区(12C、SPI、USB、PCI、网络等)他社区(如real-time等)\n   - 无官方发布，仅用于分享工作和为主线版本做出贡献。\n\n# kernel目录介绍\n\n```powershell\nlinux/\n├── arch/             # 架构特定的代码，包括不同硬件平台的特定代码。\n├── block/            # 块设备层, 包括文件系统和磁盘驱动程序。\n├── crypto/           # 加密算法\n├── Documentation/    # 存放内核文档和说明。\n├── drivers/          # 包含各种设备驱动程序，如网络、声卡、USB等。\n├── fs/               # 提供文件系统的实现，包括虚拟文件系统（VFS）以及各种具体文件系统如ext4、FAT等。\n├── include/          # 存放公共头文件，供内核和模块使用。\n├── init/             # 包含启动和初始化代码。\n├── ipc/              # 提供进程间通信（IPC）机制的实现，如管道、消息队列等。\n├── kernel/           # 包含内核核心功能的实现，如调度器、定时器等。\n├── lib/              # 提供通用库函数和工具函数。\n├── mm/               # 管理内存分配和页面管理。\n├── net/              # 处理网络协议栈和网络驱动程序相关代码。\n├── samples/          # 示例代码，展示一些特定功能或API的使用方法。\n├── scripts/          # 包含一些编译脚本和工具\n├── security/         # 提供安全模块和安全相关的功能\n├── sound/            # 各种音频设备的驱动程序、音频接口的实现以及其他与音频处理和控制相关的代码文件\n├── tools/            # 辅助开发、调试和分析Linux内核和相关组件的工具和实用程序\n├── usr/              # 存放用户级别软件和相关文件的位置。\n└── virt/             # 用于提供有关虚拟化技术的信息\n\n```\n\n# 配置Kernel编译目标环境变量\n主要是配置交叉编译，需要定义`ARCH`和`CROSS_COMPILE`的方式\n- 在make 命令中传递两个参数`make ARCH = arm CROSS_COMPILE = arm-linux`\n  但是这样配置在make的时候会容易忘记传，导致编译半天不可用\n- 将两个变量设置为系统变量，使用`export`命令就行\n  但只能工作在当前的终端，如果想要长久使用，可以将设置放入`~/.bashrc`文件中，之后刷新`source ~/.bashrc`就行\n\n\n# 配置单板配置文件\n这里对于嵌入式平台案例（ARM32以上）\n- 默认配置文件可用，通常适用于每个CPU系列\n- 存储在arch/<arch>/configs/中，并且只是最小的.config文件（仅与默认设置有一些不同）\n- make help以查找是否可用于您的平台、\n- 要加载默认的配置文件，只要运行`make <CPU>_defconfig`\n- 这将覆盖现有的.config文件\n- 进入配置菜单界面进行更改配置 （make menuconfig）\n\n# 内核配置项\nLinux内核配置项主要包括以下几个方面：\n### 1. 处理器类型和特性\n- 选择支持的处理器架构（如x86, ARM, MIPS等）。\n- 配置处理器特性，如SMP（对称多处理）支持、CPU频率调整等。\n\n### 2. 内存管理\n- 配置内存管理选项，如支持大内存页、内存压缩等。\n- 选择不同的内存分配器（如SLAB, SLOB, SLUB）。\n\n### 3. 设备驱动\n- 选择支持的硬件设备，如网络设备、存储设备、USB设备等。\n- 配置特定设备的驱动程序，如NVIDIA GPU驱动、Intel网卡驱动等。\n\n### 4. 文件系统\n- 选择支持的文件系统（如ext4, btrfs, xfs等）。\n- 配置文件系统的特性，如日志支持、压缩支持等。\n\n### 5. 网络\n- 配置网络协议支持，如IPv4, IPv6, TCP/IP等。\n- 选择支持的网络功能，如防火墙、NAT、QoS等。\n\n### 6. 安全\n- 配置内核安全选项，如SELinux, AppArmor等。\n- 选择支持的安全模块和功能。\n\n### 7. 模块支持\n- 配置内核模块支持，允许动态加载和卸载模块。\n- 选择编译为模块的驱动程序和功能。\n\n### 8. 调试和开发\n- 配置内核调试选项，如内核调试信息、内核日志级别等。\n- 选择支持的开发工具和功能，如KDB、KGDB等。\n\n### 9. 电源管理\n- 配置电源管理选项，如休眠、挂起等。\n- 选择支持的电源管理功能，如CPU频率调整、动态电源管理等。\n\n### 10. 其他\n- 配置内核版本信息、编译选项等。\n- 选择支持的其他功能，如虚拟化、实时内核支持等。\n\n这些配置项可以通过`make menuconfig`、`make xconfig`等工具进行图形化配置，也可以通过直接编辑`.config`文件进行手动配置。\n\n# 内核选项\n执行`make menuconfig`等工具后，可以直接在图形界面中配置\n比如：![config](https://image.aruoshui.fun/i/2025/02/14/sfr3ik-0.webp)\n\n相关的配置选项有：\n![选项](https://image.aruoshui.fun/i/2025/02/14/sgsc0l-0.webp)\n\n\n# 编译内核\n- 在内核源码中执行\n- 可以最大化利用多个CPU和I/O资源，记住内核数目/线程，执行 make -j <ncpus * 2 或者 ncpus + 2>\n- 可以使用ccache编译器缓存： `export CROSS_COMPILE = 'ccacheriscv64-linux'`\n\n# 生成的镜像文件\n![镜像文件](https://image.aruoshui.fun/i/2025/02/14/sl0ec4-0.webp)\n\n# 安装\n嵌入式中一般直接网络拷贝替换、tftp服务器替换重新启动就行\n\n# 编译设备树\n执行`make dtbs`\n\n# 内核模块\n由于Linux内核的整体架构庞大且组件多，若将所有需要的功能都打包到内核，会导致内核会很大且臃肿，为了解决这个问题，Linux提供了Module的机制。\nModule机制就是在编译内核时本身并不需要包含所有功能，在需要某些功能时再将对应模块动态的加载到内核中，且模块一旦被加载就和内核中其他部分完全一样，每个内核模块在文件系统中存储为一个单独的文件，必须访问文件系统才能使用驱动模块\n\n## 嵌入式主机模块驱动\n需要指定 INSTALL_MOD_PATH 变量来生成模块相关文件并将模块安装在 <目标根文件系统> 而不是 <主机根文件系统>中。示例命令：\n`make INSTALL_MOD_PATH=<dir>/ modules_install`\n\n# 使用uboot引导嵌入式设备\n## 引导加载程序：\n嵌入式系统通常使用特定的引导加载程序，例如 U-Boot（Universal Boot Loader）或 Barebox。这些引导加载程序能够加载内核映像并配置启动参数。\n## 配置引导加载程序（ENV）：\n在引导加载程序中，需要配置引导命令，指定内核映像的位置、启动参数以及设备树（Device Tree）等信息。这通常在引导加载程序的环境变量中进行配置。\n## 加载设备树（Device Tree）：\n对于许多嵌入式系统，设备树是一个重要的概念。设备树描述了硬件的结构和配置信息，使得相同的内核映像可以在不同的硬件平台上运行。引导加载程序可能会加载设备树文件并传递给内核。\n## 加载内核映像：\n引导加载程序通过网络、存储设备或其他途径加载 Linux 内核映像到内存中。这通常是 zImage 或 Image 文件。\n## 设置启动参数(bootargs)：\n引导加载程序设置启动参数，例如 root 文件系统的位置、内核命令行参数等。这些参数可能包括根文件系统的位置、内核的命令行参数等 。\n## 转交控制权给内核：\n引导加载程序将控制权转交给内核，使得内核可以开始执行。内核初始化过程中会进行硬件初始化、加载驱动程序等操作。\n## 用户空间初始化：\n内核初始化完成后，启动用户空间进程。这可能涉及到使用 init 程序或其他初始化系统(busybox)。\n用户空间操作系统启动：\n一旦用户空间初始化完成，操作系统开始运行，用户可以开始使用嵌入式系统(APP)。 \n\n因此，典型的启动过程是：\n- 在内存中的地址 X 加载 zImage\n- 在内存中的地址 Y 加载<board>.dtb\n- 用bootz X – Y 启动内核（中间的 - 表示没有 initramfs）\n\n# Linux内核启动命令行参数概述\n\nLinux内核启动命令行参数用于在系统启动时传递各种配置选项给内核。这些参数可以通过GRUB或其他引导加载程序进行设置。以下是一些常见的内核启动命令行参数：\n\n## 1. 基本参数\n- **root=**：指定根文件系统的设备。例如：`root=/dev/sda1`。\n- **init=**：指定启动时运行的初始进程。例如：`init=/bin/bash`。\n- **ro**：以只读方式挂载根文件系统。\n- **rw**：以读写方式挂载根文件系统。\n\n## 2. 内存管理\n- **mem=**：指定可用内存大小。例如：`mem=512M`。\n- **quiet**：减少启动时的输出信息。\n- **verbose**：增加启动时的输出信息。\n\n## 3. 网络\n- **ip=**：指定静态IP地址。例如：`ip=192.168.1.10::192.168.1.1:255.255.255.0::eth0:off`。\n- **net.ifnames=0**：禁用新的网络接口命名规则，使用传统的命名方式（如eth0）。\n\n## 4. 文件系统\n- **fstab**：指定文件系统的挂载选项。例如：`fstab=LABEL=ROOT / ext4 defaults 1 1`。\n- **rootflags=**：指定根文件系统的挂载选项。例如：`rootflags=data=writeback`。\n\n## 5. 安全\n- **selinux=0**：禁用SELinux。\n- **apparmor=0**：禁用AppArmor。\n\n## 6. 调试\n- **debug**：启用内核调试信息。\n- **earlyprintk**：在早期启动阶段输出调试信息。例如：`earlyprintk=vga,keep`。\n- **initcall_debug**：调试内核初始化调用。\n\n## 7. 电源管理\n- **acpi=off**：禁用ACPI支持。\n- **noapic**：禁用APIC支持。\n\n## 8. 其他\n- **console=**：指定控制台设备。例如：`console=ttyS0,115200`。\n- **nmi_watchdog=0**：禁用NMI watchdog。\n- **panic=**：指定内核panic时的等待时间（以秒为单位）。例如：`panic=10`。\n\n这些参数可以通过在GRUB配置文件中设置或在引导加载程序的命令行中直接传递。例如，在GRUB配置文件中，可以在`linux`行添加这些参数：\n\n```grub\nmenuentry 'Linux' {\n    linux /boot/vmlinuz-5.10.0-21-amd64 root=/dev/sda1 ro quiet\n    initrd /boot/initrd.img-5.10.0-21-amd64\n}\n```\n\n在启动时，这些参数会被传递给内核，以控制内核的行为和配置。\n\n\n# 升级Kernel子版本\n其实就是打补丁\n1. 完整的压缩包版本，下载之后解压\n2. 版本之间的增量补丁按照正确的顺序应用了正确的补丁以升级到下一个版本。那么可以参考快速下载补丁并应用。\n\n补丁是两个源代码版本之间的差异，使用 `diff` 工具或更复杂的版本控制系统生成\n\n\n## patc命令使用\npatch 命令：\n- 在标准输入上获取补丁内容。\n- 将补丁描述的 修改应用到当前目录。\n\nPacth命令使用示例：\n```powershell\npatch -p <n> < diff_file\ncat diff_file | patch -p <n>\nxzcat diff_file.xz | patch –p <n>\nzcat diff_file.gz | patch –p <n>\n```\n\n注意事项：\n\nn : 文件路径中要跳过的目录级别数。 (-p: prune)\n您可以使用 -R 选项反向应用补丁。\n您可以使用 --dry-run 选项测试补丁。\n\n## 应用Linux Patch补丁​\n两种类型的 Linux 补丁：\n\n- 要么适用于之前的稳定版本（从 x.< y-1 > 至 x.y ）\n- 或者对当前稳定版本进行修复（从 x.y 至 x.y.z）\n\n可以下载 gzip 或 xz（小得多）压缩文件。始终为patch -p1 生成。\n\n需要在顶层内核源码目录下运行patch命令。\n\n![例子](https://image.aruoshui.fun/i/2025/02/14/sztbt0-0.webp)\n\n\n# linux busybox\n## 根文件系统\n所谓制作根文件系统，就是创建各种目录，并且在目录里创建相应的文件。例如：在/bin目录下放置可执行程序，在/lib下放置各种库等等。通常配合chroot命令使用。\n\n## busybox\nBusybox将众多的UNIX命令集合进一个很小的可执行程序中，可以用来替代GNU fileutils、shellutils等工具集。Busybox中各种命令与相应的GNU工具相比，所能提供的选项比较少，但是也足够一般的应用了。Busybox主要用于嵌入式系统。\n\n在创建根文件系统的时候，如果使用Busybox的话，只需要在/dev目录下创建必要的设备节点，在/etc目录下增加一些配置文件即可，当然，如果Busybox使用动态链接，那么还需要再/lib目录下包含库文件。\n\n详细的配置使用可以看\n{% link linux busybox详解, https://blog.csdn.net/m0_66596286/article/details/135559755, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n\n","source":"_posts/Linux-kernel-compile.md","raw":"---\ntitle: Linux_kernel\nabbrlink: 59205\ndate: 2025-02-13 19:16:28\ntags:\ndescription:\ncategories: 嵌入式Linux\ncover:\nswiper_index:\n---\n\n# 参考文章\n{% link 内核模块, https://blog.csdn.net/weixin_45093118/article/details/139397775, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n\n# Linux kernel开发模式\n![开发模式](https://image.aruoshui.fun/i/2025/02/13/tu9wiw-0.webp)\n\n# 如何构建kernel\n1. 获取配套的交叉编译工具链\n - SOC原厂提供:NXPST Rockchip Amlogic Allwinnertech 等\n - 社区下载:Linrao Debian ARM Bootlin下载kernel源码\n2. 获取Linux Kernel主线LTS源码\n - Git方式获取: git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git\n - 压缩版下载: https://mirrors.edge.kernel.org/pub/linux/kernel/获取芯片原厂Kernel源码\n3. Host下配置开发环境\n - 安装必要依赖包\n - 解压配置合适的工具链\n4. 指定编译板子配置文件\n - make BOARDNAME defconfig\n5. 编译\n - 编译内核镜像 make -jN\n - 编译设备树 make dtbs\n - 编译安装模块驱动 make modules\n\n## kernel两种源码\n1. 官方主线版本\n   - 遵循内核的开发模式\n   - 可能尚未包含特定领域的最新特性\n2. 芯片厂商自己的内核源\n   - 芯片厂商优先关注硬件的支持\n   - 与Linux有非常重要的增量支持\n   -  许多SOC供应商同时参与主线的开发\n3. 许多内核社区维护自己的内核版本\n   - 架构社区(ARM、MIPS、PowerPC等)设备驱动社区(12C、SPI、USB、PCI、网络等)他社区(如real-time等)\n   - 无官方发布，仅用于分享工作和为主线版本做出贡献。\n\n# kernel目录介绍\n\n```powershell\nlinux/\n├── arch/             # 架构特定的代码，包括不同硬件平台的特定代码。\n├── block/            # 块设备层, 包括文件系统和磁盘驱动程序。\n├── crypto/           # 加密算法\n├── Documentation/    # 存放内核文档和说明。\n├── drivers/          # 包含各种设备驱动程序，如网络、声卡、USB等。\n├── fs/               # 提供文件系统的实现，包括虚拟文件系统（VFS）以及各种具体文件系统如ext4、FAT等。\n├── include/          # 存放公共头文件，供内核和模块使用。\n├── init/             # 包含启动和初始化代码。\n├── ipc/              # 提供进程间通信（IPC）机制的实现，如管道、消息队列等。\n├── kernel/           # 包含内核核心功能的实现，如调度器、定时器等。\n├── lib/              # 提供通用库函数和工具函数。\n├── mm/               # 管理内存分配和页面管理。\n├── net/              # 处理网络协议栈和网络驱动程序相关代码。\n├── samples/          # 示例代码，展示一些特定功能或API的使用方法。\n├── scripts/          # 包含一些编译脚本和工具\n├── security/         # 提供安全模块和安全相关的功能\n├── sound/            # 各种音频设备的驱动程序、音频接口的实现以及其他与音频处理和控制相关的代码文件\n├── tools/            # 辅助开发、调试和分析Linux内核和相关组件的工具和实用程序\n├── usr/              # 存放用户级别软件和相关文件的位置。\n└── virt/             # 用于提供有关虚拟化技术的信息\n\n```\n\n# 配置Kernel编译目标环境变量\n主要是配置交叉编译，需要定义`ARCH`和`CROSS_COMPILE`的方式\n- 在make 命令中传递两个参数`make ARCH = arm CROSS_COMPILE = arm-linux`\n  但是这样配置在make的时候会容易忘记传，导致编译半天不可用\n- 将两个变量设置为系统变量，使用`export`命令就行\n  但只能工作在当前的终端，如果想要长久使用，可以将设置放入`~/.bashrc`文件中，之后刷新`source ~/.bashrc`就行\n\n\n# 配置单板配置文件\n这里对于嵌入式平台案例（ARM32以上）\n- 默认配置文件可用，通常适用于每个CPU系列\n- 存储在arch/<arch>/configs/中，并且只是最小的.config文件（仅与默认设置有一些不同）\n- make help以查找是否可用于您的平台、\n- 要加载默认的配置文件，只要运行`make <CPU>_defconfig`\n- 这将覆盖现有的.config文件\n- 进入配置菜单界面进行更改配置 （make menuconfig）\n\n# 内核配置项\nLinux内核配置项主要包括以下几个方面：\n### 1. 处理器类型和特性\n- 选择支持的处理器架构（如x86, ARM, MIPS等）。\n- 配置处理器特性，如SMP（对称多处理）支持、CPU频率调整等。\n\n### 2. 内存管理\n- 配置内存管理选项，如支持大内存页、内存压缩等。\n- 选择不同的内存分配器（如SLAB, SLOB, SLUB）。\n\n### 3. 设备驱动\n- 选择支持的硬件设备，如网络设备、存储设备、USB设备等。\n- 配置特定设备的驱动程序，如NVIDIA GPU驱动、Intel网卡驱动等。\n\n### 4. 文件系统\n- 选择支持的文件系统（如ext4, btrfs, xfs等）。\n- 配置文件系统的特性，如日志支持、压缩支持等。\n\n### 5. 网络\n- 配置网络协议支持，如IPv4, IPv6, TCP/IP等。\n- 选择支持的网络功能，如防火墙、NAT、QoS等。\n\n### 6. 安全\n- 配置内核安全选项，如SELinux, AppArmor等。\n- 选择支持的安全模块和功能。\n\n### 7. 模块支持\n- 配置内核模块支持，允许动态加载和卸载模块。\n- 选择编译为模块的驱动程序和功能。\n\n### 8. 调试和开发\n- 配置内核调试选项，如内核调试信息、内核日志级别等。\n- 选择支持的开发工具和功能，如KDB、KGDB等。\n\n### 9. 电源管理\n- 配置电源管理选项，如休眠、挂起等。\n- 选择支持的电源管理功能，如CPU频率调整、动态电源管理等。\n\n### 10. 其他\n- 配置内核版本信息、编译选项等。\n- 选择支持的其他功能，如虚拟化、实时内核支持等。\n\n这些配置项可以通过`make menuconfig`、`make xconfig`等工具进行图形化配置，也可以通过直接编辑`.config`文件进行手动配置。\n\n# 内核选项\n执行`make menuconfig`等工具后，可以直接在图形界面中配置\n比如：![config](https://image.aruoshui.fun/i/2025/02/14/sfr3ik-0.webp)\n\n相关的配置选项有：\n![选项](https://image.aruoshui.fun/i/2025/02/14/sgsc0l-0.webp)\n\n\n# 编译内核\n- 在内核源码中执行\n- 可以最大化利用多个CPU和I/O资源，记住内核数目/线程，执行 make -j <ncpus * 2 或者 ncpus + 2>\n- 可以使用ccache编译器缓存： `export CROSS_COMPILE = 'ccacheriscv64-linux'`\n\n# 生成的镜像文件\n![镜像文件](https://image.aruoshui.fun/i/2025/02/14/sl0ec4-0.webp)\n\n# 安装\n嵌入式中一般直接网络拷贝替换、tftp服务器替换重新启动就行\n\n# 编译设备树\n执行`make dtbs`\n\n# 内核模块\n由于Linux内核的整体架构庞大且组件多，若将所有需要的功能都打包到内核，会导致内核会很大且臃肿，为了解决这个问题，Linux提供了Module的机制。\nModule机制就是在编译内核时本身并不需要包含所有功能，在需要某些功能时再将对应模块动态的加载到内核中，且模块一旦被加载就和内核中其他部分完全一样，每个内核模块在文件系统中存储为一个单独的文件，必须访问文件系统才能使用驱动模块\n\n## 嵌入式主机模块驱动\n需要指定 INSTALL_MOD_PATH 变量来生成模块相关文件并将模块安装在 <目标根文件系统> 而不是 <主机根文件系统>中。示例命令：\n`make INSTALL_MOD_PATH=<dir>/ modules_install`\n\n# 使用uboot引导嵌入式设备\n## 引导加载程序：\n嵌入式系统通常使用特定的引导加载程序，例如 U-Boot（Universal Boot Loader）或 Barebox。这些引导加载程序能够加载内核映像并配置启动参数。\n## 配置引导加载程序（ENV）：\n在引导加载程序中，需要配置引导命令，指定内核映像的位置、启动参数以及设备树（Device Tree）等信息。这通常在引导加载程序的环境变量中进行配置。\n## 加载设备树（Device Tree）：\n对于许多嵌入式系统，设备树是一个重要的概念。设备树描述了硬件的结构和配置信息，使得相同的内核映像可以在不同的硬件平台上运行。引导加载程序可能会加载设备树文件并传递给内核。\n## 加载内核映像：\n引导加载程序通过网络、存储设备或其他途径加载 Linux 内核映像到内存中。这通常是 zImage 或 Image 文件。\n## 设置启动参数(bootargs)：\n引导加载程序设置启动参数，例如 root 文件系统的位置、内核命令行参数等。这些参数可能包括根文件系统的位置、内核的命令行参数等 。\n## 转交控制权给内核：\n引导加载程序将控制权转交给内核，使得内核可以开始执行。内核初始化过程中会进行硬件初始化、加载驱动程序等操作。\n## 用户空间初始化：\n内核初始化完成后，启动用户空间进程。这可能涉及到使用 init 程序或其他初始化系统(busybox)。\n用户空间操作系统启动：\n一旦用户空间初始化完成，操作系统开始运行，用户可以开始使用嵌入式系统(APP)。 \n\n因此，典型的启动过程是：\n- 在内存中的地址 X 加载 zImage\n- 在内存中的地址 Y 加载<board>.dtb\n- 用bootz X – Y 启动内核（中间的 - 表示没有 initramfs）\n\n# Linux内核启动命令行参数概述\n\nLinux内核启动命令行参数用于在系统启动时传递各种配置选项给内核。这些参数可以通过GRUB或其他引导加载程序进行设置。以下是一些常见的内核启动命令行参数：\n\n## 1. 基本参数\n- **root=**：指定根文件系统的设备。例如：`root=/dev/sda1`。\n- **init=**：指定启动时运行的初始进程。例如：`init=/bin/bash`。\n- **ro**：以只读方式挂载根文件系统。\n- **rw**：以读写方式挂载根文件系统。\n\n## 2. 内存管理\n- **mem=**：指定可用内存大小。例如：`mem=512M`。\n- **quiet**：减少启动时的输出信息。\n- **verbose**：增加启动时的输出信息。\n\n## 3. 网络\n- **ip=**：指定静态IP地址。例如：`ip=192.168.1.10::192.168.1.1:255.255.255.0::eth0:off`。\n- **net.ifnames=0**：禁用新的网络接口命名规则，使用传统的命名方式（如eth0）。\n\n## 4. 文件系统\n- **fstab**：指定文件系统的挂载选项。例如：`fstab=LABEL=ROOT / ext4 defaults 1 1`。\n- **rootflags=**：指定根文件系统的挂载选项。例如：`rootflags=data=writeback`。\n\n## 5. 安全\n- **selinux=0**：禁用SELinux。\n- **apparmor=0**：禁用AppArmor。\n\n## 6. 调试\n- **debug**：启用内核调试信息。\n- **earlyprintk**：在早期启动阶段输出调试信息。例如：`earlyprintk=vga,keep`。\n- **initcall_debug**：调试内核初始化调用。\n\n## 7. 电源管理\n- **acpi=off**：禁用ACPI支持。\n- **noapic**：禁用APIC支持。\n\n## 8. 其他\n- **console=**：指定控制台设备。例如：`console=ttyS0,115200`。\n- **nmi_watchdog=0**：禁用NMI watchdog。\n- **panic=**：指定内核panic时的等待时间（以秒为单位）。例如：`panic=10`。\n\n这些参数可以通过在GRUB配置文件中设置或在引导加载程序的命令行中直接传递。例如，在GRUB配置文件中，可以在`linux`行添加这些参数：\n\n```grub\nmenuentry 'Linux' {\n    linux /boot/vmlinuz-5.10.0-21-amd64 root=/dev/sda1 ro quiet\n    initrd /boot/initrd.img-5.10.0-21-amd64\n}\n```\n\n在启动时，这些参数会被传递给内核，以控制内核的行为和配置。\n\n\n# 升级Kernel子版本\n其实就是打补丁\n1. 完整的压缩包版本，下载之后解压\n2. 版本之间的增量补丁按照正确的顺序应用了正确的补丁以升级到下一个版本。那么可以参考快速下载补丁并应用。\n\n补丁是两个源代码版本之间的差异，使用 `diff` 工具或更复杂的版本控制系统生成\n\n\n## patc命令使用\npatch 命令：\n- 在标准输入上获取补丁内容。\n- 将补丁描述的 修改应用到当前目录。\n\nPacth命令使用示例：\n```powershell\npatch -p <n> < diff_file\ncat diff_file | patch -p <n>\nxzcat diff_file.xz | patch –p <n>\nzcat diff_file.gz | patch –p <n>\n```\n\n注意事项：\n\nn : 文件路径中要跳过的目录级别数。 (-p: prune)\n您可以使用 -R 选项反向应用补丁。\n您可以使用 --dry-run 选项测试补丁。\n\n## 应用Linux Patch补丁​\n两种类型的 Linux 补丁：\n\n- 要么适用于之前的稳定版本（从 x.< y-1 > 至 x.y ）\n- 或者对当前稳定版本进行修复（从 x.y 至 x.y.z）\n\n可以下载 gzip 或 xz（小得多）压缩文件。始终为patch -p1 生成。\n\n需要在顶层内核源码目录下运行patch命令。\n\n![例子](https://image.aruoshui.fun/i/2025/02/14/sztbt0-0.webp)\n\n\n# linux busybox\n## 根文件系统\n所谓制作根文件系统，就是创建各种目录，并且在目录里创建相应的文件。例如：在/bin目录下放置可执行程序，在/lib下放置各种库等等。通常配合chroot命令使用。\n\n## busybox\nBusybox将众多的UNIX命令集合进一个很小的可执行程序中，可以用来替代GNU fileutils、shellutils等工具集。Busybox中各种命令与相应的GNU工具相比，所能提供的选项比较少，但是也足够一般的应用了。Busybox主要用于嵌入式系统。\n\n在创建根文件系统的时候，如果使用Busybox的话，只需要在/dev目录下创建必要的设备节点，在/etc目录下增加一些配置文件即可，当然，如果Busybox使用动态链接，那么还需要再/lib目录下包含库文件。\n\n详细的配置使用可以看\n{% link linux busybox详解, https://blog.csdn.net/m0_66596286/article/details/135559755, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n\n","slug":"Linux-kernel-compile","published":1,"updated":"2025-02-14T10:21:33.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6inu000dmktthfrk6143","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"内核模块\" href=\"https://blog.csdn.net/weixin_45093118/article/details/139397775\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">内核模块</p><p class=\"url\">https://blog.csdn.net/weixin_45093118/article/details/139397775</p></div></a></div> \n<h1>Linux kernel开发模式</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/13/tu9wiw-0.webp\" alt=\"开发模式\"></p>\n<h1>如何构建kernel</h1>\n<ol>\n<li>获取配套的交叉编译工具链</li>\n</ol>\n<ul>\n<li>SOC原厂提供:NXPST Rockchip Amlogic Allwinnertech 等</li>\n<li>社区下载:Linrao Debian ARM Bootlin下载kernel源码</li>\n</ul>\n<ol start=\"2\">\n<li>获取Linux Kernel主线LTS源码</li>\n</ol>\n<ul>\n<li>Git方式获取: git clone <a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git\">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git</a></li>\n<li>压缩版下载: <a href=\"https://mirrors.edge.kernel.org/pub/linux/kernel/%E8%8E%B7%E5%8F%96%E8%8A%AF%E7%89%87%E5%8E%9F%E5%8E%82Kernel%E6%BA%90%E7%A0%81\">https://mirrors.edge.kernel.org/pub/linux/kernel/获取芯片原厂Kernel源码</a></li>\n</ul>\n<ol start=\"3\">\n<li>Host下配置开发环境</li>\n</ol>\n<ul>\n<li>安装必要依赖包</li>\n<li>解压配置合适的工具链</li>\n</ul>\n<ol start=\"4\">\n<li>指定编译板子配置文件</li>\n</ol>\n<ul>\n<li>make BOARDNAME defconfig</li>\n</ul>\n<ol start=\"5\">\n<li>编译</li>\n</ol>\n<ul>\n<li>编译内核镜像 make -jN</li>\n<li>编译设备树 make dtbs</li>\n<li>编译安装模块驱动 make modules</li>\n</ul>\n<h2 id=\"kernel两种源码\">kernel两种源码</h2>\n<ol>\n<li>官方主线版本\n<ul>\n<li>遵循内核的开发模式</li>\n<li>可能尚未包含特定领域的最新特性</li>\n</ul>\n</li>\n<li>芯片厂商自己的内核源\n<ul>\n<li>芯片厂商优先关注硬件的支持</li>\n<li>与Linux有非常重要的增量支持</li>\n<li>许多SOC供应商同时参与主线的开发</li>\n</ul>\n</li>\n<li>许多内核社区维护自己的内核版本\n<ul>\n<li>架构社区(ARM、MIPS、PowerPC等)设备驱动社区(12C、SPI、USB、PCI、网络等)他社区(如real-time等)</li>\n<li>无官方发布，仅用于分享工作和为主线版本做出贡献。</li>\n</ul>\n</li>\n</ol>\n<h1>kernel目录介绍</h1>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">linux/</span><br><span class=\"line\">├── arch/             <span class=\"comment\"># 架构特定的代码，包括不同硬件平台的特定代码。</span></span><br><span class=\"line\">├── block/            <span class=\"comment\"># 块设备层, 包括文件系统和磁盘驱动程序。</span></span><br><span class=\"line\">├── crypto/           <span class=\"comment\"># 加密算法</span></span><br><span class=\"line\">├── Documentation/    <span class=\"comment\"># 存放内核文档和说明。</span></span><br><span class=\"line\">├── drivers/          <span class=\"comment\"># 包含各种设备驱动程序，如网络、声卡、USB等。</span></span><br><span class=\"line\">├── fs/               <span class=\"comment\"># 提供文件系统的实现，包括虚拟文件系统（VFS）以及各种具体文件系统如ext4、FAT等。</span></span><br><span class=\"line\">├── include/          <span class=\"comment\"># 存放公共头文件，供内核和模块使用。</span></span><br><span class=\"line\">├── init/             <span class=\"comment\"># 包含启动和初始化代码。</span></span><br><span class=\"line\">├── ipc/              <span class=\"comment\"># 提供进程间通信（IPC）机制的实现，如管道、消息队列等。</span></span><br><span class=\"line\">├── kernel/           <span class=\"comment\"># 包含内核核心功能的实现，如调度器、定时器等。</span></span><br><span class=\"line\">├── lib/              <span class=\"comment\"># 提供通用库函数和工具函数。</span></span><br><span class=\"line\">├── mm/               <span class=\"comment\"># 管理内存分配和页面管理。</span></span><br><span class=\"line\">├── net/              <span class=\"comment\"># 处理网络协议栈和网络驱动程序相关代码。</span></span><br><span class=\"line\">├── samples/          <span class=\"comment\"># 示例代码，展示一些特定功能或API的使用方法。</span></span><br><span class=\"line\">├── scripts/          <span class=\"comment\"># 包含一些编译脚本和工具</span></span><br><span class=\"line\">├── security/         <span class=\"comment\"># 提供安全模块和安全相关的功能</span></span><br><span class=\"line\">├── sound/            <span class=\"comment\"># 各种音频设备的驱动程序、音频接口的实现以及其他与音频处理和控制相关的代码文件</span></span><br><span class=\"line\">├── tools/            <span class=\"comment\"># 辅助开发、调试和分析Linux内核和相关组件的工具和实用程序</span></span><br><span class=\"line\">├── usr/              <span class=\"comment\"># 存放用户级别软件和相关文件的位置。</span></span><br><span class=\"line\">└── virt/             <span class=\"comment\"># 用于提供有关虚拟化技术的信息</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1>配置Kernel编译目标环境变量</h1>\n<p>主要是配置交叉编译，需要定义<code>ARCH</code>和<code>CROSS_COMPILE</code>的方式</p>\n<ul>\n<li>在make 命令中传递两个参数<code>make ARCH = arm CROSS_COMPILE = arm-linux</code><br>\n但是这样配置在make的时候会容易忘记传，导致编译半天不可用</li>\n<li>将两个变量设置为系统变量，使用<code>export</code>命令就行<br>\n但只能工作在当前的终端，如果想要长久使用，可以将设置放入<code>~/.bashrc</code>文件中，之后刷新<code>source ~/.bashrc</code>就行</li>\n</ul>\n<h1>配置单板配置文件</h1>\n<p>这里对于嵌入式平台案例（ARM32以上）</p>\n<ul>\n<li>默认配置文件可用，通常适用于每个CPU系列</li>\n<li>存储在arch/<arch>/configs/中，并且只是最小的.config文件（仅与默认设置有一些不同）</li>\n<li>make help以查找是否可用于您的平台、</li>\n<li>要加载默认的配置文件，只要运行<code>make &lt;CPU&gt;_defconfig</code></li>\n<li>这将覆盖现有的.config文件</li>\n<li>进入配置菜单界面进行更改配置 （make menuconfig）</li>\n</ul>\n<h1>内核配置项</h1>\n<p>Linux内核配置项主要包括以下几个方面：</p>\n<h3 id=\"1-处理器类型和特性\">1. 处理器类型和特性</h3>\n<ul>\n<li>选择支持的处理器架构（如x86, ARM, MIPS等）。</li>\n<li>配置处理器特性，如SMP（对称多处理）支持、CPU频率调整等。</li>\n</ul>\n<h3 id=\"2-内存管理\">2. 内存管理</h3>\n<ul>\n<li>配置内存管理选项，如支持大内存页、内存压缩等。</li>\n<li>选择不同的内存分配器（如SLAB, SLOB, SLUB）。</li>\n</ul>\n<h3 id=\"3-设备驱动\">3. 设备驱动</h3>\n<ul>\n<li>选择支持的硬件设备，如网络设备、存储设备、USB设备等。</li>\n<li>配置特定设备的驱动程序，如NVIDIA GPU驱动、Intel网卡驱动等。</li>\n</ul>\n<h3 id=\"4-文件系统\">4. 文件系统</h3>\n<ul>\n<li>选择支持的文件系统（如ext4, btrfs, xfs等）。</li>\n<li>配置文件系统的特性，如日志支持、压缩支持等。</li>\n</ul>\n<h3 id=\"5-网络\">5. 网络</h3>\n<ul>\n<li>配置网络协议支持，如IPv4, IPv6, TCP/IP等。</li>\n<li>选择支持的网络功能，如防火墙、NAT、QoS等。</li>\n</ul>\n<h3 id=\"6-安全\">6. 安全</h3>\n<ul>\n<li>配置内核安全选项，如SELinux, AppArmor等。</li>\n<li>选择支持的安全模块和功能。</li>\n</ul>\n<h3 id=\"7-模块支持\">7. 模块支持</h3>\n<ul>\n<li>配置内核模块支持，允许动态加载和卸载模块。</li>\n<li>选择编译为模块的驱动程序和功能。</li>\n</ul>\n<h3 id=\"8-调试和开发\">8. 调试和开发</h3>\n<ul>\n<li>配置内核调试选项，如内核调试信息、内核日志级别等。</li>\n<li>选择支持的开发工具和功能，如KDB、KGDB等。</li>\n</ul>\n<h3 id=\"9-电源管理\">9. 电源管理</h3>\n<ul>\n<li>配置电源管理选项，如休眠、挂起等。</li>\n<li>选择支持的电源管理功能，如CPU频率调整、动态电源管理等。</li>\n</ul>\n<h3 id=\"10-其他\">10. 其他</h3>\n<ul>\n<li>配置内核版本信息、编译选项等。</li>\n<li>选择支持的其他功能，如虚拟化、实时内核支持等。</li>\n</ul>\n<p>这些配置项可以通过<code>make menuconfig</code>、<code>make xconfig</code>等工具进行图形化配置，也可以通过直接编辑<code>.config</code>文件进行手动配置。</p>\n<h1>内核选项</h1>\n<p>执行<code>make menuconfig</code>等工具后，可以直接在图形界面中配置<br>\n比如：<img src=\"https://image.aruoshui.fun/i/2025/02/14/sfr3ik-0.webp\" alt=\"config\"></p>\n<p>相关的配置选项有：<br>\n<img src=\"https://image.aruoshui.fun/i/2025/02/14/sgsc0l-0.webp\" alt=\"选项\"></p>\n<h1>编译内核</h1>\n<ul>\n<li>在内核源码中执行</li>\n<li>可以最大化利用多个CPU和I/O资源，记住内核数目/线程，执行 make -j &lt;ncpus * 2 或者 ncpus + 2&gt;</li>\n<li>可以使用ccache编译器缓存： <code>export CROSS_COMPILE = 'ccacheriscv64-linux'</code></li>\n</ul>\n<h1>生成的镜像文件</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/14/sl0ec4-0.webp\" alt=\"镜像文件\"></p>\n<h1>安装</h1>\n<p>嵌入式中一般直接网络拷贝替换、tftp服务器替换重新启动就行</p>\n<h1>编译设备树</h1>\n<p>执行<code>make dtbs</code></p>\n<h1>内核模块</h1>\n<p>由于Linux内核的整体架构庞大且组件多，若将所有需要的功能都打包到内核，会导致内核会很大且臃肿，为了解决这个问题，Linux提供了Module的机制。<br>\nModule机制就是在编译内核时本身并不需要包含所有功能，在需要某些功能时再将对应模块动态的加载到内核中，且模块一旦被加载就和内核中其他部分完全一样，每个内核模块在文件系统中存储为一个单独的文件，必须访问文件系统才能使用驱动模块</p>\n<h2 id=\"嵌入式主机模块驱动\">嵌入式主机模块驱动</h2>\n<p>需要指定 INSTALL_MOD_PATH 变量来生成模块相关文件并将模块安装在 &lt;目标根文件系统&gt; 而不是 &lt;主机根文件系统&gt;中。示例命令：<br>\n<code>make INSTALL_MOD_PATH=&lt;dir&gt;/ modules_install</code></p>\n<h1>使用uboot引导嵌入式设备</h1>\n<h2 id=\"引导加载程序：\">引导加载程序：</h2>\n<p>嵌入式系统通常使用特定的引导加载程序，例如 U-Boot（Universal Boot Loader）或 Barebox。这些引导加载程序能够加载内核映像并配置启动参数。</p>\n<h2 id=\"配置引导加载程序（ENV）：\">配置引导加载程序（ENV）：</h2>\n<p>在引导加载程序中，需要配置引导命令，指定内核映像的位置、启动参数以及设备树（Device Tree）等信息。这通常在引导加载程序的环境变量中进行配置。</p>\n<h2 id=\"加载设备树（Device-Tree）：\">加载设备树（Device Tree）：</h2>\n<p>对于许多嵌入式系统，设备树是一个重要的概念。设备树描述了硬件的结构和配置信息，使得相同的内核映像可以在不同的硬件平台上运行。引导加载程序可能会加载设备树文件并传递给内核。</p>\n<h2 id=\"加载内核映像：\">加载内核映像：</h2>\n<p>引导加载程序通过网络、存储设备或其他途径加载 Linux 内核映像到内存中。这通常是 zImage 或 Image 文件。</p>\n<h2 id=\"设置启动参数-bootargs-：\">设置启动参数(bootargs)：</h2>\n<p>引导加载程序设置启动参数，例如 root 文件系统的位置、内核命令行参数等。这些参数可能包括根文件系统的位置、内核的命令行参数等 。</p>\n<h2 id=\"转交控制权给内核：\">转交控制权给内核：</h2>\n<p>引导加载程序将控制权转交给内核，使得内核可以开始执行。内核初始化过程中会进行硬件初始化、加载驱动程序等操作。</p>\n<h2 id=\"用户空间初始化：\">用户空间初始化：</h2>\n<p>内核初始化完成后，启动用户空间进程。这可能涉及到使用 init 程序或其他初始化系统(busybox)。<br>\n用户空间操作系统启动：<br>\n一旦用户空间初始化完成，操作系统开始运行，用户可以开始使用嵌入式系统(APP)。</p>\n<p>因此，典型的启动过程是：</p>\n<ul>\n<li>在内存中的地址 X 加载 zImage</li>\n<li>在内存中的地址 Y 加载<board>.dtb</li>\n<li>用bootz X – Y 启动内核（中间的 - 表示没有 initramfs）</li>\n</ul>\n<h1>Linux内核启动命令行参数概述</h1>\n<p>Linux内核启动命令行参数用于在系统启动时传递各种配置选项给内核。这些参数可以通过GRUB或其他引导加载程序进行设置。以下是一些常见的内核启动命令行参数：</p>\n<h2 id=\"1-基本参数\">1. 基本参数</h2>\n<ul>\n<li><strong>root=</strong>：指定根文件系统的设备。例如：<code>root=/dev/sda1</code>。</li>\n<li><strong>init=</strong>：指定启动时运行的初始进程。例如：<code>init=/bin/bash</code>。</li>\n<li><strong>ro</strong>：以只读方式挂载根文件系统。</li>\n<li><strong>rw</strong>：以读写方式挂载根文件系统。</li>\n</ul>\n<h2 id=\"2-内存管理-2\">2. 内存管理</h2>\n<ul>\n<li><strong>mem=</strong>：指定可用内存大小。例如：<code>mem=512M</code>。</li>\n<li><strong>quiet</strong>：减少启动时的输出信息。</li>\n<li><strong>verbose</strong>：增加启动时的输出信息。</li>\n</ul>\n<h2 id=\"3-网络\">3. 网络</h2>\n<ul>\n<li><strong>ip=</strong>：指定静态IP地址。例如：<code>ip=192.168.1.10::192.168.1.1:255.255.255.0::eth0:off</code>。</li>\n<li><strong>net.ifnames=0</strong>：禁用新的网络接口命名规则，使用传统的命名方式（如eth0）。</li>\n</ul>\n<h2 id=\"4-文件系统-2\">4. 文件系统</h2>\n<ul>\n<li><strong>fstab</strong>：指定文件系统的挂载选项。例如：<code>fstab=LABEL=ROOT / ext4 defaults 1 1</code>。</li>\n<li><strong>rootflags=</strong>：指定根文件系统的挂载选项。例如：<code>rootflags=data=writeback</code>。</li>\n</ul>\n<h2 id=\"5-安全\">5. 安全</h2>\n<ul>\n<li><strong>selinux=0</strong>：禁用SELinux。</li>\n<li><strong>apparmor=0</strong>：禁用AppArmor。</li>\n</ul>\n<h2 id=\"6-调试\">6. 调试</h2>\n<ul>\n<li><strong>debug</strong>：启用内核调试信息。</li>\n<li><strong>earlyprintk</strong>：在早期启动阶段输出调试信息。例如：<code>earlyprintk=vga,keep</code>。</li>\n<li><strong>initcall_debug</strong>：调试内核初始化调用。</li>\n</ul>\n<h2 id=\"7-电源管理\">7. 电源管理</h2>\n<ul>\n<li><strong>acpi=off</strong>：禁用ACPI支持。</li>\n<li><strong>noapic</strong>：禁用APIC支持。</li>\n</ul>\n<h2 id=\"8-其他\">8. 其他</h2>\n<ul>\n<li><strong>console=</strong>：指定控制台设备。例如：<code>console=ttyS0,115200</code>。</li>\n<li><strong>nmi_watchdog=0</strong>：禁用NMI watchdog。</li>\n<li><strong>panic=</strong>：指定内核panic时的等待时间（以秒为单位）。例如：<code>panic=10</code>。</li>\n</ul>\n<p>这些参数可以通过在GRUB配置文件中设置或在引导加载程序的命令行中直接传递。例如，在GRUB配置文件中，可以在<code>linux</code>行添加这些参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">menuentry &#x27;Linux&#x27; &#123;</span><br><span class=\"line\">    linux /boot/vmlinuz-5.10.0-21-amd64 root=/dev/sda1 ro quiet</span><br><span class=\"line\">    initrd /boot/initrd.img-5.10.0-21-amd64</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在启动时，这些参数会被传递给内核，以控制内核的行为和配置。</p>\n<h1>升级Kernel子版本</h1>\n<p>其实就是打补丁</p>\n<ol>\n<li>完整的压缩包版本，下载之后解压</li>\n<li>版本之间的增量补丁按照正确的顺序应用了正确的补丁以升级到下一个版本。那么可以参考快速下载补丁并应用。</li>\n</ol>\n<p>补丁是两个源代码版本之间的差异，使用 <code>diff</code> 工具或更复杂的版本控制系统生成</p>\n<h2 id=\"patc命令使用\">patc命令使用</h2>\n<p>patch 命令：</p>\n<ul>\n<li>在标准输入上获取补丁内容。</li>\n<li>将补丁描述的 修改应用到当前目录。</li>\n</ul>\n<p>Pacth命令使用示例：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">patch <span class=\"literal\">-p</span> &lt;n&gt; &lt; diff_file</span><br><span class=\"line\"><span class=\"built_in\">cat</span> diff_file | patch <span class=\"literal\">-p</span> &lt;n&gt;</span><br><span class=\"line\">xzcat diff_file.xz | patch –p &lt;n&gt;</span><br><span class=\"line\">zcat diff_file.gz | patch –p &lt;n&gt;</span><br></pre></td></tr></table></figure>\n<p>注意事项：</p>\n<p>n : 文件路径中要跳过的目录级别数。 (-p: prune)<br>\n您可以使用 -R 选项反向应用补丁。<br>\n您可以使用 --dry-run 选项测试补丁。</p>\n<h2 id=\"应用Linux-Patch补丁​\">应用Linux Patch补丁​</h2>\n<p>两种类型的 Linux 补丁：</p>\n<ul>\n<li>要么适用于之前的稳定版本（从 x.&lt; y-1 &gt; 至 x.y ）</li>\n<li>或者对当前稳定版本进行修复（从 x.y 至 x.y.z）</li>\n</ul>\n<p>可以下载 gzip 或 xz（小得多）压缩文件。始终为patch -p1 生成。</p>\n<p>需要在顶层内核源码目录下运行patch命令。</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/14/sztbt0-0.webp\" alt=\"例子\"></p>\n<h1>linux busybox</h1>\n<h2 id=\"根文件系统\">根文件系统</h2>\n<p>所谓制作根文件系统，就是创建各种目录，并且在目录里创建相应的文件。例如：在/bin目录下放置可执行程序，在/lib下放置各种库等等。通常配合chroot命令使用。</p>\n<h2 id=\"busybox\">busybox</h2>\n<p>Busybox将众多的UNIX命令集合进一个很小的可执行程序中，可以用来替代GNU fileutils、shellutils等工具集。Busybox中各种命令与相应的GNU工具相比，所能提供的选项比较少，但是也足够一般的应用了。Busybox主要用于嵌入式系统。</p>\n<p>在创建根文件系统的时候，如果使用Busybox的话，只需要在/dev目录下创建必要的设备节点，在/etc目录下增加一些配置文件即可，当然，如果Busybox使用动态链接，那么还需要再/lib目录下包含库文件。</p>\n<p>详细的配置使用可以看</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"linux busybox详解\" href=\"https://blog.csdn.net/m0_66596286/article/details/135559755\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">linux busybox详解</p><p class=\"url\">https://blog.csdn.net/m0_66596286/article/details/135559755</p></div></a></div> \n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"内核模块\" href=\"https://blog.csdn.net/weixin_45093118/article/details/139397775\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">内核模块</p><p class=\"url\">https://blog.csdn.net/weixin_45093118/article/details/139397775</p></div></a></div> \n<h1>Linux kernel开发模式</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/13/tu9wiw-0.webp\" alt=\"开发模式\"></p>\n<h1>如何构建kernel</h1>\n<ol>\n<li>获取配套的交叉编译工具链</li>\n</ol>\n<ul>\n<li>SOC原厂提供:NXPST Rockchip Amlogic Allwinnertech 等</li>\n<li>社区下载:Linrao Debian ARM Bootlin下载kernel源码</li>\n</ul>\n<ol start=\"2\">\n<li>获取Linux Kernel主线LTS源码</li>\n</ol>\n<ul>\n<li>Git方式获取: git clone <a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git\">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git</a></li>\n<li>压缩版下载: <a href=\"https://mirrors.edge.kernel.org/pub/linux/kernel/%E8%8E%B7%E5%8F%96%E8%8A%AF%E7%89%87%E5%8E%9F%E5%8E%82Kernel%E6%BA%90%E7%A0%81\">https://mirrors.edge.kernel.org/pub/linux/kernel/获取芯片原厂Kernel源码</a></li>\n</ul>\n<ol start=\"3\">\n<li>Host下配置开发环境</li>\n</ol>\n<ul>\n<li>安装必要依赖包</li>\n<li>解压配置合适的工具链</li>\n</ul>\n<ol start=\"4\">\n<li>指定编译板子配置文件</li>\n</ol>\n<ul>\n<li>make BOARDNAME defconfig</li>\n</ul>\n<ol start=\"5\">\n<li>编译</li>\n</ol>\n<ul>\n<li>编译内核镜像 make -jN</li>\n<li>编译设备树 make dtbs</li>\n<li>编译安装模块驱动 make modules</li>\n</ul>\n<h2 id=\"kernel两种源码\">kernel两种源码</h2>\n<ol>\n<li>官方主线版本\n<ul>\n<li>遵循内核的开发模式</li>\n<li>可能尚未包含特定领域的最新特性</li>\n</ul>\n</li>\n<li>芯片厂商自己的内核源\n<ul>\n<li>芯片厂商优先关注硬件的支持</li>\n<li>与Linux有非常重要的增量支持</li>\n<li>许多SOC供应商同时参与主线的开发</li>\n</ul>\n</li>\n<li>许多内核社区维护自己的内核版本\n<ul>\n<li>架构社区(ARM、MIPS、PowerPC等)设备驱动社区(12C、SPI、USB、PCI、网络等)他社区(如real-time等)</li>\n<li>无官方发布，仅用于分享工作和为主线版本做出贡献。</li>\n</ul>\n</li>\n</ol>\n<h1>kernel目录介绍</h1>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">linux/</span><br><span class=\"line\">├── arch/             <span class=\"comment\"># 架构特定的代码，包括不同硬件平台的特定代码。</span></span><br><span class=\"line\">├── block/            <span class=\"comment\"># 块设备层, 包括文件系统和磁盘驱动程序。</span></span><br><span class=\"line\">├── crypto/           <span class=\"comment\"># 加密算法</span></span><br><span class=\"line\">├── Documentation/    <span class=\"comment\"># 存放内核文档和说明。</span></span><br><span class=\"line\">├── drivers/          <span class=\"comment\"># 包含各种设备驱动程序，如网络、声卡、USB等。</span></span><br><span class=\"line\">├── fs/               <span class=\"comment\"># 提供文件系统的实现，包括虚拟文件系统（VFS）以及各种具体文件系统如ext4、FAT等。</span></span><br><span class=\"line\">├── include/          <span class=\"comment\"># 存放公共头文件，供内核和模块使用。</span></span><br><span class=\"line\">├── init/             <span class=\"comment\"># 包含启动和初始化代码。</span></span><br><span class=\"line\">├── ipc/              <span class=\"comment\"># 提供进程间通信（IPC）机制的实现，如管道、消息队列等。</span></span><br><span class=\"line\">├── kernel/           <span class=\"comment\"># 包含内核核心功能的实现，如调度器、定时器等。</span></span><br><span class=\"line\">├── lib/              <span class=\"comment\"># 提供通用库函数和工具函数。</span></span><br><span class=\"line\">├── mm/               <span class=\"comment\"># 管理内存分配和页面管理。</span></span><br><span class=\"line\">├── net/              <span class=\"comment\"># 处理网络协议栈和网络驱动程序相关代码。</span></span><br><span class=\"line\">├── samples/          <span class=\"comment\"># 示例代码，展示一些特定功能或API的使用方法。</span></span><br><span class=\"line\">├── scripts/          <span class=\"comment\"># 包含一些编译脚本和工具</span></span><br><span class=\"line\">├── security/         <span class=\"comment\"># 提供安全模块和安全相关的功能</span></span><br><span class=\"line\">├── sound/            <span class=\"comment\"># 各种音频设备的驱动程序、音频接口的实现以及其他与音频处理和控制相关的代码文件</span></span><br><span class=\"line\">├── tools/            <span class=\"comment\"># 辅助开发、调试和分析Linux内核和相关组件的工具和实用程序</span></span><br><span class=\"line\">├── usr/              <span class=\"comment\"># 存放用户级别软件和相关文件的位置。</span></span><br><span class=\"line\">└── virt/             <span class=\"comment\"># 用于提供有关虚拟化技术的信息</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1>配置Kernel编译目标环境变量</h1>\n<p>主要是配置交叉编译，需要定义<code>ARCH</code>和<code>CROSS_COMPILE</code>的方式</p>\n<ul>\n<li>在make 命令中传递两个参数<code>make ARCH = arm CROSS_COMPILE = arm-linux</code><br>\n但是这样配置在make的时候会容易忘记传，导致编译半天不可用</li>\n<li>将两个变量设置为系统变量，使用<code>export</code>命令就行<br>\n但只能工作在当前的终端，如果想要长久使用，可以将设置放入<code>~/.bashrc</code>文件中，之后刷新<code>source ~/.bashrc</code>就行</li>\n</ul>\n<h1>配置单板配置文件</h1>\n<p>这里对于嵌入式平台案例（ARM32以上）</p>\n<ul>\n<li>默认配置文件可用，通常适用于每个CPU系列</li>\n<li>存储在arch/<arch>/configs/中，并且只是最小的.config文件（仅与默认设置有一些不同）</li>\n<li>make help以查找是否可用于您的平台、</li>\n<li>要加载默认的配置文件，只要运行<code>make &lt;CPU&gt;_defconfig</code></li>\n<li>这将覆盖现有的.config文件</li>\n<li>进入配置菜单界面进行更改配置 （make menuconfig）</li>\n</ul>\n<h1>内核配置项</h1>\n<p>Linux内核配置项主要包括以下几个方面：</p>\n<h3 id=\"1-处理器类型和特性\">1. 处理器类型和特性</h3>\n<ul>\n<li>选择支持的处理器架构（如x86, ARM, MIPS等）。</li>\n<li>配置处理器特性，如SMP（对称多处理）支持、CPU频率调整等。</li>\n</ul>\n<h3 id=\"2-内存管理\">2. 内存管理</h3>\n<ul>\n<li>配置内存管理选项，如支持大内存页、内存压缩等。</li>\n<li>选择不同的内存分配器（如SLAB, SLOB, SLUB）。</li>\n</ul>\n<h3 id=\"3-设备驱动\">3. 设备驱动</h3>\n<ul>\n<li>选择支持的硬件设备，如网络设备、存储设备、USB设备等。</li>\n<li>配置特定设备的驱动程序，如NVIDIA GPU驱动、Intel网卡驱动等。</li>\n</ul>\n<h3 id=\"4-文件系统\">4. 文件系统</h3>\n<ul>\n<li>选择支持的文件系统（如ext4, btrfs, xfs等）。</li>\n<li>配置文件系统的特性，如日志支持、压缩支持等。</li>\n</ul>\n<h3 id=\"5-网络\">5. 网络</h3>\n<ul>\n<li>配置网络协议支持，如IPv4, IPv6, TCP/IP等。</li>\n<li>选择支持的网络功能，如防火墙、NAT、QoS等。</li>\n</ul>\n<h3 id=\"6-安全\">6. 安全</h3>\n<ul>\n<li>配置内核安全选项，如SELinux, AppArmor等。</li>\n<li>选择支持的安全模块和功能。</li>\n</ul>\n<h3 id=\"7-模块支持\">7. 模块支持</h3>\n<ul>\n<li>配置内核模块支持，允许动态加载和卸载模块。</li>\n<li>选择编译为模块的驱动程序和功能。</li>\n</ul>\n<h3 id=\"8-调试和开发\">8. 调试和开发</h3>\n<ul>\n<li>配置内核调试选项，如内核调试信息、内核日志级别等。</li>\n<li>选择支持的开发工具和功能，如KDB、KGDB等。</li>\n</ul>\n<h3 id=\"9-电源管理\">9. 电源管理</h3>\n<ul>\n<li>配置电源管理选项，如休眠、挂起等。</li>\n<li>选择支持的电源管理功能，如CPU频率调整、动态电源管理等。</li>\n</ul>\n<h3 id=\"10-其他\">10. 其他</h3>\n<ul>\n<li>配置内核版本信息、编译选项等。</li>\n<li>选择支持的其他功能，如虚拟化、实时内核支持等。</li>\n</ul>\n<p>这些配置项可以通过<code>make menuconfig</code>、<code>make xconfig</code>等工具进行图形化配置，也可以通过直接编辑<code>.config</code>文件进行手动配置。</p>\n<h1>内核选项</h1>\n<p>执行<code>make menuconfig</code>等工具后，可以直接在图形界面中配置<br>\n比如：<img src=\"https://image.aruoshui.fun/i/2025/02/14/sfr3ik-0.webp\" alt=\"config\"></p>\n<p>相关的配置选项有：<br>\n<img src=\"https://image.aruoshui.fun/i/2025/02/14/sgsc0l-0.webp\" alt=\"选项\"></p>\n<h1>编译内核</h1>\n<ul>\n<li>在内核源码中执行</li>\n<li>可以最大化利用多个CPU和I/O资源，记住内核数目/线程，执行 make -j &lt;ncpus * 2 或者 ncpus + 2&gt;</li>\n<li>可以使用ccache编译器缓存： <code>export CROSS_COMPILE = 'ccacheriscv64-linux'</code></li>\n</ul>\n<h1>生成的镜像文件</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/14/sl0ec4-0.webp\" alt=\"镜像文件\"></p>\n<h1>安装</h1>\n<p>嵌入式中一般直接网络拷贝替换、tftp服务器替换重新启动就行</p>\n<h1>编译设备树</h1>\n<p>执行<code>make dtbs</code></p>\n<h1>内核模块</h1>\n<p>由于Linux内核的整体架构庞大且组件多，若将所有需要的功能都打包到内核，会导致内核会很大且臃肿，为了解决这个问题，Linux提供了Module的机制。<br>\nModule机制就是在编译内核时本身并不需要包含所有功能，在需要某些功能时再将对应模块动态的加载到内核中，且模块一旦被加载就和内核中其他部分完全一样，每个内核模块在文件系统中存储为一个单独的文件，必须访问文件系统才能使用驱动模块</p>\n<h2 id=\"嵌入式主机模块驱动\">嵌入式主机模块驱动</h2>\n<p>需要指定 INSTALL_MOD_PATH 变量来生成模块相关文件并将模块安装在 &lt;目标根文件系统&gt; 而不是 &lt;主机根文件系统&gt;中。示例命令：<br>\n<code>make INSTALL_MOD_PATH=&lt;dir&gt;/ modules_install</code></p>\n<h1>使用uboot引导嵌入式设备</h1>\n<h2 id=\"引导加载程序：\">引导加载程序：</h2>\n<p>嵌入式系统通常使用特定的引导加载程序，例如 U-Boot（Universal Boot Loader）或 Barebox。这些引导加载程序能够加载内核映像并配置启动参数。</p>\n<h2 id=\"配置引导加载程序（ENV）：\">配置引导加载程序（ENV）：</h2>\n<p>在引导加载程序中，需要配置引导命令，指定内核映像的位置、启动参数以及设备树（Device Tree）等信息。这通常在引导加载程序的环境变量中进行配置。</p>\n<h2 id=\"加载设备树（Device-Tree）：\">加载设备树（Device Tree）：</h2>\n<p>对于许多嵌入式系统，设备树是一个重要的概念。设备树描述了硬件的结构和配置信息，使得相同的内核映像可以在不同的硬件平台上运行。引导加载程序可能会加载设备树文件并传递给内核。</p>\n<h2 id=\"加载内核映像：\">加载内核映像：</h2>\n<p>引导加载程序通过网络、存储设备或其他途径加载 Linux 内核映像到内存中。这通常是 zImage 或 Image 文件。</p>\n<h2 id=\"设置启动参数-bootargs-：\">设置启动参数(bootargs)：</h2>\n<p>引导加载程序设置启动参数，例如 root 文件系统的位置、内核命令行参数等。这些参数可能包括根文件系统的位置、内核的命令行参数等 。</p>\n<h2 id=\"转交控制权给内核：\">转交控制权给内核：</h2>\n<p>引导加载程序将控制权转交给内核，使得内核可以开始执行。内核初始化过程中会进行硬件初始化、加载驱动程序等操作。</p>\n<h2 id=\"用户空间初始化：\">用户空间初始化：</h2>\n<p>内核初始化完成后，启动用户空间进程。这可能涉及到使用 init 程序或其他初始化系统(busybox)。<br>\n用户空间操作系统启动：<br>\n一旦用户空间初始化完成，操作系统开始运行，用户可以开始使用嵌入式系统(APP)。</p>\n<p>因此，典型的启动过程是：</p>\n<ul>\n<li>在内存中的地址 X 加载 zImage</li>\n<li>在内存中的地址 Y 加载<board>.dtb</li>\n<li>用bootz X – Y 启动内核（中间的 - 表示没有 initramfs）</li>\n</ul>\n<h1>Linux内核启动命令行参数概述</h1>\n<p>Linux内核启动命令行参数用于在系统启动时传递各种配置选项给内核。这些参数可以通过GRUB或其他引导加载程序进行设置。以下是一些常见的内核启动命令行参数：</p>\n<h2 id=\"1-基本参数\">1. 基本参数</h2>\n<ul>\n<li><strong>root=</strong>：指定根文件系统的设备。例如：<code>root=/dev/sda1</code>。</li>\n<li><strong>init=</strong>：指定启动时运行的初始进程。例如：<code>init=/bin/bash</code>。</li>\n<li><strong>ro</strong>：以只读方式挂载根文件系统。</li>\n<li><strong>rw</strong>：以读写方式挂载根文件系统。</li>\n</ul>\n<h2 id=\"2-内存管理-2\">2. 内存管理</h2>\n<ul>\n<li><strong>mem=</strong>：指定可用内存大小。例如：<code>mem=512M</code>。</li>\n<li><strong>quiet</strong>：减少启动时的输出信息。</li>\n<li><strong>verbose</strong>：增加启动时的输出信息。</li>\n</ul>\n<h2 id=\"3-网络\">3. 网络</h2>\n<ul>\n<li><strong>ip=</strong>：指定静态IP地址。例如：<code>ip=192.168.1.10::192.168.1.1:255.255.255.0::eth0:off</code>。</li>\n<li><strong>net.ifnames=0</strong>：禁用新的网络接口命名规则，使用传统的命名方式（如eth0）。</li>\n</ul>\n<h2 id=\"4-文件系统-2\">4. 文件系统</h2>\n<ul>\n<li><strong>fstab</strong>：指定文件系统的挂载选项。例如：<code>fstab=LABEL=ROOT / ext4 defaults 1 1</code>。</li>\n<li><strong>rootflags=</strong>：指定根文件系统的挂载选项。例如：<code>rootflags=data=writeback</code>。</li>\n</ul>\n<h2 id=\"5-安全\">5. 安全</h2>\n<ul>\n<li><strong>selinux=0</strong>：禁用SELinux。</li>\n<li><strong>apparmor=0</strong>：禁用AppArmor。</li>\n</ul>\n<h2 id=\"6-调试\">6. 调试</h2>\n<ul>\n<li><strong>debug</strong>：启用内核调试信息。</li>\n<li><strong>earlyprintk</strong>：在早期启动阶段输出调试信息。例如：<code>earlyprintk=vga,keep</code>。</li>\n<li><strong>initcall_debug</strong>：调试内核初始化调用。</li>\n</ul>\n<h2 id=\"7-电源管理\">7. 电源管理</h2>\n<ul>\n<li><strong>acpi=off</strong>：禁用ACPI支持。</li>\n<li><strong>noapic</strong>：禁用APIC支持。</li>\n</ul>\n<h2 id=\"8-其他\">8. 其他</h2>\n<ul>\n<li><strong>console=</strong>：指定控制台设备。例如：<code>console=ttyS0,115200</code>。</li>\n<li><strong>nmi_watchdog=0</strong>：禁用NMI watchdog。</li>\n<li><strong>panic=</strong>：指定内核panic时的等待时间（以秒为单位）。例如：<code>panic=10</code>。</li>\n</ul>\n<p>这些参数可以通过在GRUB配置文件中设置或在引导加载程序的命令行中直接传递。例如，在GRUB配置文件中，可以在<code>linux</code>行添加这些参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">menuentry &#x27;Linux&#x27; &#123;</span><br><span class=\"line\">    linux /boot/vmlinuz-5.10.0-21-amd64 root=/dev/sda1 ro quiet</span><br><span class=\"line\">    initrd /boot/initrd.img-5.10.0-21-amd64</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在启动时，这些参数会被传递给内核，以控制内核的行为和配置。</p>\n<h1>升级Kernel子版本</h1>\n<p>其实就是打补丁</p>\n<ol>\n<li>完整的压缩包版本，下载之后解压</li>\n<li>版本之间的增量补丁按照正确的顺序应用了正确的补丁以升级到下一个版本。那么可以参考快速下载补丁并应用。</li>\n</ol>\n<p>补丁是两个源代码版本之间的差异，使用 <code>diff</code> 工具或更复杂的版本控制系统生成</p>\n<h2 id=\"patc命令使用\">patc命令使用</h2>\n<p>patch 命令：</p>\n<ul>\n<li>在标准输入上获取补丁内容。</li>\n<li>将补丁描述的 修改应用到当前目录。</li>\n</ul>\n<p>Pacth命令使用示例：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">patch <span class=\"literal\">-p</span> &lt;n&gt; &lt; diff_file</span><br><span class=\"line\"><span class=\"built_in\">cat</span> diff_file | patch <span class=\"literal\">-p</span> &lt;n&gt;</span><br><span class=\"line\">xzcat diff_file.xz | patch –p &lt;n&gt;</span><br><span class=\"line\">zcat diff_file.gz | patch –p &lt;n&gt;</span><br></pre></td></tr></table></figure>\n<p>注意事项：</p>\n<p>n : 文件路径中要跳过的目录级别数。 (-p: prune)<br>\n您可以使用 -R 选项反向应用补丁。<br>\n您可以使用 --dry-run 选项测试补丁。</p>\n<h2 id=\"应用Linux-Patch补丁​\">应用Linux Patch补丁​</h2>\n<p>两种类型的 Linux 补丁：</p>\n<ul>\n<li>要么适用于之前的稳定版本（从 x.&lt; y-1 &gt; 至 x.y ）</li>\n<li>或者对当前稳定版本进行修复（从 x.y 至 x.y.z）</li>\n</ul>\n<p>可以下载 gzip 或 xz（小得多）压缩文件。始终为patch -p1 生成。</p>\n<p>需要在顶层内核源码目录下运行patch命令。</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/14/sztbt0-0.webp\" alt=\"例子\"></p>\n<h1>linux busybox</h1>\n<h2 id=\"根文件系统\">根文件系统</h2>\n<p>所谓制作根文件系统，就是创建各种目录，并且在目录里创建相应的文件。例如：在/bin目录下放置可执行程序，在/lib下放置各种库等等。通常配合chroot命令使用。</p>\n<h2 id=\"busybox\">busybox</h2>\n<p>Busybox将众多的UNIX命令集合进一个很小的可执行程序中，可以用来替代GNU fileutils、shellutils等工具集。Busybox中各种命令与相应的GNU工具相比，所能提供的选项比较少，但是也足够一般的应用了。Busybox主要用于嵌入式系统。</p>\n<p>在创建根文件系统的时候，如果使用Busybox的话，只需要在/dev目录下创建必要的设备节点，在/etc目录下增加一些配置文件即可，当然，如果Busybox使用动态链接，那么还需要再/lib目录下包含库文件。</p>\n<p>详细的配置使用可以看</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"linux busybox详解\" href=\"https://blog.csdn.net/m0_66596286/article/details/135559755\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">linux busybox详解</p><p class=\"url\">https://blog.csdn.net/m0_66596286/article/details/135559755</p></div></a></div> \n"},{"title":"GDB调试工具","abbrlink":14250,"date":"2024-03-05T12:08:01.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqtxn1-0.webp","swiper_index":null,"_content":"\n\n# 参考文章\n{% link 知乎, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n{% link CSDN, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n\n{% link github, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp%} \n\n最经常用的就用例子来介绍：\n```powershell\n(gdb) l                      <-- 显示带行号的源代码\n1 #include <stdio.h>\n2 int main ()\n3 {\n4     unsigned long long int n, sum;\n5     n = 1;\n6     sum = 0;\n7     while (n <= 100)\n8     {\n9         sum = sum + n;\n10         n = n + 1;\n(gdb)                      <-- 默认情况下，l 选项只显示 10 行源代码，如果查看后续代码，安装 Enter 回车即可                                                               \n11     }\n12     return 0;\n13 }\n(gdb) b 7               <-- 在第 7 行源代码处打断点\nBreakpoint 1 at 0x400504: file main.c, line 7.\n(gdb) r                   <-- 运行程序，遇到断点停止\nStarting program: /home/mozhiyan/demo1/main.exe\n\nBreakpoint 1, main () at main.c:7\n7     while (n <= 100)\nMissing separate debuginfos, use: debuginfo-install glibc-2.17-55.el7.x86_64\n(gdb) p n               <-- 查看代码中变量 n 的值\n$1 = 1                   <-- 当前 n 的值为 1，$1 表示该变量所在存储区的名称\n(gdb) b 12             <-- 在程序第 12 行处打断点\nBreakpoint 2 at 0x40051a: file main.c, line 12.\n(gdb) c                  <-- 继续执行程序\nContinuing.\n\nBreakpoint 2, main () at main.c:12\n12     return 0;\n(gdb) p n               <-- 查看当前 n 变量的值\n$2 = 101               <-- 当前 n 的值为 101\n(gdb) q                  <-- 退出调试\nA debugging session is active.\n\nInferior 1 [process 3080] will be killed.\n\nQuit anyway? (y or n) y                 <-- 确实是否退出调试，y 为退出，n 为不退出\n[root@bogon demo]#\n```\n\n## GDB break设置断点\n刚才的例子中已经涉及到了断点，`b`就指的是`break`\n\n### break\n`break <location>`这里location有这几种值：\n- linenum\tlinenum 是一个整数，表示要打断点处代码的行号。要知道，程序中各行代码都有对应的行号，可通过执行 l（小写的 L）命令看到。\n- filename:linenum\tfilename 表示源程序文件名；linenum 为整数，表示具体行数。整体的意思是在指令文件 filename 中的第 linenum 行打断点。\n- \\+ offset\n  \\- offset\toffset \n  为整数（假设值为 2），+offset 表示以当前程序暂停位置（例如第 4 行）为准，向后数 offset 行处（第 6 行）打断点；-offset 表示以当前程序暂停位置为准，向前数 offset 行处（第 2 行）打断点。\n- function\tfunction 表示程序中包含的函数的函数名，即 break 命令会在该函数内部的开头位置打断点，程序会执行到该函数第一行代码处暂停。\n- filename:function\tfilename 表示远程文件名；function 表示程序中函数的函数名。整体的意思是在指定文件 filename 中 function 函数的开头位置打断点。\n\n还有一种方法：`(gdb) break ... if cond`\n... 可以是前边`location`所有参数的值，用于指定打断点的具体位置；cond 为某个表达式。整体的含义为：每次程序执行到 ... 位置时都计算 cond 的值，如果为 True，则程序在该位置暂停；反之，程序继续执行。\n\n```powershell\n(gdb) l\n1 #include<stdio.h>\n2 int main(int argc,char* argv[])\n3 {\n4     int num = 1;\n5     while(num<100)\n6     {\n7         num *= 2;\n8     }\n9     printf(\"num=%d\",num);\n10   return 0;\n(gdb)\n11 }\n(gdb) b 4          <-- 程序第 4 行打断点\nBreakpoint 1 at 0x1138: file main.c, line 4.\n(gdb) r              <-- 运行程序，至第 4 行暂停\nStarting program: /home/ubuntu64/demo/main.exe\n\nBreakpoint 1, main (argc=1, argv=0x7fffffffe078) at main.c:4\n4     int num = 1;\n(gdb) b +1        <-- 在第 4 行的基础上，在第 5 行代码处打断点\nBreakpoint 2 at 0x55555555513f: file main.c, line 5.\n(gdb) c             <-- 继续执行程序，至第 5 行暂停\nContinuing.\n\nBreakpoint 2, main (argc=1, argv=0x7fffffffe078) at main.c:5\n5     while(num<100)\n(gdb) b 7 if num>10     <-- 如果 num>10 在第 7 行打断点\nBreakpoint 3 at 0x555555555141: file main.c, line 7.\n(gdb) c               <-- 继续执行\nContinuing.\n\nBreakpoint 3, main (argc=1, argv=0x7fffffffe078) at main.c:7\n7         num *= 2;       <-- 程序在第 7 行暂停\n(gdb) p num      <-- p 命令查看 num 当前的值\n$1 = 16             <-- num=16\n```\n### tbreak\ntbreak 命令可以看到是 break 命令的另一个版本，tbreak 和 break 命令的用法和功能都非常相似，唯一的不同在于，使用 tbreak 命令打的断点仅会作用 1 次，即使程序暂停之后，该断点就会自动消失。\n\n### GDB rbreak 命令\n和 break 和 tbreak 命令不同，rbreak 命令的作用对象是 C、C++ 程序中的函数，它会在指定函数的开头位置打断点。\n\nrbreak 命令的使用语法格式为：\n`(gdb) rbreak regex`\n\n其中 regex 为一个正则表达式，程序中函数的函数名只要满足 regex 条件，rbreak 命令就会其内部的开头位置打断点。值得一提的是，rbreak 命令打的断点和 break 命令打断点的效果是一样的，会一直存在，不会自动消失。\n\n## 实时监控变量值的变化情况\n当我们需要监控某个变量或者表达式的值，通过值的变化情况判断程序的执行过程是否存在异常或者Bug。这种情况下，break 命令显然不再适用，推荐使用 `watch` 命令\n`(gdb) watch cond`这个 cond 就是监控的变量或者表达式\n```powershell\n(gdb) l           <--列出要调试的程序源码\n1 #include<stdio.h>\n2 int main(int argc,char* argv[])\n3 {\n4     int num = 1;\n5     while(num<=100)\n6     {\n7         num *= 2;\n8     }\n9     printf(\"%d\",num);\n10     return 0;\n(gdb)\n11 }\n(gdb) b 4       <-- 使用 break 命令打断点\nBreakpoint 1 at 0x115c: file main.c, line 4.\n(gdb) r           <-- 执行程序\nStarting program: /home/ubuntu64/demo/main.exe\n\nBreakpoint 1, main (argc=1, argv=0x7fffffffe088) at main.c:4\n4     int num = 1;\n(gdb) watch num   <-- 监控程序中 num 变量的值\nHardware watchpoint 2: num\n(gdb) c            <-- 继续执行，当 num 值发生改变时，程序才停止执行\nContinuing.\n\nHardware watchpoint 2: num\n\nOld value = 0\nNew value = 2\nmain (argc=1, argv=0x7fffffffe088) at main.c:5\n5     while(num<=100)\n(gdb) c           <-- num 值发生了改变，继续执行程序\nContinuing.\n\nHardware watchpoint 2: num\n\nOld value = 2\nNew value = 4\nmain (argc=1, argv=0x7fffffffe088) at main.c:5\n5     while(num<=100)\n(gdb)\n```\n通过借助 watch 命令监控 num 的值，后续只要 num 的值发生改变，程序都会停止。\n\n## 捕捉断点\n和前 2 种断点不同\n- 普通断点作用于程序中的某一行，当程序运行至此行时停止执行\n- 观察断点作用于某一变量或表达式，当该变量（表达式）的值发生改变时，程序暂停。\n\n而捕捉断点的作用是，监控程序中某一事件的发生，例如程序发生某种异常时、某一动态库被加载时等等，一旦目标时间发生，则程序停止执行。\n`(gdb) catch event`\n\n\n\n|event 事件\t| 含 义 |\n| ---       | ---  |\n|throw [exception] |\t当程序中抛出 exception 指定类型异常时，程序停止执行。如果不指定异常类型（即省略 exception），则表示只要程序发生异常，程序就停止执行。|\ncatch [exception] |\t当程序中捕获到 exception 异常时，程序停止执行。exception 参数也可以省略，表示无论程序中捕获到哪种异常，程序都暂停执行。\n| load [regexp] unload [regexp]| 其中，regexp 表示目标动态库的名称，load 命令表示当 regexp 动态库加载时程序停止执行；unload 命令表示当 regexp 动态库被卸载时，程序暂停执行。regexp 参数也可以省略，此时只要程序中某一动态库被加载或卸载，程序就会暂停执行。\n\n## 单步调试\n在最开始的例子中，借助 next 命令可以控制 GDB 单步执行程序。所谓单步调试，就是通过一行一行的执行程序，观察整个程序的执行流程，进而尝试发现一些存在的异常或者 Bug。\n\n根据实际场景的需要，GDB 调试器共提供了 3 种可实现单步调试程序的方法，即使用 next、step 和 until 命令。换句话说，这 3 个命令都可以控制 GDB 调试器每次仅执行 1 行代码，但除此之外，它们各自还有不同的功能。\n\n### until\nnext和step都很好理解，until之前并没有使用过\n\n不带参数的 until 命令 ： `(gdb) until`\n可以使 GDB 调试器快速运行完当前的循环体，并运行至循环体外停止。注意，until 命令并非任何情况下都会发挥这个作用，只有当执行至循环体尾部（最后一行代码）时，until 命令才会发生此作用；反之，until 命令和 next 命令的功能一样，只是单步执行程序。\n```c\n#include <stdio.h>\nint print(int num){\n    int ret = num * num;\n    return ret;\n}\nint myfunc(int num){\n    int i = 1;\n    int sum = 0;\n    while(i <= num){\n        sum += print(i);\n        i++;\n    }\n    return sum;\n}\nint main(){\n    int num =0;\n    scanf(\"%d\", &num);\n    int result = myfunc(num);\n    printf(\"%d\", result);\n    return 0;\n}\n```\n\n\n```powershell\n(gdb) b 17\nBreakpoint 1 at 0x1201: file main.c, line 17.\n(gdb) r\nStarting program: ~/demo/main.exe\n\nBreakpoint 1, main () at main.c:17\n17     scanf(\"%d\", &num);\n(gdb) u\n3\n18     int result = myfunc(num);\n(gdb) step\nmyfunc (num=3) at main.c:7\n7     int i = 1;\n(gdb) u\n8     int sum = 0;\n(gdb) u\n9     while(i <= num){\n(gdb) u\n10         sum += print(i);\n(gdb) u\n11         i++;\n(gdb) u                                 <-- 执行 i++ 操作\n9     while(i <= num){\n(gdb) u                                 <-- 快速执行完循环体\n13     return sum;\n(gdb) p sum\n$1 = 14\n```\n可以看到，这里当程序单步执行完第 11 行代码时，借助 until 命令快速执行完了整个循环体，并在第 13 行代码处停止执行。根据 p 命令输出的 num 变量的值可以确认，整个循环过程确定完整地执行完了。\n\n## GDB finish和return命令\n实际调试时，在某个函数中调试一段时间后，可能不需要再一步步执行到函数返回处，希望直接执行完当前函数，这时可以使用 finish 命令。与 finish 命令类似的还有 return 命令，它们都可以结束当前执行的函数。\n\nfinish 命令和 return 命令的区别是，finish 命令会执行函数到正常退出；而 return 命令是立即结束执行当前函数并返回，也就是说，如果当前函数还有剩余的代码未执行完毕，也不会执行了。除此之外，return 命令还有一个功能，即可以指定该函数的返回值。\n\n# 多线程程序的调试\n待定...","source":"_posts/GDB调试工具.md","raw":"---\ntitle: GDB调试工具\nabbrlink: 14250\ndate: 2024-03-05 20:08:01\ntags:\ndescription:\ncategories:\ncover:\nswiper_index:\n---\n\n\n# 参考文章\n{% link 知乎, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n{% link CSDN, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n\n{% link github, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp%} \n\n最经常用的就用例子来介绍：\n```powershell\n(gdb) l                      <-- 显示带行号的源代码\n1 #include <stdio.h>\n2 int main ()\n3 {\n4     unsigned long long int n, sum;\n5     n = 1;\n6     sum = 0;\n7     while (n <= 100)\n8     {\n9         sum = sum + n;\n10         n = n + 1;\n(gdb)                      <-- 默认情况下，l 选项只显示 10 行源代码，如果查看后续代码，安装 Enter 回车即可                                                               \n11     }\n12     return 0;\n13 }\n(gdb) b 7               <-- 在第 7 行源代码处打断点\nBreakpoint 1 at 0x400504: file main.c, line 7.\n(gdb) r                   <-- 运行程序，遇到断点停止\nStarting program: /home/mozhiyan/demo1/main.exe\n\nBreakpoint 1, main () at main.c:7\n7     while (n <= 100)\nMissing separate debuginfos, use: debuginfo-install glibc-2.17-55.el7.x86_64\n(gdb) p n               <-- 查看代码中变量 n 的值\n$1 = 1                   <-- 当前 n 的值为 1，$1 表示该变量所在存储区的名称\n(gdb) b 12             <-- 在程序第 12 行处打断点\nBreakpoint 2 at 0x40051a: file main.c, line 12.\n(gdb) c                  <-- 继续执行程序\nContinuing.\n\nBreakpoint 2, main () at main.c:12\n12     return 0;\n(gdb) p n               <-- 查看当前 n 变量的值\n$2 = 101               <-- 当前 n 的值为 101\n(gdb) q                  <-- 退出调试\nA debugging session is active.\n\nInferior 1 [process 3080] will be killed.\n\nQuit anyway? (y or n) y                 <-- 确实是否退出调试，y 为退出，n 为不退出\n[root@bogon demo]#\n```\n\n## GDB break设置断点\n刚才的例子中已经涉及到了断点，`b`就指的是`break`\n\n### break\n`break <location>`这里location有这几种值：\n- linenum\tlinenum 是一个整数，表示要打断点处代码的行号。要知道，程序中各行代码都有对应的行号，可通过执行 l（小写的 L）命令看到。\n- filename:linenum\tfilename 表示源程序文件名；linenum 为整数，表示具体行数。整体的意思是在指令文件 filename 中的第 linenum 行打断点。\n- \\+ offset\n  \\- offset\toffset \n  为整数（假设值为 2），+offset 表示以当前程序暂停位置（例如第 4 行）为准，向后数 offset 行处（第 6 行）打断点；-offset 表示以当前程序暂停位置为准，向前数 offset 行处（第 2 行）打断点。\n- function\tfunction 表示程序中包含的函数的函数名，即 break 命令会在该函数内部的开头位置打断点，程序会执行到该函数第一行代码处暂停。\n- filename:function\tfilename 表示远程文件名；function 表示程序中函数的函数名。整体的意思是在指定文件 filename 中 function 函数的开头位置打断点。\n\n还有一种方法：`(gdb) break ... if cond`\n... 可以是前边`location`所有参数的值，用于指定打断点的具体位置；cond 为某个表达式。整体的含义为：每次程序执行到 ... 位置时都计算 cond 的值，如果为 True，则程序在该位置暂停；反之，程序继续执行。\n\n```powershell\n(gdb) l\n1 #include<stdio.h>\n2 int main(int argc,char* argv[])\n3 {\n4     int num = 1;\n5     while(num<100)\n6     {\n7         num *= 2;\n8     }\n9     printf(\"num=%d\",num);\n10   return 0;\n(gdb)\n11 }\n(gdb) b 4          <-- 程序第 4 行打断点\nBreakpoint 1 at 0x1138: file main.c, line 4.\n(gdb) r              <-- 运行程序，至第 4 行暂停\nStarting program: /home/ubuntu64/demo/main.exe\n\nBreakpoint 1, main (argc=1, argv=0x7fffffffe078) at main.c:4\n4     int num = 1;\n(gdb) b +1        <-- 在第 4 行的基础上，在第 5 行代码处打断点\nBreakpoint 2 at 0x55555555513f: file main.c, line 5.\n(gdb) c             <-- 继续执行程序，至第 5 行暂停\nContinuing.\n\nBreakpoint 2, main (argc=1, argv=0x7fffffffe078) at main.c:5\n5     while(num<100)\n(gdb) b 7 if num>10     <-- 如果 num>10 在第 7 行打断点\nBreakpoint 3 at 0x555555555141: file main.c, line 7.\n(gdb) c               <-- 继续执行\nContinuing.\n\nBreakpoint 3, main (argc=1, argv=0x7fffffffe078) at main.c:7\n7         num *= 2;       <-- 程序在第 7 行暂停\n(gdb) p num      <-- p 命令查看 num 当前的值\n$1 = 16             <-- num=16\n```\n### tbreak\ntbreak 命令可以看到是 break 命令的另一个版本，tbreak 和 break 命令的用法和功能都非常相似，唯一的不同在于，使用 tbreak 命令打的断点仅会作用 1 次，即使程序暂停之后，该断点就会自动消失。\n\n### GDB rbreak 命令\n和 break 和 tbreak 命令不同，rbreak 命令的作用对象是 C、C++ 程序中的函数，它会在指定函数的开头位置打断点。\n\nrbreak 命令的使用语法格式为：\n`(gdb) rbreak regex`\n\n其中 regex 为一个正则表达式，程序中函数的函数名只要满足 regex 条件，rbreak 命令就会其内部的开头位置打断点。值得一提的是，rbreak 命令打的断点和 break 命令打断点的效果是一样的，会一直存在，不会自动消失。\n\n## 实时监控变量值的变化情况\n当我们需要监控某个变量或者表达式的值，通过值的变化情况判断程序的执行过程是否存在异常或者Bug。这种情况下，break 命令显然不再适用，推荐使用 `watch` 命令\n`(gdb) watch cond`这个 cond 就是监控的变量或者表达式\n```powershell\n(gdb) l           <--列出要调试的程序源码\n1 #include<stdio.h>\n2 int main(int argc,char* argv[])\n3 {\n4     int num = 1;\n5     while(num<=100)\n6     {\n7         num *= 2;\n8     }\n9     printf(\"%d\",num);\n10     return 0;\n(gdb)\n11 }\n(gdb) b 4       <-- 使用 break 命令打断点\nBreakpoint 1 at 0x115c: file main.c, line 4.\n(gdb) r           <-- 执行程序\nStarting program: /home/ubuntu64/demo/main.exe\n\nBreakpoint 1, main (argc=1, argv=0x7fffffffe088) at main.c:4\n4     int num = 1;\n(gdb) watch num   <-- 监控程序中 num 变量的值\nHardware watchpoint 2: num\n(gdb) c            <-- 继续执行，当 num 值发生改变时，程序才停止执行\nContinuing.\n\nHardware watchpoint 2: num\n\nOld value = 0\nNew value = 2\nmain (argc=1, argv=0x7fffffffe088) at main.c:5\n5     while(num<=100)\n(gdb) c           <-- num 值发生了改变，继续执行程序\nContinuing.\n\nHardware watchpoint 2: num\n\nOld value = 2\nNew value = 4\nmain (argc=1, argv=0x7fffffffe088) at main.c:5\n5     while(num<=100)\n(gdb)\n```\n通过借助 watch 命令监控 num 的值，后续只要 num 的值发生改变，程序都会停止。\n\n## 捕捉断点\n和前 2 种断点不同\n- 普通断点作用于程序中的某一行，当程序运行至此行时停止执行\n- 观察断点作用于某一变量或表达式，当该变量（表达式）的值发生改变时，程序暂停。\n\n而捕捉断点的作用是，监控程序中某一事件的发生，例如程序发生某种异常时、某一动态库被加载时等等，一旦目标时间发生，则程序停止执行。\n`(gdb) catch event`\n\n\n\n|event 事件\t| 含 义 |\n| ---       | ---  |\n|throw [exception] |\t当程序中抛出 exception 指定类型异常时，程序停止执行。如果不指定异常类型（即省略 exception），则表示只要程序发生异常，程序就停止执行。|\ncatch [exception] |\t当程序中捕获到 exception 异常时，程序停止执行。exception 参数也可以省略，表示无论程序中捕获到哪种异常，程序都暂停执行。\n| load [regexp] unload [regexp]| 其中，regexp 表示目标动态库的名称，load 命令表示当 regexp 动态库加载时程序停止执行；unload 命令表示当 regexp 动态库被卸载时，程序暂停执行。regexp 参数也可以省略，此时只要程序中某一动态库被加载或卸载，程序就会暂停执行。\n\n## 单步调试\n在最开始的例子中，借助 next 命令可以控制 GDB 单步执行程序。所谓单步调试，就是通过一行一行的执行程序，观察整个程序的执行流程，进而尝试发现一些存在的异常或者 Bug。\n\n根据实际场景的需要，GDB 调试器共提供了 3 种可实现单步调试程序的方法，即使用 next、step 和 until 命令。换句话说，这 3 个命令都可以控制 GDB 调试器每次仅执行 1 行代码，但除此之外，它们各自还有不同的功能。\n\n### until\nnext和step都很好理解，until之前并没有使用过\n\n不带参数的 until 命令 ： `(gdb) until`\n可以使 GDB 调试器快速运行完当前的循环体，并运行至循环体外停止。注意，until 命令并非任何情况下都会发挥这个作用，只有当执行至循环体尾部（最后一行代码）时，until 命令才会发生此作用；反之，until 命令和 next 命令的功能一样，只是单步执行程序。\n```c\n#include <stdio.h>\nint print(int num){\n    int ret = num * num;\n    return ret;\n}\nint myfunc(int num){\n    int i = 1;\n    int sum = 0;\n    while(i <= num){\n        sum += print(i);\n        i++;\n    }\n    return sum;\n}\nint main(){\n    int num =0;\n    scanf(\"%d\", &num);\n    int result = myfunc(num);\n    printf(\"%d\", result);\n    return 0;\n}\n```\n\n\n```powershell\n(gdb) b 17\nBreakpoint 1 at 0x1201: file main.c, line 17.\n(gdb) r\nStarting program: ~/demo/main.exe\n\nBreakpoint 1, main () at main.c:17\n17     scanf(\"%d\", &num);\n(gdb) u\n3\n18     int result = myfunc(num);\n(gdb) step\nmyfunc (num=3) at main.c:7\n7     int i = 1;\n(gdb) u\n8     int sum = 0;\n(gdb) u\n9     while(i <= num){\n(gdb) u\n10         sum += print(i);\n(gdb) u\n11         i++;\n(gdb) u                                 <-- 执行 i++ 操作\n9     while(i <= num){\n(gdb) u                                 <-- 快速执行完循环体\n13     return sum;\n(gdb) p sum\n$1 = 14\n```\n可以看到，这里当程序单步执行完第 11 行代码时，借助 until 命令快速执行完了整个循环体，并在第 13 行代码处停止执行。根据 p 命令输出的 num 变量的值可以确认，整个循环过程确定完整地执行完了。\n\n## GDB finish和return命令\n实际调试时，在某个函数中调试一段时间后，可能不需要再一步步执行到函数返回处，希望直接执行完当前函数，这时可以使用 finish 命令。与 finish 命令类似的还有 return 命令，它们都可以结束当前执行的函数。\n\nfinish 命令和 return 命令的区别是，finish 命令会执行函数到正常退出；而 return 命令是立即结束执行当前函数并返回，也就是说，如果当前函数还有剩余的代码未执行完毕，也不会执行了。除此之外，return 命令还有一个功能，即可以指定该函数的返回值。\n\n# 多线程程序的调试\n待定...","slug":"GDB调试工具","published":1,"updated":"2025-03-05T12:35:29.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6inv000imktt0d9z93v1","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"知乎\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">知乎</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"CSDN\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">CSDN</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"github\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp\"/></div><div class=\"right\"><p class=\"text\">github</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<p>最经常用的就用例子来介绍：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) l                      &lt;<span class=\"literal\">--</span> 显示带行号的源代码</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"number\">2</span> int main ()</span><br><span class=\"line\"><span class=\"number\">3</span> &#123;</span><br><span class=\"line\"><span class=\"number\">4</span>     unsigned long long int n, sum;</span><br><span class=\"line\"><span class=\"number\">5</span>     n = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">6</span>     sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">7</span>     <span class=\"keyword\">while</span> (n &lt;= <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"number\">8</span>     &#123;</span><br><span class=\"line\"><span class=\"number\">9</span>         sum = sum + n;</span><br><span class=\"line\"><span class=\"number\">10</span>         n = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">(gdb)                      &lt;<span class=\"literal\">--</span> 默认情况下，l 选项只显示 <span class=\"number\">10</span> 行源代码，如果查看后续代码，安装 Enter 回车即可                                                               </span><br><span class=\"line\"><span class=\"number\">11</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">12</span>     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">13</span> &#125;</span><br><span class=\"line\">(gdb) b <span class=\"number\">7</span>               &lt;<span class=\"literal\">--</span> 在第 <span class=\"number\">7</span> 行源代码处打断点</span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span> at <span class=\"number\">0</span>x400504: file main.c, line <span class=\"number\">7</span>.</span><br><span class=\"line\">(gdb) <span class=\"built_in\">r</span>                   &lt;<span class=\"literal\">--</span> 运行程序，遇到断点停止</span><br><span class=\"line\">Starting program: /home/mozhiyan/demo1/main.exe</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span>, main () at main.c:<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">7</span>     <span class=\"keyword\">while</span> (n &lt;= <span class=\"number\">100</span>)</span><br><span class=\"line\">Missing separate debuginfos, use: debuginfo<span class=\"literal\">-install</span> glibc<span class=\"literal\">-2</span>.<span class=\"number\">17</span><span class=\"literal\">-55</span>.el7.x86_64</span><br><span class=\"line\">(gdb) p n               &lt;<span class=\"literal\">--</span> 查看代码中变量 n 的值</span><br><span class=\"line\"><span class=\"variable\">$1</span> = <span class=\"number\">1</span>                   &lt;<span class=\"literal\">--</span> 当前 n 的值为 <span class=\"number\">1</span>，<span class=\"variable\">$1</span> 表示该变量所在存储区的名称</span><br><span class=\"line\">(gdb) b <span class=\"number\">12</span>             &lt;<span class=\"literal\">--</span> 在程序第 <span class=\"number\">12</span> 行处打断点</span><br><span class=\"line\">Breakpoint <span class=\"number\">2</span> at <span class=\"number\">0</span>x40051a: file main.c, line <span class=\"number\">12</span>.</span><br><span class=\"line\">(gdb) c                  &lt;<span class=\"literal\">--</span> 继续执行程序</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">2</span>, main () at main.c:<span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">12</span>     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">(gdb) p n               &lt;<span class=\"literal\">--</span> 查看当前 n 变量的值</span><br><span class=\"line\"><span class=\"variable\">$2</span> = <span class=\"number\">101</span>               &lt;<span class=\"literal\">--</span> 当前 n 的值为 <span class=\"number\">101</span></span><br><span class=\"line\">(gdb) q                  &lt;<span class=\"literal\">--</span> 退出调试</span><br><span class=\"line\">A debugging session is active.</span><br><span class=\"line\"></span><br><span class=\"line\">Inferior <span class=\"number\">1</span> [<span class=\"type\">process</span> <span class=\"number\">3080</span>] will be killed.</span><br><span class=\"line\"></span><br><span class=\"line\">Quit anyway? (y or n) y                 &lt;<span class=\"literal\">--</span> 确实是否退出调试，y 为退出，n 为不退出</span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">bogon</span> <span class=\"type\">demo</span>]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"GDB-break设置断点\">GDB break设置断点</h2>\n<p>刚才的例子中已经涉及到了断点，<code>b</code>就指的是<code>break</code></p>\n<h3 id=\"break\">break</h3>\n<p><code>break &lt;location&gt;</code>这里location有这几种值：</p>\n<ul>\n<li>linenum\tlinenum 是一个整数，表示要打断点处代码的行号。要知道，程序中各行代码都有对应的行号，可通过执行 l（小写的 L）命令看到。</li>\n<li>filename:linenum\tfilename 表示源程序文件名；linenum 为整数，表示具体行数。整体的意思是在指令文件 filename 中的第 linenum 行打断点。</li>\n<li>+ offset<br>\n- offset\toffset<br>\n为整数（假设值为 2），+offset 表示以当前程序暂停位置（例如第 4 行）为准，向后数 offset 行处（第 6 行）打断点；-offset 表示以当前程序暂停位置为准，向前数 offset 行处（第 2 行）打断点。</li>\n<li>function\tfunction 表示程序中包含的函数的函数名，即 break 命令会在该函数内部的开头位置打断点，程序会执行到该函数第一行代码处暂停。</li>\n<li>filename:function\tfilename 表示远程文件名；function 表示程序中函数的函数名。整体的意思是在指定文件 filename 中 function 函数的开头位置打断点。</li>\n</ul>\n<p>还有一种方法：<code>(gdb) break ... if cond</code><br>\n… 可以是前边<code>location</code>所有参数的值，用于指定打断点的具体位置；cond 为某个表达式。整体的含义为：每次程序执行到 … 位置时都计算 cond 的值，如果为 True，则程序在该位置暂停；反之，程序继续执行。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) l</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"comment\">#include&lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"number\">2</span> int main(int argc,char* argv[])</span><br><span class=\"line\"><span class=\"number\">3</span> &#123;</span><br><span class=\"line\"><span class=\"number\">4</span>     int num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">5</span>     <span class=\"keyword\">while</span>(num&lt;<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"number\">6</span>     &#123;</span><br><span class=\"line\"><span class=\"number\">7</span>         num *= <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"number\">8</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">9</span>     printf(<span class=\"string\">&quot;num=%d&quot;</span>,num);</span><br><span class=\"line\"><span class=\"number\">10</span>   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\"><span class=\"number\">11</span> &#125;</span><br><span class=\"line\">(gdb) b <span class=\"number\">4</span>          &lt;<span class=\"literal\">--</span> 程序第 <span class=\"number\">4</span> 行打断点</span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span> at <span class=\"number\">0</span>x1138: file main.c, line <span class=\"number\">4</span>.</span><br><span class=\"line\">(gdb) <span class=\"built_in\">r</span>              &lt;<span class=\"literal\">--</span> 运行程序，至第 <span class=\"number\">4</span> 行暂停</span><br><span class=\"line\">Starting program: /home/ubuntu64/demo/main.exe</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span>, main (argc=<span class=\"number\">1</span>, argv=<span class=\"number\">0</span>x7fffffffe078) at main.c:<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">4</span>     int num = <span class=\"number\">1</span>;</span><br><span class=\"line\">(gdb) b +<span class=\"number\">1</span>        &lt;<span class=\"literal\">--</span> 在第 <span class=\"number\">4</span> 行的基础上，在第 <span class=\"number\">5</span> 行代码处打断点</span><br><span class=\"line\">Breakpoint <span class=\"number\">2</span> at <span class=\"number\">0</span>x55555555513f: file main.c, line <span class=\"number\">5</span>.</span><br><span class=\"line\">(gdb) c             &lt;<span class=\"literal\">--</span> 继续执行程序，至第 <span class=\"number\">5</span> 行暂停</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">2</span>, main (argc=<span class=\"number\">1</span>, argv=<span class=\"number\">0</span>x7fffffffe078) at main.c:<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span>     <span class=\"keyword\">while</span>(num&lt;<span class=\"number\">100</span>)</span><br><span class=\"line\">(gdb) b <span class=\"number\">7</span> <span class=\"keyword\">if</span> num&gt;<span class=\"number\">10</span>     &lt;<span class=\"literal\">--</span> 如果 num&gt;<span class=\"number\">10</span> 在第 <span class=\"number\">7</span> 行打断点</span><br><span class=\"line\">Breakpoint <span class=\"number\">3</span> at <span class=\"number\">0</span>x555555555141: file main.c, line <span class=\"number\">7</span>.</span><br><span class=\"line\">(gdb) c               &lt;<span class=\"literal\">--</span> 继续执行</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">3</span>, main (argc=<span class=\"number\">1</span>, argv=<span class=\"number\">0</span>x7fffffffe078) at main.c:<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">7</span>         num *= <span class=\"number\">2</span>;       &lt;<span class=\"literal\">--</span> 程序在第 <span class=\"number\">7</span> 行暂停</span><br><span class=\"line\">(gdb) p num      &lt;<span class=\"literal\">--</span> p 命令查看 num 当前的值</span><br><span class=\"line\"><span class=\"variable\">$1</span> = <span class=\"number\">16</span>             &lt;<span class=\"literal\">--</span> num=<span class=\"number\">16</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"tbreak\">tbreak</h3>\n<p>tbreak 命令可以看到是 break 命令的另一个版本，tbreak 和 break 命令的用法和功能都非常相似，唯一的不同在于，使用 tbreak 命令打的断点仅会作用 1 次，即使程序暂停之后，该断点就会自动消失。</p>\n<h3 id=\"GDB-rbreak-命令\">GDB rbreak 命令</h3>\n<p>和 break 和 tbreak 命令不同，rbreak 命令的作用对象是 C、C++ 程序中的函数，它会在指定函数的开头位置打断点。</p>\n<p>rbreak 命令的使用语法格式为：<br>\n<code>(gdb) rbreak regex</code></p>\n<p>其中 regex 为一个正则表达式，程序中函数的函数名只要满足 regex 条件，rbreak 命令就会其内部的开头位置打断点。值得一提的是，rbreak 命令打的断点和 break 命令打断点的效果是一样的，会一直存在，不会自动消失。</p>\n<h2 id=\"实时监控变量值的变化情况\">实时监控变量值的变化情况</h2>\n<p>当我们需要监控某个变量或者表达式的值，通过值的变化情况判断程序的执行过程是否存在异常或者Bug。这种情况下，break 命令显然不再适用，推荐使用 <code>watch</code> 命令<br>\n<code>(gdb) watch cond</code>这个 cond 就是监控的变量或者表达式</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) l           &lt;<span class=\"literal\">--</span>列出要调试的程序源码</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"comment\">#include&lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"number\">2</span> int main(int argc,char* argv[])</span><br><span class=\"line\"><span class=\"number\">3</span> &#123;</span><br><span class=\"line\"><span class=\"number\">4</span>     int num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">5</span>     <span class=\"keyword\">while</span>(num&lt;=<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"number\">6</span>     &#123;</span><br><span class=\"line\"><span class=\"number\">7</span>         num *= <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"number\">8</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">9</span>     printf(<span class=\"string\">&quot;%d&quot;</span>,num);</span><br><span class=\"line\"><span class=\"number\">10</span>     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\"><span class=\"number\">11</span> &#125;</span><br><span class=\"line\">(gdb) b <span class=\"number\">4</span>       &lt;<span class=\"literal\">--</span> 使用 <span class=\"keyword\">break</span> 命令打断点</span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span> at <span class=\"number\">0</span>x115c: file main.c, line <span class=\"number\">4</span>.</span><br><span class=\"line\">(gdb) <span class=\"built_in\">r</span>           &lt;<span class=\"literal\">--</span> 执行程序</span><br><span class=\"line\">Starting program: /home/ubuntu64/demo/main.exe</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span>, main (argc=<span class=\"number\">1</span>, argv=<span class=\"number\">0</span>x7fffffffe088) at main.c:<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">4</span>     int num = <span class=\"number\">1</span>;</span><br><span class=\"line\">(gdb) watch num   &lt;<span class=\"literal\">--</span> 监控程序中 num 变量的值</span><br><span class=\"line\">Hardware watchpoint <span class=\"number\">2</span>: num</span><br><span class=\"line\">(gdb) c            &lt;<span class=\"literal\">--</span> 继续执行，当 num 值发生改变时，程序才停止执行</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Hardware watchpoint <span class=\"number\">2</span>: num</span><br><span class=\"line\"></span><br><span class=\"line\">Old value = <span class=\"number\">0</span></span><br><span class=\"line\">New value = <span class=\"number\">2</span></span><br><span class=\"line\">main (argc=<span class=\"number\">1</span>, argv=<span class=\"number\">0</span>x7fffffffe088) at main.c:<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span>     <span class=\"keyword\">while</span>(num&lt;=<span class=\"number\">100</span>)</span><br><span class=\"line\">(gdb) c           &lt;<span class=\"literal\">--</span> num 值发生了改变，继续执行程序</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Hardware watchpoint <span class=\"number\">2</span>: num</span><br><span class=\"line\"></span><br><span class=\"line\">Old value = <span class=\"number\">2</span></span><br><span class=\"line\">New value = <span class=\"number\">4</span></span><br><span class=\"line\">main (argc=<span class=\"number\">1</span>, argv=<span class=\"number\">0</span>x7fffffffe088) at main.c:<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span>     <span class=\"keyword\">while</span>(num&lt;=<span class=\"number\">100</span>)</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure>\n<p>通过借助 watch 命令监控 num 的值，后续只要 num 的值发生改变，程序都会停止。</p>\n<h2 id=\"捕捉断点\">捕捉断点</h2>\n<p>和前 2 种断点不同</p>\n<ul>\n<li>普通断点作用于程序中的某一行，当程序运行至此行时停止执行</li>\n<li>观察断点作用于某一变量或表达式，当该变量（表达式）的值发生改变时，程序暂停。</li>\n</ul>\n<p>而捕捉断点的作用是，监控程序中某一事件的发生，例如程序发生某种异常时、某一动态库被加载时等等，一旦目标时间发生，则程序停止执行。<br>\n<code>(gdb) catch event</code></p>\n<table>\n<thead>\n<tr>\n<th>event 事件</th>\n<th>含 义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>throw [exception]</td>\n<td>当程序中抛出 exception 指定类型异常时，程序停止执行。如果不指定异常类型（即省略 exception），则表示只要程序发生异常，程序就停止执行。</td>\n</tr>\n<tr>\n<td>catch [exception]</td>\n<td>当程序中捕获到 exception 异常时，程序停止执行。exception 参数也可以省略，表示无论程序中捕获到哪种异常，程序都暂停执行。</td>\n</tr>\n<tr>\n<td>load [regexp] unload [regexp]</td>\n<td>其中，regexp 表示目标动态库的名称，load 命令表示当 regexp 动态库加载时程序停止执行；unload 命令表示当 regexp 动态库被卸载时，程序暂停执行。regexp 参数也可以省略，此时只要程序中某一动态库被加载或卸载，程序就会暂停执行。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"单步调试\">单步调试</h2>\n<p>在最开始的例子中，借助 next 命令可以控制 GDB 单步执行程序。所谓单步调试，就是通过一行一行的执行程序，观察整个程序的执行流程，进而尝试发现一些存在的异常或者 Bug。</p>\n<p>根据实际场景的需要，GDB 调试器共提供了 3 种可实现单步调试程序的方法，即使用 next、step 和 until 命令。换句话说，这 3 个命令都可以控制 GDB 调试器每次仅执行 1 行代码，但除此之外，它们各自还有不同的功能。</p>\n<h3 id=\"until\">until</h3>\n<p>next和step都很好理解，until之前并没有使用过</p>\n<p>不带参数的 until 命令 ： <code>(gdb) until</code><br>\n可以使 GDB 调试器快速运行完当前的循环体，并运行至循环体外停止。注意，until 命令并非任何情况下都会发挥这个作用，只有当执行至循环体尾部（最后一行代码）时，until 命令才会发生此作用；反之，until 命令和 next 命令的功能一样，只是单步执行程序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">print</span><span class=\"params\">(<span class=\"type\">int</span> num)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = num * num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">myfunc</span><span class=\"params\">(<span class=\"type\">int</span> num)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= num)&#123;</span><br><span class=\"line\">        sum += print(i);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num =<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;num);</span><br><span class=\"line\">    <span class=\"type\">int</span> result = myfunc(num);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) b <span class=\"number\">17</span></span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span> at <span class=\"number\">0</span>x1201: file main.c, line <span class=\"number\">17</span>.</span><br><span class=\"line\">(gdb) <span class=\"built_in\">r</span></span><br><span class=\"line\">Starting program: ~/demo/main.exe</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span>, main () at main.c:<span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"number\">17</span>     scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;num);</span><br><span class=\"line\">(gdb) u</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">18</span>     int result = myfunc(num);</span><br><span class=\"line\">(gdb) step</span><br><span class=\"line\">myfunc (num=<span class=\"number\">3</span>) at main.c:<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">7</span>     int i = <span class=\"number\">1</span>;</span><br><span class=\"line\">(gdb) u</span><br><span class=\"line\"><span class=\"number\">8</span>     int sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">(gdb) u</span><br><span class=\"line\"><span class=\"number\">9</span>     <span class=\"keyword\">while</span>(i &lt;= num)&#123;</span><br><span class=\"line\">(gdb) u</span><br><span class=\"line\"><span class=\"number\">10</span>         sum += print(i);</span><br><span class=\"line\">(gdb) u</span><br><span class=\"line\"><span class=\"number\">11</span>         i++;</span><br><span class=\"line\">(gdb) u                                 &lt;<span class=\"literal\">--</span> 执行 i++ 操作</span><br><span class=\"line\"><span class=\"number\">9</span>     <span class=\"keyword\">while</span>(i &lt;= num)&#123;</span><br><span class=\"line\">(gdb) u                                 &lt;<span class=\"literal\">--</span> 快速执行完循环体</span><br><span class=\"line\"><span class=\"number\">13</span>     <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">(gdb) p sum</span><br><span class=\"line\"><span class=\"variable\">$1</span> = <span class=\"number\">14</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，这里当程序单步执行完第 11 行代码时，借助 until 命令快速执行完了整个循环体，并在第 13 行代码处停止执行。根据 p 命令输出的 num 变量的值可以确认，整个循环过程确定完整地执行完了。</p>\n<h2 id=\"GDB-finish和return命令\">GDB finish和return命令</h2>\n<p>实际调试时，在某个函数中调试一段时间后，可能不需要再一步步执行到函数返回处，希望直接执行完当前函数，这时可以使用 finish 命令。与 finish 命令类似的还有 return 命令，它们都可以结束当前执行的函数。</p>\n<p>finish 命令和 return 命令的区别是，finish 命令会执行函数到正常退出；而 return 命令是立即结束执行当前函数并返回，也就是说，如果当前函数还有剩余的代码未执行完毕，也不会执行了。除此之外，return 命令还有一个功能，即可以指定该函数的返回值。</p>\n<h1>多线程程序的调试</h1>\n<p>待定…</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"知乎\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">知乎</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"CSDN\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">CSDN</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"github\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp\"/></div><div class=\"right\"><p class=\"text\">github</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<p>最经常用的就用例子来介绍：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) l                      &lt;<span class=\"literal\">--</span> 显示带行号的源代码</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"number\">2</span> int main ()</span><br><span class=\"line\"><span class=\"number\">3</span> &#123;</span><br><span class=\"line\"><span class=\"number\">4</span>     unsigned long long int n, sum;</span><br><span class=\"line\"><span class=\"number\">5</span>     n = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">6</span>     sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">7</span>     <span class=\"keyword\">while</span> (n &lt;= <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"number\">8</span>     &#123;</span><br><span class=\"line\"><span class=\"number\">9</span>         sum = sum + n;</span><br><span class=\"line\"><span class=\"number\">10</span>         n = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">(gdb)                      &lt;<span class=\"literal\">--</span> 默认情况下，l 选项只显示 <span class=\"number\">10</span> 行源代码，如果查看后续代码，安装 Enter 回车即可                                                               </span><br><span class=\"line\"><span class=\"number\">11</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">12</span>     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">13</span> &#125;</span><br><span class=\"line\">(gdb) b <span class=\"number\">7</span>               &lt;<span class=\"literal\">--</span> 在第 <span class=\"number\">7</span> 行源代码处打断点</span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span> at <span class=\"number\">0</span>x400504: file main.c, line <span class=\"number\">7</span>.</span><br><span class=\"line\">(gdb) <span class=\"built_in\">r</span>                   &lt;<span class=\"literal\">--</span> 运行程序，遇到断点停止</span><br><span class=\"line\">Starting program: /home/mozhiyan/demo1/main.exe</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span>, main () at main.c:<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">7</span>     <span class=\"keyword\">while</span> (n &lt;= <span class=\"number\">100</span>)</span><br><span class=\"line\">Missing separate debuginfos, use: debuginfo<span class=\"literal\">-install</span> glibc<span class=\"literal\">-2</span>.<span class=\"number\">17</span><span class=\"literal\">-55</span>.el7.x86_64</span><br><span class=\"line\">(gdb) p n               &lt;<span class=\"literal\">--</span> 查看代码中变量 n 的值</span><br><span class=\"line\"><span class=\"variable\">$1</span> = <span class=\"number\">1</span>                   &lt;<span class=\"literal\">--</span> 当前 n 的值为 <span class=\"number\">1</span>，<span class=\"variable\">$1</span> 表示该变量所在存储区的名称</span><br><span class=\"line\">(gdb) b <span class=\"number\">12</span>             &lt;<span class=\"literal\">--</span> 在程序第 <span class=\"number\">12</span> 行处打断点</span><br><span class=\"line\">Breakpoint <span class=\"number\">2</span> at <span class=\"number\">0</span>x40051a: file main.c, line <span class=\"number\">12</span>.</span><br><span class=\"line\">(gdb) c                  &lt;<span class=\"literal\">--</span> 继续执行程序</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">2</span>, main () at main.c:<span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">12</span>     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">(gdb) p n               &lt;<span class=\"literal\">--</span> 查看当前 n 变量的值</span><br><span class=\"line\"><span class=\"variable\">$2</span> = <span class=\"number\">101</span>               &lt;<span class=\"literal\">--</span> 当前 n 的值为 <span class=\"number\">101</span></span><br><span class=\"line\">(gdb) q                  &lt;<span class=\"literal\">--</span> 退出调试</span><br><span class=\"line\">A debugging session is active.</span><br><span class=\"line\"></span><br><span class=\"line\">Inferior <span class=\"number\">1</span> [<span class=\"type\">process</span> <span class=\"number\">3080</span>] will be killed.</span><br><span class=\"line\"></span><br><span class=\"line\">Quit anyway? (y or n) y                 &lt;<span class=\"literal\">--</span> 确实是否退出调试，y 为退出，n 为不退出</span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">bogon</span> <span class=\"type\">demo</span>]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"GDB-break设置断点\">GDB break设置断点</h2>\n<p>刚才的例子中已经涉及到了断点，<code>b</code>就指的是<code>break</code></p>\n<h3 id=\"break\">break</h3>\n<p><code>break &lt;location&gt;</code>这里location有这几种值：</p>\n<ul>\n<li>linenum\tlinenum 是一个整数，表示要打断点处代码的行号。要知道，程序中各行代码都有对应的行号，可通过执行 l（小写的 L）命令看到。</li>\n<li>filename:linenum\tfilename 表示源程序文件名；linenum 为整数，表示具体行数。整体的意思是在指令文件 filename 中的第 linenum 行打断点。</li>\n<li>+ offset<br>\n- offset\toffset<br>\n为整数（假设值为 2），+offset 表示以当前程序暂停位置（例如第 4 行）为准，向后数 offset 行处（第 6 行）打断点；-offset 表示以当前程序暂停位置为准，向前数 offset 行处（第 2 行）打断点。</li>\n<li>function\tfunction 表示程序中包含的函数的函数名，即 break 命令会在该函数内部的开头位置打断点，程序会执行到该函数第一行代码处暂停。</li>\n<li>filename:function\tfilename 表示远程文件名；function 表示程序中函数的函数名。整体的意思是在指定文件 filename 中 function 函数的开头位置打断点。</li>\n</ul>\n<p>还有一种方法：<code>(gdb) break ... if cond</code><br>\n… 可以是前边<code>location</code>所有参数的值，用于指定打断点的具体位置；cond 为某个表达式。整体的含义为：每次程序执行到 … 位置时都计算 cond 的值，如果为 True，则程序在该位置暂停；反之，程序继续执行。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) l</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"comment\">#include&lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"number\">2</span> int main(int argc,char* argv[])</span><br><span class=\"line\"><span class=\"number\">3</span> &#123;</span><br><span class=\"line\"><span class=\"number\">4</span>     int num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">5</span>     <span class=\"keyword\">while</span>(num&lt;<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"number\">6</span>     &#123;</span><br><span class=\"line\"><span class=\"number\">7</span>         num *= <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"number\">8</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">9</span>     printf(<span class=\"string\">&quot;num=%d&quot;</span>,num);</span><br><span class=\"line\"><span class=\"number\">10</span>   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\"><span class=\"number\">11</span> &#125;</span><br><span class=\"line\">(gdb) b <span class=\"number\">4</span>          &lt;<span class=\"literal\">--</span> 程序第 <span class=\"number\">4</span> 行打断点</span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span> at <span class=\"number\">0</span>x1138: file main.c, line <span class=\"number\">4</span>.</span><br><span class=\"line\">(gdb) <span class=\"built_in\">r</span>              &lt;<span class=\"literal\">--</span> 运行程序，至第 <span class=\"number\">4</span> 行暂停</span><br><span class=\"line\">Starting program: /home/ubuntu64/demo/main.exe</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span>, main (argc=<span class=\"number\">1</span>, argv=<span class=\"number\">0</span>x7fffffffe078) at main.c:<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">4</span>     int num = <span class=\"number\">1</span>;</span><br><span class=\"line\">(gdb) b +<span class=\"number\">1</span>        &lt;<span class=\"literal\">--</span> 在第 <span class=\"number\">4</span> 行的基础上，在第 <span class=\"number\">5</span> 行代码处打断点</span><br><span class=\"line\">Breakpoint <span class=\"number\">2</span> at <span class=\"number\">0</span>x55555555513f: file main.c, line <span class=\"number\">5</span>.</span><br><span class=\"line\">(gdb) c             &lt;<span class=\"literal\">--</span> 继续执行程序，至第 <span class=\"number\">5</span> 行暂停</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">2</span>, main (argc=<span class=\"number\">1</span>, argv=<span class=\"number\">0</span>x7fffffffe078) at main.c:<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span>     <span class=\"keyword\">while</span>(num&lt;<span class=\"number\">100</span>)</span><br><span class=\"line\">(gdb) b <span class=\"number\">7</span> <span class=\"keyword\">if</span> num&gt;<span class=\"number\">10</span>     &lt;<span class=\"literal\">--</span> 如果 num&gt;<span class=\"number\">10</span> 在第 <span class=\"number\">7</span> 行打断点</span><br><span class=\"line\">Breakpoint <span class=\"number\">3</span> at <span class=\"number\">0</span>x555555555141: file main.c, line <span class=\"number\">7</span>.</span><br><span class=\"line\">(gdb) c               &lt;<span class=\"literal\">--</span> 继续执行</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">3</span>, main (argc=<span class=\"number\">1</span>, argv=<span class=\"number\">0</span>x7fffffffe078) at main.c:<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">7</span>         num *= <span class=\"number\">2</span>;       &lt;<span class=\"literal\">--</span> 程序在第 <span class=\"number\">7</span> 行暂停</span><br><span class=\"line\">(gdb) p num      &lt;<span class=\"literal\">--</span> p 命令查看 num 当前的值</span><br><span class=\"line\"><span class=\"variable\">$1</span> = <span class=\"number\">16</span>             &lt;<span class=\"literal\">--</span> num=<span class=\"number\">16</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"tbreak\">tbreak</h3>\n<p>tbreak 命令可以看到是 break 命令的另一个版本，tbreak 和 break 命令的用法和功能都非常相似，唯一的不同在于，使用 tbreak 命令打的断点仅会作用 1 次，即使程序暂停之后，该断点就会自动消失。</p>\n<h3 id=\"GDB-rbreak-命令\">GDB rbreak 命令</h3>\n<p>和 break 和 tbreak 命令不同，rbreak 命令的作用对象是 C、C++ 程序中的函数，它会在指定函数的开头位置打断点。</p>\n<p>rbreak 命令的使用语法格式为：<br>\n<code>(gdb) rbreak regex</code></p>\n<p>其中 regex 为一个正则表达式，程序中函数的函数名只要满足 regex 条件，rbreak 命令就会其内部的开头位置打断点。值得一提的是，rbreak 命令打的断点和 break 命令打断点的效果是一样的，会一直存在，不会自动消失。</p>\n<h2 id=\"实时监控变量值的变化情况\">实时监控变量值的变化情况</h2>\n<p>当我们需要监控某个变量或者表达式的值，通过值的变化情况判断程序的执行过程是否存在异常或者Bug。这种情况下，break 命令显然不再适用，推荐使用 <code>watch</code> 命令<br>\n<code>(gdb) watch cond</code>这个 cond 就是监控的变量或者表达式</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) l           &lt;<span class=\"literal\">--</span>列出要调试的程序源码</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"comment\">#include&lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"number\">2</span> int main(int argc,char* argv[])</span><br><span class=\"line\"><span class=\"number\">3</span> &#123;</span><br><span class=\"line\"><span class=\"number\">4</span>     int num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">5</span>     <span class=\"keyword\">while</span>(num&lt;=<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"number\">6</span>     &#123;</span><br><span class=\"line\"><span class=\"number\">7</span>         num *= <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"number\">8</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">9</span>     printf(<span class=\"string\">&quot;%d&quot;</span>,num);</span><br><span class=\"line\"><span class=\"number\">10</span>     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\"><span class=\"number\">11</span> &#125;</span><br><span class=\"line\">(gdb) b <span class=\"number\">4</span>       &lt;<span class=\"literal\">--</span> 使用 <span class=\"keyword\">break</span> 命令打断点</span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span> at <span class=\"number\">0</span>x115c: file main.c, line <span class=\"number\">4</span>.</span><br><span class=\"line\">(gdb) <span class=\"built_in\">r</span>           &lt;<span class=\"literal\">--</span> 执行程序</span><br><span class=\"line\">Starting program: /home/ubuntu64/demo/main.exe</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span>, main (argc=<span class=\"number\">1</span>, argv=<span class=\"number\">0</span>x7fffffffe088) at main.c:<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">4</span>     int num = <span class=\"number\">1</span>;</span><br><span class=\"line\">(gdb) watch num   &lt;<span class=\"literal\">--</span> 监控程序中 num 变量的值</span><br><span class=\"line\">Hardware watchpoint <span class=\"number\">2</span>: num</span><br><span class=\"line\">(gdb) c            &lt;<span class=\"literal\">--</span> 继续执行，当 num 值发生改变时，程序才停止执行</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Hardware watchpoint <span class=\"number\">2</span>: num</span><br><span class=\"line\"></span><br><span class=\"line\">Old value = <span class=\"number\">0</span></span><br><span class=\"line\">New value = <span class=\"number\">2</span></span><br><span class=\"line\">main (argc=<span class=\"number\">1</span>, argv=<span class=\"number\">0</span>x7fffffffe088) at main.c:<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span>     <span class=\"keyword\">while</span>(num&lt;=<span class=\"number\">100</span>)</span><br><span class=\"line\">(gdb) c           &lt;<span class=\"literal\">--</span> num 值发生了改变，继续执行程序</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Hardware watchpoint <span class=\"number\">2</span>: num</span><br><span class=\"line\"></span><br><span class=\"line\">Old value = <span class=\"number\">2</span></span><br><span class=\"line\">New value = <span class=\"number\">4</span></span><br><span class=\"line\">main (argc=<span class=\"number\">1</span>, argv=<span class=\"number\">0</span>x7fffffffe088) at main.c:<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span>     <span class=\"keyword\">while</span>(num&lt;=<span class=\"number\">100</span>)</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure>\n<p>通过借助 watch 命令监控 num 的值，后续只要 num 的值发生改变，程序都会停止。</p>\n<h2 id=\"捕捉断点\">捕捉断点</h2>\n<p>和前 2 种断点不同</p>\n<ul>\n<li>普通断点作用于程序中的某一行，当程序运行至此行时停止执行</li>\n<li>观察断点作用于某一变量或表达式，当该变量（表达式）的值发生改变时，程序暂停。</li>\n</ul>\n<p>而捕捉断点的作用是，监控程序中某一事件的发生，例如程序发生某种异常时、某一动态库被加载时等等，一旦目标时间发生，则程序停止执行。<br>\n<code>(gdb) catch event</code></p>\n<table>\n<thead>\n<tr>\n<th>event 事件</th>\n<th>含 义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>throw [exception]</td>\n<td>当程序中抛出 exception 指定类型异常时，程序停止执行。如果不指定异常类型（即省略 exception），则表示只要程序发生异常，程序就停止执行。</td>\n</tr>\n<tr>\n<td>catch [exception]</td>\n<td>当程序中捕获到 exception 异常时，程序停止执行。exception 参数也可以省略，表示无论程序中捕获到哪种异常，程序都暂停执行。</td>\n</tr>\n<tr>\n<td>load [regexp] unload [regexp]</td>\n<td>其中，regexp 表示目标动态库的名称，load 命令表示当 regexp 动态库加载时程序停止执行；unload 命令表示当 regexp 动态库被卸载时，程序暂停执行。regexp 参数也可以省略，此时只要程序中某一动态库被加载或卸载，程序就会暂停执行。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"单步调试\">单步调试</h2>\n<p>在最开始的例子中，借助 next 命令可以控制 GDB 单步执行程序。所谓单步调试，就是通过一行一行的执行程序，观察整个程序的执行流程，进而尝试发现一些存在的异常或者 Bug。</p>\n<p>根据实际场景的需要，GDB 调试器共提供了 3 种可实现单步调试程序的方法，即使用 next、step 和 until 命令。换句话说，这 3 个命令都可以控制 GDB 调试器每次仅执行 1 行代码，但除此之外，它们各自还有不同的功能。</p>\n<h3 id=\"until\">until</h3>\n<p>next和step都很好理解，until之前并没有使用过</p>\n<p>不带参数的 until 命令 ： <code>(gdb) until</code><br>\n可以使 GDB 调试器快速运行完当前的循环体，并运行至循环体外停止。注意，until 命令并非任何情况下都会发挥这个作用，只有当执行至循环体尾部（最后一行代码）时，until 命令才会发生此作用；反之，until 命令和 next 命令的功能一样，只是单步执行程序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">print</span><span class=\"params\">(<span class=\"type\">int</span> num)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = num * num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">myfunc</span><span class=\"params\">(<span class=\"type\">int</span> num)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= num)&#123;</span><br><span class=\"line\">        sum += print(i);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num =<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;num);</span><br><span class=\"line\">    <span class=\"type\">int</span> result = myfunc(num);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) b <span class=\"number\">17</span></span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span> at <span class=\"number\">0</span>x1201: file main.c, line <span class=\"number\">17</span>.</span><br><span class=\"line\">(gdb) <span class=\"built_in\">r</span></span><br><span class=\"line\">Starting program: ~/demo/main.exe</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint <span class=\"number\">1</span>, main () at main.c:<span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"number\">17</span>     scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;num);</span><br><span class=\"line\">(gdb) u</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">18</span>     int result = myfunc(num);</span><br><span class=\"line\">(gdb) step</span><br><span class=\"line\">myfunc (num=<span class=\"number\">3</span>) at main.c:<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">7</span>     int i = <span class=\"number\">1</span>;</span><br><span class=\"line\">(gdb) u</span><br><span class=\"line\"><span class=\"number\">8</span>     int sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">(gdb) u</span><br><span class=\"line\"><span class=\"number\">9</span>     <span class=\"keyword\">while</span>(i &lt;= num)&#123;</span><br><span class=\"line\">(gdb) u</span><br><span class=\"line\"><span class=\"number\">10</span>         sum += print(i);</span><br><span class=\"line\">(gdb) u</span><br><span class=\"line\"><span class=\"number\">11</span>         i++;</span><br><span class=\"line\">(gdb) u                                 &lt;<span class=\"literal\">--</span> 执行 i++ 操作</span><br><span class=\"line\"><span class=\"number\">9</span>     <span class=\"keyword\">while</span>(i &lt;= num)&#123;</span><br><span class=\"line\">(gdb) u                                 &lt;<span class=\"literal\">--</span> 快速执行完循环体</span><br><span class=\"line\"><span class=\"number\">13</span>     <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">(gdb) p sum</span><br><span class=\"line\"><span class=\"variable\">$1</span> = <span class=\"number\">14</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，这里当程序单步执行完第 11 行代码时，借助 until 命令快速执行完了整个循环体，并在第 13 行代码处停止执行。根据 p 命令输出的 num 变量的值可以确认，整个循环过程确定完整地执行完了。</p>\n<h2 id=\"GDB-finish和return命令\">GDB finish和return命令</h2>\n<p>实际调试时，在某个函数中调试一段时间后，可能不需要再一步步执行到函数返回处，希望直接执行完当前函数，这时可以使用 finish 命令。与 finish 命令类似的还有 return 命令，它们都可以结束当前执行的函数。</p>\n<p>finish 命令和 return 命令的区别是，finish 命令会执行函数到正常退出；而 return 命令是立即结束执行当前函数并返回，也就是说，如果当前函数还有剩余的代码未执行完毕，也不会执行了。除此之外，return 命令还有一个功能，即可以指定该函数的返回值。</p>\n<h1>多线程程序的调试</h1>\n<p>待定…</p>\n"},{"title":"MathJax","cover":"https://image.aruoshui.fun/i/2024/12/31/vskdu5-0.webp","description":"描述数学和科学公式的开源MathJax","swiper_index":1,"abbrlink":31281,"date":"2024-02-14T23:41:55.000Z","_content":"\n{% note info flat %}参考：[MathJax新手使用教程](https://blog.csdn.net/weixin_46119529/article/details/133130295)\n参考：[Mathjax公式教程](https://bobokele.blog.csdn.net/article/details/79577072?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=6)\n{% endnote %}\n\n# 一、行内公式及块内公式\n其实个人认为跟代码块和代码行含义一样\n## 行公式\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$\\lim_{x \\to \\infty}f(x)$\n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$\\lim_{x \\to \\infty}f(x)$\n<!-- endtab -->\n\n{% endtabs %}\n\n行公式，是在代码块的基础上前面加上`$`，后面加上`$`组成的。\n\n## 块公式\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\n\\lim_{x \\to \\infty}f(x)\n$$\n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\n\\lim_{x \\to \\infty}f(x)\n$$\n<!-- endtab -->\n\n{% endtabs %}\n块公式则是 输入`$$`和`$$`在公式前后。\n \n\n\n# 二、希腊字母\n| 名称 | 大写 | Tex\t| 小写 | Tex |\n| ----- | --- | ----- | --- | -----|\n| alpha\t| A   |\tA\t|α\t|\\alpha|\n|beta\t|B|\tB|\tβ\t|\\beta|\n|gamma\t|Γ\t|\\Gamma|\tγ\t|\\gamma|\n|delta  |\tΔ\t|\\Delta|\tδ\t|\\delta|\n|epsilon\t|E\t|E\t|ϵ\t|\\epsilon|\n|zeta\t|Z\t|Z\t|ζ\t|\\zeta|\n|eta\t|H\t|H\t|η\t|\\eta|\n|theta\t|Θ\t|\\Theta\t|θ\t|\\theta|\n|iota\t|I\t|I\t|ι\t|\\iota|\n|kappa\t|K\t|K\t|κ\t|\\kappa|\n|lambda\t|Λ\t|\\Lambda\t|λ\t|\\lambda|\n|mu\t|M\t|M\t|μ\t|\\mu|\n|nu\t|N\t|N\t|ν\t|\\nu|\n|xi\t|Ξ\t|\\Xi\t|ξ\t|\\xi|\n|omicron\t|O\t|O\t|ο\t|\\omicron|\n|pi\t|Π\t|\\Pi\t|π\t|\\pi|\n|rho\t|P\t|P\t|ρ\t|\\rho|\n|sigma\t|Σ\t|\\Sigma\t|σ\t|\\sigma|\n|tau\t|T\t|T\t|τ\t|\\tau|\n|upsilon\t|Υ\t|\\Upsilon\t|υ\t|\\upsilon|\n|phi\t|Φ\t|\\Phi\t|ϕ\t|\\phi|\n|chi\t|X\t|X\t|χ\t|\\chi|\n|psi\t|Ψ\t|\\Psi\t|ψ\t|\\psi|\n|omega\t|Ω\t|\\Omega\t|ω\t|\\omega|\n\n# 三、上下标\n上标使用`^`，下标使用`_`，例如`C_5^3`,渲染结果$C_5^3$\n\n\n\n\n# 四、括号\n## 小括号和方括号\n数学怎么表示这就怎么表示\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$(a+b)[a+b]$\n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$(a+b)[a+b]$\n<!-- endtab -->\n\n{% endtabs %}\n\n## 大括号\n### 正常表示\n为了与分组做出区别，使用`\\{`和`\\}`来表示大括号，其实跟转义字符写法一样。\n除此之外也可以使用`\\lbrace`和`\\rbrace`来表示\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$ \\{ a*b \\} + \\lbrace a^b \\rbrace $\n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$ \\{ a*b \\} + \\lbrace a^b \\rbrace $\n<!-- endtab -->\n\n{% endtabs %}\n### 用于分组\n默认情况下，上下标符号仅仅对下一个组起作用。一个组即单个字符或者使用{..}包裹起来的内容。\n例如如果我要表示`2^10`，但是渲染结果却是$ 2^10 $，而`2^{10}`才是真正的$ 2^ {10} $ \n{% note warning flat %}这里的大括号就不用加转义了{% endnote %}\n\n同时，大括号也能消除二义性，例如`2^2^2`会是一个错误，必须使用大括号来界定`^`，如`{2^2}^2`:${2^2}^2$,当然这么写`2^{2^2}`也没有任何问题\n\n## 尖括号\n使用`\\langle`和`\\rangle`表示左尖括号和右尖括号，如`\\langle a \\rangle`:$\\langle a \\rangle$\n\n## 取整符号\n### 上取整\n使用`\\lceil`和`\\rceil`表示。 如`\\lceil x \\rceil`：$\\lceil x \\rceil$\n### 下取整\n使用`\\lfloor`和`\\rfloor`表示。 如`\\lfloor x \\rfloor`：$\\lfloor x \\rfloor$\n\n\n\n \n# 五、积分和求和\n## 积分\n`\\int`用来表示积分符号，同样地，其上下标表示积分的上下限。如，\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$ \\int_1^\\infty $\n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$ \\int_1^\\infty $\n<!-- endtab -->\n\n{% endtabs %}\n{% note warning flat %}这里的$\\infty$符号写做`\\infty`{% endnote %}\n\n另外多重积分其实就是多加几个i\n`\\iint`：$\\iint$\n`\\iiint`：$\\iiint$\n\n## 其他符号\n`\\sum`用来表示求和符号，其下标表示求和下限，上标表示上限。如：`\\sum_1^10`：$\\sum_1^{10}$\n`\\prod`：$\\prod$\n`\\bigcup`：$\\bigcup$\n`\\bigcap`：$\\bigcap$\n \n\n# 六、分式与根式\n## 分式\n第一种，使用`\\frac ab`，`\\frac`作用于其后的两个组`a`，`b`，结果为$\\frac ab$如果你的分子或分母不是单个字符，请使用{..}来分组，如$\\frac{a-b}{a+b}$\n\n第二种，使用`\\over`来分割，如`{a-b \\over a+b}`:${a-b \\over a+b}$\n{% note warning flat %}要分割的部分请采用`{}`来囊括{% endnote %}\n\n## 多重分式\n如：\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$ x=a_0 + \\frac {1^2}{a_1 + \\frac {2^2}{a_2 + \\frac {3^2}{a_3 + \\frac {4^2}{a_4 + ...}}}}\n $\n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$ x=a_0 + \\frac {1^2}{a_1 + \\frac {2^2}{a_2 + \\frac {3^2}{a_3 + \\frac {4^2}{a_4 + ...}}}}\n $\n<!-- endtab -->\n\n{% endtabs %}\n\n## 根式\n根式使用`\\sqrt`来表示。如，`\\sqrt[2]{4}`: $\\sqrt[2]{4}$\n\n \n\n# 七、表达式与方程组\n## 多行表达式\n可使用`\\begin{cases}…\\end{cases}`。其中，使用`\\\\`来分类，使用`&`指示需要对齐的位置，`\\空格`表示空格 。如：\n\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\nf(n)\n\\begin{cases}\n\\cfrac n2, &if\\ n\\ is\\ even\\\\\n3n + 1, &if\\  n\\ is\\ odd\n\\end{cases}\n\n$$ \n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\nf(n)=\n\\begin{cases}\n\\cfrac n2, &if\\ n\\ is\\ even\\\\\n3n + 1, &if\\  n\\ is\\ odd\n\\end{cases}\n$$ \n\n<!-- endtab -->\n\n{% endtabs %}\n\n## 方程组\n\n{% tabs 分栏 %}\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\n\\left \\{ \n\\begin{array}{c}\na_1x+b_1y+c_1z=d_1 \\\\ \na_2x+b_2y+c_2z=d_2 \\\\ \na_3x+b_3y+c_3z=d_3\n\\end{array}\n\\right .\n\n$$ \n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\n\\left \\{ \n\\begin{array}{c}\na_1x+b_1y+c_1z=d_1 \\\\ \na_2x+b_2y+c_2z=d_2 \\\\ \na_3x+b_3y+c_3z=d_3\n\\end{array}\n\\right .\n\n$$ \n<!-- endtab -->\n{% endtabs %}\n\n \n\n# 八、表格\n使用`\\begin{array}{列样式}…\\end{array}`这样的形式来创建表格，列样式可以是`clr`表示居中，左，右对齐，还可以使用`|`表示一条竖线。表格中各行使用`\\\\`分隔，各列使用`&`分隔。使用`\\hline`在本行前加入一条直线。 \n{% tabs 分栏 %}\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\n\\begin{array}{c|lcr}\nn & \\text{Left} & \\text{Center} & \\text{Right} \\\\\n\\hline\n1 & 0.24 & 1 & 125 \\\\\n2 & -1 & 189 & -8 \\\\\n3 & -20 & 2000 & 1+10i \\\\\n\\end{array}\n$$ \n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\n\\begin{array}{c|lcr}\nn & \\text{Left} & \\text{Center} & \\text{Right} \\\\\n\\hline\n1 & 0.24 & 1 & 125 \\\\\n2 & -1 & 189 & -8 \\\\\n3 & -20 & 2000 & 1+10i \\\\\n\\end{array}\n$$ \n<!-- endtab -->\n{% endtabs %}\n \n\n# 九、矩阵\n## 基本用法\n{% tabs 分栏 %}\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\n\\begin{matrix}\n1 & x & x^2 \\\\\n1 & y & y^2 \\\\\n1 & z & z^2 \\\\\n\\end{matrix}\n$$ \n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\n\\begin{matrix}\n1 & x & x^2 \\\\\n1 & y & y^2 \\\\\n1 & z & z^2 \\\\\n\\end{matrix}\n\n$$ \n<!-- endtab -->\n{% endtabs %}\n\n\n## 矩阵表示\n可以使用特殊的matrix。即替换`\\begin{matrix}…\\end{matrix}`中的matrix为`pmatrix`，`bmatrix`，`Bmatrix`，`vmatrix`, `Vmatrix`。\n\n{% tabs 分栏 %}\n<!-- tab 示例源码 -->\n```md\n(1) pmatrix:\n\\```md\n$$\n\\begin{pmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{pmatrix}\n$$ \n\\```\n\n(2) bmatrix:\n\\```md\n$$\n\\begin{bmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{bmatrix}\n$$ \n\\```\n\n(3) Bmatrix:\n\\```md\n$$\n\\begin{Bmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{Bmatrix}\n$$ \n\\```\n\n(4) vmatrix:\n\\```md\n$$\n\\begin{vmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{vmatrix}\n$$ \n\\```\n\n(5) Vmatrix:\n\\```md\n$$\n\\begin{Vmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{Vmatrix}\n$$ \n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n\n(1) pmatrix:\n\n$$\n\\begin{pmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{pmatrix}\n$$ \n\n\n(2) bmatrix:\n\n$$\n\\begin{bmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{bmatrix}\n$$ \n\n\n(3) Bmatrix:\n\n$$\n\\begin{Bmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{Bmatrix}\n$$ \n\n\n(4) vmatrix:\n\n$$\n\\begin{vmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{vmatrix}\n$$ \n\n\n(5) Vmatrix:\n\n$$\n\\begin{Vmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{Vmatrix}\n$$ \n\n\n<!-- endtab -->\n{% endtabs %}\n\n## 省略元素\n可以使用`\\cdots`：$\\cdots$，`\\ddots`： $\\ddots$，`\\vdots`：$\\vdots$来省略矩阵中的元素\n\n{% tabs 分栏 %}\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\n\\begin{pmatrix}\n1&a_1&a_1^2&\\cdots&a_1^n\\\\\n1&a_2&a_2^2&\\cdots&a_2^n\\\\\n\\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\\n1&a_m&a_m^2&\\cdots&a_m^n\\\\\n\\end{pmatrix}\n$$ \n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\n\\begin{pmatrix}\n1&a_1&a_1^2&\\cdots&a_1^n\\\\\n1&a_2&a_2^2&\\cdots&a_2^n\\\\\n\\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\\n1&a_m&a_m^2&\\cdots&a_m^n\\\\\n\\end{pmatrix}\n\n$$ \n<!-- endtab -->\n{% endtabs %}\n\n\n## 增广矩阵\n使用前面的表格中使用到的`\\begin{array} ... \\end{array}`来实现\n{% tabs 分栏 %}\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\n\\left[\n\\begin{array}{cc|c}\n1&2&3\\\\\\\\\n4&5&6\n\\end{array}\n\\right]\n$$ \n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\n\\left[\n\\begin{array}{cc|c}\n1&2&3\\\\\n4&5&6\n\\end{array}\n\\right]\n$$ \n<!-- endtab -->\n{% endtabs %}\n\n# 十、常用符号\n{% note info flat %}\n更多符号请参考：[Mathjax公式教程](https://bobokele.blog.csdn.net/article/details/79577072?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=6)\n{% endnote %}\n\n## 三角函数\n`\\sinx`：$\\sin$\n`\\arcsin`：$\\arcsin$\n## 比较运算符\n`\\lt`：$\\lt$\n`\\gt`：$\\gt$\n`\\le`：$\\le$\n`\\ge`：$\\ge$\n`\\ne`：$\\ne$\n\n## 集合关系\n并`\\cup`：$\\cup$\n交`\\cap`：$\\cap$\n差`\\setminus`：$\\setminus$\n子集`\\subset`：$\\subset$\n真子集`\\subsetneqq`：$\\subsetneqq$\n属于`\\in`：$\\in$\n不属于`\\notin`：$\\notin$\n空集`\\varnothing`：$\\varnothing$\n\n## 逻辑运算\n`\\land`：$\\land$\n`\\lor`：$\\lor$\n`\\lnot`：$\\lnot$\n`\\forall`：$\\forall$\n`\\exists`：$\\exists$\n\n## 操作符\n`\\oplus`：$\\oplus$\n`\\circ`：$\\circ$\n`\\bullet`：$\\bullet$\n`\\approx`：$\\approx$\n`\\sim`：$\\sim$\n`\\cong`：$\\cong$\n`\\pmod`：如`a = b \\pmod n`： $a = b \\pmod n$\n\n![](https://cdnimg103.lizhi.fm/audio_cover/2017/08/17/2619367354329486855_580x580.jpg)\n\n\n\n# 十一、公式的标记和引用\n公式经常复用，Mathjax中有一个类似于函数的功能\n\n使用`\\tag{yourtag}`来标记公式，如果想在之后引用该公式，则还需要加上`\\label{yourlabel}`在`\\tag`之后\n\n\n","source":"_posts/MathJax.md","raw":"---\ntitle: MathJax\ntags:\n  - 科研工具\n  - 数学表达式\ncategories:\n  - Math\ncover: 'https://image.aruoshui.fun/i/2024/12/31/vskdu5-0.webp'\ndescription: 描述数学和科学公式的开源MathJax\nswiper_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前\nabbrlink: 31281\ndate: 2024-02-15 07:41:55\n---\n\n{% note info flat %}参考：[MathJax新手使用教程](https://blog.csdn.net/weixin_46119529/article/details/133130295)\n参考：[Mathjax公式教程](https://bobokele.blog.csdn.net/article/details/79577072?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=6)\n{% endnote %}\n\n# 一、行内公式及块内公式\n其实个人认为跟代码块和代码行含义一样\n## 行公式\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$\\lim_{x \\to \\infty}f(x)$\n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$\\lim_{x \\to \\infty}f(x)$\n<!-- endtab -->\n\n{% endtabs %}\n\n行公式，是在代码块的基础上前面加上`$`，后面加上`$`组成的。\n\n## 块公式\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\n\\lim_{x \\to \\infty}f(x)\n$$\n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\n\\lim_{x \\to \\infty}f(x)\n$$\n<!-- endtab -->\n\n{% endtabs %}\n块公式则是 输入`$$`和`$$`在公式前后。\n \n\n\n# 二、希腊字母\n| 名称 | 大写 | Tex\t| 小写 | Tex |\n| ----- | --- | ----- | --- | -----|\n| alpha\t| A   |\tA\t|α\t|\\alpha|\n|beta\t|B|\tB|\tβ\t|\\beta|\n|gamma\t|Γ\t|\\Gamma|\tγ\t|\\gamma|\n|delta  |\tΔ\t|\\Delta|\tδ\t|\\delta|\n|epsilon\t|E\t|E\t|ϵ\t|\\epsilon|\n|zeta\t|Z\t|Z\t|ζ\t|\\zeta|\n|eta\t|H\t|H\t|η\t|\\eta|\n|theta\t|Θ\t|\\Theta\t|θ\t|\\theta|\n|iota\t|I\t|I\t|ι\t|\\iota|\n|kappa\t|K\t|K\t|κ\t|\\kappa|\n|lambda\t|Λ\t|\\Lambda\t|λ\t|\\lambda|\n|mu\t|M\t|M\t|μ\t|\\mu|\n|nu\t|N\t|N\t|ν\t|\\nu|\n|xi\t|Ξ\t|\\Xi\t|ξ\t|\\xi|\n|omicron\t|O\t|O\t|ο\t|\\omicron|\n|pi\t|Π\t|\\Pi\t|π\t|\\pi|\n|rho\t|P\t|P\t|ρ\t|\\rho|\n|sigma\t|Σ\t|\\Sigma\t|σ\t|\\sigma|\n|tau\t|T\t|T\t|τ\t|\\tau|\n|upsilon\t|Υ\t|\\Upsilon\t|υ\t|\\upsilon|\n|phi\t|Φ\t|\\Phi\t|ϕ\t|\\phi|\n|chi\t|X\t|X\t|χ\t|\\chi|\n|psi\t|Ψ\t|\\Psi\t|ψ\t|\\psi|\n|omega\t|Ω\t|\\Omega\t|ω\t|\\omega|\n\n# 三、上下标\n上标使用`^`，下标使用`_`，例如`C_5^3`,渲染结果$C_5^3$\n\n\n\n\n# 四、括号\n## 小括号和方括号\n数学怎么表示这就怎么表示\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$(a+b)[a+b]$\n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$(a+b)[a+b]$\n<!-- endtab -->\n\n{% endtabs %}\n\n## 大括号\n### 正常表示\n为了与分组做出区别，使用`\\{`和`\\}`来表示大括号，其实跟转义字符写法一样。\n除此之外也可以使用`\\lbrace`和`\\rbrace`来表示\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$ \\{ a*b \\} + \\lbrace a^b \\rbrace $\n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$ \\{ a*b \\} + \\lbrace a^b \\rbrace $\n<!-- endtab -->\n\n{% endtabs %}\n### 用于分组\n默认情况下，上下标符号仅仅对下一个组起作用。一个组即单个字符或者使用{..}包裹起来的内容。\n例如如果我要表示`2^10`，但是渲染结果却是$ 2^10 $，而`2^{10}`才是真正的$ 2^ {10} $ \n{% note warning flat %}这里的大括号就不用加转义了{% endnote %}\n\n同时，大括号也能消除二义性，例如`2^2^2`会是一个错误，必须使用大括号来界定`^`，如`{2^2}^2`:${2^2}^2$,当然这么写`2^{2^2}`也没有任何问题\n\n## 尖括号\n使用`\\langle`和`\\rangle`表示左尖括号和右尖括号，如`\\langle a \\rangle`:$\\langle a \\rangle$\n\n## 取整符号\n### 上取整\n使用`\\lceil`和`\\rceil`表示。 如`\\lceil x \\rceil`：$\\lceil x \\rceil$\n### 下取整\n使用`\\lfloor`和`\\rfloor`表示。 如`\\lfloor x \\rfloor`：$\\lfloor x \\rfloor$\n\n\n\n \n# 五、积分和求和\n## 积分\n`\\int`用来表示积分符号，同样地，其上下标表示积分的上下限。如，\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$ \\int_1^\\infty $\n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$ \\int_1^\\infty $\n<!-- endtab -->\n\n{% endtabs %}\n{% note warning flat %}这里的$\\infty$符号写做`\\infty`{% endnote %}\n\n另外多重积分其实就是多加几个i\n`\\iint`：$\\iint$\n`\\iiint`：$\\iiint$\n\n## 其他符号\n`\\sum`用来表示求和符号，其下标表示求和下限，上标表示上限。如：`\\sum_1^10`：$\\sum_1^{10}$\n`\\prod`：$\\prod$\n`\\bigcup`：$\\bigcup$\n`\\bigcap`：$\\bigcap$\n \n\n# 六、分式与根式\n## 分式\n第一种，使用`\\frac ab`，`\\frac`作用于其后的两个组`a`，`b`，结果为$\\frac ab$如果你的分子或分母不是单个字符，请使用{..}来分组，如$\\frac{a-b}{a+b}$\n\n第二种，使用`\\over`来分割，如`{a-b \\over a+b}`:${a-b \\over a+b}$\n{% note warning flat %}要分割的部分请采用`{}`来囊括{% endnote %}\n\n## 多重分式\n如：\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$ x=a_0 + \\frac {1^2}{a_1 + \\frac {2^2}{a_2 + \\frac {3^2}{a_3 + \\frac {4^2}{a_4 + ...}}}}\n $\n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$ x=a_0 + \\frac {1^2}{a_1 + \\frac {2^2}{a_2 + \\frac {3^2}{a_3 + \\frac {4^2}{a_4 + ...}}}}\n $\n<!-- endtab -->\n\n{% endtabs %}\n\n## 根式\n根式使用`\\sqrt`来表示。如，`\\sqrt[2]{4}`: $\\sqrt[2]{4}$\n\n \n\n# 七、表达式与方程组\n## 多行表达式\n可使用`\\begin{cases}…\\end{cases}`。其中，使用`\\\\`来分类，使用`&`指示需要对齐的位置，`\\空格`表示空格 。如：\n\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\nf(n)\n\\begin{cases}\n\\cfrac n2, &if\\ n\\ is\\ even\\\\\n3n + 1, &if\\  n\\ is\\ odd\n\\end{cases}\n\n$$ \n\\```\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\nf(n)=\n\\begin{cases}\n\\cfrac n2, &if\\ n\\ is\\ even\\\\\n3n + 1, &if\\  n\\ is\\ odd\n\\end{cases}\n$$ \n\n<!-- endtab -->\n\n{% endtabs %}\n\n## 方程组\n\n{% tabs 分栏 %}\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\n\\left \\{ \n\\begin{array}{c}\na_1x+b_1y+c_1z=d_1 \\\\ \na_2x+b_2y+c_2z=d_2 \\\\ \na_3x+b_3y+c_3z=d_3\n\\end{array}\n\\right .\n\n$$ \n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\n\\left \\{ \n\\begin{array}{c}\na_1x+b_1y+c_1z=d_1 \\\\ \na_2x+b_2y+c_2z=d_2 \\\\ \na_3x+b_3y+c_3z=d_3\n\\end{array}\n\\right .\n\n$$ \n<!-- endtab -->\n{% endtabs %}\n\n \n\n# 八、表格\n使用`\\begin{array}{列样式}…\\end{array}`这样的形式来创建表格，列样式可以是`clr`表示居中，左，右对齐，还可以使用`|`表示一条竖线。表格中各行使用`\\\\`分隔，各列使用`&`分隔。使用`\\hline`在本行前加入一条直线。 \n{% tabs 分栏 %}\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\n\\begin{array}{c|lcr}\nn & \\text{Left} & \\text{Center} & \\text{Right} \\\\\n\\hline\n1 & 0.24 & 1 & 125 \\\\\n2 & -1 & 189 & -8 \\\\\n3 & -20 & 2000 & 1+10i \\\\\n\\end{array}\n$$ \n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\n\\begin{array}{c|lcr}\nn & \\text{Left} & \\text{Center} & \\text{Right} \\\\\n\\hline\n1 & 0.24 & 1 & 125 \\\\\n2 & -1 & 189 & -8 \\\\\n3 & -20 & 2000 & 1+10i \\\\\n\\end{array}\n$$ \n<!-- endtab -->\n{% endtabs %}\n \n\n# 九、矩阵\n## 基本用法\n{% tabs 分栏 %}\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\n\\begin{matrix}\n1 & x & x^2 \\\\\n1 & y & y^2 \\\\\n1 & z & z^2 \\\\\n\\end{matrix}\n$$ \n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\n\\begin{matrix}\n1 & x & x^2 \\\\\n1 & y & y^2 \\\\\n1 & z & z^2 \\\\\n\\end{matrix}\n\n$$ \n<!-- endtab -->\n{% endtabs %}\n\n\n## 矩阵表示\n可以使用特殊的matrix。即替换`\\begin{matrix}…\\end{matrix}`中的matrix为`pmatrix`，`bmatrix`，`Bmatrix`，`vmatrix`, `Vmatrix`。\n\n{% tabs 分栏 %}\n<!-- tab 示例源码 -->\n```md\n(1) pmatrix:\n\\```md\n$$\n\\begin{pmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{pmatrix}\n$$ \n\\```\n\n(2) bmatrix:\n\\```md\n$$\n\\begin{bmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{bmatrix}\n$$ \n\\```\n\n(3) Bmatrix:\n\\```md\n$$\n\\begin{Bmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{Bmatrix}\n$$ \n\\```\n\n(4) vmatrix:\n\\```md\n$$\n\\begin{vmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{vmatrix}\n$$ \n\\```\n\n(5) Vmatrix:\n\\```md\n$$\n\\begin{Vmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{Vmatrix}\n$$ \n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n\n(1) pmatrix:\n\n$$\n\\begin{pmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{pmatrix}\n$$ \n\n\n(2) bmatrix:\n\n$$\n\\begin{bmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{bmatrix}\n$$ \n\n\n(3) Bmatrix:\n\n$$\n\\begin{Bmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{Bmatrix}\n$$ \n\n\n(4) vmatrix:\n\n$$\n\\begin{vmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{vmatrix}\n$$ \n\n\n(5) Vmatrix:\n\n$$\n\\begin{Vmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n\\end{Vmatrix}\n$$ \n\n\n<!-- endtab -->\n{% endtabs %}\n\n## 省略元素\n可以使用`\\cdots`：$\\cdots$，`\\ddots`： $\\ddots$，`\\vdots`：$\\vdots$来省略矩阵中的元素\n\n{% tabs 分栏 %}\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\n\\begin{pmatrix}\n1&a_1&a_1^2&\\cdots&a_1^n\\\\\n1&a_2&a_2^2&\\cdots&a_2^n\\\\\n\\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\\n1&a_m&a_m^2&\\cdots&a_m^n\\\\\n\\end{pmatrix}\n$$ \n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\n\\begin{pmatrix}\n1&a_1&a_1^2&\\cdots&a_1^n\\\\\n1&a_2&a_2^2&\\cdots&a_2^n\\\\\n\\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\\n1&a_m&a_m^2&\\cdots&a_m^n\\\\\n\\end{pmatrix}\n\n$$ \n<!-- endtab -->\n{% endtabs %}\n\n\n## 增广矩阵\n使用前面的表格中使用到的`\\begin{array} ... \\end{array}`来实现\n{% tabs 分栏 %}\n<!-- tab 示例源码 -->\n```md\n\\```md\n$$\n\\left[\n\\begin{array}{cc|c}\n1&2&3\\\\\\\\\n4&5&6\n\\end{array}\n\\right]\n$$ \n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$$\n\\left[\n\\begin{array}{cc|c}\n1&2&3\\\\\n4&5&6\n\\end{array}\n\\right]\n$$ \n<!-- endtab -->\n{% endtabs %}\n\n# 十、常用符号\n{% note info flat %}\n更多符号请参考：[Mathjax公式教程](https://bobokele.blog.csdn.net/article/details/79577072?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=6)\n{% endnote %}\n\n## 三角函数\n`\\sinx`：$\\sin$\n`\\arcsin`：$\\arcsin$\n## 比较运算符\n`\\lt`：$\\lt$\n`\\gt`：$\\gt$\n`\\le`：$\\le$\n`\\ge`：$\\ge$\n`\\ne`：$\\ne$\n\n## 集合关系\n并`\\cup`：$\\cup$\n交`\\cap`：$\\cap$\n差`\\setminus`：$\\setminus$\n子集`\\subset`：$\\subset$\n真子集`\\subsetneqq`：$\\subsetneqq$\n属于`\\in`：$\\in$\n不属于`\\notin`：$\\notin$\n空集`\\varnothing`：$\\varnothing$\n\n## 逻辑运算\n`\\land`：$\\land$\n`\\lor`：$\\lor$\n`\\lnot`：$\\lnot$\n`\\forall`：$\\forall$\n`\\exists`：$\\exists$\n\n## 操作符\n`\\oplus`：$\\oplus$\n`\\circ`：$\\circ$\n`\\bullet`：$\\bullet$\n`\\approx`：$\\approx$\n`\\sim`：$\\sim$\n`\\cong`：$\\cong$\n`\\pmod`：如`a = b \\pmod n`： $a = b \\pmod n$\n\n![](https://cdnimg103.lizhi.fm/audio_cover/2017/08/17/2619367354329486855_580x580.jpg)\n\n\n\n# 十一、公式的标记和引用\n公式经常复用，Mathjax中有一个类似于函数的功能\n\n使用`\\tag{yourtag}`来标记公式，如果想在之后引用该公式，则还需要加上`\\label{yourlabel}`在`\\tag`之后\n\n\n","slug":"MathJax","published":1,"updated":"2024-12-31T11:25:32.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6inv000kmktt7mpfa21p","content":"<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/weixin_46119529/article/details/133130295\">MathJax新手使用教程</a><br>\n参考：<a href=\"https://bobokele.blog.csdn.net/article/details/79577072?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=6\">Mathjax公式教程</a></p>\n</div>\n<h1>一、行内公式及块内公式</h1>\n<p>其实个人认为跟代码块和代码行含义一样</p>\n<h2 id=\"行公式\">行公式</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$\\lim_&#123;x \\to \\infty&#125;f(x)$</span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$\\lim_{x \\to \\infty}f(x)$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<p>行公式，是在代码块的基础上前面加上<code>$</code>，后面加上<code>$</code>组成的。</p>\n<h2 id=\"块公式\">块公式</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\lim_&#123;x \\to \\infty&#125;f(x)</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\n\\lim_{x \\to \\infty}f(x)<br>\n$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<p>块公式则是 输入<code>$$</code>和<code>$$</code>在公式前后。</p>\n<h1>二、希腊字母</h1>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>大写</th>\n<th>Tex</th>\n<th>小写</th>\n<th>Tex</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>alpha</td>\n<td>A</td>\n<td>A</td>\n<td>α</td>\n<td>\\alpha</td>\n</tr>\n<tr>\n<td>beta</td>\n<td>B</td>\n<td>B</td>\n<td>β</td>\n<td>\\beta</td>\n</tr>\n<tr>\n<td>gamma</td>\n<td>Γ</td>\n<td>\\Gamma</td>\n<td>γ</td>\n<td>\\gamma</td>\n</tr>\n<tr>\n<td>delta</td>\n<td>Δ</td>\n<td>\\Delta</td>\n<td>δ</td>\n<td>\\delta</td>\n</tr>\n<tr>\n<td>epsilon</td>\n<td>E</td>\n<td>E</td>\n<td>ϵ</td>\n<td>\\epsilon</td>\n</tr>\n<tr>\n<td>zeta</td>\n<td>Z</td>\n<td>Z</td>\n<td>ζ</td>\n<td>\\zeta</td>\n</tr>\n<tr>\n<td>eta</td>\n<td>H</td>\n<td>H</td>\n<td>η</td>\n<td>\\eta</td>\n</tr>\n<tr>\n<td>theta</td>\n<td>Θ</td>\n<td>\\Theta</td>\n<td>θ</td>\n<td>\\theta</td>\n</tr>\n<tr>\n<td>iota</td>\n<td>I</td>\n<td>I</td>\n<td>ι</td>\n<td>\\iota</td>\n</tr>\n<tr>\n<td>kappa</td>\n<td>K</td>\n<td>K</td>\n<td>κ</td>\n<td>\\kappa</td>\n</tr>\n<tr>\n<td>lambda</td>\n<td>Λ</td>\n<td>\\Lambda</td>\n<td>λ</td>\n<td>\\lambda</td>\n</tr>\n<tr>\n<td>mu</td>\n<td>M</td>\n<td>M</td>\n<td>μ</td>\n<td>\\mu</td>\n</tr>\n<tr>\n<td>nu</td>\n<td>N</td>\n<td>N</td>\n<td>ν</td>\n<td>\\nu</td>\n</tr>\n<tr>\n<td>xi</td>\n<td>Ξ</td>\n<td>\\Xi</td>\n<td>ξ</td>\n<td>\\xi</td>\n</tr>\n<tr>\n<td>omicron</td>\n<td>O</td>\n<td>O</td>\n<td>ο</td>\n<td>\\omicron</td>\n</tr>\n<tr>\n<td>pi</td>\n<td>Π</td>\n<td>\\Pi</td>\n<td>π</td>\n<td>\\pi</td>\n</tr>\n<tr>\n<td>rho</td>\n<td>P</td>\n<td>P</td>\n<td>ρ</td>\n<td>\\rho</td>\n</tr>\n<tr>\n<td>sigma</td>\n<td>Σ</td>\n<td>\\Sigma</td>\n<td>σ</td>\n<td>\\sigma</td>\n</tr>\n<tr>\n<td>tau</td>\n<td>T</td>\n<td>T</td>\n<td>τ</td>\n<td>\\tau</td>\n</tr>\n<tr>\n<td>upsilon</td>\n<td>Υ</td>\n<td>\\Upsilon</td>\n<td>υ</td>\n<td>\\upsilon</td>\n</tr>\n<tr>\n<td>phi</td>\n<td>Φ</td>\n<td>\\Phi</td>\n<td>ϕ</td>\n<td>\\phi</td>\n</tr>\n<tr>\n<td>chi</td>\n<td>X</td>\n<td>X</td>\n<td>χ</td>\n<td>\\chi</td>\n</tr>\n<tr>\n<td>psi</td>\n<td>Ψ</td>\n<td>\\Psi</td>\n<td>ψ</td>\n<td>\\psi</td>\n</tr>\n<tr>\n<td>omega</td>\n<td>Ω</td>\n<td>\\Omega</td>\n<td>ω</td>\n<td>\\omega</td>\n</tr>\n</tbody>\n</table>\n<h1>三、上下标</h1>\n<p>上标使用<code>^</code>，下标使用<code>_</code>，例如<code>C_5^3</code>,渲染结果$C_5^3$</p>\n<h1>四、括号</h1>\n<h2 id=\"小括号和方括号\">小括号和方括号</h2>\n<p>数学怎么表示这就怎么表示</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$(a+b)[a+b]$</span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$(a+b)[a+b]$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"大括号\">大括号</h2>\n<h3 id=\"正常表示\">正常表示</h3>\n<p>为了与分组做出区别，使用<code>\\&#123;</code>和<code>\\&#125;</code>来表示大括号，其实跟转义字符写法一样。<br>\n除此之外也可以使用<code>\\lbrace</code>和<code>\\rbrace</code>来表示</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$ \\&#123; a*b \\&#125; + \\lbrace a^b \\rbrace $</span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$ { a*b } + \\lbrace a^b \\rbrace $</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h3 id=\"用于分组\">用于分组</h3>\n<p>默认情况下，上下标符号仅仅对下一个组起作用。一个组即单个字符或者使用{…}包裹起来的内容。<br>\n例如如果我要表示<code>2^10</code>，但是渲染结果却是$ 2^10 $，而<code>2^&#123;10&#125;</code>才是真正的$ 2^ {10} $</p>\n<div class=\"note warning flat\"><p>这里的大括号就不用加转义了</p>\n</div>\n<p>同时，大括号也能消除二义性，例如<code>2^2^2</code>会是一个错误，必须使用大括号来界定<code>^</code>，如<code>&#123;2^2&#125;^2</code>:${2^2}^2$,当然这么写<code>2^&#123;2^2&#125;</code>也没有任何问题</p>\n<h2 id=\"尖括号\">尖括号</h2>\n<p>使用<code>\\langle</code>和<code>\\rangle</code>表示左尖括号和右尖括号，如<code>\\langle a \\rangle</code>:$\\langle a \\rangle$</p>\n<h2 id=\"取整符号\">取整符号</h2>\n<h3 id=\"上取整\">上取整</h3>\n<p>使用<code>\\lceil</code>和<code>\\rceil</code>表示。 如<code>\\lceil x \\rceil</code>：$\\lceil x \\rceil$</p>\n<h3 id=\"下取整\">下取整</h3>\n<p>使用<code>\\lfloor</code>和<code>\\rfloor</code>表示。 如<code>\\lfloor x \\rfloor</code>：$\\lfloor x \\rfloor$</p>\n<h1>五、积分和求和</h1>\n<h2 id=\"积分\">积分</h2>\n<p><code>\\int</code>用来表示积分符号，同样地，其上下标表示积分的上下限。如，</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$ \\int_1^\\infty $</span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$ \\int_1^\\infty $</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<div class=\"note warning flat\"><p>这里的$\\infty$符号写做<code>\\infty</code></p>\n</div>\n<p>另外多重积分其实就是多加几个i<br>\n<code>\\iint</code>：$\\iint$<br>\n<code>\\iiint</code>：$\\iiint$</p>\n<h2 id=\"其他符号\">其他符号</h2>\n<p><code>\\sum</code>用来表示求和符号，其下标表示求和下限，上标表示上限。如：<code>\\sum_1^10</code>：$\\sum_1^{10}$<br>\n<code>\\prod</code>：$\\prod$<br>\n<code>\\bigcup</code>：$\\bigcup$<br>\n<code>\\bigcap</code>：$\\bigcap$</p>\n<h1>六、分式与根式</h1>\n<h2 id=\"分式\">分式</h2>\n<p>第一种，使用<code>\\frac ab</code>，<code>\\frac</code>作用于其后的两个组<code>a</code>，<code>b</code>，结果为$\\frac ab$如果你的分子或分母不是单个字符，请使用{…}来分组，如$\\frac{a-b}{a+b}$</p>\n<p>第二种，使用<code>\\over</code>来分割，如<code>&#123;a-b \\over a+b&#125;</code>:${a-b \\over a+b}$</p>\n<div class=\"note warning flat\"><p>要分割的部分请采用<code>{}</code>来囊括</p>\n</div>\n<h2 id=\"多重分式\">多重分式</h2>\n<p>如：</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$ x=a_0 + \\frac &#123;1^2&#125;&#123;a_1 + \\frac &#123;2^2&#125;&#123;a_2 + \\frac &#123;3^2&#125;&#123;a_3 + \\frac &#123;4^2&#125;&#123;a_4 + ...&#125;&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"code\"> $</span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$ x=a_0 + \\frac {1^2}{a_1 + \\frac {2^2}{a_2 + \\frac {3^2}{a_3 + \\frac {4^2}{a_4 + …}}}}<br>\n$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"根式\">根式</h2>\n<p>根式使用<code>\\sqrt</code>来表示。如，<code>\\sqrt[2]&#123;4&#125;</code>: $\\sqrt[2]{4}$</p>\n<h1>七、表达式与方程组</h1>\n<h2 id=\"多行表达式\">多行表达式</h2>\n<p>可使用<code>\\begin&#123;cases&#125;…\\end&#123;cases&#125;</code>。其中，使用<code>\\\\</code>来分类，使用<code>&amp;</code>指示需要对齐的位置，<code>\\空格</code>表示空格 。如：</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">f(n)</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;cases&#125;</span></span><br><span class=\"line\"><span class=\"code\">\\cfrac n2, &amp;if\\ n\\ is\\ even\\\\</span></span><br><span class=\"line\"><span class=\"code\">3n + 1, &amp;if\\  n\\ is\\ odd</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;cases&#125;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\nf(n)=<br>\n\\begin{cases}<br>\n\\cfrac n2, &amp;if\\ n\\ is\\ even\\<br>\n3n + 1, &amp;if\\  n\\ is\\ odd<br>\n\\end{cases}<br>\n$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"方程组\">方程组</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\left \\&#123; </span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;array&#125;&#123;c&#125;</span></span><br><span class=\"line\"><span class=\"code\">a_1x+b_1y+c_1z=d_1 \\\\ </span></span><br><span class=\"line\"><span class=\"code\">a_2x+b_2y+c_2z=d_2 \\\\ </span></span><br><span class=\"line\"><span class=\"code\">a_3x+b_3y+c_3z=d_3</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;array&#125;</span></span><br><span class=\"line\"><span class=\"code\">\\right .</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\n\\left {<br>\n\\begin{array}{c}<br>\na_1x+b_1y+c_1z=d_1 \\<br>\na_2x+b_2y+c_2z=d_2 \\<br>\na_3x+b_3y+c_3z=d_3<br>\n\\end{array}<br>\n\\right .</p>\n<p>$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h1>八、表格</h1>\n<p>使用<code>\\begin&#123;array&#125;&#123;列样式&#125;…\\end&#123;array&#125;</code>这样的形式来创建表格，列样式可以是<code>clr</code>表示居中，左，右对齐，还可以使用<code>|</code>表示一条竖线。表格中各行使用<code>\\\\</code>分隔，各列使用<code>&amp;</code>分隔。使用<code>\\hline</code>在本行前加入一条直线。</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;array&#125;&#123;c|lcr&#125;</span></span><br><span class=\"line\"><span class=\"code\">n &amp; \\text&#123;Left&#125; &amp; \\text&#123;Center&#125; &amp; \\text&#123;Right&#125; \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\hline</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; 0.24 &amp; 1 &amp; 125 \\\\</span></span><br><span class=\"line\"><span class=\"code\">2 &amp; -1 &amp; 189 &amp; -8 \\\\</span></span><br><span class=\"line\"><span class=\"code\">3 &amp; -20 &amp; 2000 &amp; 1+10i \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;array&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\n\\begin{array}{c|lcr}<br>\nn &amp; \\text{Left} &amp; \\text{Center} &amp; \\text{Right} \\<br>\n\\hline<br>\n1 &amp; 0.24 &amp; 1 &amp; 125 \\<br>\n2 &amp; -1 &amp; 189 &amp; -8 \\<br>\n3 &amp; -20 &amp; 2000 &amp; 1+10i \\<br>\n\\end{array}<br>\n$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h1>九、矩阵</h1>\n<h2 id=\"基本用法\">基本用法</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;matrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; x &amp; x^2 \\\\</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; y &amp; y^2 \\\\</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; z &amp; z^2 \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;matrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\n\\begin{matrix}<br>\n1 &amp; x &amp; x^2 \\<br>\n1 &amp; y &amp; y^2 \\<br>\n1 &amp; z &amp; z^2 \\<br>\n\\end{matrix}</p>\n<p>$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"矩阵表示\">矩阵表示</h2>\n<p>可以使用特殊的matrix。即替换<code>\\begin&#123;matrix&#125;…\\end&#123;matrix&#125;</code>中的matrix为<code>pmatrix</code>，<code>bmatrix</code>，<code>Bmatrix</code>，<code>vmatrix</code>, <code>Vmatrix</code>。</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">(1) pmatrix:</span><br><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;pmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; 2  \\\\</span></span><br><span class=\"line\"><span class=\"code\">3 &amp; 4  \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;pmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br><span class=\"line\"></span><br><span class=\"line\">(2) bmatrix:</span><br><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;bmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; 2  \\\\</span></span><br><span class=\"line\"><span class=\"code\">3 &amp; 4  \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;bmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br><span class=\"line\"></span><br><span class=\"line\">(3) Bmatrix:</span><br><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;Bmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; 2  \\\\</span></span><br><span class=\"line\"><span class=\"code\">3 &amp; 4  \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;Bmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br><span class=\"line\"></span><br><span class=\"line\">(4) vmatrix:</span><br><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;vmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; 2  \\\\</span></span><br><span class=\"line\"><span class=\"code\">3 &amp; 4  \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;vmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br><span class=\"line\"></span><br><span class=\"line\">(5) Vmatrix:</span><br><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;Vmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; 2  \\\\</span></span><br><span class=\"line\"><span class=\"code\">3 &amp; 4  \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;Vmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>(1) pmatrix:</p>\n<p>$$<br>\n\\begin{pmatrix}<br>\n1 &amp; 2  \\<br>\n3 &amp; 4  \\<br>\n\\end{pmatrix}<br>\n$$</p>\n<p>(2) bmatrix:</p>\n<p>$$<br>\n\\begin{bmatrix}<br>\n1 &amp; 2  \\<br>\n3 &amp; 4  \\<br>\n\\end{bmatrix}<br>\n$$</p>\n<p>(3) Bmatrix:</p>\n<p>$$<br>\n\\begin{Bmatrix}<br>\n1 &amp; 2  \\<br>\n3 &amp; 4  \\<br>\n\\end{Bmatrix}<br>\n$$</p>\n<p>(4) vmatrix:</p>\n<p>$$<br>\n\\begin{vmatrix}<br>\n1 &amp; 2  \\<br>\n3 &amp; 4  \\<br>\n\\end{vmatrix}<br>\n$$</p>\n<p>(5) Vmatrix:</p>\n<p>$$<br>\n\\begin{Vmatrix}<br>\n1 &amp; 2  \\<br>\n3 &amp; 4  \\<br>\n\\end{Vmatrix}<br>\n$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"省略元素\">省略元素</h2>\n<p>可以使用<code>\\cdots</code>：$\\cdots$，<code>\\ddots</code>： $\\ddots$，<code>\\vdots</code>：$\\vdots$来省略矩阵中的元素</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;pmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1&amp;a_1&amp;a_1^2&amp;\\cdots&amp;a_1^n\\\\</span></span><br><span class=\"line\"><span class=\"code\">1&amp;a_2&amp;a_2^2&amp;\\cdots&amp;a_2^n\\\\</span></span><br><span class=\"line\"><span class=\"code\">\\vdots&amp;\\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots\\\\</span></span><br><span class=\"line\"><span class=\"code\">1&amp;a_m&amp;a_m^2&amp;\\cdots&amp;a_m^n\\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;pmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\n\\begin{pmatrix}<br>\n1&amp;a_1&amp;a_1^2&amp;\\cdots&amp;a_1^n\\<br>\n1&amp;a_2&amp;a_2^2&amp;\\cdots&amp;a_2^n\\<br>\n\\vdots&amp;\\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots\\<br>\n1&amp;a_m&amp;a_m^2&amp;\\cdots&amp;a_m^n\\<br>\n\\end{pmatrix}</p>\n<p>$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"增广矩阵\">增广矩阵</h2>\n<p>使用前面的表格中使用到的<code>\\begin&#123;array&#125; ... \\end&#123;array&#125;</code>来实现</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\left[</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;array&#125;&#123;cc|c&#125;</span></span><br><span class=\"line\"><span class=\"code\">1&amp;2&amp;3\\\\\\\\</span></span><br><span class=\"line\"><span class=\"code\">4&amp;5&amp;6</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;array&#125;</span></span><br><span class=\"line\"><span class=\"code\">\\right]</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\n\\left[<br>\n\\begin{array}{cc|c}<br>\n1&amp;2&amp;3\\<br>\n4&amp;5&amp;6<br>\n\\end{array}<br>\n\\right]<br>\n$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h1>十、常用符号</h1>\n<div class=\"note info flat\"><p>更多符号请参考：<a href=\"https://bobokele.blog.csdn.net/article/details/79577072?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=6\">Mathjax公式教程</a></p>\n</div>\n<h2 id=\"三角函数\">三角函数</h2>\n<p><code>\\sinx</code>：$\\sin$<br>\n<code>\\arcsin</code>：$\\arcsin$</p>\n<h2 id=\"比较运算符\">比较运算符</h2>\n<p><code>\\lt</code>：$\\lt$<br>\n<code>\\gt</code>：$\\gt$<br>\n<code>\\le</code>：$\\le$<br>\n<code>\\ge</code>：$\\ge$<br>\n<code>\\ne</code>：$\\ne$</p>\n<h2 id=\"集合关系\">集合关系</h2>\n<p>并<code>\\cup</code>：$\\cup$<br>\n交<code>\\cap</code>：$\\cap$<br>\n差<code>\\setminus</code>：$\\setminus$<br>\n子集<code>\\subset</code>：$\\subset$<br>\n真子集<code>\\subsetneqq</code>：$\\subsetneqq$<br>\n属于<code>\\in</code>：$\\in$<br>\n不属于<code>\\notin</code>：$\\notin$<br>\n空集<code>\\varnothing</code>：$\\varnothing$</p>\n<h2 id=\"逻辑运算\">逻辑运算</h2>\n<p><code>\\land</code>：$\\land$<br>\n<code>\\lor</code>：$\\lor$<br>\n<code>\\lnot</code>：$\\lnot$<br>\n<code>\\forall</code>：$\\forall$<br>\n<code>\\exists</code>：$\\exists$</p>\n<h2 id=\"操作符\">操作符</h2>\n<p><code>\\oplus</code>：$\\oplus$<br>\n<code>\\circ</code>：$\\circ$<br>\n<code>\\bullet</code>：$\\bullet$<br>\n<code>\\approx</code>：$\\approx$<br>\n<code>\\sim</code>：$\\sim$<br>\n<code>\\cong</code>：$\\cong$<br>\n<code>\\pmod</code>：如<code>a = b \\pmod n</code>： $a = b \\pmod n$</p>\n<p><img src=\"https://cdnimg103.lizhi.fm/audio_cover/2017/08/17/2619367354329486855_580x580.jpg\" alt=\"\"></p>\n<h1>十一、公式的标记和引用</h1>\n<p>公式经常复用，Mathjax中有一个类似于函数的功能</p>\n<p>使用<code>\\tag&#123;yourtag&#125;</code>来标记公式，如果想在之后引用该公式，则还需要加上<code>\\label&#123;yourlabel&#125;</code>在<code>\\tag</code>之后</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/weixin_46119529/article/details/133130295\">MathJax新手使用教程</a><br>\n参考：<a href=\"https://bobokele.blog.csdn.net/article/details/79577072?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=6\">Mathjax公式教程</a></p>\n</div>\n<h1>一、行内公式及块内公式</h1>\n<p>其实个人认为跟代码块和代码行含义一样</p>\n<h2 id=\"行公式\">行公式</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$\\lim_&#123;x \\to \\infty&#125;f(x)$</span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$\\lim_{x \\to \\infty}f(x)$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<p>行公式，是在代码块的基础上前面加上<code>$</code>，后面加上<code>$</code>组成的。</p>\n<h2 id=\"块公式\">块公式</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\lim_&#123;x \\to \\infty&#125;f(x)</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\n\\lim_{x \\to \\infty}f(x)<br>\n$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<p>块公式则是 输入<code>$$</code>和<code>$$</code>在公式前后。</p>\n<h1>二、希腊字母</h1>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>大写</th>\n<th>Tex</th>\n<th>小写</th>\n<th>Tex</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>alpha</td>\n<td>A</td>\n<td>A</td>\n<td>α</td>\n<td>\\alpha</td>\n</tr>\n<tr>\n<td>beta</td>\n<td>B</td>\n<td>B</td>\n<td>β</td>\n<td>\\beta</td>\n</tr>\n<tr>\n<td>gamma</td>\n<td>Γ</td>\n<td>\\Gamma</td>\n<td>γ</td>\n<td>\\gamma</td>\n</tr>\n<tr>\n<td>delta</td>\n<td>Δ</td>\n<td>\\Delta</td>\n<td>δ</td>\n<td>\\delta</td>\n</tr>\n<tr>\n<td>epsilon</td>\n<td>E</td>\n<td>E</td>\n<td>ϵ</td>\n<td>\\epsilon</td>\n</tr>\n<tr>\n<td>zeta</td>\n<td>Z</td>\n<td>Z</td>\n<td>ζ</td>\n<td>\\zeta</td>\n</tr>\n<tr>\n<td>eta</td>\n<td>H</td>\n<td>H</td>\n<td>η</td>\n<td>\\eta</td>\n</tr>\n<tr>\n<td>theta</td>\n<td>Θ</td>\n<td>\\Theta</td>\n<td>θ</td>\n<td>\\theta</td>\n</tr>\n<tr>\n<td>iota</td>\n<td>I</td>\n<td>I</td>\n<td>ι</td>\n<td>\\iota</td>\n</tr>\n<tr>\n<td>kappa</td>\n<td>K</td>\n<td>K</td>\n<td>κ</td>\n<td>\\kappa</td>\n</tr>\n<tr>\n<td>lambda</td>\n<td>Λ</td>\n<td>\\Lambda</td>\n<td>λ</td>\n<td>\\lambda</td>\n</tr>\n<tr>\n<td>mu</td>\n<td>M</td>\n<td>M</td>\n<td>μ</td>\n<td>\\mu</td>\n</tr>\n<tr>\n<td>nu</td>\n<td>N</td>\n<td>N</td>\n<td>ν</td>\n<td>\\nu</td>\n</tr>\n<tr>\n<td>xi</td>\n<td>Ξ</td>\n<td>\\Xi</td>\n<td>ξ</td>\n<td>\\xi</td>\n</tr>\n<tr>\n<td>omicron</td>\n<td>O</td>\n<td>O</td>\n<td>ο</td>\n<td>\\omicron</td>\n</tr>\n<tr>\n<td>pi</td>\n<td>Π</td>\n<td>\\Pi</td>\n<td>π</td>\n<td>\\pi</td>\n</tr>\n<tr>\n<td>rho</td>\n<td>P</td>\n<td>P</td>\n<td>ρ</td>\n<td>\\rho</td>\n</tr>\n<tr>\n<td>sigma</td>\n<td>Σ</td>\n<td>\\Sigma</td>\n<td>σ</td>\n<td>\\sigma</td>\n</tr>\n<tr>\n<td>tau</td>\n<td>T</td>\n<td>T</td>\n<td>τ</td>\n<td>\\tau</td>\n</tr>\n<tr>\n<td>upsilon</td>\n<td>Υ</td>\n<td>\\Upsilon</td>\n<td>υ</td>\n<td>\\upsilon</td>\n</tr>\n<tr>\n<td>phi</td>\n<td>Φ</td>\n<td>\\Phi</td>\n<td>ϕ</td>\n<td>\\phi</td>\n</tr>\n<tr>\n<td>chi</td>\n<td>X</td>\n<td>X</td>\n<td>χ</td>\n<td>\\chi</td>\n</tr>\n<tr>\n<td>psi</td>\n<td>Ψ</td>\n<td>\\Psi</td>\n<td>ψ</td>\n<td>\\psi</td>\n</tr>\n<tr>\n<td>omega</td>\n<td>Ω</td>\n<td>\\Omega</td>\n<td>ω</td>\n<td>\\omega</td>\n</tr>\n</tbody>\n</table>\n<h1>三、上下标</h1>\n<p>上标使用<code>^</code>，下标使用<code>_</code>，例如<code>C_5^3</code>,渲染结果$C_5^3$</p>\n<h1>四、括号</h1>\n<h2 id=\"小括号和方括号\">小括号和方括号</h2>\n<p>数学怎么表示这就怎么表示</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$(a+b)[a+b]$</span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$(a+b)[a+b]$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"大括号\">大括号</h2>\n<h3 id=\"正常表示\">正常表示</h3>\n<p>为了与分组做出区别，使用<code>\\&#123;</code>和<code>\\&#125;</code>来表示大括号，其实跟转义字符写法一样。<br>\n除此之外也可以使用<code>\\lbrace</code>和<code>\\rbrace</code>来表示</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$ \\&#123; a*b \\&#125; + \\lbrace a^b \\rbrace $</span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$ { a*b } + \\lbrace a^b \\rbrace $</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h3 id=\"用于分组\">用于分组</h3>\n<p>默认情况下，上下标符号仅仅对下一个组起作用。一个组即单个字符或者使用{…}包裹起来的内容。<br>\n例如如果我要表示<code>2^10</code>，但是渲染结果却是$ 2^10 $，而<code>2^&#123;10&#125;</code>才是真正的$ 2^ {10} $</p>\n<div class=\"note warning flat\"><p>这里的大括号就不用加转义了</p>\n</div>\n<p>同时，大括号也能消除二义性，例如<code>2^2^2</code>会是一个错误，必须使用大括号来界定<code>^</code>，如<code>&#123;2^2&#125;^2</code>:${2^2}^2$,当然这么写<code>2^&#123;2^2&#125;</code>也没有任何问题</p>\n<h2 id=\"尖括号\">尖括号</h2>\n<p>使用<code>\\langle</code>和<code>\\rangle</code>表示左尖括号和右尖括号，如<code>\\langle a \\rangle</code>:$\\langle a \\rangle$</p>\n<h2 id=\"取整符号\">取整符号</h2>\n<h3 id=\"上取整\">上取整</h3>\n<p>使用<code>\\lceil</code>和<code>\\rceil</code>表示。 如<code>\\lceil x \\rceil</code>：$\\lceil x \\rceil$</p>\n<h3 id=\"下取整\">下取整</h3>\n<p>使用<code>\\lfloor</code>和<code>\\rfloor</code>表示。 如<code>\\lfloor x \\rfloor</code>：$\\lfloor x \\rfloor$</p>\n<h1>五、积分和求和</h1>\n<h2 id=\"积分\">积分</h2>\n<p><code>\\int</code>用来表示积分符号，同样地，其上下标表示积分的上下限。如，</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$ \\int_1^\\infty $</span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$ \\int_1^\\infty $</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<div class=\"note warning flat\"><p>这里的$\\infty$符号写做<code>\\infty</code></p>\n</div>\n<p>另外多重积分其实就是多加几个i<br>\n<code>\\iint</code>：$\\iint$<br>\n<code>\\iiint</code>：$\\iiint$</p>\n<h2 id=\"其他符号\">其他符号</h2>\n<p><code>\\sum</code>用来表示求和符号，其下标表示求和下限，上标表示上限。如：<code>\\sum_1^10</code>：$\\sum_1^{10}$<br>\n<code>\\prod</code>：$\\prod$<br>\n<code>\\bigcup</code>：$\\bigcup$<br>\n<code>\\bigcap</code>：$\\bigcap$</p>\n<h1>六、分式与根式</h1>\n<h2 id=\"分式\">分式</h2>\n<p>第一种，使用<code>\\frac ab</code>，<code>\\frac</code>作用于其后的两个组<code>a</code>，<code>b</code>，结果为$\\frac ab$如果你的分子或分母不是单个字符，请使用{…}来分组，如$\\frac{a-b}{a+b}$</p>\n<p>第二种，使用<code>\\over</code>来分割，如<code>&#123;a-b \\over a+b&#125;</code>:${a-b \\over a+b}$</p>\n<div class=\"note warning flat\"><p>要分割的部分请采用<code>{}</code>来囊括</p>\n</div>\n<h2 id=\"多重分式\">多重分式</h2>\n<p>如：</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$ x=a_0 + \\frac &#123;1^2&#125;&#123;a_1 + \\frac &#123;2^2&#125;&#123;a_2 + \\frac &#123;3^2&#125;&#123;a_3 + \\frac &#123;4^2&#125;&#123;a_4 + ...&#125;&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"code\"> $</span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$ x=a_0 + \\frac {1^2}{a_1 + \\frac {2^2}{a_2 + \\frac {3^2}{a_3 + \\frac {4^2}{a_4 + …}}}}<br>\n$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"根式\">根式</h2>\n<p>根式使用<code>\\sqrt</code>来表示。如，<code>\\sqrt[2]&#123;4&#125;</code>: $\\sqrt[2]{4}$</p>\n<h1>七、表达式与方程组</h1>\n<h2 id=\"多行表达式\">多行表达式</h2>\n<p>可使用<code>\\begin&#123;cases&#125;…\\end&#123;cases&#125;</code>。其中，使用<code>\\\\</code>来分类，使用<code>&amp;</code>指示需要对齐的位置，<code>\\空格</code>表示空格 。如：</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">f(n)</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;cases&#125;</span></span><br><span class=\"line\"><span class=\"code\">\\cfrac n2, &amp;if\\ n\\ is\\ even\\\\</span></span><br><span class=\"line\"><span class=\"code\">3n + 1, &amp;if\\  n\\ is\\ odd</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;cases&#125;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\nf(n)=<br>\n\\begin{cases}<br>\n\\cfrac n2, &amp;if\\ n\\ is\\ even\\<br>\n3n + 1, &amp;if\\  n\\ is\\ odd<br>\n\\end{cases}<br>\n$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"方程组\">方程组</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\left \\&#123; </span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;array&#125;&#123;c&#125;</span></span><br><span class=\"line\"><span class=\"code\">a_1x+b_1y+c_1z=d_1 \\\\ </span></span><br><span class=\"line\"><span class=\"code\">a_2x+b_2y+c_2z=d_2 \\\\ </span></span><br><span class=\"line\"><span class=\"code\">a_3x+b_3y+c_3z=d_3</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;array&#125;</span></span><br><span class=\"line\"><span class=\"code\">\\right .</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\n\\left {<br>\n\\begin{array}{c}<br>\na_1x+b_1y+c_1z=d_1 \\<br>\na_2x+b_2y+c_2z=d_2 \\<br>\na_3x+b_3y+c_3z=d_3<br>\n\\end{array}<br>\n\\right .</p>\n<p>$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h1>八、表格</h1>\n<p>使用<code>\\begin&#123;array&#125;&#123;列样式&#125;…\\end&#123;array&#125;</code>这样的形式来创建表格，列样式可以是<code>clr</code>表示居中，左，右对齐，还可以使用<code>|</code>表示一条竖线。表格中各行使用<code>\\\\</code>分隔，各列使用<code>&amp;</code>分隔。使用<code>\\hline</code>在本行前加入一条直线。</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;array&#125;&#123;c|lcr&#125;</span></span><br><span class=\"line\"><span class=\"code\">n &amp; \\text&#123;Left&#125; &amp; \\text&#123;Center&#125; &amp; \\text&#123;Right&#125; \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\hline</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; 0.24 &amp; 1 &amp; 125 \\\\</span></span><br><span class=\"line\"><span class=\"code\">2 &amp; -1 &amp; 189 &amp; -8 \\\\</span></span><br><span class=\"line\"><span class=\"code\">3 &amp; -20 &amp; 2000 &amp; 1+10i \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;array&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\n\\begin{array}{c|lcr}<br>\nn &amp; \\text{Left} &amp; \\text{Center} &amp; \\text{Right} \\<br>\n\\hline<br>\n1 &amp; 0.24 &amp; 1 &amp; 125 \\<br>\n2 &amp; -1 &amp; 189 &amp; -8 \\<br>\n3 &amp; -20 &amp; 2000 &amp; 1+10i \\<br>\n\\end{array}<br>\n$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h1>九、矩阵</h1>\n<h2 id=\"基本用法\">基本用法</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;matrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; x &amp; x^2 \\\\</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; y &amp; y^2 \\\\</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; z &amp; z^2 \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;matrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\n\\begin{matrix}<br>\n1 &amp; x &amp; x^2 \\<br>\n1 &amp; y &amp; y^2 \\<br>\n1 &amp; z &amp; z^2 \\<br>\n\\end{matrix}</p>\n<p>$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"矩阵表示\">矩阵表示</h2>\n<p>可以使用特殊的matrix。即替换<code>\\begin&#123;matrix&#125;…\\end&#123;matrix&#125;</code>中的matrix为<code>pmatrix</code>，<code>bmatrix</code>，<code>Bmatrix</code>，<code>vmatrix</code>, <code>Vmatrix</code>。</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">(1) pmatrix:</span><br><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;pmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; 2  \\\\</span></span><br><span class=\"line\"><span class=\"code\">3 &amp; 4  \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;pmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br><span class=\"line\"></span><br><span class=\"line\">(2) bmatrix:</span><br><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;bmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; 2  \\\\</span></span><br><span class=\"line\"><span class=\"code\">3 &amp; 4  \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;bmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br><span class=\"line\"></span><br><span class=\"line\">(3) Bmatrix:</span><br><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;Bmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; 2  \\\\</span></span><br><span class=\"line\"><span class=\"code\">3 &amp; 4  \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;Bmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br><span class=\"line\"></span><br><span class=\"line\">(4) vmatrix:</span><br><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;vmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; 2  \\\\</span></span><br><span class=\"line\"><span class=\"code\">3 &amp; 4  \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;vmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br><span class=\"line\"></span><br><span class=\"line\">(5) Vmatrix:</span><br><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;Vmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1 &amp; 2  \\\\</span></span><br><span class=\"line\"><span class=\"code\">3 &amp; 4  \\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;Vmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>(1) pmatrix:</p>\n<p>$$<br>\n\\begin{pmatrix}<br>\n1 &amp; 2  \\<br>\n3 &amp; 4  \\<br>\n\\end{pmatrix}<br>\n$$</p>\n<p>(2) bmatrix:</p>\n<p>$$<br>\n\\begin{bmatrix}<br>\n1 &amp; 2  \\<br>\n3 &amp; 4  \\<br>\n\\end{bmatrix}<br>\n$$</p>\n<p>(3) Bmatrix:</p>\n<p>$$<br>\n\\begin{Bmatrix}<br>\n1 &amp; 2  \\<br>\n3 &amp; 4  \\<br>\n\\end{Bmatrix}<br>\n$$</p>\n<p>(4) vmatrix:</p>\n<p>$$<br>\n\\begin{vmatrix}<br>\n1 &amp; 2  \\<br>\n3 &amp; 4  \\<br>\n\\end{vmatrix}<br>\n$$</p>\n<p>(5) Vmatrix:</p>\n<p>$$<br>\n\\begin{Vmatrix}<br>\n1 &amp; 2  \\<br>\n3 &amp; 4  \\<br>\n\\end{Vmatrix}<br>\n$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"省略元素\">省略元素</h2>\n<p>可以使用<code>\\cdots</code>：$\\cdots$，<code>\\ddots</code>： $\\ddots$，<code>\\vdots</code>：$\\vdots$来省略矩阵中的元素</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;pmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">1&amp;a_1&amp;a_1^2&amp;\\cdots&amp;a_1^n\\\\</span></span><br><span class=\"line\"><span class=\"code\">1&amp;a_2&amp;a_2^2&amp;\\cdots&amp;a_2^n\\\\</span></span><br><span class=\"line\"><span class=\"code\">\\vdots&amp;\\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots\\\\</span></span><br><span class=\"line\"><span class=\"code\">1&amp;a_m&amp;a_m^2&amp;\\cdots&amp;a_m^n\\\\</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;pmatrix&#125;</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\n\\begin{pmatrix}<br>\n1&amp;a_1&amp;a_1^2&amp;\\cdots&amp;a_1^n\\<br>\n1&amp;a_2&amp;a_2^2&amp;\\cdots&amp;a_2^n\\<br>\n\\vdots&amp;\\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots\\<br>\n1&amp;a_m&amp;a_m^2&amp;\\cdots&amp;a_m^n\\<br>\n\\end{pmatrix}</p>\n<p>$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"增广矩阵\">增广矩阵</h2>\n<p>使用前面的表格中使用到的<code>\\begin&#123;array&#125; ... \\end&#123;array&#125;</code>来实现</p>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"code\">```md</span></span><br><span class=\"line\"><span class=\"code\">$$</span></span><br><span class=\"line\"><span class=\"code\">\\left[</span></span><br><span class=\"line\"><span class=\"code\">\\begin&#123;array&#125;&#123;cc|c&#125;</span></span><br><span class=\"line\"><span class=\"code\">1&amp;2&amp;3\\\\\\\\</span></span><br><span class=\"line\"><span class=\"code\">4&amp;5&amp;6</span></span><br><span class=\"line\"><span class=\"code\">\\end&#123;array&#125;</span></span><br><span class=\"line\"><span class=\"code\">\\right]</span></span><br><span class=\"line\"><span class=\"code\">$$ </span></span><br><span class=\"line\"><span class=\"code\">\\```</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$$<br>\n\\left[<br>\n\\begin{array}{cc|c}<br>\n1&amp;2&amp;3\\<br>\n4&amp;5&amp;6<br>\n\\end{array}<br>\n\\right]<br>\n$$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h1>十、常用符号</h1>\n<div class=\"note info flat\"><p>更多符号请参考：<a href=\"https://bobokele.blog.csdn.net/article/details/79577072?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-79577072-blog-48900483.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=6\">Mathjax公式教程</a></p>\n</div>\n<h2 id=\"三角函数\">三角函数</h2>\n<p><code>\\sinx</code>：$\\sin$<br>\n<code>\\arcsin</code>：$\\arcsin$</p>\n<h2 id=\"比较运算符\">比较运算符</h2>\n<p><code>\\lt</code>：$\\lt$<br>\n<code>\\gt</code>：$\\gt$<br>\n<code>\\le</code>：$\\le$<br>\n<code>\\ge</code>：$\\ge$<br>\n<code>\\ne</code>：$\\ne$</p>\n<h2 id=\"集合关系\">集合关系</h2>\n<p>并<code>\\cup</code>：$\\cup$<br>\n交<code>\\cap</code>：$\\cap$<br>\n差<code>\\setminus</code>：$\\setminus$<br>\n子集<code>\\subset</code>：$\\subset$<br>\n真子集<code>\\subsetneqq</code>：$\\subsetneqq$<br>\n属于<code>\\in</code>：$\\in$<br>\n不属于<code>\\notin</code>：$\\notin$<br>\n空集<code>\\varnothing</code>：$\\varnothing$</p>\n<h2 id=\"逻辑运算\">逻辑运算</h2>\n<p><code>\\land</code>：$\\land$<br>\n<code>\\lor</code>：$\\lor$<br>\n<code>\\lnot</code>：$\\lnot$<br>\n<code>\\forall</code>：$\\forall$<br>\n<code>\\exists</code>：$\\exists$</p>\n<h2 id=\"操作符\">操作符</h2>\n<p><code>\\oplus</code>：$\\oplus$<br>\n<code>\\circ</code>：$\\circ$<br>\n<code>\\bullet</code>：$\\bullet$<br>\n<code>\\approx</code>：$\\approx$<br>\n<code>\\sim</code>：$\\sim$<br>\n<code>\\cong</code>：$\\cong$<br>\n<code>\\pmod</code>：如<code>a = b \\pmod n</code>： $a = b \\pmod n$</p>\n<p><img src=\"https://cdnimg103.lizhi.fm/audio_cover/2017/08/17/2619367354329486855_580x580.jpg\" alt=\"\"></p>\n<h1>十一、公式的标记和引用</h1>\n<p>公式经常复用，Mathjax中有一个类似于函数的功能</p>\n<p>使用<code>\\tag&#123;yourtag&#125;</code>来标记公式，如果想在之后引用该公式，则还需要加上<code>\\label&#123;yourlabel&#125;</code>在<code>\\tag</code>之后</p>\n"},{"title":"FreeRTOS","abbrlink":34230,"date":"2024-07-10T07:14:06.000Z","description":"本文用于记录嵌入式操作系统的学习过程","cover":"https://image.aruoshui.fun/i/2024/12/31/u1be33-0.webp","swiper_index":null,"_content":"\n\n# 学习\n## 堆\n堆，heap，就是一块空闲的内存，需要提供管理函数\n- malloc：从堆里划出一块空间给程序使用\n- free：用完后，再把它标记为\"空闲\"的，可以再次使用s\n\n## 栈\n栈，stack，函数调用时局部变量保存在栈中，当前程序的环境也是保存在栈中\n可以从堆中分配一块空间用作栈\n\n## 源码结构\n### 目录结构\n![代码结构](https://s2.loli.net/2024/07/10/7f9cvzYARSsqjtx.png)\n\n### 核心\nFreeRTOS的最核心文件只有2个：\n- FreeRTOS/Source/tasks.c\n- FreeRTOS/Source/list.c\n\n| FreeRTOS/source/下的文件 | 作用     | \n| ------------------------ | -------- | \n| task.c        | 必须，任务操作 | \n| list.c        | 必须，列表 | \n| queue.c        | 基本必须，提供队列操作、信号量操作  | \n| timer.c        | 可选，software timer  |\n| event_groups.c        | 可选，提供event group功能  |\n| croutine.c        | 可选，基本过时  |   \n\n## 代码规范\n![变量命名](https://s2.loli.net/2024/07/10/1lvz8NeSyaOxLT3.png)\n![函数名](https://s2.loli.net/2024/07/10/WcDqbwXBUAxj9Ei.png)\n\n## 创建任务函数详解\n### 任务函数原形\n任务就是一个函数，原型如下：\n`void ATaskFunction( void *pvParameters );`\n\n### 任务创建\n在FreeRTOS中，任务可以通过静态创建和动态创建两种方式来实现。他们只有在任务创建的初期和能否释放栈有区别，最终使用是一模一样的。\n\n静态创建的任务，栈是存放在数组里面的。因此静态创建任务的栈无法释放，在编译初期就定好了。\n动态创建的任务，栈是通过类似malloc的函数实现的，也就是堆区域。堆是可以通过类似free函数释放的。\n\n**栈的空间分配是重中之重**，关乎到每个任务函数内部使用的空间 \n\n\n#### 两种创建方式如何抉择\n1. 选择静态创建还是动态创建取决于应用的具体需求。如果你的任务具备以下特征，就推荐使用静态创建任务：\n任务的数量和属性在编译时就确定，不需要动态创建或删除任务。\n任务的栈空间需求可以预先估计，不需要动态调整。\n堆空间有限，或者想要节省堆空间。\n对任务创建的速度和可靠性有较高的要求。\n\n2. 当你的任务具备以下特征，就推荐使用动态创建任务：\n任务的数量和属性在运行时才确定，需要动态创建或删除任务。\n任务的栈空间需求难以预先估计，需要动态调整。\n堆空间充足，或者不在乎堆空间的占用。\n对任务创建的速度和可靠性没有较高的要求。\n\n#### 动态分配\n\n```cpp\nBaseType_t xTaskCreate( TaskFunction_t pxTaskCode,\n                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n                            const configSTACK_DEPTH_TYPE usStackDepth,\n                            void * const pvParameters,                //参数\n                            UBaseType_t uxPriority,                   //优先级\n                            TaskHandle_t * const pxCreatedTask )      //任务控制块-> TCB的指针\n```\n![说明](https://s2.loli.net/2024/07/10/WKEtjmyd1gB2OMC.png)\n\n例子：\n```cpp\nxTaskCreate(Task1Function, \"Task1\", 100, NULL, 1, &xHandleTask1);\nxTaskCreate(Task2Function, \"Task2\", 100, NULL, 1, NULL);\n```\n#### 静态分配\nTCB结构体需要实现分配好，栈也需要首先分配好\n```cpp\n    TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,\n                                    const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n                                    const uint32_t ulStackDepth,\n                                    void * const pvParameters,\n                                    UBaseType_t uxPriority,\n                                    StackType_t * const puxStackBuffer,\n                                    StaticTask_t * const pxTaskBuffer )\n```\n\n为了防止\n```cpp\nStackType_t xIdleTaskStack[100];\nStaticTask_t xIdleTaskTCB;\n\nvoid vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,\n                                    StackType_t ** ppxIdleTaskStackBuffer,\n                                    uint32_t * pulIdleTaskStackSize )\n{\n    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;\n    *ppxIdleTaskStackBuffer = xIdleTaskStack;\n    *pulIdleTaskStackSize = 100;\n}\n```\n\n\n例子：\n```C++\nStackType_t xTask3Stack[100];   // 栈空间\nStaticTask_t xTask3TCB;         // TCB任务块\n\nxTaskCreateStatic(Task3Function, \"Task3\", 100, NULL, 1, xTask3Stack, &xTask3TCB);\n```\n\n### 任务优先级\nfreertos是数字越小优先级越低，优先级的取值范围是：0~(configMAX_PRIORITIES – 1)\n#### tick中断\n![一张图](https://s2.loli.net/2024/07/10/snU475bkLgiSIEq.png)\n\n\n\n### 任务的删除\n#### 函数原形\n`void vTaskDelete( TaskHandle_t xTaskToDelete );`\n\n传入的参数是任务句柄\n使用xTaskCreate创建任务时可以得到一个句柄。也可传入NULL，这表示删除自己。\n\n1. 自杀： vTaskDelete(NULL)\n2. 被杀：别的任务执行 vTaskDelete(pvTaskCode) ，pvTaskCode是自己的句柄\n3. 杀人：执行 vTaskDelete(pvTaskCode) ，pvTaskCode是别的任务的句柄、\n\n{% note info flat %}\n（1）任务自杀通常由任务自己主动发起，而删除其他任务是由系统中的某个任务请求删除另一个任务。\n（2）在实际应用中，需要根据具体的需求和设计来选择使用哪种方法。在任何情况下，都需要确保在删除任务之前，已经合理地释放了任务占用的资源，以避免资源泄漏和系统不稳定性。删除任务释放的资源要考虑以下内容：\n\n1. 避免删除正在执行的任务：尽量避免删除正在执行的任务，因为这可能导致未定义的行为。通常，应该在目标任务主动结束执行或者在任务的代码中检查某些条件后再请求删除。\n2. 处理资源释放：确保在删除任务之前释放任务使用的资源。这包括释放动态分配的内存、关闭文件句柄、释放占用的硬件资源等。如果任务在删除时仍然占用资源，可能会导致资源泄漏或系统不稳定。\n3. 处理同步和互斥：如果目标任务与其他任务之间存在同步或互斥关系，确保在删除任务之前解除这些关系，以免引起竞态条件或死锁。\n4. 避免删除空闲任务：在 FreeRTOS 中，空闲任务（Idle Task）用于在系统没有其他任务需要执行时运行。删除空闲任务可能导致系统无法正常工作，应该谨慎使用。例如，任务删除之后的堆栈释放，是在空闲任务中执行，当空闲任务删除之后，堆栈将需要通过其他任务手动释放，这样将会增加工作量。\n{% endnote %}\n   \n### 任务状态\n学习过操作系统就很简单，直接看例子:\n```cpp\nvoid Task1Function(void * param)\n{\n\tTickType_t tStart = xTaskGetTickCount();\n\tTickType_t t;\n\tint flag = 0;\n\t\n\twhile (1)\n\t{\n\t\tt = xTaskGetTickCount();\n\t\t\n\t\ttask1flagrun = 1;\n\t\ttask2flagrun = 0;\n\t\ttask3flagrun = 0;\n\t\tprintf(\"1\");\n\n\t\tif (!flag && (t > tStart + 10))\n\t\t{\n\t\t\tvTaskSuspend(xHandleTask3);\n\t\t\tflag = 1;\n\t\t}\n\n\t\tif (t > tStart + 20)\n\t\t{\n\t\t\tvTaskResume(xHandleTask3);\n\t\t}\n\t}\n}\n\nvoid Task2Function(void * param)\n{\n\twhile (1)\n\t{\n\t\ttask1flagrun = 0;\n\t\ttask2flagrun = 1;\n\t\ttask3flagrun = 0;\n\t\tprintf(\"2\");\n\n\t\tvTaskDelay(10);\n\t}\n}\n\nvoid Task3Function(void * param)\n{\n\twhile (1)\n\t{\n\t\ttask1flagrun = 0;\n\t\ttask2flagrun = 0; \n\t\ttask3flagrun = 1;\n\t\tprintf(\"3\");\n\t}\n}\n\n```\n![结果](https://s2.loli.net/2024/07/10/knL9HAC1QbuE2Rc.png)\n\n### 空闲任务及钩子函数\n看这个例子：\n```cpp\nvoid Task1Function(void * param)\n{\n\tTaskHandle_t xHandleTask2;\n\tBaseType_t xReturn;\n\t\n\twhile (1)\n\t{\n\t\ttask1flagrun = 1;\n\t\ttask2flagrun = 0;\n\t\ttaskidleflagrun = 0;\n\t\tprintf(\"1\");\n\t\txReturn = xTaskCreate(Task2Function, \"Task2\", 1024, NULL, 2, &xHandleTask2);\n\t\tif (xReturn != pdPASS)\n\t\t\tprintf(\"xTaskCreate err\\r\\n\");\n\t\t//vTaskDelete(xHandleTask2);\n\t\t\t\n\t}\n}\n\nvoid Task2Function(void * param)\n{\n\twhile (1)\n\t{\n\t\ttask1flagrun = 0;\n\t\ttask2flagrun = 1;\n\t\ttaskidleflagrun = 0;\n\t\tprintf(\"2\");\n\t\t//vTaskDelay(2);\n\t\tvTaskDelete(NULL);\n\t}\n}\n```\n任务1会反复创建任务2，任务2执行自杀，不能完成清理尸体，需要空闲任务进行清空(自杀由空闲任务处理实体，他杀由杀者处理实体)\n\n\n空闲任务(Idle任务)的作用：释放被删除的任务的内存。\n一个良好的程序，它的任务都是事件驱动的：平时大部分时间处于阻塞状态。有可能我们自己创建的所有任务都无法执行，但是调度器必须能找到一个可以运\n行的任务：所以，我们要提供空闲任务。在使用 vTaskStartScheduler() 函数来创建、启动调度器时，这个函数内部会创建空闲任务：\n1. 空闲任务优先级为0：它不能阻碍用户任务运行\n2. 空闲任务要么处于就绪态，要么处于运行态，永远不会阻塞\n3. 空闲任务的优先级为0，这以为着一旦某个用户的任务变为就绪态，那么空闲任务马上被切换出去，让这个用户任务运行。在这种情况下，我们说用户任务\"抢占\"(pre-empt)了空闲任务，这是由调度器实现的。\n\n**如果使用 vTaskDelete() 来删除任务，那么你就要确保空闲任务有机会执行，否则就无法释放被删除任务的内存**\n\n#### 钩子\n我们可以添加一个空闲任务的钩子函数(Idle Task Hook Functions)，空闲任务的循环没执行一次，就会调用一次钩子函数。 \n\n钩子函数的作用有这些：\n1. 执行一些低优先级的、后台的、需要连续执行的函数测量系统的空闲时间：\n2. 空闲任务能被执行就意味着所有的高优先级任务都停止了，所以测量空闲任务占据的时间，就可以算出处理器占用率。\n3. 让系统进入省电模式：空闲任务能被执行就意味着没有重要的事情要做，当然可以进入省电模式\n\n\n空闲任务的钩子函数的限制：\n1. 不能导致空闲任务进入阻塞状态、暂停状态\n2. 如果你会使用 vTaskDelete() 来删除任务，那么钩子函数要非常高效地执行。如果空闲任务移植\n3. 卡在钩子函数里的话，它就无法释放内存。\n\n## delay函数\n有两个Delay函数：\n- vTaskDelay：至少等待指定个数的Tick Interrupt才能变为就绪状态\n- vTaskDelayUntil：等待到指定的绝对时刻，才能变为就绪态。\n\n![说明](https://s2.loli.net/2024/07/10/2HDKAez7MGtjvTF.png)\n\n\n## 任务调度算法\n### 配置调度算法\n通过配置文件FreeRTOSConfig.h的两个配置项来配置调度算法：configUSE_PREEMPTION、configUSE_TIME_SLICING\n```cpp\n#define configUSE_PREEMPTION\t\t1    // 支持抢占\n#define configUSE_TIME_SLICING      1    // 同优先级的任务交替执行\n#define configIDLE_SHOULD_YIELD\t\t1    // 空闲任务让步\n```\n### 抢占\n- 抢占时：高优先级任务就绪时，就可以马上执行\n- 不抢占时：优先级失去意义了，既然不能抢占就只能协商了，一个任务执行，其他任务都无法执行。即使其他任务已经超时、即使它的优先级更高，都没办法执行。\n\n### 时间片\n- 时间片轮转：在Tick中断中会引起任务切换\n- 时间片不轮转：高优先级任务就绪时会引起任务切换，高优先级任务不再运行时也会引起任务切换。\n\n### 空闲任务让步\n让步时：假如设置空闲任务为无限循环，则在空闲任务的每个循环中，会主动让出处理器\n不让步时：空闲任务跟其他任务同等待遇\n\n\n## 同步互斥与通信概述\n能实现同步、互斥的内核方法有：任务通知(task notification)、队列(queue)、事件组(event group)、信号量(semaphoe)、互斥量(mutex)。\n\n它们都有类似的操作方法：获取/释放、阻塞/唤醒、超时。比如：\nA获取资源，用完后A释放资源\nA获取不到资源则阻塞，B释放资源并把A唤醒\nA获取不到资源则阻塞，并定个闹钟；A要么超时返回，要么在这段时间内因为B释放资源而被唤醒。\n\n![说明](https://s2.loli.net/2024/07/11/l8GZUzmsYNAq9H5.png)\n\n## 队列\n队列其实是一个环形缓冲区，定义如下：\n```cpp\ntypedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel aware debuggers. */\n{\n    int8_t * pcHead;           /*< Points to the beginning of the queue storage area. */\n    int8_t * pcWriteTo;        /*< Points to the free next place in the storage area. */\n\n    union\n    {\n        QueuePointers_t xQueue;     /*< Data required exclusively when this structure is used as a queue. */\n        SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaphore. */\n    } u;\n\n    List_t xTasksWaitingToSend;             /*< List of tasks that are blocked waiting to post onto this queue.  Stored in priority order. */\n    List_t xTasksWaitingToReceive;          /*< List of tasks that are blocked waiting to read from this queue.  Stored in priority order. */\n\n    volatile UBaseType_t uxMessagesWaiting; /*< The number of items currently in the queue. */\n    UBaseType_t uxLength;                   /*< The length of the queue defined as the number of items it will hold, not the number of bytes. */\n    UBaseType_t uxItemSize;                 /*< The size of each items that the queue will hold. */\n\n    volatile int8_t cRxLock;                /*< Stores the number of items received from the queue (removed from the queue) while the queue was locked.  Set to queueUNLOCKED when the queue is not locked. */\n    volatile int8_t cTxLock;                /*< Stores the number of items transmitted to the queue (added to the queue) while the queue was locked.  Set to queueUNLOCKED when the queue is not locked. */\n\n    #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )\n        uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the memory used by the queue was statically allocated to ensure no attempt is made to free the memory. */\n    #endif\n\n    #if ( configUSE_QUEUE_SETS == 1 )\n        struct QueueDefinition * pxQueueSetContainer;\n    #endif\n\n    #if ( configUSE_TRACE_FACILITY == 1 )\n        UBaseType_t uxQueueNumber;\n        uint8_t ucQueueType;\n    #endif\n} xQUEUE;\n\n```\n使用队列的流程：创建队列、写队列、读队列、删除队列。\n\n### 创建\n![动态创建队列](https://s2.loli.net/2024/07/11/tdR6ZbWU5TAsPGg.png)\n![静态创建队列](https://s2.loli.net/2024/07/11/9HQwarTkceNI5Ud.png)\n\n### 写\n```cpp\n/* 等同于xQueueSendToBack\n* 往队列尾部写入数据，如果没有空间，阻塞时间为xTicksToWait\n*/\nBaseType_t xQueueSend(\nQueueHandle_t xQueue,\nconst void *pvItemToQueue,\nTickType_t xTicksToWait\n);\n/*\n* 往队列尾部写入数据，如果没有空间，阻塞时间为xTicksToWait\n*/\nBaseType_t xQueueSendToBack(\nQueueHandle_t xQueue,\nconst void *pvItemToQueue,\nTickType_t xTicksToWait\n);\n/*\n* 往队列尾部写入数据，此函数可以在中断函数中使用，不可阻塞\n*/\nBaseType_t xQueueSendToBackFromISR(\nQueueHandle_t xQueue,\nconst void *pvItemToQueue,\nBaseType_t *pxHigherPriorityTaskWoken\n);\n/*\n* 往队列头部写入数据，如果没有空间，阻塞时间为xTicksToWait\n*/\nBaseType_t xQueueSendToFront(\nQueueHandle_t xQueue,\nconst void *pvItemToQueue,\nTickType_t xTicksToWait\n);\n/*\n* 往队列头部写入数据，此函数可以在中断函数中使用，不可阻塞\n*/\nBaseType_t xQueueSendToFrontFromISR(\nQueueHandle_t xQueue,\nconst void *pvItemToQueue,\nBaseType_t *pxHigherPriorityTaskWoken\n);\n```\n\n![写](https://s2.loli.net/2024/07/11/d9ctCQiL7PY6upg.png)\n\n\n### 读\n使用 xQueueReceive() 函数读队列，读到一个数据后，队列中该数据会被移除。\n```cpp\nBaseType_t xQueueReceive( QueueHandle_t xQueue,\nvoid * const pvBuffer,\nTickType_t xTicksToWait );\n\nBaseType_t xQueueReceiveFromISR(\nQueueHandle_t xQueue,\nvoid *pvBuffer,\nBaseType_t *pxTaskWoken\n);\n```\n![读](https://s2.loli.net/2024/07/11/1iSsAB3rMFQqLoT.png)\n\n### 删除队列\n删除队列的函数为 vQueueDelete() ，只能删除使用动态方法创建的队列，它会释放内存。\n\n### 复位\n队列刚被创建时，里面没有数据；使用过程中可以调用 xQueueReset() 把队列恢复为初始状态\n\n## 信号量\n只需要传递状态，并不需要传递具体的信息，这个时候就可以使用信号量\n\n### 两种信号量\n信号量的计数值都有限制：限定了最大值。如果最大值被限定为1，那么它就是二进制信号量；\n如果最大值不是1，它就是计数型信号量。\n\n### 信号量创建\n使用信号量之前，要先创建，得到一个句柄；使用信号量时，要使用句柄来表明使用哪个信号量。\n对于二进制信号量、计数型信号量，它们的创建函数不一样：\n\n二进制信号量：\n```cpp\n/* 创建一个二进制信号量，返回它的句柄。\n* 此函数内部会分配信号量结构体\n* 返回值: 返回句柄，非NULL表示成功\n*/\nSemaphoreHandle_t xSemaphoreCreateBinary( void );\n/* 创建一个二进制信号量，返回它的句柄。\n* 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针\n* 返回值: 返回句柄，非NULL表示成功\n*/\nSemaphoreHandle_t xSemaphoreCreateBinaryStatic( StaticSemaphore_t *pxSemaphoreBuffer );\n```\n\n计数型信号量:\n```cpp\n/* 创建一个计数型信号量，返回它的句柄。\n* 此函数内部会分配信号量结构体\n* uxMaxCount: 最大计数值\n* uxInitialCount: 初始计数值\n* 返回值: 返回句柄，非NULL表示成功\n*/\nSemaphoreHandle_t xSemaphoreCreateCounting(UBaseType_t uxMaxCount, UBaseType_t\nuxInitialCount);\n/* 创建一个计数型信号量，返回它的句柄。\n* 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针\n* uxMaxCount: 最大计数值\n* uxInitialCount: 初始计数值\n* pxSemaphoreBuffer: StaticSemaphore_t结构体指针\n* 返回值: 返回句柄，非NULL表示成功\n*/\nSemaphoreHandle_t xSemaphoreCreateCountingStatic( UBaseType_t uxMaxCount,\n                                                    UBaseType_t uxInitialCount,\n                                                    StaticSemaphore_t\n*pxSemaphoreBuffer );\n\n```\n\n### 信号量的删除\n对于动态创建的信号量，不再需要它们时，可以删除它们以回收内存。\n```cpp\n/*\n* xSemaphore: 信号量句柄，你要删除哪个信号量\n*/\nvoid vSemaphoreDelete( SemaphoreHandle_t xSemaphore );\n```\n\n### give\n释放信号量\n需要注意，信号量的释放都是立即返回的。只有获取信号量才会进行阻塞等待。\n```cpp\n/**\n * @brief  释放信号量\n *\n * @param  xSemaphore 要释放的信号量句柄\n *\n * @return  释放成功，返回pdTRUE。否则返回 pdFALSE。\n */\nBaseType_t xSemaphoreGive( SemaphoreHandle_t xSemaphore );\n```\n\n### take\n获取信号量\n```cpp\n/**\n * @brief  获取信号量\n *\n * @param  xSemaphore   要获取的信号量句柄\n *        -xTicksToWait 超时时间，0 表示立即返回，portMAX_DELAY表示无限等待, 一直阻塞直到成功\n *\n * @return  成功获取信号量，返回pdPASS。否则返回pdFALSE\n */\nBaseType_t xSemaphoreTake( SemaphoreHandle_t xSemaphore,TickType_t xTicksToWait );\n\n```\n\n## 互斥量\n互斥量能够解决优先级反转问题，而信号量不行。\n\n互斥量也被称为互斥锁，使用过程如下：\n互斥量初始值为1\n任务A想访问临界资源，先获得并占有互斥量，然后开始访问\n任务B也想访问临界资源，也要先获得互斥量：被别人占有了，于是阻塞\n任务A使用完毕，释放互斥量；任务B被唤醒、得到并占有互斥量，然后开始访问临界资源\n任务B使用完毕，释放互斥量\n\n### 互斥量的创建\n使用互斥量时，先创建、然后去获得、释放它。使用句柄来表示一个互斥量。各类操作函数，比如删除、give/take，跟一般是信号量是一样的。但是要注意互斥量不能在ISR中使用\n\n```cpp\n/* 创建一个互斥量，返回它的句柄。\n* 此函数内部会分配互斥量结构体\n* 返回值: 返回句柄，非NULL表示成功\n*/\nSemaphoreHandle_t xSemaphoreCreateMutex( void );\n/* 创建一个互斥量，返回它的句柄。\n* 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针\n* 返回值: 返回句柄，非NULL表示成功\n*/\nSemaphoreHandle_t xSemaphoreCreateMutexStatic( StaticSemaphore_t *pxMutexBuffer\n);\n```\n使用互斥量，需要在配置文件FreeRTOSConfig.h中定义：\n`##define configUSE_MUTEXES 1`\n\n\n\n\n## 队列集\n队列只能存放同一种类型的数据，那如果我们需要在任务之间传输不同类型的消息，应该如何处理呢？例如遥控车，可能是按键式的遥控器（传输的是整型数据），也可能会兼容遥感式的遥控器（传输的是浮点数据）。这两种遥控器都能够控制小车，那么应当如何进行数据传输呢？\n\n**队列集的本质也是队列，只不过里面存放的是队列句柄，而不是数据。**\n```cpp\nQueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )\n{\nQueueSetHandle_t pxQueue;\n\n\tpxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );\n\n\treturn pxQueue;\n}\n```\n\n\n## 事件组\n事件组可以用下面的图进行解释\n![事件组原理](https://s2.loli.net/2024/07/18/mYKQapgxXolw7Zq.png)\n其创建和删除跟之前的互斥等类型相同，都是以handle为依据，主要是事件组的设置和等待事件\n\n### 设置事件\n可以设置事件组的某个位、某些位，使用的函数有2个：\n在任务中使用 xEventGroupSetBits()\n在ISR中使用 xEventGroupSetBitsFromISR()\n有一个或多个任务在等待事件，如果这些事件符合这些任务的期望，那么任务还会被唤醒。\n\n```cpp\n/* 设置事件组中的位\n* xEventGroup: 哪个事件组\n* uxBitsToSet: 设置哪些位?\n* 如果uxBitsToSet的bitX, bitY为1, 那么事件组中的bitX, bitY被设置为1\n* 可以用来设置多个位，比如 0x15 就表示设置bit4, bit2, bit0\n* 返回值: 返回原来的事件值(没什么意义, 因为很可能已经被其他任务修改了)\n*/\nEventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,const EventBits_t uxBitsToSet );\n/* 设置事件组中的位\n* xEventGroup: 哪个事件组\n* uxBitsToSet: 设置哪些位?\n* 如果uxBitsToSet的bitX, bitY为1, 那么事件组中的bitX, bitY被设置为1\n* 可以用来设置多个位，比如 0x15 就表示设置bit4, bit2, bit0\n* pxHigherPriorityTaskWoken: 有没有导致更高优先级的任务进入就绪态? pdTRUE-有,\npdFALSE-没有\n* 返回值: pdPASS-成功, pdFALSE-失败\n*/\nBaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,const EventBits_t uxBitsToSet, BaseType_t * pxHigherPriorityTaskWoken );\n```\n\n\n### 等待事件\n使用 xEventGroupWaitBits 来等待事件，可以等待某一位、某些位中的任意一个，也可以等待多位；\n等到期望的事件后，还可以清除某些位。\n```cpp\nEventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,\n        const EventBits_t uxBitsToWaitFor,\n        const BaseType_t xClearOnExit,\n        const BaseType_t xWaitForAllBits,\n        TickType_t xTicksToWait );\n```\n![说明](https://s2.loli.net/2024/07/18/94Xf5Cdvjnth3r2.png)\n可以使用 xEventGroupWaitBits() 等待期望的事件，它发生之后再使用 xEventGroupClearBits()\n来清除。但是这两个函数之间，有可能被其他任务或中断抢占，它们可能会修改事件组。\n\n可以使用设置 xClearOnExit 为pdTRUE，使得对事件组的测试、清零都在 xEventGroupWaitBits()\n函数内部完成，这是一个原子操作。\n\n\n### 同步点\n{% note info flat %}\n有一个事情需要多个任务协同，比如：\n    任务A：炒菜\n    任务B：买酒\n    任务C：摆台\nA、B、C做好自己的事后，还要等别人做完；大家一起做完，才可开饭\n{% endnote %}\n\n使用 xEventGroupSync() 函数可以同步多个任务：\n可以设置某位、某些位，表示自己做了什么事。\n可以等待某位、某些位，表示要等等其他任务。\n期望的时间发生后， xEventGroupSync() 才会成功返回。\nxEventGroupSync 成功返回后，会清除事件。\n\n```cpp\nEventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,\n                        const EventBits_t uxBitsToSet,\n                        const EventBits_t uxBitsToWaitFor,\n                        TickType_t xTicksToWait );\n```\n![说明](https://s2.loli.net/2024/07/18/vQXBRWighezVK2L.png)\n\n\n## 任务通知\n\n使用队列、信号量、事件组等等方法时，并不知道对方是谁。使用任务通知时，可以明确指定：通知哪个任务。\n使用队列、信号量、事件组时，我们都要事先创建对应的结构体，双方通过中间的结构体通信：使用任务通知时，任务结构体TCB中就包含了内部对象，可以直接接收别人发过来的\"通知\"：\n\n任务通知的优势：\n效率更高：使用任务通知来发送事件、数据给某个任务时，效率更高。比队列、信号量、事件组都\n有大的优势。\n更节省内存：使用其他方法时都要先创建对应的结构体，使用任务通知时无需额外创建结构体。\n\n### 通知状态和通知值\n每个任务都有一个结构体：TCB(Task Control Block)，里面有2个成员：\n一个是uint8_t类型，用来表示通知状态\n一个是uint32_t类型，用来表示通知值\n\n```cpp\ntypedef struct tskTaskControlBlock\n{\n......\n/* configTASK_NOTIFICATION_ARRAY_ENTRIES = 1 */\nvolatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];\nvolatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];\n......\n} tskTCB;\n```\n- taskNOT_WAITING_NOTIFICATION：任务没有在等待通知\n- taskWAITING_NOTIFICATION：任务在等待通知\n- taskNOTIFICATION_RECEIVED：任务接收到了通知，也被称为pending(有数据了，待处理)\n\n\n\n\n\n# 开发","source":"_posts/FreeRTOS.md","raw":"---\ntitle: FreeRTOS\nabbrlink: 34230\ndate: 2024-07-10 15:14:06\ntags:\n  - 嵌入式操作系统\ndescription: 本文用于记录嵌入式操作系统的学习过程\ncategories:\n  - 嵌入式开发\ncover: 'https://image.aruoshui.fun/i/2024/12/31/u1be33-0.webp'\nswiper_index:\n---\n\n\n# 学习\n## 堆\n堆，heap，就是一块空闲的内存，需要提供管理函数\n- malloc：从堆里划出一块空间给程序使用\n- free：用完后，再把它标记为\"空闲\"的，可以再次使用s\n\n## 栈\n栈，stack，函数调用时局部变量保存在栈中，当前程序的环境也是保存在栈中\n可以从堆中分配一块空间用作栈\n\n## 源码结构\n### 目录结构\n![代码结构](https://s2.loli.net/2024/07/10/7f9cvzYARSsqjtx.png)\n\n### 核心\nFreeRTOS的最核心文件只有2个：\n- FreeRTOS/Source/tasks.c\n- FreeRTOS/Source/list.c\n\n| FreeRTOS/source/下的文件 | 作用     | \n| ------------------------ | -------- | \n| task.c        | 必须，任务操作 | \n| list.c        | 必须，列表 | \n| queue.c        | 基本必须，提供队列操作、信号量操作  | \n| timer.c        | 可选，software timer  |\n| event_groups.c        | 可选，提供event group功能  |\n| croutine.c        | 可选，基本过时  |   \n\n## 代码规范\n![变量命名](https://s2.loli.net/2024/07/10/1lvz8NeSyaOxLT3.png)\n![函数名](https://s2.loli.net/2024/07/10/WcDqbwXBUAxj9Ei.png)\n\n## 创建任务函数详解\n### 任务函数原形\n任务就是一个函数，原型如下：\n`void ATaskFunction( void *pvParameters );`\n\n### 任务创建\n在FreeRTOS中，任务可以通过静态创建和动态创建两种方式来实现。他们只有在任务创建的初期和能否释放栈有区别，最终使用是一模一样的。\n\n静态创建的任务，栈是存放在数组里面的。因此静态创建任务的栈无法释放，在编译初期就定好了。\n动态创建的任务，栈是通过类似malloc的函数实现的，也就是堆区域。堆是可以通过类似free函数释放的。\n\n**栈的空间分配是重中之重**，关乎到每个任务函数内部使用的空间 \n\n\n#### 两种创建方式如何抉择\n1. 选择静态创建还是动态创建取决于应用的具体需求。如果你的任务具备以下特征，就推荐使用静态创建任务：\n任务的数量和属性在编译时就确定，不需要动态创建或删除任务。\n任务的栈空间需求可以预先估计，不需要动态调整。\n堆空间有限，或者想要节省堆空间。\n对任务创建的速度和可靠性有较高的要求。\n\n2. 当你的任务具备以下特征，就推荐使用动态创建任务：\n任务的数量和属性在运行时才确定，需要动态创建或删除任务。\n任务的栈空间需求难以预先估计，需要动态调整。\n堆空间充足，或者不在乎堆空间的占用。\n对任务创建的速度和可靠性没有较高的要求。\n\n#### 动态分配\n\n```cpp\nBaseType_t xTaskCreate( TaskFunction_t pxTaskCode,\n                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n                            const configSTACK_DEPTH_TYPE usStackDepth,\n                            void * const pvParameters,                //参数\n                            UBaseType_t uxPriority,                   //优先级\n                            TaskHandle_t * const pxCreatedTask )      //任务控制块-> TCB的指针\n```\n![说明](https://s2.loli.net/2024/07/10/WKEtjmyd1gB2OMC.png)\n\n例子：\n```cpp\nxTaskCreate(Task1Function, \"Task1\", 100, NULL, 1, &xHandleTask1);\nxTaskCreate(Task2Function, \"Task2\", 100, NULL, 1, NULL);\n```\n#### 静态分配\nTCB结构体需要实现分配好，栈也需要首先分配好\n```cpp\n    TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,\n                                    const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n                                    const uint32_t ulStackDepth,\n                                    void * const pvParameters,\n                                    UBaseType_t uxPriority,\n                                    StackType_t * const puxStackBuffer,\n                                    StaticTask_t * const pxTaskBuffer )\n```\n\n为了防止\n```cpp\nStackType_t xIdleTaskStack[100];\nStaticTask_t xIdleTaskTCB;\n\nvoid vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,\n                                    StackType_t ** ppxIdleTaskStackBuffer,\n                                    uint32_t * pulIdleTaskStackSize )\n{\n    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;\n    *ppxIdleTaskStackBuffer = xIdleTaskStack;\n    *pulIdleTaskStackSize = 100;\n}\n```\n\n\n例子：\n```C++\nStackType_t xTask3Stack[100];   // 栈空间\nStaticTask_t xTask3TCB;         // TCB任务块\n\nxTaskCreateStatic(Task3Function, \"Task3\", 100, NULL, 1, xTask3Stack, &xTask3TCB);\n```\n\n### 任务优先级\nfreertos是数字越小优先级越低，优先级的取值范围是：0~(configMAX_PRIORITIES – 1)\n#### tick中断\n![一张图](https://s2.loli.net/2024/07/10/snU475bkLgiSIEq.png)\n\n\n\n### 任务的删除\n#### 函数原形\n`void vTaskDelete( TaskHandle_t xTaskToDelete );`\n\n传入的参数是任务句柄\n使用xTaskCreate创建任务时可以得到一个句柄。也可传入NULL，这表示删除自己。\n\n1. 自杀： vTaskDelete(NULL)\n2. 被杀：别的任务执行 vTaskDelete(pvTaskCode) ，pvTaskCode是自己的句柄\n3. 杀人：执行 vTaskDelete(pvTaskCode) ，pvTaskCode是别的任务的句柄、\n\n{% note info flat %}\n（1）任务自杀通常由任务自己主动发起，而删除其他任务是由系统中的某个任务请求删除另一个任务。\n（2）在实际应用中，需要根据具体的需求和设计来选择使用哪种方法。在任何情况下，都需要确保在删除任务之前，已经合理地释放了任务占用的资源，以避免资源泄漏和系统不稳定性。删除任务释放的资源要考虑以下内容：\n\n1. 避免删除正在执行的任务：尽量避免删除正在执行的任务，因为这可能导致未定义的行为。通常，应该在目标任务主动结束执行或者在任务的代码中检查某些条件后再请求删除。\n2. 处理资源释放：确保在删除任务之前释放任务使用的资源。这包括释放动态分配的内存、关闭文件句柄、释放占用的硬件资源等。如果任务在删除时仍然占用资源，可能会导致资源泄漏或系统不稳定。\n3. 处理同步和互斥：如果目标任务与其他任务之间存在同步或互斥关系，确保在删除任务之前解除这些关系，以免引起竞态条件或死锁。\n4. 避免删除空闲任务：在 FreeRTOS 中，空闲任务（Idle Task）用于在系统没有其他任务需要执行时运行。删除空闲任务可能导致系统无法正常工作，应该谨慎使用。例如，任务删除之后的堆栈释放，是在空闲任务中执行，当空闲任务删除之后，堆栈将需要通过其他任务手动释放，这样将会增加工作量。\n{% endnote %}\n   \n### 任务状态\n学习过操作系统就很简单，直接看例子:\n```cpp\nvoid Task1Function(void * param)\n{\n\tTickType_t tStart = xTaskGetTickCount();\n\tTickType_t t;\n\tint flag = 0;\n\t\n\twhile (1)\n\t{\n\t\tt = xTaskGetTickCount();\n\t\t\n\t\ttask1flagrun = 1;\n\t\ttask2flagrun = 0;\n\t\ttask3flagrun = 0;\n\t\tprintf(\"1\");\n\n\t\tif (!flag && (t > tStart + 10))\n\t\t{\n\t\t\tvTaskSuspend(xHandleTask3);\n\t\t\tflag = 1;\n\t\t}\n\n\t\tif (t > tStart + 20)\n\t\t{\n\t\t\tvTaskResume(xHandleTask3);\n\t\t}\n\t}\n}\n\nvoid Task2Function(void * param)\n{\n\twhile (1)\n\t{\n\t\ttask1flagrun = 0;\n\t\ttask2flagrun = 1;\n\t\ttask3flagrun = 0;\n\t\tprintf(\"2\");\n\n\t\tvTaskDelay(10);\n\t}\n}\n\nvoid Task3Function(void * param)\n{\n\twhile (1)\n\t{\n\t\ttask1flagrun = 0;\n\t\ttask2flagrun = 0; \n\t\ttask3flagrun = 1;\n\t\tprintf(\"3\");\n\t}\n}\n\n```\n![结果](https://s2.loli.net/2024/07/10/knL9HAC1QbuE2Rc.png)\n\n### 空闲任务及钩子函数\n看这个例子：\n```cpp\nvoid Task1Function(void * param)\n{\n\tTaskHandle_t xHandleTask2;\n\tBaseType_t xReturn;\n\t\n\twhile (1)\n\t{\n\t\ttask1flagrun = 1;\n\t\ttask2flagrun = 0;\n\t\ttaskidleflagrun = 0;\n\t\tprintf(\"1\");\n\t\txReturn = xTaskCreate(Task2Function, \"Task2\", 1024, NULL, 2, &xHandleTask2);\n\t\tif (xReturn != pdPASS)\n\t\t\tprintf(\"xTaskCreate err\\r\\n\");\n\t\t//vTaskDelete(xHandleTask2);\n\t\t\t\n\t}\n}\n\nvoid Task2Function(void * param)\n{\n\twhile (1)\n\t{\n\t\ttask1flagrun = 0;\n\t\ttask2flagrun = 1;\n\t\ttaskidleflagrun = 0;\n\t\tprintf(\"2\");\n\t\t//vTaskDelay(2);\n\t\tvTaskDelete(NULL);\n\t}\n}\n```\n任务1会反复创建任务2，任务2执行自杀，不能完成清理尸体，需要空闲任务进行清空(自杀由空闲任务处理实体，他杀由杀者处理实体)\n\n\n空闲任务(Idle任务)的作用：释放被删除的任务的内存。\n一个良好的程序，它的任务都是事件驱动的：平时大部分时间处于阻塞状态。有可能我们自己创建的所有任务都无法执行，但是调度器必须能找到一个可以运\n行的任务：所以，我们要提供空闲任务。在使用 vTaskStartScheduler() 函数来创建、启动调度器时，这个函数内部会创建空闲任务：\n1. 空闲任务优先级为0：它不能阻碍用户任务运行\n2. 空闲任务要么处于就绪态，要么处于运行态，永远不会阻塞\n3. 空闲任务的优先级为0，这以为着一旦某个用户的任务变为就绪态，那么空闲任务马上被切换出去，让这个用户任务运行。在这种情况下，我们说用户任务\"抢占\"(pre-empt)了空闲任务，这是由调度器实现的。\n\n**如果使用 vTaskDelete() 来删除任务，那么你就要确保空闲任务有机会执行，否则就无法释放被删除任务的内存**\n\n#### 钩子\n我们可以添加一个空闲任务的钩子函数(Idle Task Hook Functions)，空闲任务的循环没执行一次，就会调用一次钩子函数。 \n\n钩子函数的作用有这些：\n1. 执行一些低优先级的、后台的、需要连续执行的函数测量系统的空闲时间：\n2. 空闲任务能被执行就意味着所有的高优先级任务都停止了，所以测量空闲任务占据的时间，就可以算出处理器占用率。\n3. 让系统进入省电模式：空闲任务能被执行就意味着没有重要的事情要做，当然可以进入省电模式\n\n\n空闲任务的钩子函数的限制：\n1. 不能导致空闲任务进入阻塞状态、暂停状态\n2. 如果你会使用 vTaskDelete() 来删除任务，那么钩子函数要非常高效地执行。如果空闲任务移植\n3. 卡在钩子函数里的话，它就无法释放内存。\n\n## delay函数\n有两个Delay函数：\n- vTaskDelay：至少等待指定个数的Tick Interrupt才能变为就绪状态\n- vTaskDelayUntil：等待到指定的绝对时刻，才能变为就绪态。\n\n![说明](https://s2.loli.net/2024/07/10/2HDKAez7MGtjvTF.png)\n\n\n## 任务调度算法\n### 配置调度算法\n通过配置文件FreeRTOSConfig.h的两个配置项来配置调度算法：configUSE_PREEMPTION、configUSE_TIME_SLICING\n```cpp\n#define configUSE_PREEMPTION\t\t1    // 支持抢占\n#define configUSE_TIME_SLICING      1    // 同优先级的任务交替执行\n#define configIDLE_SHOULD_YIELD\t\t1    // 空闲任务让步\n```\n### 抢占\n- 抢占时：高优先级任务就绪时，就可以马上执行\n- 不抢占时：优先级失去意义了，既然不能抢占就只能协商了，一个任务执行，其他任务都无法执行。即使其他任务已经超时、即使它的优先级更高，都没办法执行。\n\n### 时间片\n- 时间片轮转：在Tick中断中会引起任务切换\n- 时间片不轮转：高优先级任务就绪时会引起任务切换，高优先级任务不再运行时也会引起任务切换。\n\n### 空闲任务让步\n让步时：假如设置空闲任务为无限循环，则在空闲任务的每个循环中，会主动让出处理器\n不让步时：空闲任务跟其他任务同等待遇\n\n\n## 同步互斥与通信概述\n能实现同步、互斥的内核方法有：任务通知(task notification)、队列(queue)、事件组(event group)、信号量(semaphoe)、互斥量(mutex)。\n\n它们都有类似的操作方法：获取/释放、阻塞/唤醒、超时。比如：\nA获取资源，用完后A释放资源\nA获取不到资源则阻塞，B释放资源并把A唤醒\nA获取不到资源则阻塞，并定个闹钟；A要么超时返回，要么在这段时间内因为B释放资源而被唤醒。\n\n![说明](https://s2.loli.net/2024/07/11/l8GZUzmsYNAq9H5.png)\n\n## 队列\n队列其实是一个环形缓冲区，定义如下：\n```cpp\ntypedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel aware debuggers. */\n{\n    int8_t * pcHead;           /*< Points to the beginning of the queue storage area. */\n    int8_t * pcWriteTo;        /*< Points to the free next place in the storage area. */\n\n    union\n    {\n        QueuePointers_t xQueue;     /*< Data required exclusively when this structure is used as a queue. */\n        SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaphore. */\n    } u;\n\n    List_t xTasksWaitingToSend;             /*< List of tasks that are blocked waiting to post onto this queue.  Stored in priority order. */\n    List_t xTasksWaitingToReceive;          /*< List of tasks that are blocked waiting to read from this queue.  Stored in priority order. */\n\n    volatile UBaseType_t uxMessagesWaiting; /*< The number of items currently in the queue. */\n    UBaseType_t uxLength;                   /*< The length of the queue defined as the number of items it will hold, not the number of bytes. */\n    UBaseType_t uxItemSize;                 /*< The size of each items that the queue will hold. */\n\n    volatile int8_t cRxLock;                /*< Stores the number of items received from the queue (removed from the queue) while the queue was locked.  Set to queueUNLOCKED when the queue is not locked. */\n    volatile int8_t cTxLock;                /*< Stores the number of items transmitted to the queue (added to the queue) while the queue was locked.  Set to queueUNLOCKED when the queue is not locked. */\n\n    #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )\n        uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the memory used by the queue was statically allocated to ensure no attempt is made to free the memory. */\n    #endif\n\n    #if ( configUSE_QUEUE_SETS == 1 )\n        struct QueueDefinition * pxQueueSetContainer;\n    #endif\n\n    #if ( configUSE_TRACE_FACILITY == 1 )\n        UBaseType_t uxQueueNumber;\n        uint8_t ucQueueType;\n    #endif\n} xQUEUE;\n\n```\n使用队列的流程：创建队列、写队列、读队列、删除队列。\n\n### 创建\n![动态创建队列](https://s2.loli.net/2024/07/11/tdR6ZbWU5TAsPGg.png)\n![静态创建队列](https://s2.loli.net/2024/07/11/9HQwarTkceNI5Ud.png)\n\n### 写\n```cpp\n/* 等同于xQueueSendToBack\n* 往队列尾部写入数据，如果没有空间，阻塞时间为xTicksToWait\n*/\nBaseType_t xQueueSend(\nQueueHandle_t xQueue,\nconst void *pvItemToQueue,\nTickType_t xTicksToWait\n);\n/*\n* 往队列尾部写入数据，如果没有空间，阻塞时间为xTicksToWait\n*/\nBaseType_t xQueueSendToBack(\nQueueHandle_t xQueue,\nconst void *pvItemToQueue,\nTickType_t xTicksToWait\n);\n/*\n* 往队列尾部写入数据，此函数可以在中断函数中使用，不可阻塞\n*/\nBaseType_t xQueueSendToBackFromISR(\nQueueHandle_t xQueue,\nconst void *pvItemToQueue,\nBaseType_t *pxHigherPriorityTaskWoken\n);\n/*\n* 往队列头部写入数据，如果没有空间，阻塞时间为xTicksToWait\n*/\nBaseType_t xQueueSendToFront(\nQueueHandle_t xQueue,\nconst void *pvItemToQueue,\nTickType_t xTicksToWait\n);\n/*\n* 往队列头部写入数据，此函数可以在中断函数中使用，不可阻塞\n*/\nBaseType_t xQueueSendToFrontFromISR(\nQueueHandle_t xQueue,\nconst void *pvItemToQueue,\nBaseType_t *pxHigherPriorityTaskWoken\n);\n```\n\n![写](https://s2.loli.net/2024/07/11/d9ctCQiL7PY6upg.png)\n\n\n### 读\n使用 xQueueReceive() 函数读队列，读到一个数据后，队列中该数据会被移除。\n```cpp\nBaseType_t xQueueReceive( QueueHandle_t xQueue,\nvoid * const pvBuffer,\nTickType_t xTicksToWait );\n\nBaseType_t xQueueReceiveFromISR(\nQueueHandle_t xQueue,\nvoid *pvBuffer,\nBaseType_t *pxTaskWoken\n);\n```\n![读](https://s2.loli.net/2024/07/11/1iSsAB3rMFQqLoT.png)\n\n### 删除队列\n删除队列的函数为 vQueueDelete() ，只能删除使用动态方法创建的队列，它会释放内存。\n\n### 复位\n队列刚被创建时，里面没有数据；使用过程中可以调用 xQueueReset() 把队列恢复为初始状态\n\n## 信号量\n只需要传递状态，并不需要传递具体的信息，这个时候就可以使用信号量\n\n### 两种信号量\n信号量的计数值都有限制：限定了最大值。如果最大值被限定为1，那么它就是二进制信号量；\n如果最大值不是1，它就是计数型信号量。\n\n### 信号量创建\n使用信号量之前，要先创建，得到一个句柄；使用信号量时，要使用句柄来表明使用哪个信号量。\n对于二进制信号量、计数型信号量，它们的创建函数不一样：\n\n二进制信号量：\n```cpp\n/* 创建一个二进制信号量，返回它的句柄。\n* 此函数内部会分配信号量结构体\n* 返回值: 返回句柄，非NULL表示成功\n*/\nSemaphoreHandle_t xSemaphoreCreateBinary( void );\n/* 创建一个二进制信号量，返回它的句柄。\n* 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针\n* 返回值: 返回句柄，非NULL表示成功\n*/\nSemaphoreHandle_t xSemaphoreCreateBinaryStatic( StaticSemaphore_t *pxSemaphoreBuffer );\n```\n\n计数型信号量:\n```cpp\n/* 创建一个计数型信号量，返回它的句柄。\n* 此函数内部会分配信号量结构体\n* uxMaxCount: 最大计数值\n* uxInitialCount: 初始计数值\n* 返回值: 返回句柄，非NULL表示成功\n*/\nSemaphoreHandle_t xSemaphoreCreateCounting(UBaseType_t uxMaxCount, UBaseType_t\nuxInitialCount);\n/* 创建一个计数型信号量，返回它的句柄。\n* 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针\n* uxMaxCount: 最大计数值\n* uxInitialCount: 初始计数值\n* pxSemaphoreBuffer: StaticSemaphore_t结构体指针\n* 返回值: 返回句柄，非NULL表示成功\n*/\nSemaphoreHandle_t xSemaphoreCreateCountingStatic( UBaseType_t uxMaxCount,\n                                                    UBaseType_t uxInitialCount,\n                                                    StaticSemaphore_t\n*pxSemaphoreBuffer );\n\n```\n\n### 信号量的删除\n对于动态创建的信号量，不再需要它们时，可以删除它们以回收内存。\n```cpp\n/*\n* xSemaphore: 信号量句柄，你要删除哪个信号量\n*/\nvoid vSemaphoreDelete( SemaphoreHandle_t xSemaphore );\n```\n\n### give\n释放信号量\n需要注意，信号量的释放都是立即返回的。只有获取信号量才会进行阻塞等待。\n```cpp\n/**\n * @brief  释放信号量\n *\n * @param  xSemaphore 要释放的信号量句柄\n *\n * @return  释放成功，返回pdTRUE。否则返回 pdFALSE。\n */\nBaseType_t xSemaphoreGive( SemaphoreHandle_t xSemaphore );\n```\n\n### take\n获取信号量\n```cpp\n/**\n * @brief  获取信号量\n *\n * @param  xSemaphore   要获取的信号量句柄\n *        -xTicksToWait 超时时间，0 表示立即返回，portMAX_DELAY表示无限等待, 一直阻塞直到成功\n *\n * @return  成功获取信号量，返回pdPASS。否则返回pdFALSE\n */\nBaseType_t xSemaphoreTake( SemaphoreHandle_t xSemaphore,TickType_t xTicksToWait );\n\n```\n\n## 互斥量\n互斥量能够解决优先级反转问题，而信号量不行。\n\n互斥量也被称为互斥锁，使用过程如下：\n互斥量初始值为1\n任务A想访问临界资源，先获得并占有互斥量，然后开始访问\n任务B也想访问临界资源，也要先获得互斥量：被别人占有了，于是阻塞\n任务A使用完毕，释放互斥量；任务B被唤醒、得到并占有互斥量，然后开始访问临界资源\n任务B使用完毕，释放互斥量\n\n### 互斥量的创建\n使用互斥量时，先创建、然后去获得、释放它。使用句柄来表示一个互斥量。各类操作函数，比如删除、give/take，跟一般是信号量是一样的。但是要注意互斥量不能在ISR中使用\n\n```cpp\n/* 创建一个互斥量，返回它的句柄。\n* 此函数内部会分配互斥量结构体\n* 返回值: 返回句柄，非NULL表示成功\n*/\nSemaphoreHandle_t xSemaphoreCreateMutex( void );\n/* 创建一个互斥量，返回它的句柄。\n* 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针\n* 返回值: 返回句柄，非NULL表示成功\n*/\nSemaphoreHandle_t xSemaphoreCreateMutexStatic( StaticSemaphore_t *pxMutexBuffer\n);\n```\n使用互斥量，需要在配置文件FreeRTOSConfig.h中定义：\n`##define configUSE_MUTEXES 1`\n\n\n\n\n## 队列集\n队列只能存放同一种类型的数据，那如果我们需要在任务之间传输不同类型的消息，应该如何处理呢？例如遥控车，可能是按键式的遥控器（传输的是整型数据），也可能会兼容遥感式的遥控器（传输的是浮点数据）。这两种遥控器都能够控制小车，那么应当如何进行数据传输呢？\n\n**队列集的本质也是队列，只不过里面存放的是队列句柄，而不是数据。**\n```cpp\nQueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )\n{\nQueueSetHandle_t pxQueue;\n\n\tpxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );\n\n\treturn pxQueue;\n}\n```\n\n\n## 事件组\n事件组可以用下面的图进行解释\n![事件组原理](https://s2.loli.net/2024/07/18/mYKQapgxXolw7Zq.png)\n其创建和删除跟之前的互斥等类型相同，都是以handle为依据，主要是事件组的设置和等待事件\n\n### 设置事件\n可以设置事件组的某个位、某些位，使用的函数有2个：\n在任务中使用 xEventGroupSetBits()\n在ISR中使用 xEventGroupSetBitsFromISR()\n有一个或多个任务在等待事件，如果这些事件符合这些任务的期望，那么任务还会被唤醒。\n\n```cpp\n/* 设置事件组中的位\n* xEventGroup: 哪个事件组\n* uxBitsToSet: 设置哪些位?\n* 如果uxBitsToSet的bitX, bitY为1, 那么事件组中的bitX, bitY被设置为1\n* 可以用来设置多个位，比如 0x15 就表示设置bit4, bit2, bit0\n* 返回值: 返回原来的事件值(没什么意义, 因为很可能已经被其他任务修改了)\n*/\nEventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,const EventBits_t uxBitsToSet );\n/* 设置事件组中的位\n* xEventGroup: 哪个事件组\n* uxBitsToSet: 设置哪些位?\n* 如果uxBitsToSet的bitX, bitY为1, 那么事件组中的bitX, bitY被设置为1\n* 可以用来设置多个位，比如 0x15 就表示设置bit4, bit2, bit0\n* pxHigherPriorityTaskWoken: 有没有导致更高优先级的任务进入就绪态? pdTRUE-有,\npdFALSE-没有\n* 返回值: pdPASS-成功, pdFALSE-失败\n*/\nBaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,const EventBits_t uxBitsToSet, BaseType_t * pxHigherPriorityTaskWoken );\n```\n\n\n### 等待事件\n使用 xEventGroupWaitBits 来等待事件，可以等待某一位、某些位中的任意一个，也可以等待多位；\n等到期望的事件后，还可以清除某些位。\n```cpp\nEventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,\n        const EventBits_t uxBitsToWaitFor,\n        const BaseType_t xClearOnExit,\n        const BaseType_t xWaitForAllBits,\n        TickType_t xTicksToWait );\n```\n![说明](https://s2.loli.net/2024/07/18/94Xf5Cdvjnth3r2.png)\n可以使用 xEventGroupWaitBits() 等待期望的事件，它发生之后再使用 xEventGroupClearBits()\n来清除。但是这两个函数之间，有可能被其他任务或中断抢占，它们可能会修改事件组。\n\n可以使用设置 xClearOnExit 为pdTRUE，使得对事件组的测试、清零都在 xEventGroupWaitBits()\n函数内部完成，这是一个原子操作。\n\n\n### 同步点\n{% note info flat %}\n有一个事情需要多个任务协同，比如：\n    任务A：炒菜\n    任务B：买酒\n    任务C：摆台\nA、B、C做好自己的事后，还要等别人做完；大家一起做完，才可开饭\n{% endnote %}\n\n使用 xEventGroupSync() 函数可以同步多个任务：\n可以设置某位、某些位，表示自己做了什么事。\n可以等待某位、某些位，表示要等等其他任务。\n期望的时间发生后， xEventGroupSync() 才会成功返回。\nxEventGroupSync 成功返回后，会清除事件。\n\n```cpp\nEventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,\n                        const EventBits_t uxBitsToSet,\n                        const EventBits_t uxBitsToWaitFor,\n                        TickType_t xTicksToWait );\n```\n![说明](https://s2.loli.net/2024/07/18/vQXBRWighezVK2L.png)\n\n\n## 任务通知\n\n使用队列、信号量、事件组等等方法时，并不知道对方是谁。使用任务通知时，可以明确指定：通知哪个任务。\n使用队列、信号量、事件组时，我们都要事先创建对应的结构体，双方通过中间的结构体通信：使用任务通知时，任务结构体TCB中就包含了内部对象，可以直接接收别人发过来的\"通知\"：\n\n任务通知的优势：\n效率更高：使用任务通知来发送事件、数据给某个任务时，效率更高。比队列、信号量、事件组都\n有大的优势。\n更节省内存：使用其他方法时都要先创建对应的结构体，使用任务通知时无需额外创建结构体。\n\n### 通知状态和通知值\n每个任务都有一个结构体：TCB(Task Control Block)，里面有2个成员：\n一个是uint8_t类型，用来表示通知状态\n一个是uint32_t类型，用来表示通知值\n\n```cpp\ntypedef struct tskTaskControlBlock\n{\n......\n/* configTASK_NOTIFICATION_ARRAY_ENTRIES = 1 */\nvolatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];\nvolatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];\n......\n} tskTCB;\n```\n- taskNOT_WAITING_NOTIFICATION：任务没有在等待通知\n- taskWAITING_NOTIFICATION：任务在等待通知\n- taskNOTIFICATION_RECEIVED：任务接收到了通知，也被称为pending(有数据了，待处理)\n\n\n\n\n\n# 开发","slug":"FreeRTOS","published":1,"updated":"2024-12-31T10:16:29.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6inw000pmkttc1rw9mv5","content":"<h1>学习</h1>\n<h2 id=\"堆\">堆</h2>\n<p>堆，heap，就是一块空闲的内存，需要提供管理函数</p>\n<ul>\n<li>malloc：从堆里划出一块空间给程序使用</li>\n<li>free：用完后，再把它标记为&quot;空闲&quot;的，可以再次使用s</li>\n</ul>\n<h2 id=\"栈\">栈</h2>\n<p>栈，stack，函数调用时局部变量保存在栈中，当前程序的环境也是保存在栈中<br>\n可以从堆中分配一块空间用作栈</p>\n<h2 id=\"源码结构\">源码结构</h2>\n<h3 id=\"目录结构\">目录结构</h3>\n<p><img src=\"https://s2.loli.net/2024/07/10/7f9cvzYARSsqjtx.png\" alt=\"代码结构\"></p>\n<h3 id=\"核心\">核心</h3>\n<p>FreeRTOS的最核心文件只有2个：</p>\n<ul>\n<li>FreeRTOS/Source/tasks.c</li>\n<li>FreeRTOS/Source/list.c</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>FreeRTOS/source/下的文件</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>task.c</td>\n<td>必须，任务操作</td>\n</tr>\n<tr>\n<td>list.c</td>\n<td>必须，列表</td>\n</tr>\n<tr>\n<td>queue.c</td>\n<td>基本必须，提供队列操作、信号量操作</td>\n</tr>\n<tr>\n<td>timer.c</td>\n<td>可选，software timer</td>\n</tr>\n<tr>\n<td>event_groups.c</td>\n<td>可选，提供event group功能</td>\n</tr>\n<tr>\n<td>croutine.c</td>\n<td>可选，基本过时</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"代码规范\">代码规范</h2>\n<p><img src=\"https://s2.loli.net/2024/07/10/1lvz8NeSyaOxLT3.png\" alt=\"变量命名\"><br>\n<img src=\"https://s2.loli.net/2024/07/10/WcDqbwXBUAxj9Ei.png\" alt=\"函数名\"></p>\n<h2 id=\"创建任务函数详解\">创建任务函数详解</h2>\n<h3 id=\"任务函数原形\">任务函数原形</h3>\n<p>任务就是一个函数，原型如下：<br>\n<code>void ATaskFunction( void *pvParameters );</code></p>\n<h3 id=\"任务创建\">任务创建</h3>\n<p>在FreeRTOS中，任务可以通过静态创建和动态创建两种方式来实现。他们只有在任务创建的初期和能否释放栈有区别，最终使用是一模一样的。</p>\n<p>静态创建的任务，栈是存放在数组里面的。因此静态创建任务的栈无法释放，在编译初期就定好了。<br>\n动态创建的任务，栈是通过类似malloc的函数实现的，也就是堆区域。堆是可以通过类似free函数释放的。</p>\n<p><strong>栈的空间分配是重中之重</strong>，关乎到每个任务函数内部使用的空间</p>\n<h4 id=\"两种创建方式如何抉择\">两种创建方式如何抉择</h4>\n<ol>\n<li>\n<p>选择静态创建还是动态创建取决于应用的具体需求。如果你的任务具备以下特征，就推荐使用静态创建任务：<br>\n任务的数量和属性在编译时就确定，不需要动态创建或删除任务。<br>\n任务的栈空间需求可以预先估计，不需要动态调整。<br>\n堆空间有限，或者想要节省堆空间。<br>\n对任务创建的速度和可靠性有较高的要求。</p>\n</li>\n<li>\n<p>当你的任务具备以下特征，就推荐使用动态创建任务：<br>\n任务的数量和属性在运行时才确定，需要动态创建或删除任务。<br>\n任务的栈空间需求难以预先估计，需要动态调整。<br>\n堆空间充足，或者不在乎堆空间的占用。<br>\n对任务创建的速度和可靠性没有较高的要求。</p>\n</li>\n</ol>\n<h4 id=\"动态分配\">动态分配</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xTaskCreate</span><span class=\"params\">( TaskFunction_t pxTaskCode,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"type\">const</span> <span class=\"type\">char</span> * <span class=\"type\">const</span> pcName, <span class=\"comment\">/*lint !e971 Unqualified char types are allowed for strings and single characters only. */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"type\">const</span> configSTACK_DEPTH_TYPE usStackDepth,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"type\">void</span> * <span class=\"type\">const</span> pvParameters,                <span class=\"comment\">//参数</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            UBaseType_t uxPriority,                   <span class=\"comment\">//优先级</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            TaskHandle_t * <span class=\"type\">const</span> pxCreatedTask )</span>      <span class=\"comment\">//任务控制块-&gt; TCB的指针</span></span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.loli.net/2024/07/10/WKEtjmyd1gB2OMC.png\" alt=\"说明\"></p>\n<p>例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">xTaskCreate</span>(Task1Function, <span class=\"string\">&quot;Task1&quot;</span>, <span class=\"number\">100</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">1</span>, &amp;xHandleTask1);</span><br><span class=\"line\"><span class=\"built_in\">xTaskCreate</span>(Task2Function, <span class=\"string\">&quot;Task2&quot;</span>, <span class=\"number\">100</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">1</span>, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"静态分配\">静态分配</h4>\n<p>TCB结构体需要实现分配好，栈也需要首先分配好</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">TaskHandle_t <span class=\"title\">xTaskCreateStatic</span><span class=\"params\">( TaskFunction_t pxTaskCode,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                <span class=\"type\">const</span> <span class=\"type\">char</span> * <span class=\"type\">const</span> pcName, <span class=\"comment\">/*lint !e971 Unqualified char types are allowed for strings and single characters only. */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                <span class=\"type\">const</span> <span class=\"type\">uint32_t</span> ulStackDepth,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                <span class=\"type\">void</span> * <span class=\"type\">const</span> pvParameters,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                UBaseType_t uxPriority,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                StackType_t * <span class=\"type\">const</span> puxStackBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                StaticTask_t * <span class=\"type\">const</span> pxTaskBuffer )</span></span></span><br></pre></td></tr></table></figure>\n<p>为了防止</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">StackType_t xIdleTaskStack[<span class=\"number\">100</span>];</span><br><span class=\"line\">StaticTask_t xIdleTaskTCB;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">vApplicationGetIdleTaskMemory</span><span class=\"params\">( StaticTask_t ** ppxIdleTaskTCBBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                    StackType_t ** ppxIdleTaskStackBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                    <span class=\"type\">uint32_t</span> * pulIdleTaskStackSize )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    *ppxIdleTaskTCBBuffer = &amp;xIdleTaskTCB;</span><br><span class=\"line\">    *ppxIdleTaskStackBuffer = xIdleTaskStack;</span><br><span class=\"line\">    *pulIdleTaskStackSize = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">StackType_t xTask3Stack[<span class=\"number\">100</span>];   <span class=\"comment\">// 栈空间</span></span><br><span class=\"line\">StaticTask_t xTask3TCB;         <span class=\"comment\">// TCB任务块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">xTaskCreateStatic</span>(Task3Function, <span class=\"string\">&quot;Task3&quot;</span>, <span class=\"number\">100</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">1</span>, xTask3Stack, &amp;xTask3TCB);</span><br></pre></td></tr></table></figure>\n<h3 id=\"任务优先级\">任务优先级</h3>\n<p>freertos是数字越小优先级越低，优先级的取值范围是：0~(configMAX_PRIORITIES – 1)</p>\n<h4 id=\"tick中断\">tick中断</h4>\n<p><img src=\"https://s2.loli.net/2024/07/10/snU475bkLgiSIEq.png\" alt=\"一张图\"></p>\n<h3 id=\"任务的删除\">任务的删除</h3>\n<h4 id=\"函数原形\">函数原形</h4>\n<p><code>void vTaskDelete( TaskHandle_t xTaskToDelete );</code></p>\n<p>传入的参数是任务句柄<br>\n使用xTaskCreate创建任务时可以得到一个句柄。也可传入NULL，这表示删除自己。</p>\n<ol>\n<li>自杀： vTaskDelete(NULL)</li>\n<li>被杀：别的任务执行 vTaskDelete(pvTaskCode) ，pvTaskCode是自己的句柄</li>\n<li>杀人：执行 vTaskDelete(pvTaskCode) ，pvTaskCode是别的任务的句柄、</li>\n</ol>\n<div class=\"note info flat\"><p>（1）任务自杀通常由任务自己主动发起，而删除其他任务是由系统中的某个任务请求删除另一个任务。<br>\n（2）在实际应用中，需要根据具体的需求和设计来选择使用哪种方法。在任何情况下，都需要确保在删除任务之前，已经合理地释放了任务占用的资源，以避免资源泄漏和系统不稳定性。删除任务释放的资源要考虑以下内容：</p>\n<ol>\n<li>避免删除正在执行的任务：尽量避免删除正在执行的任务，因为这可能导致未定义的行为。通常，应该在目标任务主动结束执行或者在任务的代码中检查某些条件后再请求删除。</li>\n<li>处理资源释放：确保在删除任务之前释放任务使用的资源。这包括释放动态分配的内存、关闭文件句柄、释放占用的硬件资源等。如果任务在删除时仍然占用资源，可能会导致资源泄漏或系统不稳定。</li>\n<li>处理同步和互斥：如果目标任务与其他任务之间存在同步或互斥关系，确保在删除任务之前解除这些关系，以免引起竞态条件或死锁。</li>\n<li>避免删除空闲任务：在 FreeRTOS 中，空闲任务（Idle Task）用于在系统没有其他任务需要执行时运行。删除空闲任务可能导致系统无法正常工作，应该谨慎使用。例如，任务删除之后的堆栈释放，是在空闲任务中执行，当空闲任务删除之后，堆栈将需要通过其他任务手动释放，这样将会增加工作量。</li>\n</ol>\n</div>\n<h3 id=\"任务状态\">任务状态</h3>\n<p>学习过操作系统就很简单，直接看例子:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Task1Function</span><span class=\"params\">(<span class=\"type\">void</span> * param)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tTickType_t tStart = <span class=\"built_in\">xTaskGetTickCount</span>();</span><br><span class=\"line\">\tTickType_t t;</span><br><span class=\"line\">\t<span class=\"type\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tt = <span class=\"built_in\">xTaskGetTickCount</span>();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ttask1flagrun = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttask2flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttask3flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!flag &amp;&amp; (t &gt; tStart + <span class=\"number\">10</span>))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">vTaskSuspend</span>(xHandleTask3);</span><br><span class=\"line\">\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (t &gt; tStart + <span class=\"number\">20</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">vTaskResume</span>(xHandleTask3);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Task2Function</span><span class=\"params\">(<span class=\"type\">void</span> * param)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttask1flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttask2flagrun = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttask3flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">vTaskDelay</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Task3Function</span><span class=\"params\">(<span class=\"type\">void</span> * param)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttask1flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttask2flagrun = <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\ttask3flagrun = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.loli.net/2024/07/10/knL9HAC1QbuE2Rc.png\" alt=\"结果\"></p>\n<h3 id=\"空闲任务及钩子函数\">空闲任务及钩子函数</h3>\n<p>看这个例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Task1Function</span><span class=\"params\">(<span class=\"type\">void</span> * param)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tTaskHandle_t xHandleTask2;</span><br><span class=\"line\">\tBaseType_t xReturn;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttask1flagrun = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttask2flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttaskidleflagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">\t\txReturn = <span class=\"built_in\">xTaskCreate</span>(Task2Function, <span class=\"string\">&quot;Task2&quot;</span>, <span class=\"number\">1024</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">2</span>, &amp;xHandleTask2);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (xReturn != pdPASS)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;xTaskCreate err\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//vTaskDelete(xHandleTask2);</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Task2Function</span><span class=\"params\">(<span class=\"type\">void</span> * param)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttask1flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttask2flagrun = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttaskidleflagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//vTaskDelay(2);</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">vTaskDelete</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>任务1会反复创建任务2，任务2执行自杀，不能完成清理尸体，需要空闲任务进行清空(自杀由空闲任务处理实体，他杀由杀者处理实体)</p>\n<p>空闲任务(Idle任务)的作用：释放被删除的任务的内存。<br>\n一个良好的程序，它的任务都是事件驱动的：平时大部分时间处于阻塞状态。有可能我们自己创建的所有任务都无法执行，但是调度器必须能找到一个可以运<br>\n行的任务：所以，我们要提供空闲任务。在使用 vTaskStartScheduler() 函数来创建、启动调度器时，这个函数内部会创建空闲任务：</p>\n<ol>\n<li>空闲任务优先级为0：它不能阻碍用户任务运行</li>\n<li>空闲任务要么处于就绪态，要么处于运行态，永远不会阻塞</li>\n<li>空闲任务的优先级为0，这以为着一旦某个用户的任务变为就绪态，那么空闲任务马上被切换出去，让这个用户任务运行。在这种情况下，我们说用户任务&quot;抢占&quot;(pre-empt)了空闲任务，这是由调度器实现的。</li>\n</ol>\n<p><strong>如果使用 vTaskDelete() 来删除任务，那么你就要确保空闲任务有机会执行，否则就无法释放被删除任务的内存</strong></p>\n<h4 id=\"钩子\">钩子</h4>\n<p>我们可以添加一个空闲任务的钩子函数(Idle Task Hook Functions)，空闲任务的循环没执行一次，就会调用一次钩子函数。</p>\n<p>钩子函数的作用有这些：</p>\n<ol>\n<li>执行一些低优先级的、后台的、需要连续执行的函数测量系统的空闲时间：</li>\n<li>空闲任务能被执行就意味着所有的高优先级任务都停止了，所以测量空闲任务占据的时间，就可以算出处理器占用率。</li>\n<li>让系统进入省电模式：空闲任务能被执行就意味着没有重要的事情要做，当然可以进入省电模式</li>\n</ol>\n<p>空闲任务的钩子函数的限制：</p>\n<ol>\n<li>不能导致空闲任务进入阻塞状态、暂停状态</li>\n<li>如果你会使用 vTaskDelete() 来删除任务，那么钩子函数要非常高效地执行。如果空闲任务移植</li>\n<li>卡在钩子函数里的话，它就无法释放内存。</li>\n</ol>\n<h2 id=\"delay函数\">delay函数</h2>\n<p>有两个Delay函数：</p>\n<ul>\n<li>vTaskDelay：至少等待指定个数的Tick Interrupt才能变为就绪状态</li>\n<li>vTaskDelayUntil：等待到指定的绝对时刻，才能变为就绪态。</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2024/07/10/2HDKAez7MGtjvTF.png\" alt=\"说明\"></p>\n<h2 id=\"任务调度算法\">任务调度算法</h2>\n<h3 id=\"配置调度算法\">配置调度算法</h3>\n<p>通过配置文件FreeRTOSConfig.h的两个配置项来配置调度算法：configUSE_PREEMPTION、configUSE_TIME_SLICING</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_PREEMPTION\t\t1    <span class=\"comment\">// 支持抢占</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_TIME_SLICING      1    <span class=\"comment\">// 同优先级的任务交替执行</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configIDLE_SHOULD_YIELD\t\t1    <span class=\"comment\">// 空闲任务让步</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"抢占\">抢占</h3>\n<ul>\n<li>抢占时：高优先级任务就绪时，就可以马上执行</li>\n<li>不抢占时：优先级失去意义了，既然不能抢占就只能协商了，一个任务执行，其他任务都无法执行。即使其他任务已经超时、即使它的优先级更高，都没办法执行。</li>\n</ul>\n<h3 id=\"时间片\">时间片</h3>\n<ul>\n<li>时间片轮转：在Tick中断中会引起任务切换</li>\n<li>时间片不轮转：高优先级任务就绪时会引起任务切换，高优先级任务不再运行时也会引起任务切换。</li>\n</ul>\n<h3 id=\"空闲任务让步\">空闲任务让步</h3>\n<p>让步时：假如设置空闲任务为无限循环，则在空闲任务的每个循环中，会主动让出处理器<br>\n不让步时：空闲任务跟其他任务同等待遇</p>\n<h2 id=\"同步互斥与通信概述\">同步互斥与通信概述</h2>\n<p>能实现同步、互斥的内核方法有：任务通知(task notification)、队列(queue)、事件组(event group)、信号量(semaphoe)、互斥量(mutex)。</p>\n<p>它们都有类似的操作方法：获取/释放、阻塞/唤醒、超时。比如：<br>\nA获取资源，用完后A释放资源<br>\nA获取不到资源则阻塞，B释放资源并把A唤醒<br>\nA获取不到资源则阻塞，并定个闹钟；A要么超时返回，要么在这段时间内因为B释放资源而被唤醒。</p>\n<p><img src=\"https://s2.loli.net/2024/07/11/l8GZUzmsYNAq9H5.png\" alt=\"说明\"></p>\n<h2 id=\"队列\">队列</h2>\n<p>队列其实是一个环形缓冲区，定义如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">QueueDefinition</span> <span class=\"comment\">/* The old naming convention is used to prevent breaking kernel aware debuggers. */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int8_t</span> * pcHead;           <span class=\"comment\">/*&lt; Points to the beginning of the queue storage area. */</span></span><br><span class=\"line\">    <span class=\"type\">int8_t</span> * pcWriteTo;        <span class=\"comment\">/*&lt; Points to the free next place in the storage area. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        QueuePointers_t xQueue;     <span class=\"comment\">/*&lt; Data required exclusively when this structure is used as a queue. */</span></span><br><span class=\"line\">        SemaphoreData_t xSemaphore; <span class=\"comment\">/*&lt; Data required exclusively when this structure is used as a semaphore. */</span></span><br><span class=\"line\">    &#125; u;</span><br><span class=\"line\"></span><br><span class=\"line\">    List_t xTasksWaitingToSend;             <span class=\"comment\">/*&lt; List of tasks that are blocked waiting to post onto this queue.  Stored in priority order. */</span></span><br><span class=\"line\">    List_t xTasksWaitingToReceive;          <span class=\"comment\">/*&lt; List of tasks that are blocked waiting to read from this queue.  Stored in priority order. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> UBaseType_t uxMessagesWaiting; <span class=\"comment\">/*&lt; The number of items currently in the queue. */</span></span><br><span class=\"line\">    UBaseType_t uxLength;                   <span class=\"comment\">/*&lt; The length of the queue defined as the number of items it will hold, not the number of bytes. */</span></span><br><span class=\"line\">    UBaseType_t uxItemSize;                 <span class=\"comment\">/*&lt; The size of each items that the queue will hold. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">int8_t</span> cRxLock;                <span class=\"comment\">/*&lt; Stores the number of items received from the queue (removed from the queue) while the queue was locked.  Set to queueUNLOCKED when the queue is not locked. */</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">int8_t</span> cTxLock;                <span class=\"comment\">/*&lt; Stores the number of items transmitted to the queue (added to the queue) while the queue was locked.  Set to queueUNLOCKED when the queue is not locked. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">if</span> ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) &amp;&amp; ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )</span></span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> ucStaticallyAllocated; <span class=\"comment\">/*&lt; Set to pdTRUE if the memory used by the queue was statically allocated to ensure no attempt is made to free the memory. */</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">if</span> ( configUSE_QUEUE_SETS == 1 )</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">QueueDefinition</span> * pxQueueSetContainer;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">if</span> ( configUSE_TRACE_FACILITY == 1 )</span></span><br><span class=\"line\">        UBaseType_t uxQueueNumber;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> ucQueueType;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125; xQUEUE;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用队列的流程：创建队列、写队列、读队列、删除队列。</p>\n<h3 id=\"创建\">创建</h3>\n<p><img src=\"https://s2.loli.net/2024/07/11/tdR6ZbWU5TAsPGg.png\" alt=\"动态创建队列\"><br>\n<img src=\"https://s2.loli.net/2024/07/11/9HQwarTkceNI5Ud.png\" alt=\"静态创建队列\"></p>\n<h3 id=\"写\">写</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 等同于xQueueSendToBack</span></span><br><span class=\"line\"><span class=\"comment\">* 往队列尾部写入数据，如果没有空间，阻塞时间为xTicksToWait</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueSend</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">void</span> *pvItemToQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">TickType_t xTicksToWait</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 往队列尾部写入数据，如果没有空间，阻塞时间为xTicksToWait</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueSendToBack</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">void</span> *pvItemToQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">TickType_t xTicksToWait</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 往队列尾部写入数据，此函数可以在中断函数中使用，不可阻塞</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueSendToBackFromISR</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">void</span> *pvItemToQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">BaseType_t *pxHigherPriorityTaskWoken</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 往队列头部写入数据，如果没有空间，阻塞时间为xTicksToWait</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueSendToFront</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">void</span> *pvItemToQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">TickType_t xTicksToWait</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 往队列头部写入数据，此函数可以在中断函数中使用，不可阻塞</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueSendToFrontFromISR</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">void</span> *pvItemToQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">BaseType_t *pxHigherPriorityTaskWoken</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.loli.net/2024/07/11/d9ctCQiL7PY6upg.png\" alt=\"写\"></p>\n<h3 id=\"读\">读</h3>\n<p>使用 xQueueReceive() 函数读队列，读到一个数据后，队列中该数据会被移除。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueReceive</span><span class=\"params\">( QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">void</span> * <span class=\"type\">const</span> pvBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">TickType_t xTicksToWait )</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueReceiveFromISR</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">void</span> *pvBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">BaseType_t *pxTaskWoken</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.loli.net/2024/07/11/1iSsAB3rMFQqLoT.png\" alt=\"读\"></p>\n<h3 id=\"删除队列\">删除队列</h3>\n<p>删除队列的函数为 vQueueDelete() ，只能删除使用动态方法创建的队列，它会释放内存。</p>\n<h3 id=\"复位\">复位</h3>\n<p>队列刚被创建时，里面没有数据；使用过程中可以调用 xQueueReset() 把队列恢复为初始状态</p>\n<h2 id=\"信号量\">信号量</h2>\n<p>只需要传递状态，并不需要传递具体的信息，这个时候就可以使用信号量</p>\n<h3 id=\"两种信号量\">两种信号量</h3>\n<p>信号量的计数值都有限制：限定了最大值。如果最大值被限定为1，那么它就是二进制信号量；<br>\n如果最大值不是1，它就是计数型信号量。</p>\n<h3 id=\"信号量创建\">信号量创建</h3>\n<p>使用信号量之前，要先创建，得到一个句柄；使用信号量时，要使用句柄来表明使用哪个信号量。<br>\n对于二进制信号量、计数型信号量，它们的创建函数不一样：</p>\n<p>二进制信号量：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 创建一个二进制信号量，返回它的句柄。</span></span><br><span class=\"line\"><span class=\"comment\">* 此函数内部会分配信号量结构体</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回句柄，非NULL表示成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">SemaphoreHandle_t <span class=\"title\">xSemaphoreCreateBinary</span><span class=\"params\">( <span class=\"type\">void</span> )</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* 创建一个二进制信号量，返回它的句柄。</span></span><br><span class=\"line\"><span class=\"comment\">* 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回句柄，非NULL表示成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">SemaphoreHandle_t <span class=\"title\">xSemaphoreCreateBinaryStatic</span><span class=\"params\">( StaticSemaphore_t *pxSemaphoreBuffer )</span></span>;</span><br></pre></td></tr></table></figure>\n<p>计数型信号量:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 创建一个计数型信号量，返回它的句柄。</span></span><br><span class=\"line\"><span class=\"comment\">* 此函数内部会分配信号量结构体</span></span><br><span class=\"line\"><span class=\"comment\">* uxMaxCount: 最大计数值</span></span><br><span class=\"line\"><span class=\"comment\">* uxInitialCount: 初始计数值</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回句柄，非NULL表示成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">SemaphoreHandle_t <span class=\"title\">xSemaphoreCreateCounting</span><span class=\"params\">(UBaseType_t uxMaxCount, UBaseType_t</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">uxInitialCount)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* 创建一个计数型信号量，返回它的句柄。</span></span><br><span class=\"line\"><span class=\"comment\">* 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针</span></span><br><span class=\"line\"><span class=\"comment\">* uxMaxCount: 最大计数值</span></span><br><span class=\"line\"><span class=\"comment\">* uxInitialCount: 初始计数值</span></span><br><span class=\"line\"><span class=\"comment\">* pxSemaphoreBuffer: StaticSemaphore_t结构体指针</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回句柄，非NULL表示成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">SemaphoreHandle_t <span class=\"title\">xSemaphoreCreateCountingStatic</span><span class=\"params\">( UBaseType_t uxMaxCount,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                    UBaseType_t uxInitialCount,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                    StaticSemaphore_t</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">*pxSemaphoreBuffer )</span></span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"信号量的删除\">信号量的删除</h3>\n<p>对于动态创建的信号量，不再需要它们时，可以删除它们以回收内存。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* xSemaphore: 信号量句柄，你要删除哪个信号量</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">vSemaphoreDelete</span><span class=\"params\">( SemaphoreHandle_t xSemaphore )</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"give\">give</h3>\n<p>释放信号量<br>\n需要注意，信号量的释放都是立即返回的。只有获取信号量才会进行阻塞等待。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  释放信号量</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  xSemaphore 要释放的信号量句柄</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @return  释放成功，返回pdTRUE。否则返回 pdFALSE。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xSemaphoreGive</span><span class=\"params\">( SemaphoreHandle_t xSemaphore )</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"take\">take</h3>\n<p>获取信号量</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  获取信号量</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  xSemaphore   要获取的信号量句柄</span></span><br><span class=\"line\"><span class=\"comment\"> *        -xTicksToWait 超时时间，0 表示立即返回，portMAX_DELAY表示无限等待, 一直阻塞直到成功</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @return  成功获取信号量，返回pdPASS。否则返回pdFALSE</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xSemaphoreTake</span><span class=\"params\">( SemaphoreHandle_t xSemaphore,TickType_t xTicksToWait )</span></span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"互斥量\">互斥量</h2>\n<p>互斥量能够解决优先级反转问题，而信号量不行。</p>\n<p>互斥量也被称为互斥锁，使用过程如下：<br>\n互斥量初始值为1<br>\n任务A想访问临界资源，先获得并占有互斥量，然后开始访问<br>\n任务B也想访问临界资源，也要先获得互斥量：被别人占有了，于是阻塞<br>\n任务A使用完毕，释放互斥量；任务B被唤醒、得到并占有互斥量，然后开始访问临界资源<br>\n任务B使用完毕，释放互斥量</p>\n<h3 id=\"互斥量的创建\">互斥量的创建</h3>\n<p>使用互斥量时，先创建、然后去获得、释放它。使用句柄来表示一个互斥量。各类操作函数，比如删除、give/take，跟一般是信号量是一样的。但是要注意互斥量不能在ISR中使用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 创建一个互斥量，返回它的句柄。</span></span><br><span class=\"line\"><span class=\"comment\">* 此函数内部会分配互斥量结构体</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回句柄，非NULL表示成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">SemaphoreHandle_t <span class=\"title\">xSemaphoreCreateMutex</span><span class=\"params\">( <span class=\"type\">void</span> )</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* 创建一个互斥量，返回它的句柄。</span></span><br><span class=\"line\"><span class=\"comment\">* 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回句柄，非NULL表示成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">SemaphoreHandle_t <span class=\"title\">xSemaphoreCreateMutexStatic</span><span class=\"params\">( StaticSemaphore_t *pxMutexBuffer</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>使用互斥量，需要在配置文件FreeRTOSConfig.h中定义：<br>\n<code>##define configUSE_MUTEXES 1</code></p>\n<h2 id=\"队列集\">队列集</h2>\n<p>队列只能存放同一种类型的数据，那如果我们需要在任务之间传输不同类型的消息，应该如何处理呢？例如遥控车，可能是按键式的遥控器（传输的是整型数据），也可能会兼容遥感式的遥控器（传输的是浮点数据）。这两种遥控器都能够控制小车，那么应当如何进行数据传输呢？</p>\n<p><strong>队列集的本质也是队列，只不过里面存放的是队列句柄，而不是数据。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QueueSetHandle_t <span class=\"title\">xQueueCreateSet</span><span class=\"params\">( <span class=\"type\">const</span> UBaseType_t uxEventQueueLength )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">QueueSetHandle_t pxQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpxQueue = <span class=\"built_in\">xQueueGenericCreate</span>( uxEventQueueLength, ( UBaseType_t ) <span class=\"built_in\">sizeof</span>( Queue_t * ), queueQUEUE_TYPE_SET );</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pxQueue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"事件组\">事件组</h2>\n<p>事件组可以用下面的图进行解释<br>\n<img src=\"https://s2.loli.net/2024/07/18/mYKQapgxXolw7Zq.png\" alt=\"事件组原理\"><br>\n其创建和删除跟之前的互斥等类型相同，都是以handle为依据，主要是事件组的设置和等待事件</p>\n<h3 id=\"设置事件\">设置事件</h3>\n<p>可以设置事件组的某个位、某些位，使用的函数有2个：<br>\n在任务中使用 xEventGroupSetBits()<br>\n在ISR中使用 xEventGroupSetBitsFromISR()<br>\n有一个或多个任务在等待事件，如果这些事件符合这些任务的期望，那么任务还会被唤醒。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 设置事件组中的位</span></span><br><span class=\"line\"><span class=\"comment\">* xEventGroup: 哪个事件组</span></span><br><span class=\"line\"><span class=\"comment\">* uxBitsToSet: 设置哪些位?</span></span><br><span class=\"line\"><span class=\"comment\">* 如果uxBitsToSet的bitX, bitY为1, 那么事件组中的bitX, bitY被设置为1</span></span><br><span class=\"line\"><span class=\"comment\">* 可以用来设置多个位，比如 0x15 就表示设置bit4, bit2, bit0</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回原来的事件值(没什么意义, 因为很可能已经被其他任务修改了)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">EventBits_t <span class=\"title\">xEventGroupSetBits</span><span class=\"params\">( EventGroupHandle_t xEventGroup,<span class=\"type\">const</span> EventBits_t uxBitsToSet )</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* 设置事件组中的位</span></span><br><span class=\"line\"><span class=\"comment\">* xEventGroup: 哪个事件组</span></span><br><span class=\"line\"><span class=\"comment\">* uxBitsToSet: 设置哪些位?</span></span><br><span class=\"line\"><span class=\"comment\">* 如果uxBitsToSet的bitX, bitY为1, 那么事件组中的bitX, bitY被设置为1</span></span><br><span class=\"line\"><span class=\"comment\">* 可以用来设置多个位，比如 0x15 就表示设置bit4, bit2, bit0</span></span><br><span class=\"line\"><span class=\"comment\">* pxHigherPriorityTaskWoken: 有没有导致更高优先级的任务进入就绪态? pdTRUE-有,</span></span><br><span class=\"line\"><span class=\"comment\">pdFALSE-没有</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: pdPASS-成功, pdFALSE-失败</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xEventGroupSetBitsFromISR</span><span class=\"params\">( EventGroupHandle_t xEventGroup,<span class=\"type\">const</span> EventBits_t uxBitsToSet, BaseType_t * pxHigherPriorityTaskWoken )</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"等待事件\">等待事件</h3>\n<p>使用 xEventGroupWaitBits 来等待事件，可以等待某一位、某些位中的任意一个，也可以等待多位；<br>\n等到期望的事件后，还可以清除某些位。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">EventBits_t <span class=\"title\">xEventGroupWaitBits</span><span class=\"params\">( EventGroupHandle_t xEventGroup,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"type\">const</span> EventBits_t uxBitsToWaitFor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"type\">const</span> BaseType_t xClearOnExit,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"type\">const</span> BaseType_t xWaitForAllBits,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TickType_t xTicksToWait )</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.loli.net/2024/07/18/94Xf5Cdvjnth3r2.png\" alt=\"说明\"><br>\n可以使用 xEventGroupWaitBits() 等待期望的事件，它发生之后再使用 xEventGroupClearBits()<br>\n来清除。但是这两个函数之间，有可能被其他任务或中断抢占，它们可能会修改事件组。</p>\n<p>可以使用设置 xClearOnExit 为pdTRUE，使得对事件组的测试、清零都在 xEventGroupWaitBits()<br>\n函数内部完成，这是一个原子操作。</p>\n<h3 id=\"同步点\">同步点</h3>\n<div class=\"note info flat\"><p>有一个事情需要多个任务协同，比如：<br>\n任务A：炒菜<br>\n任务B：买酒<br>\n任务C：摆台<br>\nA、B、C做好自己的事后，还要等别人做完；大家一起做完，才可开饭</p>\n</div>\n<p>使用 xEventGroupSync() 函数可以同步多个任务：<br>\n可以设置某位、某些位，表示自己做了什么事。<br>\n可以等待某位、某些位，表示要等等其他任务。<br>\n期望的时间发生后， xEventGroupSync() 才会成功返回。<br>\nxEventGroupSync 成功返回后，会清除事件。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">EventBits_t <span class=\"title\">xEventGroupSync</span><span class=\"params\">( EventGroupHandle_t xEventGroup,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"type\">const</span> EventBits_t uxBitsToSet,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"type\">const</span> EventBits_t uxBitsToWaitFor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        TickType_t xTicksToWait )</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.loli.net/2024/07/18/vQXBRWighezVK2L.png\" alt=\"说明\"></p>\n<h2 id=\"任务通知\">任务通知</h2>\n<p>使用队列、信号量、事件组等等方法时，并不知道对方是谁。使用任务通知时，可以明确指定：通知哪个任务。<br>\n使用队列、信号量、事件组时，我们都要事先创建对应的结构体，双方通过中间的结构体通信：使用任务通知时，任务结构体TCB中就包含了内部对象，可以直接接收别人发过来的&quot;通知&quot;：</p>\n<p>任务通知的优势：<br>\n效率更高：使用任务通知来发送事件、数据给某个任务时，效率更高。比队列、信号量、事件组都<br>\n有大的优势。<br>\n更节省内存：使用其他方法时都要先创建对应的结构体，使用任务通知时无需额外创建结构体。</p>\n<h3 id=\"通知状态和通知值\">通知状态和通知值</h3>\n<p>每个任务都有一个结构体：TCB(Task Control Block)，里面有2个成员：<br>\n一个是uint8_t类型，用来表示通知状态<br>\n一个是uint32_t类型，用来表示通知值</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tskTaskControlBlock</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"comment\">/* configTASK_NOTIFICATION_ARRAY_ENTRIES = 1 */</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"type\">uint32_t</span> ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];</span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"type\">uint8_t</span> ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];</span><br><span class=\"line\">......</span><br><span class=\"line\">&#125; tskTCB;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>taskNOT_WAITING_NOTIFICATION：任务没有在等待通知</li>\n<li>taskWAITING_NOTIFICATION：任务在等待通知</li>\n<li>taskNOTIFICATION_RECEIVED：任务接收到了通知，也被称为pending(有数据了，待处理)</li>\n</ul>\n<h1>开发</h1>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>学习</h1>\n<h2 id=\"堆\">堆</h2>\n<p>堆，heap，就是一块空闲的内存，需要提供管理函数</p>\n<ul>\n<li>malloc：从堆里划出一块空间给程序使用</li>\n<li>free：用完后，再把它标记为&quot;空闲&quot;的，可以再次使用s</li>\n</ul>\n<h2 id=\"栈\">栈</h2>\n<p>栈，stack，函数调用时局部变量保存在栈中，当前程序的环境也是保存在栈中<br>\n可以从堆中分配一块空间用作栈</p>\n<h2 id=\"源码结构\">源码结构</h2>\n<h3 id=\"目录结构\">目录结构</h3>\n<p><img src=\"https://s2.loli.net/2024/07/10/7f9cvzYARSsqjtx.png\" alt=\"代码结构\"></p>\n<h3 id=\"核心\">核心</h3>\n<p>FreeRTOS的最核心文件只有2个：</p>\n<ul>\n<li>FreeRTOS/Source/tasks.c</li>\n<li>FreeRTOS/Source/list.c</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>FreeRTOS/source/下的文件</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>task.c</td>\n<td>必须，任务操作</td>\n</tr>\n<tr>\n<td>list.c</td>\n<td>必须，列表</td>\n</tr>\n<tr>\n<td>queue.c</td>\n<td>基本必须，提供队列操作、信号量操作</td>\n</tr>\n<tr>\n<td>timer.c</td>\n<td>可选，software timer</td>\n</tr>\n<tr>\n<td>event_groups.c</td>\n<td>可选，提供event group功能</td>\n</tr>\n<tr>\n<td>croutine.c</td>\n<td>可选，基本过时</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"代码规范\">代码规范</h2>\n<p><img src=\"https://s2.loli.net/2024/07/10/1lvz8NeSyaOxLT3.png\" alt=\"变量命名\"><br>\n<img src=\"https://s2.loli.net/2024/07/10/WcDqbwXBUAxj9Ei.png\" alt=\"函数名\"></p>\n<h2 id=\"创建任务函数详解\">创建任务函数详解</h2>\n<h3 id=\"任务函数原形\">任务函数原形</h3>\n<p>任务就是一个函数，原型如下：<br>\n<code>void ATaskFunction( void *pvParameters );</code></p>\n<h3 id=\"任务创建\">任务创建</h3>\n<p>在FreeRTOS中，任务可以通过静态创建和动态创建两种方式来实现。他们只有在任务创建的初期和能否释放栈有区别，最终使用是一模一样的。</p>\n<p>静态创建的任务，栈是存放在数组里面的。因此静态创建任务的栈无法释放，在编译初期就定好了。<br>\n动态创建的任务，栈是通过类似malloc的函数实现的，也就是堆区域。堆是可以通过类似free函数释放的。</p>\n<p><strong>栈的空间分配是重中之重</strong>，关乎到每个任务函数内部使用的空间</p>\n<h4 id=\"两种创建方式如何抉择\">两种创建方式如何抉择</h4>\n<ol>\n<li>\n<p>选择静态创建还是动态创建取决于应用的具体需求。如果你的任务具备以下特征，就推荐使用静态创建任务：<br>\n任务的数量和属性在编译时就确定，不需要动态创建或删除任务。<br>\n任务的栈空间需求可以预先估计，不需要动态调整。<br>\n堆空间有限，或者想要节省堆空间。<br>\n对任务创建的速度和可靠性有较高的要求。</p>\n</li>\n<li>\n<p>当你的任务具备以下特征，就推荐使用动态创建任务：<br>\n任务的数量和属性在运行时才确定，需要动态创建或删除任务。<br>\n任务的栈空间需求难以预先估计，需要动态调整。<br>\n堆空间充足，或者不在乎堆空间的占用。<br>\n对任务创建的速度和可靠性没有较高的要求。</p>\n</li>\n</ol>\n<h4 id=\"动态分配\">动态分配</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xTaskCreate</span><span class=\"params\">( TaskFunction_t pxTaskCode,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"type\">const</span> <span class=\"type\">char</span> * <span class=\"type\">const</span> pcName, <span class=\"comment\">/*lint !e971 Unqualified char types are allowed for strings and single characters only. */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"type\">const</span> configSTACK_DEPTH_TYPE usStackDepth,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"type\">void</span> * <span class=\"type\">const</span> pvParameters,                <span class=\"comment\">//参数</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            UBaseType_t uxPriority,                   <span class=\"comment\">//优先级</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            TaskHandle_t * <span class=\"type\">const</span> pxCreatedTask )</span>      <span class=\"comment\">//任务控制块-&gt; TCB的指针</span></span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.loli.net/2024/07/10/WKEtjmyd1gB2OMC.png\" alt=\"说明\"></p>\n<p>例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">xTaskCreate</span>(Task1Function, <span class=\"string\">&quot;Task1&quot;</span>, <span class=\"number\">100</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">1</span>, &amp;xHandleTask1);</span><br><span class=\"line\"><span class=\"built_in\">xTaskCreate</span>(Task2Function, <span class=\"string\">&quot;Task2&quot;</span>, <span class=\"number\">100</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">1</span>, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"静态分配\">静态分配</h4>\n<p>TCB结构体需要实现分配好，栈也需要首先分配好</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">TaskHandle_t <span class=\"title\">xTaskCreateStatic</span><span class=\"params\">( TaskFunction_t pxTaskCode,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                <span class=\"type\">const</span> <span class=\"type\">char</span> * <span class=\"type\">const</span> pcName, <span class=\"comment\">/*lint !e971 Unqualified char types are allowed for strings and single characters only. */</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                <span class=\"type\">const</span> <span class=\"type\">uint32_t</span> ulStackDepth,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                <span class=\"type\">void</span> * <span class=\"type\">const</span> pvParameters,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                UBaseType_t uxPriority,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                StackType_t * <span class=\"type\">const</span> puxStackBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                StaticTask_t * <span class=\"type\">const</span> pxTaskBuffer )</span></span></span><br></pre></td></tr></table></figure>\n<p>为了防止</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">StackType_t xIdleTaskStack[<span class=\"number\">100</span>];</span><br><span class=\"line\">StaticTask_t xIdleTaskTCB;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">vApplicationGetIdleTaskMemory</span><span class=\"params\">( StaticTask_t ** ppxIdleTaskTCBBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                    StackType_t ** ppxIdleTaskStackBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                    <span class=\"type\">uint32_t</span> * pulIdleTaskStackSize )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    *ppxIdleTaskTCBBuffer = &amp;xIdleTaskTCB;</span><br><span class=\"line\">    *ppxIdleTaskStackBuffer = xIdleTaskStack;</span><br><span class=\"line\">    *pulIdleTaskStackSize = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">StackType_t xTask3Stack[<span class=\"number\">100</span>];   <span class=\"comment\">// 栈空间</span></span><br><span class=\"line\">StaticTask_t xTask3TCB;         <span class=\"comment\">// TCB任务块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">xTaskCreateStatic</span>(Task3Function, <span class=\"string\">&quot;Task3&quot;</span>, <span class=\"number\">100</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">1</span>, xTask3Stack, &amp;xTask3TCB);</span><br></pre></td></tr></table></figure>\n<h3 id=\"任务优先级\">任务优先级</h3>\n<p>freertos是数字越小优先级越低，优先级的取值范围是：0~(configMAX_PRIORITIES – 1)</p>\n<h4 id=\"tick中断\">tick中断</h4>\n<p><img src=\"https://s2.loli.net/2024/07/10/snU475bkLgiSIEq.png\" alt=\"一张图\"></p>\n<h3 id=\"任务的删除\">任务的删除</h3>\n<h4 id=\"函数原形\">函数原形</h4>\n<p><code>void vTaskDelete( TaskHandle_t xTaskToDelete );</code></p>\n<p>传入的参数是任务句柄<br>\n使用xTaskCreate创建任务时可以得到一个句柄。也可传入NULL，这表示删除自己。</p>\n<ol>\n<li>自杀： vTaskDelete(NULL)</li>\n<li>被杀：别的任务执行 vTaskDelete(pvTaskCode) ，pvTaskCode是自己的句柄</li>\n<li>杀人：执行 vTaskDelete(pvTaskCode) ，pvTaskCode是别的任务的句柄、</li>\n</ol>\n<div class=\"note info flat\"><p>（1）任务自杀通常由任务自己主动发起，而删除其他任务是由系统中的某个任务请求删除另一个任务。<br>\n（2）在实际应用中，需要根据具体的需求和设计来选择使用哪种方法。在任何情况下，都需要确保在删除任务之前，已经合理地释放了任务占用的资源，以避免资源泄漏和系统不稳定性。删除任务释放的资源要考虑以下内容：</p>\n<ol>\n<li>避免删除正在执行的任务：尽量避免删除正在执行的任务，因为这可能导致未定义的行为。通常，应该在目标任务主动结束执行或者在任务的代码中检查某些条件后再请求删除。</li>\n<li>处理资源释放：确保在删除任务之前释放任务使用的资源。这包括释放动态分配的内存、关闭文件句柄、释放占用的硬件资源等。如果任务在删除时仍然占用资源，可能会导致资源泄漏或系统不稳定。</li>\n<li>处理同步和互斥：如果目标任务与其他任务之间存在同步或互斥关系，确保在删除任务之前解除这些关系，以免引起竞态条件或死锁。</li>\n<li>避免删除空闲任务：在 FreeRTOS 中，空闲任务（Idle Task）用于在系统没有其他任务需要执行时运行。删除空闲任务可能导致系统无法正常工作，应该谨慎使用。例如，任务删除之后的堆栈释放，是在空闲任务中执行，当空闲任务删除之后，堆栈将需要通过其他任务手动释放，这样将会增加工作量。</li>\n</ol>\n</div>\n<h3 id=\"任务状态\">任务状态</h3>\n<p>学习过操作系统就很简单，直接看例子:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Task1Function</span><span class=\"params\">(<span class=\"type\">void</span> * param)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tTickType_t tStart = <span class=\"built_in\">xTaskGetTickCount</span>();</span><br><span class=\"line\">\tTickType_t t;</span><br><span class=\"line\">\t<span class=\"type\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tt = <span class=\"built_in\">xTaskGetTickCount</span>();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ttask1flagrun = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttask2flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttask3flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!flag &amp;&amp; (t &gt; tStart + <span class=\"number\">10</span>))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">vTaskSuspend</span>(xHandleTask3);</span><br><span class=\"line\">\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (t &gt; tStart + <span class=\"number\">20</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">vTaskResume</span>(xHandleTask3);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Task2Function</span><span class=\"params\">(<span class=\"type\">void</span> * param)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttask1flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttask2flagrun = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttask3flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">vTaskDelay</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Task3Function</span><span class=\"params\">(<span class=\"type\">void</span> * param)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttask1flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttask2flagrun = <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\ttask3flagrun = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.loli.net/2024/07/10/knL9HAC1QbuE2Rc.png\" alt=\"结果\"></p>\n<h3 id=\"空闲任务及钩子函数\">空闲任务及钩子函数</h3>\n<p>看这个例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Task1Function</span><span class=\"params\">(<span class=\"type\">void</span> * param)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tTaskHandle_t xHandleTask2;</span><br><span class=\"line\">\tBaseType_t xReturn;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttask1flagrun = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttask2flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttaskidleflagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">\t\txReturn = <span class=\"built_in\">xTaskCreate</span>(Task2Function, <span class=\"string\">&quot;Task2&quot;</span>, <span class=\"number\">1024</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">2</span>, &amp;xHandleTask2);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (xReturn != pdPASS)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;xTaskCreate err\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//vTaskDelete(xHandleTask2);</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Task2Function</span><span class=\"params\">(<span class=\"type\">void</span> * param)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttask1flagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttask2flagrun = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttaskidleflagrun = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//vTaskDelay(2);</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">vTaskDelete</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>任务1会反复创建任务2，任务2执行自杀，不能完成清理尸体，需要空闲任务进行清空(自杀由空闲任务处理实体，他杀由杀者处理实体)</p>\n<p>空闲任务(Idle任务)的作用：释放被删除的任务的内存。<br>\n一个良好的程序，它的任务都是事件驱动的：平时大部分时间处于阻塞状态。有可能我们自己创建的所有任务都无法执行，但是调度器必须能找到一个可以运<br>\n行的任务：所以，我们要提供空闲任务。在使用 vTaskStartScheduler() 函数来创建、启动调度器时，这个函数内部会创建空闲任务：</p>\n<ol>\n<li>空闲任务优先级为0：它不能阻碍用户任务运行</li>\n<li>空闲任务要么处于就绪态，要么处于运行态，永远不会阻塞</li>\n<li>空闲任务的优先级为0，这以为着一旦某个用户的任务变为就绪态，那么空闲任务马上被切换出去，让这个用户任务运行。在这种情况下，我们说用户任务&quot;抢占&quot;(pre-empt)了空闲任务，这是由调度器实现的。</li>\n</ol>\n<p><strong>如果使用 vTaskDelete() 来删除任务，那么你就要确保空闲任务有机会执行，否则就无法释放被删除任务的内存</strong></p>\n<h4 id=\"钩子\">钩子</h4>\n<p>我们可以添加一个空闲任务的钩子函数(Idle Task Hook Functions)，空闲任务的循环没执行一次，就会调用一次钩子函数。</p>\n<p>钩子函数的作用有这些：</p>\n<ol>\n<li>执行一些低优先级的、后台的、需要连续执行的函数测量系统的空闲时间：</li>\n<li>空闲任务能被执行就意味着所有的高优先级任务都停止了，所以测量空闲任务占据的时间，就可以算出处理器占用率。</li>\n<li>让系统进入省电模式：空闲任务能被执行就意味着没有重要的事情要做，当然可以进入省电模式</li>\n</ol>\n<p>空闲任务的钩子函数的限制：</p>\n<ol>\n<li>不能导致空闲任务进入阻塞状态、暂停状态</li>\n<li>如果你会使用 vTaskDelete() 来删除任务，那么钩子函数要非常高效地执行。如果空闲任务移植</li>\n<li>卡在钩子函数里的话，它就无法释放内存。</li>\n</ol>\n<h2 id=\"delay函数\">delay函数</h2>\n<p>有两个Delay函数：</p>\n<ul>\n<li>vTaskDelay：至少等待指定个数的Tick Interrupt才能变为就绪状态</li>\n<li>vTaskDelayUntil：等待到指定的绝对时刻，才能变为就绪态。</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2024/07/10/2HDKAez7MGtjvTF.png\" alt=\"说明\"></p>\n<h2 id=\"任务调度算法\">任务调度算法</h2>\n<h3 id=\"配置调度算法\">配置调度算法</h3>\n<p>通过配置文件FreeRTOSConfig.h的两个配置项来配置调度算法：configUSE_PREEMPTION、configUSE_TIME_SLICING</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_PREEMPTION\t\t1    <span class=\"comment\">// 支持抢占</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_TIME_SLICING      1    <span class=\"comment\">// 同优先级的任务交替执行</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configIDLE_SHOULD_YIELD\t\t1    <span class=\"comment\">// 空闲任务让步</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"抢占\">抢占</h3>\n<ul>\n<li>抢占时：高优先级任务就绪时，就可以马上执行</li>\n<li>不抢占时：优先级失去意义了，既然不能抢占就只能协商了，一个任务执行，其他任务都无法执行。即使其他任务已经超时、即使它的优先级更高，都没办法执行。</li>\n</ul>\n<h3 id=\"时间片\">时间片</h3>\n<ul>\n<li>时间片轮转：在Tick中断中会引起任务切换</li>\n<li>时间片不轮转：高优先级任务就绪时会引起任务切换，高优先级任务不再运行时也会引起任务切换。</li>\n</ul>\n<h3 id=\"空闲任务让步\">空闲任务让步</h3>\n<p>让步时：假如设置空闲任务为无限循环，则在空闲任务的每个循环中，会主动让出处理器<br>\n不让步时：空闲任务跟其他任务同等待遇</p>\n<h2 id=\"同步互斥与通信概述\">同步互斥与通信概述</h2>\n<p>能实现同步、互斥的内核方法有：任务通知(task notification)、队列(queue)、事件组(event group)、信号量(semaphoe)、互斥量(mutex)。</p>\n<p>它们都有类似的操作方法：获取/释放、阻塞/唤醒、超时。比如：<br>\nA获取资源，用完后A释放资源<br>\nA获取不到资源则阻塞，B释放资源并把A唤醒<br>\nA获取不到资源则阻塞，并定个闹钟；A要么超时返回，要么在这段时间内因为B释放资源而被唤醒。</p>\n<p><img src=\"https://s2.loli.net/2024/07/11/l8GZUzmsYNAq9H5.png\" alt=\"说明\"></p>\n<h2 id=\"队列\">队列</h2>\n<p>队列其实是一个环形缓冲区，定义如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">QueueDefinition</span> <span class=\"comment\">/* The old naming convention is used to prevent breaking kernel aware debuggers. */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int8_t</span> * pcHead;           <span class=\"comment\">/*&lt; Points to the beginning of the queue storage area. */</span></span><br><span class=\"line\">    <span class=\"type\">int8_t</span> * pcWriteTo;        <span class=\"comment\">/*&lt; Points to the free next place in the storage area. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        QueuePointers_t xQueue;     <span class=\"comment\">/*&lt; Data required exclusively when this structure is used as a queue. */</span></span><br><span class=\"line\">        SemaphoreData_t xSemaphore; <span class=\"comment\">/*&lt; Data required exclusively when this structure is used as a semaphore. */</span></span><br><span class=\"line\">    &#125; u;</span><br><span class=\"line\"></span><br><span class=\"line\">    List_t xTasksWaitingToSend;             <span class=\"comment\">/*&lt; List of tasks that are blocked waiting to post onto this queue.  Stored in priority order. */</span></span><br><span class=\"line\">    List_t xTasksWaitingToReceive;          <span class=\"comment\">/*&lt; List of tasks that are blocked waiting to read from this queue.  Stored in priority order. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> UBaseType_t uxMessagesWaiting; <span class=\"comment\">/*&lt; The number of items currently in the queue. */</span></span><br><span class=\"line\">    UBaseType_t uxLength;                   <span class=\"comment\">/*&lt; The length of the queue defined as the number of items it will hold, not the number of bytes. */</span></span><br><span class=\"line\">    UBaseType_t uxItemSize;                 <span class=\"comment\">/*&lt; The size of each items that the queue will hold. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">int8_t</span> cRxLock;                <span class=\"comment\">/*&lt; Stores the number of items received from the queue (removed from the queue) while the queue was locked.  Set to queueUNLOCKED when the queue is not locked. */</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">int8_t</span> cTxLock;                <span class=\"comment\">/*&lt; Stores the number of items transmitted to the queue (added to the queue) while the queue was locked.  Set to queueUNLOCKED when the queue is not locked. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">if</span> ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) &amp;&amp; ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )</span></span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> ucStaticallyAllocated; <span class=\"comment\">/*&lt; Set to pdTRUE if the memory used by the queue was statically allocated to ensure no attempt is made to free the memory. */</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">if</span> ( configUSE_QUEUE_SETS == 1 )</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">QueueDefinition</span> * pxQueueSetContainer;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">if</span> ( configUSE_TRACE_FACILITY == 1 )</span></span><br><span class=\"line\">        UBaseType_t uxQueueNumber;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> ucQueueType;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125; xQUEUE;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用队列的流程：创建队列、写队列、读队列、删除队列。</p>\n<h3 id=\"创建\">创建</h3>\n<p><img src=\"https://s2.loli.net/2024/07/11/tdR6ZbWU5TAsPGg.png\" alt=\"动态创建队列\"><br>\n<img src=\"https://s2.loli.net/2024/07/11/9HQwarTkceNI5Ud.png\" alt=\"静态创建队列\"></p>\n<h3 id=\"写\">写</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 等同于xQueueSendToBack</span></span><br><span class=\"line\"><span class=\"comment\">* 往队列尾部写入数据，如果没有空间，阻塞时间为xTicksToWait</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueSend</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">void</span> *pvItemToQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">TickType_t xTicksToWait</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 往队列尾部写入数据，如果没有空间，阻塞时间为xTicksToWait</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueSendToBack</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">void</span> *pvItemToQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">TickType_t xTicksToWait</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 往队列尾部写入数据，此函数可以在中断函数中使用，不可阻塞</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueSendToBackFromISR</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">void</span> *pvItemToQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">BaseType_t *pxHigherPriorityTaskWoken</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 往队列头部写入数据，如果没有空间，阻塞时间为xTicksToWait</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueSendToFront</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">void</span> *pvItemToQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">TickType_t xTicksToWait</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 往队列头部写入数据，此函数可以在中断函数中使用，不可阻塞</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueSendToFrontFromISR</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">void</span> *pvItemToQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">BaseType_t *pxHigherPriorityTaskWoken</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.loli.net/2024/07/11/d9ctCQiL7PY6upg.png\" alt=\"写\"></p>\n<h3 id=\"读\">读</h3>\n<p>使用 xQueueReceive() 函数读队列，读到一个数据后，队列中该数据会被移除。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueReceive</span><span class=\"params\">( QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">void</span> * <span class=\"type\">const</span> pvBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">TickType_t xTicksToWait )</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xQueueReceiveFromISR</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">QueueHandle_t xQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">void</span> *pvBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">BaseType_t *pxTaskWoken</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.loli.net/2024/07/11/1iSsAB3rMFQqLoT.png\" alt=\"读\"></p>\n<h3 id=\"删除队列\">删除队列</h3>\n<p>删除队列的函数为 vQueueDelete() ，只能删除使用动态方法创建的队列，它会释放内存。</p>\n<h3 id=\"复位\">复位</h3>\n<p>队列刚被创建时，里面没有数据；使用过程中可以调用 xQueueReset() 把队列恢复为初始状态</p>\n<h2 id=\"信号量\">信号量</h2>\n<p>只需要传递状态，并不需要传递具体的信息，这个时候就可以使用信号量</p>\n<h3 id=\"两种信号量\">两种信号量</h3>\n<p>信号量的计数值都有限制：限定了最大值。如果最大值被限定为1，那么它就是二进制信号量；<br>\n如果最大值不是1，它就是计数型信号量。</p>\n<h3 id=\"信号量创建\">信号量创建</h3>\n<p>使用信号量之前，要先创建，得到一个句柄；使用信号量时，要使用句柄来表明使用哪个信号量。<br>\n对于二进制信号量、计数型信号量，它们的创建函数不一样：</p>\n<p>二进制信号量：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 创建一个二进制信号量，返回它的句柄。</span></span><br><span class=\"line\"><span class=\"comment\">* 此函数内部会分配信号量结构体</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回句柄，非NULL表示成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">SemaphoreHandle_t <span class=\"title\">xSemaphoreCreateBinary</span><span class=\"params\">( <span class=\"type\">void</span> )</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* 创建一个二进制信号量，返回它的句柄。</span></span><br><span class=\"line\"><span class=\"comment\">* 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回句柄，非NULL表示成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">SemaphoreHandle_t <span class=\"title\">xSemaphoreCreateBinaryStatic</span><span class=\"params\">( StaticSemaphore_t *pxSemaphoreBuffer )</span></span>;</span><br></pre></td></tr></table></figure>\n<p>计数型信号量:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 创建一个计数型信号量，返回它的句柄。</span></span><br><span class=\"line\"><span class=\"comment\">* 此函数内部会分配信号量结构体</span></span><br><span class=\"line\"><span class=\"comment\">* uxMaxCount: 最大计数值</span></span><br><span class=\"line\"><span class=\"comment\">* uxInitialCount: 初始计数值</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回句柄，非NULL表示成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">SemaphoreHandle_t <span class=\"title\">xSemaphoreCreateCounting</span><span class=\"params\">(UBaseType_t uxMaxCount, UBaseType_t</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">uxInitialCount)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* 创建一个计数型信号量，返回它的句柄。</span></span><br><span class=\"line\"><span class=\"comment\">* 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针</span></span><br><span class=\"line\"><span class=\"comment\">* uxMaxCount: 最大计数值</span></span><br><span class=\"line\"><span class=\"comment\">* uxInitialCount: 初始计数值</span></span><br><span class=\"line\"><span class=\"comment\">* pxSemaphoreBuffer: StaticSemaphore_t结构体指针</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回句柄，非NULL表示成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">SemaphoreHandle_t <span class=\"title\">xSemaphoreCreateCountingStatic</span><span class=\"params\">( UBaseType_t uxMaxCount,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                    UBaseType_t uxInitialCount,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                    StaticSemaphore_t</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">*pxSemaphoreBuffer )</span></span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"信号量的删除\">信号量的删除</h3>\n<p>对于动态创建的信号量，不再需要它们时，可以删除它们以回收内存。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* xSemaphore: 信号量句柄，你要删除哪个信号量</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">vSemaphoreDelete</span><span class=\"params\">( SemaphoreHandle_t xSemaphore )</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"give\">give</h3>\n<p>释放信号量<br>\n需要注意，信号量的释放都是立即返回的。只有获取信号量才会进行阻塞等待。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  释放信号量</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  xSemaphore 要释放的信号量句柄</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @return  释放成功，返回pdTRUE。否则返回 pdFALSE。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xSemaphoreGive</span><span class=\"params\">( SemaphoreHandle_t xSemaphore )</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"take\">take</h3>\n<p>获取信号量</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  获取信号量</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  xSemaphore   要获取的信号量句柄</span></span><br><span class=\"line\"><span class=\"comment\"> *        -xTicksToWait 超时时间，0 表示立即返回，portMAX_DELAY表示无限等待, 一直阻塞直到成功</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @return  成功获取信号量，返回pdPASS。否则返回pdFALSE</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xSemaphoreTake</span><span class=\"params\">( SemaphoreHandle_t xSemaphore,TickType_t xTicksToWait )</span></span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"互斥量\">互斥量</h2>\n<p>互斥量能够解决优先级反转问题，而信号量不行。</p>\n<p>互斥量也被称为互斥锁，使用过程如下：<br>\n互斥量初始值为1<br>\n任务A想访问临界资源，先获得并占有互斥量，然后开始访问<br>\n任务B也想访问临界资源，也要先获得互斥量：被别人占有了，于是阻塞<br>\n任务A使用完毕，释放互斥量；任务B被唤醒、得到并占有互斥量，然后开始访问临界资源<br>\n任务B使用完毕，释放互斥量</p>\n<h3 id=\"互斥量的创建\">互斥量的创建</h3>\n<p>使用互斥量时，先创建、然后去获得、释放它。使用句柄来表示一个互斥量。各类操作函数，比如删除、give/take，跟一般是信号量是一样的。但是要注意互斥量不能在ISR中使用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 创建一个互斥量，返回它的句柄。</span></span><br><span class=\"line\"><span class=\"comment\">* 此函数内部会分配互斥量结构体</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回句柄，非NULL表示成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">SemaphoreHandle_t <span class=\"title\">xSemaphoreCreateMutex</span><span class=\"params\">( <span class=\"type\">void</span> )</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* 创建一个互斥量，返回它的句柄。</span></span><br><span class=\"line\"><span class=\"comment\">* 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回句柄，非NULL表示成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">SemaphoreHandle_t <span class=\"title\">xSemaphoreCreateMutexStatic</span><span class=\"params\">( StaticSemaphore_t *pxMutexBuffer</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>使用互斥量，需要在配置文件FreeRTOSConfig.h中定义：<br>\n<code>##define configUSE_MUTEXES 1</code></p>\n<h2 id=\"队列集\">队列集</h2>\n<p>队列只能存放同一种类型的数据，那如果我们需要在任务之间传输不同类型的消息，应该如何处理呢？例如遥控车，可能是按键式的遥控器（传输的是整型数据），也可能会兼容遥感式的遥控器（传输的是浮点数据）。这两种遥控器都能够控制小车，那么应当如何进行数据传输呢？</p>\n<p><strong>队列集的本质也是队列，只不过里面存放的是队列句柄，而不是数据。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QueueSetHandle_t <span class=\"title\">xQueueCreateSet</span><span class=\"params\">( <span class=\"type\">const</span> UBaseType_t uxEventQueueLength )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">QueueSetHandle_t pxQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpxQueue = <span class=\"built_in\">xQueueGenericCreate</span>( uxEventQueueLength, ( UBaseType_t ) <span class=\"built_in\">sizeof</span>( Queue_t * ), queueQUEUE_TYPE_SET );</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pxQueue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"事件组\">事件组</h2>\n<p>事件组可以用下面的图进行解释<br>\n<img src=\"https://s2.loli.net/2024/07/18/mYKQapgxXolw7Zq.png\" alt=\"事件组原理\"><br>\n其创建和删除跟之前的互斥等类型相同，都是以handle为依据，主要是事件组的设置和等待事件</p>\n<h3 id=\"设置事件\">设置事件</h3>\n<p>可以设置事件组的某个位、某些位，使用的函数有2个：<br>\n在任务中使用 xEventGroupSetBits()<br>\n在ISR中使用 xEventGroupSetBitsFromISR()<br>\n有一个或多个任务在等待事件，如果这些事件符合这些任务的期望，那么任务还会被唤醒。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 设置事件组中的位</span></span><br><span class=\"line\"><span class=\"comment\">* xEventGroup: 哪个事件组</span></span><br><span class=\"line\"><span class=\"comment\">* uxBitsToSet: 设置哪些位?</span></span><br><span class=\"line\"><span class=\"comment\">* 如果uxBitsToSet的bitX, bitY为1, 那么事件组中的bitX, bitY被设置为1</span></span><br><span class=\"line\"><span class=\"comment\">* 可以用来设置多个位，比如 0x15 就表示设置bit4, bit2, bit0</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: 返回原来的事件值(没什么意义, 因为很可能已经被其他任务修改了)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">EventBits_t <span class=\"title\">xEventGroupSetBits</span><span class=\"params\">( EventGroupHandle_t xEventGroup,<span class=\"type\">const</span> EventBits_t uxBitsToSet )</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/* 设置事件组中的位</span></span><br><span class=\"line\"><span class=\"comment\">* xEventGroup: 哪个事件组</span></span><br><span class=\"line\"><span class=\"comment\">* uxBitsToSet: 设置哪些位?</span></span><br><span class=\"line\"><span class=\"comment\">* 如果uxBitsToSet的bitX, bitY为1, 那么事件组中的bitX, bitY被设置为1</span></span><br><span class=\"line\"><span class=\"comment\">* 可以用来设置多个位，比如 0x15 就表示设置bit4, bit2, bit0</span></span><br><span class=\"line\"><span class=\"comment\">* pxHigherPriorityTaskWoken: 有没有导致更高优先级的任务进入就绪态? pdTRUE-有,</span></span><br><span class=\"line\"><span class=\"comment\">pdFALSE-没有</span></span><br><span class=\"line\"><span class=\"comment\">* 返回值: pdPASS-成功, pdFALSE-失败</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">BaseType_t <span class=\"title\">xEventGroupSetBitsFromISR</span><span class=\"params\">( EventGroupHandle_t xEventGroup,<span class=\"type\">const</span> EventBits_t uxBitsToSet, BaseType_t * pxHigherPriorityTaskWoken )</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"等待事件\">等待事件</h3>\n<p>使用 xEventGroupWaitBits 来等待事件，可以等待某一位、某些位中的任意一个，也可以等待多位；<br>\n等到期望的事件后，还可以清除某些位。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">EventBits_t <span class=\"title\">xEventGroupWaitBits</span><span class=\"params\">( EventGroupHandle_t xEventGroup,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"type\">const</span> EventBits_t uxBitsToWaitFor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"type\">const</span> BaseType_t xClearOnExit,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"type\">const</span> BaseType_t xWaitForAllBits,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TickType_t xTicksToWait )</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.loli.net/2024/07/18/94Xf5Cdvjnth3r2.png\" alt=\"说明\"><br>\n可以使用 xEventGroupWaitBits() 等待期望的事件，它发生之后再使用 xEventGroupClearBits()<br>\n来清除。但是这两个函数之间，有可能被其他任务或中断抢占，它们可能会修改事件组。</p>\n<p>可以使用设置 xClearOnExit 为pdTRUE，使得对事件组的测试、清零都在 xEventGroupWaitBits()<br>\n函数内部完成，这是一个原子操作。</p>\n<h3 id=\"同步点\">同步点</h3>\n<div class=\"note info flat\"><p>有一个事情需要多个任务协同，比如：<br>\n任务A：炒菜<br>\n任务B：买酒<br>\n任务C：摆台<br>\nA、B、C做好自己的事后，还要等别人做完；大家一起做完，才可开饭</p>\n</div>\n<p>使用 xEventGroupSync() 函数可以同步多个任务：<br>\n可以设置某位、某些位，表示自己做了什么事。<br>\n可以等待某位、某些位，表示要等等其他任务。<br>\n期望的时间发生后， xEventGroupSync() 才会成功返回。<br>\nxEventGroupSync 成功返回后，会清除事件。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">EventBits_t <span class=\"title\">xEventGroupSync</span><span class=\"params\">( EventGroupHandle_t xEventGroup,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"type\">const</span> EventBits_t uxBitsToSet,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"type\">const</span> EventBits_t uxBitsToWaitFor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        TickType_t xTicksToWait )</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.loli.net/2024/07/18/vQXBRWighezVK2L.png\" alt=\"说明\"></p>\n<h2 id=\"任务通知\">任务通知</h2>\n<p>使用队列、信号量、事件组等等方法时，并不知道对方是谁。使用任务通知时，可以明确指定：通知哪个任务。<br>\n使用队列、信号量、事件组时，我们都要事先创建对应的结构体，双方通过中间的结构体通信：使用任务通知时，任务结构体TCB中就包含了内部对象，可以直接接收别人发过来的&quot;通知&quot;：</p>\n<p>任务通知的优势：<br>\n效率更高：使用任务通知来发送事件、数据给某个任务时，效率更高。比队列、信号量、事件组都<br>\n有大的优势。<br>\n更节省内存：使用其他方法时都要先创建对应的结构体，使用任务通知时无需额外创建结构体。</p>\n<h3 id=\"通知状态和通知值\">通知状态和通知值</h3>\n<p>每个任务都有一个结构体：TCB(Task Control Block)，里面有2个成员：<br>\n一个是uint8_t类型，用来表示通知状态<br>\n一个是uint32_t类型，用来表示通知值</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tskTaskControlBlock</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"comment\">/* configTASK_NOTIFICATION_ARRAY_ENTRIES = 1 */</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"type\">uint32_t</span> ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];</span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"type\">uint8_t</span> ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];</span><br><span class=\"line\">......</span><br><span class=\"line\">&#125; tskTCB;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>taskNOT_WAITING_NOTIFICATION：任务没有在等待通知</li>\n<li>taskWAITING_NOTIFICATION：任务在等待通知</li>\n<li>taskNOTIFICATION_RECEIVED：任务接收到了通知，也被称为pending(有数据了，待处理)</li>\n</ul>\n<h1>开发</h1>\n"},{"title":"Nginx学习笔记","abbrlink":39886,"date":"2024-03-14T12:42:53.000Z","_content":"","source":"_posts/Nginx学习笔记.md","raw":"---\ntitle: Nginx学习笔记\nabbrlink: 39886\ndate: 2024-03-14 20:42:53\ntags:\n---\n","slug":"Nginx学习笔记","published":1,"updated":"2024-03-14T13:14:51.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6inx000rmkttaq9z3q4e","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqu1jr-0.webp","cover_type":"img","excerpt":"","more":""},{"title":"OpenIPC开发文档","abbrlink":9117,"date":"2025-01-09T07:13:14.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqt6nt-0.webp","swiper_index":null,"_content":"\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/1/9 -->\n通过 TFTP 和 UART 逐步安装 OpenIPC 固件。\n<!-- endtimeline -->\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n{% link 参考文章, https://github.com/OpenIPC/wiki/blob/master/en/installation.md, https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp %} \n# 说明\n核心就是利用网络摄像头，而且网络监控的市场很大，网络摄像头可选择的范围很大，可以根据主控芯片、图像传感器的型号，以及板载的串口（刷鞋固件、通信），USB(连接WIFI网卡)的情况自由选择\n我这里选择的是 **SigmaStar SsC338Q  分辨率4K@20FPS  内置2Gb DDR3**\n\n# 架构：\n![架构](https://image.aruoshui.fun/i/2025/01/02/sf653e-0.webp)\n# 我的工作任务：\n- 硬件环境的搭建\n  - openipc固件的烧写\n  - 天空端电路搭建\n  - 地面端环境的烧写\n- 固件的编译和编译脚本\n- 裁剪的openipc linux内核中执行启动脚本的过程\n- rtl8812网卡天空端驱动（内核配置的）、rtl8812au地面端驱动（开源项目）\n- 摄像头驱动（开源的），视频编码器（闭源方案）\n- wfb-ng数据链路\n- 地面端解码方案（安卓、linux、嵌入式开发板）\n\n# 固件安装\n这里是利用的TFTP和UART来安装固件\n### SoC识别\nSoC（系统级芯片）包括相机的 CPU 内核以及所有必要的外围设备，例如相机和网络接口。**这部分由摄像头厂商确定**，需要看IC标记丝印来查看，或者使用ipctool软件识别SoC型号\n\n### 闪存芯片大小\n通常是摄像头8引脚的一个芯片，可以通过U-boot启动过程确认，也可以查看丝印（丝印包含64，即是8M，包含128，即16M）\n\n### TFTP服务器\nTFTP（Trivial File Transfer Protocol）服务器是一种简单的文件传输协议服务器，用于在网络设备之间传输文件。与FTP（File Transfer Protocol）相比，TFTP更轻量级，通常用于在局域网（LAN）中传输小文件，如配置文件、固件更新等。 \n\n说白了就是用它来传固件的\n\n### 连接相机的UART端口\n最好是看摄像头手册 好用的就是一个usb转ttl的串口适配器\n![](https://image.aruoshui.fun/i/2025/01/13/xl7rg7-0.webp)\n\n将适配器上的引脚连接到 UART 端口的可能触点。使用标准电源适配器为相机供电。如果幸运，就可以在终端窗口中看到 Booting log。在某些情况下，如果在屏幕上看到乱码文本而不是引导内核，需要将连接速度更改为 57600 bps，然后重试。RX、TX\n\n\n### 访问bootloader\n通过按计算机键盘上的组合键来引导加载程序控制台， 在 bootloader 启动和 Linux 内核启动之前。 在上电的时候疯狂enter\n\n进入u-boot的命令行\n```powershell\nsetenv ipaddr 10.81.1.230;setenv serverip 10.81.1.102\nmw.b x21000000 x x1000000\ntftpboot 0x21000000 openipc-ssc338q-fpv-16mb.bin\ntftp 0x21000000 openipc-ssc338q-fpv-16mb.binsf probe 0;sf lock 0;\nsf erase 0x0 0x1000000;sf write 0x21000000 0x0 0x1000000\nreset\n```\n\n U-Boot 命令系列显示了一个典型的嵌入式系统启动流程，尤其是在网络启动（TFTP）和闪存操作方面的详细步骤。\n\n1. **`setenv ipaddr 10.81.1.230` 和 `setenv serverip 10.81.1.102`**\n这两个命令设置了 U-Boot 环境变量，用于指定网络设置,用于通过 TFTP 下载内核或文件系统镜像：\n   - **`ipaddr`**：这设置了 U-Boot 启动时使用的本机 IP 地址，`10.81.1.230` 是设备将会使用的 IP 地址。\n   - **`serverip`**：指定了 TFTP 服务器的 IP 地址，`10.81.1.102` 是存储内核镜像的服务器。\n1. **`mw.b x21000000 x x1000000`**\n    清空或初始化内存区域，确保内存中没有残留数据\n   - **`mw.b`** 是 U-Boot 中的 \"Memory Write Byte\" 命令，它用于在内存中写入数据。\n   - **`x21000000`** 是目标内存地址，这里是指将数据写入设备内存的地址 `0x21000000`（通常是设备的 RAM）。\n   - **`x`** 是要写入的值，代表数据的内容。\n   - **`x1000000`** 是写入的字节数，表示要写入的字节数为 `0x1000000`（即 16MB）。\n\n\n\n2. **`tftpboot 0x21000000 openipc-ssc338q-fpv-16mb.bin`**\n    通过网络从 `10.81.1.102` 服务器上获取 `openipc-ssc338q-fpv-16mb.bin` 文件，并将其存储到设备内存中，准备进行闪存写入。\n   - **`tftpboot`** 命令从 TFTP 服务器下载文件，并将文件加载到指定的内存地址。\n   - **`0x21000000`** 是目标内存地址，这里表示将下载的文件存储在内存地址 `0x21000000` 开始的位置。\n   - **`openipc-ssc338q-fpv-16mb.bin`** 是要下载的文件名，通常是嵌入式设备的固件或内核镜像文件。\n\n\n\n4. **`sf probe 0; sf lock 0;`**\n    在闪存上执行写入操作时，相关区域不会被意外覆盖。\n   - **`sf probe 0`**：初始化并识别闪存设备，`0` 是闪存设备的编号。在 U-Boot 中，`sf` 是指闪存（SPI Flash），这个命令确保设备能够识别并与闪存进行通信。\n   - **`sf lock 0`**：锁定闪存的第一个区域，通常用于防止闪存区域被意外擦除或写入。\n  \n5. **`sf erase 0x0 0x1000000`**\n    这个命令用于擦除闪存的特定区域，擦除操作确保闪存上的旧数据被清除，为写入新的镜像做准备。：\n   - **`sf erase 0x0 0x1000000`** 表示擦除从地址 `0x0` 开始，大小为 `0x1000000`（即 16MB）的闪存区域。\n  \n6. **`sf write 0x21000000 0x0 0x1000000`**\n   将内核镜像（或者其他固件文件）写入到设备的闪存中，为下次启动准备好内核。\n   - **`sf write`** 用于将数据从内存写入闪存。\n   - **`0x21000000`** 是内存中的数据起始地址，前面的 TFTP 操作已经将内核镜像存放在该地址。\n   - **`0x0`** 是闪存的起始地址，表示将数据写入闪存的第一个位置。\n   - **`0x1000000`** 是写入的字节数，表示将 16MB 的数据从内存写入闪存。\n\n\n\n7. **`reset`**\n   - **`reset`** 命令重启设备，使设备重新启动并从闪存或其他启动介质加载操作系统。\n\n\n\nU-Boot 命令，设备完成了以下操作：\n\n1. 配置了网络设置（`ipaddr` 和 `serverip`）。\n2. 清空并初始化了内存区域。\n3. 从 TFTP 服务器下载了一个固件镜像到内存。\n4. 对闪存进行了操作，包括擦除和写入内核镜像。\n5. 最终触发系统重启，准备从新写入的镜像启动。\n\n\n### 保存原始固件\n### 固件烧写\n### 串口登录设置\n### 网络配置及远程登录\n### 连接wifi网卡\n### 检查WiFi模块的识别情况\n### 生成和安装 WFB-NG 的密钥配对\n### 编辑 wfb.conf 以设置正确的 wifi 频道\n### 在相机上配置 majestic.yaml 文件\n\n# 视频延时组成\n\n视频链路：摄像头==》编码==》传输==》解码==》显示\n整个图传系统的延时主要是：编码延时、传输延时、解码延时：\n1. 摄像头数据采集延时(camera)\n2. 编码器编码延时(H264 codec)\n3. 无线网络延时(wfb_ng)： ~ 5ms\n4. 解码器解码延时(H264 decoder)\n5. 显示器刷新延时(monitor refresh rate)\n\n## 解码延时\n解码延时中包含\n- Wfb 解包时间\n- 内核队列延迟 \n- 硬件解码时间\n\n### gstreamer\nJetson 的 NVIDIA V4L2 解码器（如 nvv4l2decoder）通过专用硬件模块（如 NVDEC）实现 H.264/H.265 视频流的硬解码，显著降低 CPU 负载并减少处理延迟\n\n**V4L2 驱动：**\nV4L2 是 Linux 内核中用于视频设备的标准接口。\n- 用户空间程序（如 GStreamer）访问摄像头数据。\n- Jetson 平台上的 V4L2 驱动经过优化，能够直接将数据传递到硬件加速器（如 NVDEC 和 NVENC），从而减少 CPU 的负载。\n\n当摄像头驱动捕获到一帧数据后，会将其放入内核中的缓冲区队列中。GStreamer 应用程序通过 V4L2 接口从内核队列中读取数据。\n\n![v4l2](https://image.aruoshui.fun/i/2025/04/21/xce35n-0.webp)\n\n**GStreamer 缓冲区与网络弹性**\n\n动态缓冲管理：\n- 流媒体场景中，通过监听 GST_MESSAGE_BUFFERING 消息动态调整缓冲区大小。例如，当缓冲级别低于 100% 时暂停流水线，待缓冲恢复后继续播放，避免因网络波动导致的数据饥饿。\n\n时钟同步机制：\n- GStreamer 全局时钟（如 GST_CLOCK_TYPE_REALTIME）的丢失会触发重新同步。处理 GST_MESSAGE_CLOCK_LOST 消息时，需暂停并重启流水线以重建时钟基准。\n\n使用 queue 插件限制缓冲区大小\n`udpsrc port=5600 ! queue max-size-buffers=2 ! rtph265depay ! ...`\n\n基础的解码脚本：\n```powershell\n#!/bin/bash\ncurrent_date=$(date +'%Y%d%m_%H%M%S')\ncd ~/Videos\n\nif [[ $1 == \"save\" ]]\nthen\n\tgst-launch-1.0 -e udpsrc port=5600 caps='application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265' ! rtph265depay ! h265parse ! tee name=t ! queue ! mppvideodec ! xvimagesink sync=false t. ! queue ! matroskamux ! filesink location=record_${current_date}.mkv\nelse\n\tgst-launch-1.0 udpsrc port=5600 caps='application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265' ! rtph265depay ! h265parse ! mppvideodec ! xvimagesink sync=false\nfi\n\n```\n\n在 jetson 上查看是否调用硬件解码的方法是使用 jtop 工具，具体方法参考[《 NVIDIA查看CPU、内存、GPU使用情况 》](https://blog.csdn.net/zong596568821xp/article/details/80268034)\n\n[jetson上的硬件解码器](https://docs.nvidia.com/jetson/archives/r35.6.1/DeveloperGuide/SD/Multimedia/AcceleratedGstreamer.html)\n\n\n\n# 地面站\n## 接收端网卡\n目前开发的地面站支持的大多是rtl8812au这一款网卡（主要是网卡驱动问题）\n并支持monitor 模式\n\n## monitor模式\n### 什么是monitor模式\nWiFi Monitor模式需要WiFi芯片本身支持，并且驱动要支持相应的接口。\n\n在非Monitor模式 （平时正常使用的状态）下，内核会将802.11帧封装成普通网络帧传递给上层； 而在Monitor模式 下，内核则会直接将802.11帧传给上层，不会进行封装，用户层就通过接口拿到RAW包，可以按802.11帧格式进行包解析处理。\n\n在Linux内核中，hostap_80211_rx 函数是IEEE 802.11接收无线skb的tasklet函数，其作用是处理802.11网卡传递过来的数据包。倘若网卡被设置成monitor模式，该函数中会调用如下分支：\n```c\n if (local->iw_mode == IW_MODE_MONITOR) {\n\n    \n     monitor_rx(dev, skb, rx_stats);\n    \n     return;\n    \n }\n```\n在monitor_rx 函数中，主要是prism2_rx_80211 函数，将带有802.11头的skb直接发送给netif。netif为linux内核网络数据包的标准框架。在prism2_rx_80211中，在skb里补充了一个抓包的头，给用户提供更多的包信息。这个头对应的数据结构为linux_wlan_ng_cap_hdr ，具体声明如下：\n```c\n struct linux_wlan_ng_cap_hdr {\n\n    \n     __be32 version;\n    \n     __be32 length;\n    \n     __be64 mactime;\n    \n     __be64 hosttime;\n    \n     __be32 phytype;\n    \n     __be32 channel;\n    \n     __be32 datarate;\n    \n     __be32 antenna;\n    \n     __be32 priority;\n    \n     __be32 ssi_type;\n    \n     __be32 ssi_signal;\n    \n     __be32 ssi_noise;\n    \n     __be32 preamble;\n    \n     __be32 encoding;\n    \n } __packed;\n```\n### 如何开启\n使用如下命令可以实现：\n`iwconfig wlan0 mode Monitor`\n其调用了如下ioctl来配置：\n`ret = ioctl(skfd, SIOCSIWMODE, &wrq);`\n对应的配置模式，通过wrq参数来定义。而上面的skfd则由下面操作获取：\n`skfd = socket(AF_INET, SOCK_DGRAM, 0);`\n\n\n## 网卡选择\n网卡官方支持：\nRTL8812AU、ar9271、rtl8812eu\n\nhttps://forums.developer.nvidia.com/t/rtl8822ce-access-point-mode/288083\n板载算力板上的网卡型号为rtl8812CE，不支持monitor mode\n\n\n## WIfibroadcast的原理分析：\n### 远距离wifi技术：\n{% link Wi-Fi极限谈1：最大传输距离的“标准”答案, https://zhuanlan.zhihu.com/p/121872101,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n2.4GHz 频率\nRSSI（Received Signal Strength Indicator）值代表设备接收到的信号强度，通常用负值表示。RSSI 值范围一般如下：\n\n接近 0（如 -30）: 信号非常强，设备与信号源的距离较近。\n中等值（如 -50 至 -70）: 信号质量良好，适合正常通信。\n较弱值（如 -80 至 -90）: 信号较弱，可能会影响通信质量。\n非常弱（小于 -90）: 信号几乎不可用，设备可能会断开连接。\n解读你的 RSSI 值\n你当前的 RSSI 值是 -41：\n\n这是一个非常强的信号，表示设备离信号源很近，通信质量应该非常好。\n\npkt/s代表每秒传输的数据包数量（packets per second）。这是一种衡量网络性能的指标，用于表示网络接口在一秒钟内可以发送或接收的数据包的数量。这个数值可以帮助评估网络的负载情况和传输效率。较高的pkt/s值意味着网络接口能够处理更多的数据包\n\n8 Mbps (MCS #1 调制) 涉及到的是无线网络通信中的两个概念：数据传输速率和调制编码方案（MCS，Modulation and Coding Scheme）。\n\n1. **8 Mbps**：指的是数据传输速率，即每秒可以传输的数据量为8兆比特。这是一个衡量网络速度的指标，表示理论上一秒钟内可以传送8兆比特（Mb）的数据。\n\n2. **MCS #1**：MCS代表调制编码方案，它用于指定在无线通信中使用的调制方式和编码率。不同的MCS索引号对应着不同的调制方式和编码率组合，从而影响数据传输速率和可靠性。MCS #1通常指使用相对较低复杂度的调制和编码策略，以确保更稳定的传输质量，特别是在信号条件不是最优的情况下。\n\n对于802.11n标准（Wi-Fi 4），MCS #1一般对应于使用BPSK（二进制相移键控）调制和1/2编码率。这意味着每个符号携带1个比特的信息，并且有一半的数据位被用于前向纠错编码，以增强数据传输的可靠性。在单空间流（Single Spatial Stream）和20 MHz带宽的条件下，这种配置可以达到大约7.2 Mbps到8 Mbps的数据传输速率。\n\n因此，“8 Mbps (MCS #1调制)”意味着在网络使用特定的调制和编码设置（在此例中为MCS #1，涉及BPSK调制和1/2编码率）时，能够实现的最大理论数据传输速率为8 Mbps。需要注意的是，实际传输速率可能会受到环境因素、设备性能等多种因素的影响。\n\n\n#### 目标板配置\n`devices/ssc338q_fpv_openipc-urllc-aio/br-ext-chip-sigmastar/configs/ssc338q_fpv_openipc-urllc-aio_defconfig#L103`\n\n`BR2_PACKAGE_WIFIBROADCAST=y`配置好选项\n\n#### 软件版配置\n`general/package/wifibroadcast/wifibroadcast.mk#L7`\n\n`WIFIBROADCAST_VERSION = 24.08`\n\n#### 视频数据发送 & 接收\n\n`general/package/wifibroadcast/files/wifibroadcast#L109-L117`\n\n运行：\n```powershell\nstart_drone_wfb() {\n\twfb_tx -p \"$stream\" -u \"$udp_port\" -R \"$rcv_buf\" -K \"$keydir/$unit.key\" -B \"$bandwidth\" \\\n\t\t-M \"$mcs_index\" -S \"$stbc\" -L \"$ldpc\" -G \"$guard_interval\" -k \"$fec_k\" -n \"$fec_n\" \\\n\t\t-T \"$pool_timeout\" -i \"$link_id\" -f \"$frame_type\" -C 8000 \"$wlan\" > /dev/null &\n}\n\nstart_gs_wfb() {\n\twfb_rx -c \"$udp_addr\" -u \"$udp_port\" -p \"$stream\" -K \"$keydir/$unit.key\" -i \"$link_id\" \"$wlan\" > /dev/null &\n}\n```\n\n\n### datalink\n`devices/ssc338q_fpv_openipc-urllc-aio/br-ext-chip-sigmastar/configs/ssc338q_fpv_openipc-urllc-aio_defconfig#L102`\n\nBR2_PACKAGE_DATALINK=y\n\n#### 软件版配置\n`general/package/datalink/files/telemetry#L13-L16`\n\n```powershell\nif [ ! -f /usr/bin/telemetry_rx ] && [ ! -f /usr/bin/telemetry_tx ]; then\n\tln -s /usr/bin/wfb_rx /usr/bin/telemetry_rx\n\tln -s /usr/bin/wfb_tx /usr/bin/telemetry_tx\nfi\n```\n\n`general/package/datalink/files/telemetry_drone.conf#L15-L20`\n\n```powershell\nstream_rx=144\nstream_tx=16\nlink_id=7669206\nframe_type=data\nport_rx=14551\nport_tx=14550\n```\n\n\n`general/package/datalink/files/telemetry_gs.conf#L15-L20`\n```powershell\nstream_rx=16\nstream_tx=144\nlink_id=7669206\nframe_type=data\nport_rx=14651\nport_tx=14650\n```\n\n#### 数据发送 & 接收\n```powershell\nstart_drone_telemetry() {\n\tif [ \"$one_way\" = \"false\" ]; then\n\t\ttelemetry_rx -p \"$stream_rx\" -u \"$port_rx\" -K \"$keydir/$unit.key\" -i \"$link_id\" \"$wlan\" > /dev/null &\n\tfi\n\ttelemetry_tx -p \"$stream_tx\" -u \"$port_tx\" -K \"$keydir/$unit.key\" -B \"$bandwidth\" \\\n\t\t-M \"$mcs_index\" -S \"$stbc\" -L \"$ldpc\" -G \"$guard_interval\" -k \"$fec_k\" -n \"$fec_n\" \\\n\t\t-T \"$pool_timeout\" -i \"$link_id\" -f \"$frame_type\" \"$wlan\" > /dev/null &\n}\n\nstart_gs_telemetry() {\n\tif [ \"$one_way\" = \"false\" ]; then\n\t\ttelemetry_tx -p \"$stream_tx\" -u \"$port_tx\" -K \"$keydir/$unit.key\" -B \"$bandwidth\" \\\n\t\t\t-M \"$mcs_index\" -S \"$stbc\" -L \"$ldpc\" -G \"$guard_interval\" -k \"$fec_k\" -n \"$fec_n\" \\\n\t\t\t-T \"$pool_timeout\" -i \"$link_id\" -f \"$frame_type\" \"$wlan\" > /dev/null &\n\tfi\n\ttelemetry_rx -p \"$stream_rx\" -u \"$port_rx\" -K \"$keydir/$unit.key\" -i \"$link_id\" \"$wlan\" > /dev/null &\n}\n```\n\n## 🧱 **WiFiBroadcast (WFB-TX) 架构分析图**\n\n```\nmain(int argc, char* const *argv)\n│\n├── 命令行参数解析（getopt）\n│    ├── 设置运行模式：LOCAL / DISTRIBUTOR / INJECTOR\n│    ├── FEC 参数：k, n, fec_delay, fec_timeout\n│    ├── 网络配置：UDP 端口 / Unix socket / 接收方地址列表\n│    ├── 加密参数：keypair 文件路径\n│    ├── 日志设置：log_interval\n│    ├── 控制接口：control_port\n│    └── 物理层参数：bandwidth, MCS index, VHT mode, STBC/LDPC 等\n│\n├── 系统熵检查（确保随机数安全）\n│    └── 检查 /dev/random 的熵池是否足够用于加密 key 生成\n│\n├── libsodium 初始化\n│    └── sodium_init()：初始化加密库，用于 FEC session key 和数据加密\n│\n├── radiotap header 初始化\n│    └── 根据物理层参数构造 IEEE80211_RADIOTAP_HDR，用于注入原始帧\n│\n├── 根据 tx_mode 启动不同主循环\n│\n│    ┌────────────────────────────────────────────────────────────┐\n│    │ case LOCAL: 本地发送模式（发射端）                        │\n│    │   ├─ 使用 local_loop_udp 或 local_loop_unix                │\n│    │   ├─ 打开 raw socket 向 wlanX 注入原始数据包               │\n│    │   └─ 创建 LocalTransmitter 实例负责 FEC 编码和加密         │\n│    │                                                            │\n│    │    ┌──────────────────────────────────────────────────┐    │\n│    │    │ LocalTransmitter                                  │    │\n│    │    │   ├── FEC 编码 (Reed-Solomon k/n)                 │    │\n│    │    │   ├── 数据分块与 FEC 分组                           │    │\n│    │    │   ├── 加密（使用 libsodium）                       │    │\n│    │    │   ├── 时间戳与 epoch 管理                          │    │\n│    │    │   └── tags 管理（用于 FEC block 标识）             │    │\n│    │    └──────────────────────────────────────────────────┘    │\n│    │                                                            │\n│    │    ┌──────────────────────────────────────────────────┐    │\n│    │    │ data_source_local(): 主事件循环                   │    │\n│    │    │   ├── 监听输入源（如 stdin 或 video pipe）        │    │\n│    │    │   ├── 触发 FEC 编码                               │    │\n│    │    │   ├── 发送 FEC block 到所有目标设备               │    │\n│    │    └──────────────────────────────────────────────────┘    │\n│    │                                                            │\n│    └────────────────────────────────────────────────────────────┘\n│\n│    ┌────────────────────────────────────────────────────────────┐\n│    │ case DISTRIBUTOR: 接收端（分布式接收器）                  │\n│    │   ├─ 使用 distributor_loop_udp 或 distributor_loop_unix    │\n│    │   ├─ 多路复用多个 UDP/Unix socket                         │\n│    │   └─ 创建 RemoteTransmitter 实例处理 FEC 解码              │\n│    │                                                            │\n│    │    ┌──────────────────────────────────────────────────┐    │\n│    │    │ RemoteTransmitter                              │    │\n│    │    │   ├── FEC 解码                                 │    │\n│    │    │   ├── 包重组                                   │    │\n│    │    │   ├── 支持 FEC 超时机制                        │    │\n│    │    │   └── 数据恢复并注入到 wlanX 设备              │    │\n│    │    └────────────────────────────────────────────────┘    │\n│    │                                                            │\n│    │    ┌──────────────────────────────────────────────────┐    │\n│    │    │ data_source(): 主事件循环                       │    │\n│    │    │   ├── 接收远程 FEC block                        │    │\n│    │    │   ├── FEC 解码并恢复丢失的数据包                │    │\n│    │    │   ├── 控制指令处理（修改 FEC 参数等）           │    │\n│    │    └────────────────────────────────────────────────┘    │\n│    │                                                            │\n│    └────────────────────────────────────────────────────────────┘\n│\n│    ┌────────────────────────────────────────────────────────────┐\n│    │ case INJECTOR: 测试注入器                                │\n│    │   └─ injector_loop()：模拟 FEC block 注入测试流量          │\n│    └────────────────────────────────────────────────────────────┘\n│\n├── 异常捕获（try-catch）\n│    └── 捕获 runtime_error 并输出错误信息后退出\n│\n└── 正常退出\n```\n\n---\n\n## 📊 总结说明\n\n| 模块 | 功能 |\n|------|------|\n| main() | 程序入口，负责参数解析、初始化、启动主循环 |\n| LocalTransmitter | 负责 FEC 编码、加密、时间戳管理、标签分配 |\n| RemoteTransmitter | 负责 FEC 解码、丢包恢复、数据注入到 wlanX |\n| data_source / data_source_local | 主事件循环，处理数据流和控制信号 |\n| FEC 编解码 | 基于 Reed-Solomon(k,n)，支持前向纠错 |\n| 加密机制 | 使用 libsodium 库进行 session key 管理和数据加密 |\n| Radiotap Header | 封装物理层参数，兼容多种无线网卡 |\n| 控制接口 | 支持通过 control_port 动态调整 FEC 参数 |\n| 日志系统 | 输出运行状态、丢包率、延迟等关键指标 |\n\n---\n\n## 📎 示例命令对照\n\n\n| 模式 | 命令示例 | 对应函数 |\n|------|----------|----------|\n| 发射端 | `wfb_tx -u 5600 -k 8 -n 12 -f data wlan0` | `local_loop_udp()` |\n| 接收端 | `wfb_rx -d -u 5600 host:5600` | `distributor_loop()` |\n| 本地测试 | `wfb_rx -U /tmp/wfb -d host:port` | `distributor_loop_unix()` |\n| 注入测试 | `wfb_rx -I 10000 wlan0` | `injector_loop()` |\n\n## Linux 内核启动过程\n一旦 U-Boot 把内核加载到内存并将控制权交给内核，Linux 内核就开始启动。内核启动的过程可以分为几个重要的阶段：\n\n\n## 内核说明\n### 内核初始化：\n\n解压内核：如果内核是压缩格式（uImage），它会首先被解压。\n设置系统环境：内核初始化过程中，会初始化硬件环境，包括内存、CPU、时钟、I/O 控制器等。\n启动内核主线程：内核开始执行第一个用户空间进程，通常是 init 进程。\n设备驱动加载：内核会根据设备树（Device Tree，DT）或者硬编码的设备信息来加载相关硬件设备的驱动，确保硬件能够被正确识别并与操作系统交互。\n\n内核调度和管理资源：内核的调度器开始工作，管理系统资源，如 CPU、内存、I/O 等。\n\n### init 进程和用户空间启动\n在 Linux 内核初始化完毕后，控制权会传递给第一个用户空间进程 init，它通常会启动系统中所有的守护进程和服务。\n\n- 挂载 /proc 文件系统。\n- 检查并挂载支持的根文件系统。\n- 通过 overlay 或 overlayfs 文件系统进行联合挂载，允许在嵌入式系统中以最小化的方式实现根文件系统的可写层。\n- 使用 pivot_root 更改根文件系统。\n- 挂载其他系统关键文件系统（如 /proc、/dev 和 /overlay）。\n\n#### RootFS 的内容\n   \n在 Buildroot 中，根文件系统（RootFS）是由多个目录和文件构成的，这些目录和文件用于支持系统运行。常见的文件夹有：\n\n/bin/：基本的可执行文件，如 sh、ls 等。\n/sbin/：系统管理程序，如 init、ifconfig 等。\n/etc/：系统配置文件，如网络配置、服务启动配置等。\n/lib/：共享库。\n/tmp/：临时文件。\n/proc/：虚拟文件系统，提供系统信息。\n/sys/：虚拟文件系统，提供内核信息。\n/dev/：设备文件。\n\n```powershell\n├── bin\n├── dev\n├── etc\n├── init\n├── lib\n├── lib32 -> lib\n├── linuxrc -> bin/busybox\n├── media\n├── mnt\n├── opt\n├── overlay\n├── proc\n├── rom\n├── root\n├── run\n├── sbin\n├── sys\n├── tmp\n├── usr\n├── utils\n└── var\n```\n\n\n在这些目录中，init 文件是根文件系统中用于启动系统的第一个进程。\n\n#### init 与文件系统的关系\n在Linux嵌入式系统的开发和维护过程中，了解系统启动和服务管理机制是至关重要的。init 文件本身就是嵌入在构建的文件系统中的。\n\n\n其中，/etc/init.d/目录扮演了关键角色，它包含了用于初始化、启动、重启或停止各种服务的脚本。\ninit.d是指包含一系列 Shell脚本 的目录，这些脚本用于控制服务（也称为守护进程）的生命周期。当系统启动时，init进程会根据预定义的规则执行这些脚本，以确保必要的服务能够正确启动。\n\n```powershell\nrcK         S01syslogd  S30customizer  S40network   S60crond     S98datalink\nrcS         S02klogd    S35modules     S49ntpd      S70vendor    S98vtun\nS01seedrng  S02sysctl   S38mdev        S50dropbear  S95majestic  S99rc.local\n```\n\n\n\n\n#### 系统脚本运行情况\n{% folding rcS%}\n\n先看一下rcS文件，它是本目录在开机时最先启动的文件。也是系统进入多用户模式之前的初始化脚本。它会根据配置启动各种系统服务，通常会依赖其他脚本来执行特定的任务。\n\nrcS通常用于：\n- 初始化基本系统服务\n- 挂载文件系统\n- 启动 init.d 目录下的所有 S 开头的脚本\n- init.d 目录结构遵循了 SysV init 启动方式，rcS 主要是用来遍历 S 开头的脚本，并依次执行它们。\n- 在使用 **Buildroot** 进行内核裁剪之后，init进程的启动工作流会根据 `/etc/init.d` 中的启动脚本顺序来执行。\n\n```powershell\n#!/bin/sh\nexport SENSOR=$(fw_printenv -n sensor)\nexport UPGRADE=$(fw_printenv -n upgrade)\nexport TZ=$(cat /etc/TZ)\n\nfor i in /etc/init.d/S??*; do\n\t[ ! -f \"$i\" ] && continue\n\tcase \"$i\" in\n\t\t*)\n\t\t\t$i start\n\t\t\t;;\n\tesac\ndone\n```\n- 循环遍历 `/etc/init.d/` 目录下所有以 `S` 开头且后面跟有两位数字（`S??*`）的文件。\n- `[ ! -f \"$i\" ] && continue` 检查每个文件是否是普通文件（不是目录等其他类型），如果不是普通文件，则跳过该文件。\n- `case \"$i\" in *) $i start ;; esac` 对每个文件（即每个服务脚本）执行 `start` 参数。触发服务脚本的启动。服务脚本内会定义如何启动服务（如启动系统守护进程、初始化硬件设备、配置网络等）。\n\n{% endfolding %}\n\n\n{% folding rcK%}\n\n与rcS相对\n这个脚本通常在系统关闭或者进入单用户模式时运行。它主要用来停止一些服务，清理系统资源。\n```powershell\n#!/bin/sh\n\nfor i in $(ls -r /etc/init.d/S??*); do\n\t[ ! -f \"$i\" ] && continue\n\tcase \"$i\" in\n\t\t*)\n\t\t\t$i stop\n\t\t\t;;\n\tesac\ndone\n```\n\n{% endfolding %}\n\n\n{% folding S01seedrng%}\n\n作用是启动一个随机数生成服务，确保系统在启动时能够使用持久化的种子数据来生成加密级别的随机数。其主要作用是增强系统的随机性，确保用于加密和安全任务时生成的随机数质量高，防止系统依赖不安全或预测性的随机数。脚本还支持动态配置种子存储位置和一些特定的安全选项。\n\n{% endfolding %}\n\n{% folding S01syslogd%}\n`S01syslogd` 脚本的作用是启动和管理 `syslogd` 服务，`syslogd` 是一个日志守护进程，用于收集、存储和转发系统日志。这个脚本确保 `syslogd` 正常运行，并在系统启动时自动启动它。\n\n```bash\nDAEMON=\"syslogd\"\nPIDFILE=\"/var/run/$DAEMON.pid\"\nDAEMON_ARGS=\"-n -C64 -t\"\n```\n- `DAEMON=\"syslogd\"`：定义了守护进程的名称，即 `syslogd`，它是负责处理系统日志的服务。\n- `PIDFILE=\"/var/run/$DAEMON.pid\"`：定义了守护进程的 PID 文件位置，`/var/run/syslogd.pid` 用于存储 `syslogd` 的进程 ID。\n- `DAEMON_ARGS=\"-n -C64 -t\"`：定义了 `syslogd` 启动时的参数：\n  - `-n`：告诉 `syslogd` 以非守护进程模式启动，即不将其转为后台进程。\n  - `-C64`：设置日志缓冲区大小为 64 KB。\n  - `-t`：标记每条日志信息，通常用于调试日志输出。\n\n### `start` 函数\n```bash\nstart() {\n\techo -n \"Starting $DAEMON: \"\n\tstart-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"$DAEMON\" -- $DAEMON_ARGS\n\tif [ $? -eq 0 ]; then\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n}\n```\n- `start` 函数用于启动 `syslogd`：\n  - `start-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"$DAEMON\" -- $DAEMON_ARGS`：该命令通过 `start-stop-daemon` 启动守护进程 `syslogd`，并将其参数传递给进程。选项解析：\n    - `-b`：使进程在后台运行。\n    - `-m`：以守护进程的方式启动。\n    - `-S`：启动进程时保持锁定。\n    - `-q`：安静模式，不显示多余信息。\n    - `-p \"$PIDFILE\"`：指定存储 PID 文件的位置。\n    - `-x \"$DAEMON\"`：指定要启动的守护进程程序，即 `syslogd`。\n    - `-- $DAEMON_ARGS`：传递参数给 `syslogd`，如日志缓冲区大小等。\n\n- 启动成功后输出 `OK`，失败则输出 `FAIL`。\n\n### `stop` 函数\n```bash\nstop() {\n\techo -n \"Stopping $DAEMON: \"\n\tstart-stop-daemon -K -q -p \"$PIDFILE\"\n\tif [ $? -eq 0 ]; then\n\t\trm -f \"$PIDFILE\"\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n}\n```\n- `stop` 函数用于停止 `syslogd`：\n  - `start-stop-daemon -K -q -p \"$PIDFILE\"`：使用 `start-stop-daemon` 停止守护进程，`-K` 表示终止进程，`-q` 表示安静模式，`-p \"$PIDFILE\"` 用于指定 PID 文件。\n  - 停止成功后，删除 PID 文件并输出 `OK`，否则输出 `FAIL`。\n\n### 处理脚本参数\n```bash\ncase \"$1\" in\n\tstart|stop)\n\t\t$1\n\t\t;;\n\n\trestart|reload)\n\t\tstop\n\t\tsleep 1\n\t\tstart\n\t\t;;\n\n\t*)\n\t\techo \"Usage: $0 {start|stop|restart|reload}\"\n\t\texit 1\n\t\t;;\nesac\n```\n- 脚本通过 `case` 语句根据传入的参数来决定执行哪个操作：\n  - `start`：调用 `start` 函数，启动 `syslogd`。\n  - `stop`：调用 `stop` 函数，停止 `syslogd`。\n  - `restart` 或 `reload`：先停止进程，等待 1 秒后重新启动，确保服务能平滑重启。\n  - 如果参数无效，输出使用提示并退出脚本。\n{% endfolding %}\n\n\n{% folding S02klogd%}\n**klogd** 会收集内核级别的日志信息，通常与 **syslogd** 配合使用，将内核日志发送到合适的位置。\n这个 `S02klogd` 脚本是一个 **SysV-style** 启动脚本，专门用于管理 `klogd` 进程（Kernel Logging Daemon）。它遵循传统的 init 脚本格式，使用 `start-stop-daemon` 命令来启动和停止 `klogd`，并且能够创建 `PIDFILE` 以便于进程管理。\n\n---\n\n## **详细解析**\n这个脚本的主要作用是控制 `klogd`（Kernel Log Daemon）的启动、停止和重启，并且遵循 SysV init 脚本的标准格式。它的结构清晰，主要由以下几个部分组成：\n\n### **1. 变量定义**\n```sh\nDAEMON=\"klogd\"\nPIDFILE=\"/var/run/$DAEMON.pid\"\nKLOGD_ARGS=\"\"\n```\n- `DAEMON=\"klogd\"`：定义守护进程的名称。\n- `PIDFILE=\"/var/run/$DAEMON.pid\"`：定义进程的 PID 文件路径。\n- `KLOGD_ARGS=\"\"`：定义 `klogd` 运行时的附加参数，默认是空的。\n\n### **2. 读取默认配置**\n```sh\n[ -r \"/etc/default/$DAEMON\" ] && . \"/etc/default/$DAEMON\"\n```\n- 这里会检查 `/etc/default/klogd` 文件是否可读，如果存在，则加载它的内容。\n- 这个设计使得 `klogd` 的启动参数可以在 `/etc/default/klogd` 里定义，而不是硬编码在脚本中，增强了灵活性。\n\n### **3. `start()` 函数**\n```sh\nstart() {\n\tprintf 'Starting %s: ' \"$DAEMON\"\n\tstart-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"/sbin/$DAEMON\" \\\n\t\t-- -n $KLOGD_ARGS\n\tstatus=$?\n\tif [ \"$status\" -eq 0 ]; then\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n\treturn \"$status\"\n}\n```\n- 先打印 `\"Starting klogd: \"` 提示信息。\n- 使用 `start-stop-daemon` 启动 `klogd`：\n  - `-b`：后台运行（daemonize）。\n  - `-m`：创建 `PIDFILE`。\n  - `-S`：启动服务（start）。\n  - `-q`：安静模式（quiet），不打印额外信息。\n  - `-p \"$PIDFILE\"`：指定 `PIDFILE`。\n  - `-x \"/sbin/$DAEMON\"`：执行 `/sbin/klogd`。\n  - `-- -n $KLOGD_ARGS`：传递 `-n` 选项给 `klogd`，表示不创建 `PIDFILE`，因为 `BusyBox` 版 `klogd` 不会自己管理 `PIDFILE`，所以这里用 `start-stop-daemon` 处理。\n- `status=$?` 获取 `start-stop-daemon` 的退出状态码：\n  - `0` 代表成功，打印 `\"OK\"`。\n  - 非 `0` 代表失败，打印 `\"FAIL\"`。\n- `return \"$status\"` 返回状态码，以便于外部脚本检查。\n\n### **4. `stop()` 函数**\n```sh\nstop() {\n\tprintf 'Stopping %s: ' \"$DAEMON\"\n\tstart-stop-daemon -K -q -p \"$PIDFILE\"\n\tstatus=$?\n\tif [ \"$status\" -eq 0 ]; then\n\t\trm -f \"$PIDFILE\"\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n\treturn \"$status\"\n}\n```\n- 先打印 `\"Stopping klogd: \"` 提示信息。\n- `start-stop-daemon -K -q -p \"$PIDFILE\"`：\n  - `-K` 选项用于停止（kill）进程。\n  - `-q` 选项是安静模式（quiet）。\n  - `-p \"$PIDFILE\"` 选项指定 `PIDFILE`，以便找到并杀死 `klogd` 进程。\n- 如果进程成功终止：\n  - 删除 `PIDFILE`。\n  - 打印 `\"OK\"`。\n- 如果失败，打印 `\"FAIL\"` 并返回错误码。\n\n### **5. `restart()` 函数**\n```sh\nrestart() {\n\tstop\n\tsleep 1\n\tstart\n}\n```\n- 先调用 `stop()` 终止进程。\n- `sleep 1` 等待 1 秒，确保进程完全退出。\n- 重新调用 `start()` 启动 `klogd`。\n\n### **6. 命令行参数解析**\n```sh\ncase \"$1\" in\n\tstart|stop|restart)\n\t\t\"$1\";;\n\treload)\n\t\trestart;;\n\t*)\n\t\techo \"Usage: $0 {start|stop|restart|reload}\"\n\t\texit 1\nesac\n```\n- 允许 `start|stop|restart` 作为参数，直接调用相应的函数。\n- `reload` 其实是 `restart`，因为 `klogd` 本身没有 `reload` 机制，所以用 `restart` 代替。\n- 其他情况打印用法说明，并返回 `exit 1` 表示参数错误。\n\n---\n\n{% endfolding %}\n\n\n{% folding S02sysctl %}\n\n**sysctl** 用于配置和调整内核参数。这个脚本会设置一些内核的运行时参数，比如文件系统、内存、网络等方面的配置。\n\n\n---\n### **脚本概述**\n这个 `S02sysctl` 脚本用于管理 `sysctl` 配置文件的加载。它读取多个配置文件，并将其应用到内核参数中。它还根据是否存在 `logger` 命令来决定是将输出发送到系统日志中，还是直接输出到标准输出。\n\n### **详细结构**\n\n1. **变量定义**\n    ```sh\n    PROGRAM=\"sysctl\"\n    SYSCTL_ARGS=\"\"\n    ```\n    - `PROGRAM`：定义要运行的程序，这里是 `sysctl`。\n    - `SYSCTL_ARGS`：用于传递给 `sysctl` 的附加参数，默认为空。\n\n2. **加载配置**\n    ```sh\n    [ -r \"/etc/default/$PROGRAM\" ] && . \"/etc/default/$PROGRAM\"\n    ```\n    - 通过检查 `/etc/default/sysctl` 文件是否可读，来加载该文件中的配置。\n\n3. **配置文件源定义**\n    ```sh\n    SYSCTL_SOURCES=\"/etc/sysctl.d/ /usr/local/lib/sysctl.d/ /usr/lib/sysctl.d/ /lib/sysctl.d/ /etc/sysctl.conf\"\n    ```\n    - 这是一个包含多个路径的列表，`sysctl` 配置文件会在这些路径中查找，并按顺序加载。\n\n4. **日志功能：`run_logger()` 和 `run_std()`**\n    - `run_logger()`：如果 `logger` 可用，将 `sysctl` 的输出发送到系统日志。\n    - `run_std()`：如果 `logger` 不可用，将输出直接发送到标准输出或错误输出。\n\n5. **启动函数 `start()`**\n    ```sh\n    start() {\n        printf '%s %s: ' \"$1\" \"$PROGRAM\"\n        status=$(\"$run_program\" 4>&1)\n        echo \"$status\"\n        if [ \"$status\" = \"OK\" ]; then\n            return 0\n        fi\n        return 1\n    }\n    ```\n    - 根据配置执行 `sysctl`，并根据 `status` 输出结果。\n\n6. **命令行参数处理**\n    ```sh\n    case \"$1\" in\n        start)\n            start \"Running\";;\n        restart|reload)\n            start \"Rerunning\";;\n        stop)\n            :;;\n        *)\n            echo \"Usage: $0 {start|stop|restart|reload}\"\n            exit 1\n    esac\n    ```\n    - 提供了 `start|stop|restart|reload` 的参数，执行相应的操作。对于 `stop`，没有实际操作，`:` 是一个空操作。\n\n\n\n\n{% endfolding %}\n\n{% folding S30customizer %}\n---\n\n### 功能概述\n1. **脚本入口**\n   - 使用 `case \"$1\"` 判断传入参数（如 `start` 或 `stop`）。\n   - 通常由 `/etc/init.d/` 框架调用，传入参数为 `start`。\n\n2. **主要功能**\n   - 设置系统时间。\n   - 执行自定义化脚本（`customizer.sh`）。\n   - 配置无线网络（`wireless.sh`）。\n   - 配置多路复用器和 GPIO（`muxes.sh`）。\n   - 检查 MAC 地址。\n\n{% endfolding %}\n\n\n{% folding S35modules %}\n负责加载内核模块，这里没有用到。\n{% endfolding %}\n\n{% folding S38mdev %}\n**mdev** 是一个轻量级的设备管理工具，类似于 **udev**，它会管理和创建设备节点，确保设备被正确识别和配置，由于系统没有使用设备接口，没有使用。\n{% endfolding %}\n\n{% folding S40network %} \n\n管理网络接口的启动和停止，包括有线网络和无线网络。通过读取 U-Boot 环境变量来动态配置网络设备，并根据设备类型调用不同的初始化逻辑。\n---\n\n### **脚本内容**\n\n#### **1. 读取 U-Boot 环境变量**\n```bash\ndev=$(fw_printenv -n wlandev)\nmac=$(fw_printenv -n wlanmac)\nnet=$(fw_printenv -n netaddr_fallback)\n```\n- **`fw_printenv`**：\n  - 这是一个工具，用于读取 U-Boot 的环境变量。\n  - `-n` 参数表示只输出变量值，而不包含变量名。\n- **变量含义**：\n  - **`dev` (`wlandev`)**：\n    - 表示无线网络设备的类型或标识符（如 USB、SDIO 或 Modem）。\n  - **`mac` (`wlanmac`)**：\n    - 表示无线网卡的 MAC 地址。\n  - **`net` (`netaddr_fallback`)**：\n    - 表示默认的网络地址（如 IP 地址），当没有其他配置时使用。\n    - 默认值为 `192.168.2.10`。\n\n---\n\n#### **2. 配置无线网络接口**\n```bash\nset_wireless() {\n\tpath=/etc/wireless\n\tif $path/usb \"$dev\" || $path/sdio \"$dev\"; then\n\t\t[ -n \"$mac\" ] && ip link set dev wlan0 address \"$mac\"\n\t\tifup wlan0\n\telif $path/modem \"$dev\"; then\n\t\tifup usb0\n\t\tifup eth1\n\tfi\n\t[ -e /sys/class/net/eth0 ] && ifconfig eth0 \"${net:-192.168.2.10}\"\n}\n```\n- **功能**：\n  - 根据 `dev` 的值判断无线设备的类型，并执行相应的初始化逻辑。\n- **逻辑分支**：\n  1. **USB 或 SDIO 设备**：\n     ```bash\n     if $path/usb \"$dev\" || $path/sdio \"$dev\"; then\n         [ -n \"$mac\" ] && ip link set dev wlan0 address \"$mac\"\n         ifup wlan0\n     ```\n     - 检查 `/etc/wireless/usb` 或 `/etc/wireless/sdio` 脚本是否支持当前设备。\n     - 如果支持：\n       - 设置无线网卡 `wlan0` 的 MAC 地址（如果有 `wlanmac`）。\n       - 启动无线接口 `wlan0`。\n  2. **Modem 设备**：\n     ```bash\n     elif $path/modem \"$dev\"; then\n         ifup usb0\n         ifup eth1\n     ```\n     - 如果设备是 Modem 类型，则启动 `usb0` 和 `eth1` 接口。\n  3. **回退配置**：\n     ```bash\n     [ -e /sys/class/net/eth0 ] && ifconfig eth0 \"${net:-192.168.2.10}\"\n     ```\n     - 如果存在 `eth0` 接口，则为其分配一个默认 IP 地址（`netaddr_fallback` 或 `192.168.2.10`）。\n\n---\n\n#### **3. 启动网络服务**\n```bash\nstart() {\n\techo \"Starting network...\"\n\tifup lo\n\tif [ -n \"$dev\" ]; then\n\t\tset_wireless\n\telse\n\t\tifup eth0\n\tfi\n}\n```\n- **功能**：\n  - 启动网络服务，按以下顺序：\n    1. 启动本地回环接口 `lo`。\n    2. 如果存在无线设备（`dev` 不为空），调用 `set_wireless` 函数配置无线网络。\n    3. 如果没有无线设备，直接启动有线接口 `eth0`。\n\n---\n\n#### **4. 停止网络服务**\n```bash\nstop() {\n\techo \"Stopping network...\"\n\tifdown lo\n\tifdown -f wlan0\n\tifdown -f usb0\n\tifdown -f eth1\n\tifdown -f eth0\n}\n```\n- **功能**：\n  - 停止所有网络接口，包括：\n    - 本地回环接口 `lo`。\n    - 无线接口 `wlan0`。\n    - USB 网络接口 `usb0`。\n    - 以太网接口 `eth1` 和 `eth0`。\n  - `-f` 参数强制关闭接口，即使接口不存在也不会报错。\n\n---\n\n#### **5. 脚本入口**\n```bash\ncase \"$1\" in\n\tstart|stop)\n\t\t$1\n\t\t;;\n\n\trestart|reload)\n\t\tstop\n\t\tstart\n\t\t;;\n\n\t*)\n\t\techo \"Usage: $0 {start|stop|restart|reload}\"\n\t\texit 1\n\t\t;;\nesac\n```\n- **功能**：\n  - 根据传入参数执行相应的操作：\n    - `start`：启动网络服务。\n    - `stop`：停止网络服务。\n    - `restart` 或 `reload`：先停止再启动网络服务。\n    - 默认：打印用法提示并退出。\n\n---\n\n### **总结**\n\n#### **核心功能**\n1. **动态配置网络接口**：\n   - 根据 U-Boot 环境变量（`wlandev`、`wlanmac`、`netaddr_fallback`）动态配置网络设备。\n   - 支持多种无线设备类型（USB、SDIO、Modem）。\n2. **启动和停止网络服务**：\n   - 启动时按需配置无线或有线网络接口。\n   - 停止时关闭所有网络接口。\n\n#### **运行流程**\n1. **启动流程**：\n   - 启动本地回环接口 `lo`。\n   - 如果存在无线设备，调用 `set_wireless` 配置无线网络。\n   - 如果没有无线设备，直接启动有线接口 `eth0`。\n2. **停止流程**：\n   - 关闭所有网络接口。\n\n{% endfolding %}\n\n{% folding S49ntpd %}\n网络时间协议守护进程，同步系统时间，校准系统的时钟。\n###  `S49ntpd` 脚本\n\n这个脚本的主要功能是管理 NTP 守护进程（`ntpd`）的启动、停止和重启。它通过 `start-stop-daemon` 工具来控制守护进程的生命周期，并使用 PID 文件来跟踪进程状态。\n\n---\n\n### **脚本内容**\n\n#### **1. 变量定义**\n```bash\nDAEMON=\"ntpd\"\nPIDFILE=\"/var/run/$DAEMON.pid\"\nDAEMON_ARGS=\"-n\"\n```\n- **`DAEMON`**：\n  - 表示要管理的守护进程名称，这里是 `ntpd`（网络时间协议守护进程）。\n- **`PIDFILE`**：\n  - 存储 `ntpd` 进程的 PID 文件路径，用于跟踪进程状态。\n- **`DAEMON_ARGS`**：\n  - 传递给 `ntpd` 的启动参数：\n    - `-n`：表示以非后台模式运行（但实际会通过 `start-stop-daemon` 后台化）。\n\n---\n\n#### **2. 启动函数**\n```bash\nstart() {\n\techo -n \"Starting $DAEMON: \"\n\tstart-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"$DAEMON\" -- $DAEMON_ARGS\n\tif [ $? -eq 0 ]; then\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n}\n```\n- **功能**：\n  - 启动 `ntpd` 守护进程。\n- **关键命令**：\n  ```bash\n  start-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"$DAEMON\" -- $DAEMON_ARGS\n  ```\n  - `-b`：以后台模式运行进程。\n  - `-m`：创建 PID 文件。\n  - `-S`：启动进程。\n  - `-q`：静默模式，不输出额外信息。\n  - `-p \"$PIDFILE\"`：指定 PID 文件路径。\n  - `-x \"$DAEMON\"`：指定要启动的可执行文件。\n  - `-- $DAEMON_ARGS`：传递给守护进程的参数。\n- **错误处理**：\n  - 检查 `start-stop-daemon` 的返回值：\n    - 如果成功（返回值为 0），打印 `OK`。\n    - 如果失败，打印 `FAIL`。\n\n---\n\n#### **3. 停止函数**\n```bash\nstop() {\n\techo -n \"Stopping $DAEMON: \"\n\tstart-stop-daemon -K -q -p \"$PIDFILE\"\n\tif [ $? -eq 0 ]; then\n\t\trm -f \"$PIDFILE\"\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n}\n```\n- **功能**：\n  - 停止 `ntpd` 守护进程。\n- **关键命令**：\n  ```bash\n  start-stop-daemon -K -q -p \"$PIDFILE\"\n  ```\n  - `-K`：发送信号终止进程。\n  - `-q`：静默模式。\n  - `-p \"$PIDFILE\"`：根据 PID 文件找到目标进程并终止。\n- **清理工作**：\n  - 如果成功停止进程，则删除 PID 文件。\n- **错误处理**：\n  - 检查 `start-stop-daemon` 的返回值：\n    - 如果成功，打印 `OK`。\n    - 如果失败，打印 `FAIL`。\n\n---\n\n#### **4. 脚本入口**\n```bash\ncase \"$1\" in\n\tstart|stop)\n\t\t$1\n\t\t;;\n\n\trestart|reload)\n\t\tstop\n\t\tsleep 1\n\t\tstart\n\t\t;;\n\n\t*)\n\t\techo \"Usage: $0 {start|stop|restart|reload}\"\n\t\texit 1\n\t\t;;\nesac\n```\n- **功能**：\n  - 根据传入参数执行相应的操作：\n    - `start`：调用 `start` 函数启动 `ntpd`。\n    - `stop`：调用 `stop` 函数停止 `ntpd`。\n    - `restart` 或 `reload`：先停止再启动 `ntpd`。\n    - 默认：打印用法提示并退出。\n- **注意**：\n  - 在 `restart` 和 `reload` 中，停止后等待 1 秒再启动，避免资源冲突。\n\n---\n\n### **总结**\n\n#### **核心功能**\n1. **启动 NTP 守护进程**：\n   - 使用 `start-stop-daemon` 后台运行 `ntpd`，并生成 PID 文件。\n2. **停止 NTP 守护进程**：\n   - 根据 PID 文件终止 `ntpd` 进程，并清理 PID 文件。\n3. **支持重启和重载**：\n   - 提供 `restart` 和 `reload` 操作，方便重新配置或恢复服务。\n\n#### **运行流程**\n1. **启动流程**：\n   - 检查是否可以启动 `ntpd`。\n   - 使用 `start-stop-daemon` 启动守护进程，并记录 PID。\n2. **停止流程**：\n   - 根据 PID 文件终止进程，并删除 PID 文件。\n3. **重启流程**：\n   - 先停止，再启动，确保服务重新加载。\n{% endfolding %}\n\n{% folding S50dropbear %}    \n**dropbear**，这是一种轻量级的SSH服务器，允许远程访问系统。这个脚本会初始化SSH服务，允许通过SSH连接。\n{% endfolding %}\n\n{% folding S60crond %} \n启动 **crond**，即定时任务守护进程。它负责执行预定的定时任务，比如周期性地运行某些脚本或程序。\n{% endfolding %}\n\n{% folding S70vendor %} \n这个脚本通常用于执行供应商特定的初始化任务，为了加载厂商的特定驱动、配置或者服务。\n\n###  `S70vendor` 脚本\n\n这个脚本的主要功能是在系统启动时加载特定厂商的模块（可能包括驱动程序或其他硬件相关的初始化逻辑）。它通过调用 `ipcinfo` 工具获取设备的厂商信息，并动态加载与该厂商相关的模块。\n\n---\n\n### **脚本内容**\n\n#### **1. 脚本入口**\n```bash\ncase \"$1\" in\n\tstart)\n\t\techo \"Loading vendor modules...\"\n\t\tvendor=$(ipcinfo -v)\n\t\tload_\"$vendor\" -i\n\t\t;;\n\n\tstop)\n\t\t;;\n\n\t*)\n\t\techo \"Usage: $0 {start}\"\n\t\texit 1\n\t\t;;\nesac\n```\n- **功能**：\n  - 根据传入参数执行相应的操作：\n    - `start`：加载厂商模块。\n    - `stop`：当前为空，表示不支持停止操作。\n    - 默认：打印用法提示并退出。\n\n---\n\n#### **2. 加载厂商模块**\n```bash\necho \"Loading vendor modules...\"\nvendor=$(ipcinfo -v)\nload_\"$vendor\" -i\n```\n- **功能**：\n  - 使用 `ipcinfo -v` 获取设备的厂商信息。\n  - 动态调用与厂商相关的加载函数（如 `load_<vendor>`）。\n- **关键命令**：\n  1. **`ipcinfo -v`**：\n     - 这是一个工具，用于查询设备的硬件或固件信息。\n     - `-v` 参数返回设备的厂商名称（如 `sony`、`samsung` 等）。\n  2. **`load_\"$vendor\"`**：\n     - 动态构造函数名，例如：\n       - 如果 `vendor=\"sony\"`，则调用 `load_sony`。\n       - 如果 `vendor=\"samsung\"`，则调用 `load_samsung`。\n  3. **`-i` 参数**：\n     - 传递给加载函数的参数，可能是初始化选项。\n\n---\n\n#### **3. 停止分支**\n```bash\nstop)\n\t;;\n```\n- **功能**：\n  - 当前为空，表示该脚本不支持停止操作。\n- **可能原因**：\n  - 厂商模块通常是内核模块或硬件驱动，加载后无需显式卸载。\n  - 或者，卸载逻辑由其他脚本（如 `rcK` 或其他 `Kxx` 脚本）处理。\n\n---\n\n### **总结**\n\n#### **核心功能**\n1. **动态加载厂商模块**：\n   - 使用 `ipcinfo` 工具获取设备的厂商信息。\n   - 根据厂商信息调用对应的加载函数（如 `load_sony` 或 `load_samsung`）。\n2. **支持启动操作**：\n   - 脚本仅支持 `start` 操作，用于加载厂商模块。\n3. **不支持停止操作**：\n   - 当前未实现停止逻辑，可能由其他机制处理。\n\n#### **运行流程**\n1. **启动流程**：\n   - 打印提示信息：“Loading vendor modules...”。\n   - 调用 `ipcinfo -v` 获取厂商名称。\n   - 动态调用对应的加载函数（如 `load_<vendor>`），并传递 `-i` 参数。\n2. **停止流程**：\n   - 当前未实现停止逻辑。\n\n#### **适用场景**\n- 该脚本适用于嵌入式设备（如 IP 摄像头）中加载厂商特定的硬件模块或驱动程序。\n- 它通过动态调用的方式支持多种厂商，灵活性较高。\n  \n---\n\n{% endfolding %}\n\n{% folding S95majestic %}\n###  `S95majestic` 脚本\n\n这个脚本的主要功能是管理 `majestic` 守护进程的启动、停止、重启和重载。它通过 `start-stop-daemon` 工具来控制守护进程的生命周期，并使用 PID 文件来跟踪进程状态。相比之前的 `ntpd` 脚本，该脚本增加了对 `reload` 操作的支持。\n\n---\n\n### **脚本内容**\n\n#### **1. 变量定义**\n```bash\nDAEMON=\"majestic\"\nPIDFILE=\"/var/run/$DAEMON.pid\"\nDAEMON_ARGS=\"-s\"\n```\n- **`DAEMON`**：\n  - 表示要管理的守护进程名称，这里是 `majestic`。\n  - `majestic` 是 OpenIPC 项目中的一个核心组件，通常用于处理视频流（如 RTSP、HTTP 等）。\n- **`PIDFILE`**：\n  - 存储 `majestic` 进程的 PID 文件路径，用于跟踪进程状态。\n- **`DAEMON_ARGS`**：\n  - 传递给 `majestic` 的启动参数：\n    - `-s`：可能是以静默模式或后台模式运行的选项。\n\n---\n\n#### **2. 启动函数**\n```bash\nstart() {\n\techo -n \"Starting $DAEMON: \"\n\tstart-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"$DAEMON\" -- $DAEMON_ARGS\n\tif [ $? -eq 0 ]; then\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n}\n```\n- **功能**：\n  - 启动 `majestic` 守护进程。\n- **关键命令**：\n  ```bash\n  start-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"$DAEMON\" -- $DAEMON_ARGS\n  ```\n  - `-b`：以后台模式运行进程。\n  - `-m`：创建 PID 文件。\n  - `-S`：启动进程。\n  - `-q`：静默模式，不输出额外信息。\n  - `-p \"$PIDFILE\"`：指定 PID 文件路径。\n  - `-x \"$DAEMON\"`：指定要启动的可执行文件。\n  - `-- $DAEMON_ARGS`：传递给守护进程的参数。\n- **错误处理**：\n  - 检查 `start-stop-daemon` 的返回值：\n    - 如果成功（返回值为 0），打印 `OK`。\n    - 如果失败，打印 `FAIL`。\n\n---\n\n#### **3. 停止函数**\n```bash\nstop() {\n\techo -n \"Stopping $DAEMON: \"\n\tstart-stop-daemon -K -q -p \"$PIDFILE\"\n\tif [ $? -eq 0 ]; then\n\t\trm -f \"$PIDFILE\"\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n}\n```\n- **功能**：\n  - 停止 `majestic` 守护进程。\n- **关键命令**：\n  ```bash\n  start-stop-daemon -K -q -p \"$PIDFILE\"\n  ```\n  - `-K`：发送信号终止进程。\n  - `-q`：静默模式。\n  - `-p \"$PIDFILE\"`：根据 PID 文件找到目标进程并终止。\n- **清理工作**：\n  - 如果成功停止进程，则删除 PID 文件。\n- **错误处理**：\n  - 检查 `start-stop-daemon` 的返回值：\n    - 如果成功，打印 `OK`。\n    - 如果失败，打印 `FAIL`。\n\n---\n\n#### **4. 重启函数**\n```bash\nrestart)\n\tstop\n\tsleep 3\n\tstart\n\t;;\n```\n- **功能**：\n  - 先调用 `stop` 函数停止 `majestic`。\n  - 等待 3 秒（避免资源冲突）。\n  - 再调用 `start` 函数重新启动 `majestic`。\n- **注意**：\n  - 等待时间（`sleep 3`）可以防止频繁操作导致的问题。\n\n---\n\n#### **5. 重载函数**\n```bash\nreload)\n\tkillall -1 \"$DAEMON\"\n\t;;\n```\n- **功能**：\n  - 向 `majestic` 发送 `SIGHUP` 信号（信号编号为 1），触发其重新加载配置。\n- **关键命令**：\n  ```bash\n  killall -1 \"$DAEMON\"\n  ```\n  - `-1`：发送 `SIGHUP` 信号。\n  - `$DAEMON`：目标进程名称。\n- **用途**：\n  - `SIGHUP` 通常用于通知守护进程重新读取配置文件，而无需完全重启。\n\n---\n\n#### **6. 脚本入口**\n```bash\ncase \"$1\" in\n\tstart|stop)\n\t\t$1\n\t\t;;\n\n\trestart)\n\t\tstop\n\t\tsleep 3\n\t\tstart\n\t\t;;\n\n\treload)\n\t\tkillall -1 \"$DAEMON\"\n\t\t;;\n\n\t*)\n\t\techo \"Usage: $0 {start|stop|restart|reload}\"\n\t\texit 1\n\t\t;;\nesac\n```\n- **功能**：\n  - 根据传入参数执行相应的操作：\n    - `start`：启动 `majestic`。\n    - `stop`：停止 `majestic`。\n    - `restart`：先停止再启动 `majestic`。\n    - `reload`：向 `majestic` 发送 `SIGHUP` 信号以重载配置。\n    - 默认：打印用法提示并退出。\n\n---\n\n### **总结**\n\n#### **核心功能**\n1. **启动 `majestic` 守护进程**：\n   - 使用 `start-stop-daemon` 后台运行 `majestic`，并生成 PID 文件。\n2. **停止 `majestic` 守护进程**：\n   - 根据 PID 文件终止进程，并删除 PID 文件。\n3. **支持重启和重载**：\n   - 提供 `restart` 和 `reload` 操作，方便重新加载配置或恢复服务。\n4. **动态配置管理**：\n   - `reload` 操作允许在不停止服务的情况下重新加载配置。\n\n#### **运行流程**\n1. **启动流程**：\n   - 检查是否可以启动 `majestic`。\n   - 使用 `start-stop-daemon` 启动守护进程，并记录 PID。\n2. **停止流程**：\n   - 根据 PID 文件终止进程，并删除 PID 文件。\n3. **重启流程**：\n   - 先停止，再启动，确保服务重新加载。\n4. **重载流程**：\n   - 向 `majestic` 发送 `SIGHUP` 信号，触发配置重载。\n\n#### **适用场景**\n- 该脚本适用于嵌入式设备（如 IP 摄像头）中管理视频流服务。\n- 它通过标准化的方式管理 `majestic` 守护进程，适合资源受限的环境。\n\n---\n\n{% endfolding %}\n\n\n{% folding S98datalink %}\n###  `S98datalink` 脚本\n\n这个脚本的主要功能是管理数据链路服务（如 LTE 模块、ZeroTier 网络和 Wi-Fi 广播）。它根据设备的硬件信息（通过 `ipcinfo` 和 U-Boot 环境变量）以及配置文件 `/etc/datalink.conf` 的内容，动态启动或停止相关服务。\n\n---\n\n### **脚本内容**\n\n#### **1. 变量定义**\n```bash\nchip=$(ipcinfo -c)\nfw=$(grep \"BUILD_OPTION\" \"/etc/os-release\" | cut -d= -f2)\n```\n- **`chip`**：\n  - 使用 `ipcinfo -c` 获取设备的芯片型号。\n  - 示例是 `ssc338q` 或其他 SoC 名称。\n- **`fw`**：\n  - 从 `/etc/os-release` 文件中提取 `BUILD_OPTION` 的值。\n  - 示例输出可能是 `lte` 或其他构建选项。\n\n---\n\n#### **2. 加载配置文件**\n```bash\nif [ -e /etc/datalink.conf ]; then\n\t. /etc/datalink.conf\nfi\n```\n- **功能**：\n  - 如果存在 `/etc/datalink.conf` 文件，则加载其内容。\n  - `. /etc/datalink.conf` 表示将该文件的内容作为当前脚本的一部分执行。\n- **用途**：\n  - 配置文件可能包含以下变量：\n    - `usb_modem`：是否启用 USB LTE 模块。\n    - `use_zt`：是否启用 ZeroTier 网络。\n    - `zt_netid`：ZeroTier 网络 ID。\n    - `telemetry`：是否启用遥测功能。\n\n---\n\n#### **3. 启动 LTE 数据链路**\n```bash\nstart_lte() {\n\techo \"Starting fpv datalink...\"\n\tif [ \"$usb_modem\" = \"true\" ]; then\n\t\techo \"Starting lte modem configuration...\"\n\tfi\n\n\tif [ \"$use_zt\" = \"true\" ]; then\n\t\techo \"Starting ZeroTier-One daemon...\"\n\t\tzerotier-one -d &\n\t\tif [ ! -f \"/var/lib/zerotier-one/networks.d/$zt_netid.conf\" ]; then\n\t\t\tsleep 8\n\t\t\tzerotier-cli join \"$zt_netid\" > /dev/null\n\t\t\techo \"Don't forget to authorize my.zerotier.com!\"\n\t\tfi\n\tfi\n\n\tif [ \"$telemetry\" = \"true\" ]; then\n\t\ttelemetry start\n\tfi\n\n\texit 0\n}\n```\n- **功能**：\n  - 启动 LTE 数据链路相关的服务。\n- **逻辑分支**：\n  1. **USB LTE 模块**：\n     ```bash\n     if [ \"$usb_modem\" = \"true\" ]; then\n         echo \"Starting lte modem configuration...\"\n     fi\n     ```\n     - 如果 `usb_modem=\"true\"`，表示启用了 USB LTE 模块，并打印提示信息。\n  2. **ZeroTier 网络**：\n     ```bash\n     if [ \"$use_zt\" = \"true\" ]; then\n         echo \"Starting ZeroTier-One daemon...\"\n         zerotier-one -d &\n         if [ ! -f \"/var/lib/zerotier-one/networks.d/$zt_netid.conf\" ]; then\n             sleep 8\n             zerotier-cli join \"$zt_netid\" > /dev/null\n             echo \"Don't forget to authorize my.zerotier.com!\"\n         fi\n     fi\n     ```\n     - 如果 `use_zt=\"true\"`，启动 ZeroTier 守护进程（`zerotier-one`）。\n     - 如果尚未加入指定的网络（`$zt_netid`），则等待 8 秒后尝试加入，并提醒用户在 ZeroTier 控制台授权设备。\n  3. **遥测功能**：\n     ```bash\n     if [ \"$telemetry\" = \"true\" ]; then\n         telemetry start\n     fi\n     ```\n     - 如果 `telemetry=\"true\"`，启动遥测服务。\n\n---\n\n#### **4. 启动分支**\n```bash\ncase \"$1\" in\n\tstart)\n\t\tif [ -n \"$(fw_printenv -n wlandev)\" ]; then\n\t\t\texit 0\n\t\tfi\n\n\t\tif [ ! -f /etc/system.ok ]; then\n\t\t\ttweaksys \"$chip\"\n\t\tfi\n\n\t\tif [ \"$fw\" = \"lte\" ]; then\n\t\t\tstart_lte\n\t\tfi\n\t\n\t\techo \"Starting wifibroadcast service...\"\n\t\twifibroadcast start\n\t\t;;\n```\n- **功能**：\n  - 根据传入参数执行相应的操作。\n- **逻辑分支**：\n  1. **检查无线设备**：\n     ```bash\n     if [ -n \"$(fw_printenv -n wlandev)\" ]; then\n         exit 0\n     fi\n     ```\n     - 如果 U-Boot 环境变量中存在 `wlandev`，直接退出脚本。\n     - 这可能是因为无线设备已由其他脚本（如 `S40network`）处理。\n  2. **系统初始化**：\n     ```bash\n     if [ ! -f /etc/system.ok ]; then\n         tweaksys \"$chip\"\n     fi\n     ```\n     - 如果 `/etc/system.ok` 文件不存在，调用 `tweaksys` 函数对系统进行初始化。\n     - `tweaksys` 可能是一个自定义函数，用于调整系统配置以适配特定芯片。\n  3. **启动 LTE 数据链路**：\n     ```bash\n     if [ \"$fw\" = \"lte\" ]; then\n         start_lte\n     fi\n     ```\n     - 如果 `BUILD_OPTION=lte`，调用 `start_lte` 函数启动 LTE 相关服务。\n  4. **启动 Wi-Fi 广播**：\n     ```bash\n     echo \"Starting wifibroadcast service...\"\n     wifibroadcast start\n     ```\n     - 启动 Wi-Fi 广播服务（`wifibroadcast`）。\n\n---\n\n#### **5. 停止分支**\n```bash\nstop)\n\techo \"Stopping wifibroadcast service...\"\n\twifibroadcast stop\n\t;;\n```\n- **功能**：\n  - 停止 Wi-Fi 广播服务。\n\n---\n\n#### **6. 默认分支**\n```bash\n*)\n\techo \"Usage: $0 {start|stop}\"\n\texit 1\n\t;;\n```\n- **功能**：\n  - 如果传入参数无效，打印用法提示并退出。\n\n---\n\n### **总结**\n\n#### **核心功能**\n1. **动态加载配置**：\n   - 根据 `/etc/datalink.conf` 文件的内容，决定启用哪些服务（如 LTE 模块、ZeroTier 网络、遥测功能）。\n2. **启动数据链路服务**：\n   - 包括 LTE 模块、ZeroTier 网络、Wi-Fi 广播等。\n3. **系统初始化**：\n   - 根据芯片型号调用 `tweaksys` 函数进行系统调整。\n4. **支持启动和停止操作**：\n   - 提供 `start` 和 `stop` 操作，分别用于启动和停止服务。\n\n#### **运行流程**\n1. **启动流程**：\n   - 检查无线设备是否存在。如果存在，直接退出。\n   - 如果系统未初始化，调用 `tweaksys` 函数。\n   - 根据 `BUILD_OPTION` 决定是否启动 LTE 数据链路。\n   - 启动 Wi-Fi 广播服务。\n2. **停止流程**：\n   - 停止 Wi-Fi 广播服务。\n\n#### **适用场景**\n- 该脚本适用于嵌入式设备（如 IP 摄像头或无人机）中管理数据链路服务。\n- 它通过动态加载配置和硬件信息，灵活地支持多种网络和服务。\n\n---\n\n{% endfolding %}\n\n{% folding S98vtun%}\n启动 **vtun**，这是一个虚拟隧道工具，通常用于建立加密隧道，这里没有用到\n{% endfolding %}\n\n{% folding S99rc.local %}\n**rc.local** 是启动过程的最后一个步骤，通常用于执行最后的初始化任务或者自定义命令。系统初始化完成后，这里可以添加需要的启动命令，或者启动一些不属于其他服务的应用。\n{% endfolding %}\n \n##### 工作流：\n1. **系统初始化阶段**：`rcS` 脚本会启动，并执行一些基础的系统配置，包括随机数生成、日志守护进程、内核参数配置等。\n2. **服务启动**：之后，系统会依次启动一些基本的服务，如内核模块加载、设备管理、网络配置、时间同步等。\n3. **特定应用和服务**：进入更具体的应用服务启动，如SSH服务、定时任务、供应商服务、特定功能应用等。\n4. **最后的清理和自定义配置**：`rc.local` 负责执行最后的清理、日志保存、或者启动一些额外的定制化服务。\n\n##### 天空端启动总结\n```powershell\n/etc/init.d/rcS\n ├──> S30customizer\n │   ├──> /usr/share/openipc/customizer.sh\n │   └──> sh /usr/share/openipc/wireless.sh\n ├──> S98datalink\n │   ├──> tweaksys ssc33x  // configure majestic, h265, 1080p, udp://127.0.0.1:5600\n │   └──> wifibroadcast start\n │       ├──> [video]  // udp_port == 5600\n │       │   └──> wfb_tx -p \"$stream\" -u \"$udp_port\" -R \"$rcv_buf\" -K \"$keydir/$unit.key\" -B \"$bandwidth\" \\\n │       │           -M \"$mcs_index\" -S \"$stbc\" -L \"$ldpc\" -G \"$guard_interval\" -k \"$fec_k\" -n \"$fec_n\" \\\n │       │           -T \"$pool_timeout\" -i \"$link_id\" -f \"$frame_type\" -C 8000 \"$wlan\" > /dev/null &\n │       └──> telemetry start  // telemetry_rx == wfb_rx, telemetry_tx == wfb_tx, port_rx == 14551, port_tx == 14550\n │           ├──> mavfwd --channels \"$channels\" --master \"$serial\" --baudrate \"$baud\" -p 100 -t -a \"$aggregate\" \\\n │           │           --out 127.0.0.1:$port_tx --in 127.0.0.1:$port_rx > /dev/null &\n │           ├──> telemetry_rx -p \"$stream_rx\" -u \"$port_rx\" -K \"$keydir/$unit.key\" -i \"$link_id\" \"$wlan\" > /dev/null &\n │           └──> telemetry_tx -p \"$stream_tx\" -u \"$port_tx\" -K \"$keydir/$unit.key\" -B \"$bandwidth\" \\\n │                             -M \"$mcs_index\" -S \"$stbc\" -L \"$ldpc\" -G \"$guard_interval\" -k \"$fec_k\" -n \"$fec_n\" \\\n │                             -T \"$pool_timeout\" -i \"$link_id\" -f \"$frame_type\" \"$wlan\" > /dev/null &\n └──> S95majestic\n```\n\n.bin文件角色：作为固件被内核加载，初始化摄像头硬件。\n\n数据流路径：摄像头 → 内核驱动（通过固件） → /dev/video0节点 → 用户空间应用（通过V4L2接口）。\n\n关键检查点：设备节点存在性、内核日志中的固件加载记录、V4L2工具（如v4l2-ctl）测试。\n\n\n\n## 地面站选择\n### 虚拟机Ubuntu\n### 泰山派Android系统\n### 泰山派Ubuntu\n### 算力版jetson\n### ROS端部署：\n\n\n```cpp\n#include <iostream>\n#include <thread>\n#include <opencv2/opencv.hpp>\n \n \nvoid startCamera() {\n\tcv::VideoCapture cap;\n\tcap.open(\"clip.mp4\");\n\twhile (true) {\n\t\tcv::Mat frame;\n\t\t//方法一：>>析取器\n\t\tcap >> frame;  //每个循环从cap中解析一帧，赋给frame, \n\t\tif (frame.empty()) {\n\t\t\tbreak;\n\t\t}\n\t\t//cv::imshow(\"frame\", frame);\n\t\t//cv::waitKey(1);\n\t\tstd::cout<<\"frame :\"<<frame.cols<<\" \"<<frame.rows<<std::endl;\n\t}\n\tcap.release();\n}\n \nvoid startGStream(std::string gst_src) {\n\tcv::VideoCapture cap;\n\t// \"rtspsrc location=rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream latency=4000 ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! appsink\"\n\t// \"filesrc location=clip.mp4 ! qtdemux ! h264parse ! omxh264dec ! nvvidconv ! appsink\"\n\t// \"v4l2src device=/dev/video0 ! video/x-raw, width=1280, height=720 ! videoconvert ! appsink\"\n\tcap.open(gst_src, cv::CAP_GSTREAMER);\n\twhile (true) {\n\t\tcv::Mat frame;\n\t\t//方法一：>>析取器\n\t\tcap >> frame;  //每个循环从cap中解析一帧，赋给frame, \n\t\tif (frame.empty()) {\n\t\t\tbreak;\n\t\t}\n\t\t//cv::imshow(\"frame\", frame);\n\t\t//cv::waitKey(1);\n\t\tstd::cout<<\"frame :\"<<frame.cols<<\" \"<<frame.rows<<std::endl;\n\t}\n\tcap.release();\n}\n \n \n// \"rtspsrc location=rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream latency=4000 ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! appsink\"\n// \"filesrc location=clip.mp4 ! qtdemux ! h264parse ! omxh264dec ! nvvidconv ! appsink\"\n// \"v4l2src device=/dev/video0 ! video/x-raw, width=1280, height=720 ! videoconvert ! appsink\"\nstd::string get_rtsp_h264_gst(std::string rtsp_uri, int width, int height, int latency)\n{\n\tstd::string gst_str = \"rtspsrc location=\" + rtsp_uri+ \" latency=\"+ std::to_string(latency)+ \" ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=\"+std::to_string(width)+\", height=\"+std::to_string(height)+\", format=BGRx ! videoconvert ! appsink\";\n\tstd::cout<<\"gst:\"<<gst_str<<\":\"<<std::endl;\n\treturn gst_str;\n}\nstd::string get_rtsp_h265_gst(std::string rtsp_uri, int width, int height, int latency)\n{\n\tstd::string gst_str = \"rtspsrc location=\" + rtsp_uri+ \" latency=\"+ std::to_string(latency)+ \" ! rtph265depay ! h265parse ! omxh265dec ! nvvidconv !  video/x-raw, width=\"+std::to_string(width)+\", height=\"+std::to_string(height)+\", format=BGRx ! videoconvert ! appsink\";\n\tstd::cout<<\"gst:\"<<gst_str<<\":\"<<std::endl;\n\treturn gst_str;\n}\nstd::string get_mp4_h264_gst(std::string file_name, int width, int height)\n{\n\tstd::string gst_str = \"filesrc location=\" + file_name+ \" ! qtdemux ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=\"+std::to_string(width)+\", height=\"+std::to_string(height)+\", format=BGRx ! videoconvert ! appsink\";\n\tstd::cout<<\"gst:\"<<gst_str<<\":\"<<std::endl;\n\treturn gst_str;\n}\nstd::string get_v4l2_gst(std::string device_id, int width, int height)\n{\n\tstd::string gst_str = \"v4l2src device=\" + device_id+ \" !  video/x-raw, width=\"+std::to_string(width)+\", height=\"+std::to_string(height)+\", format=BGRx ! videoconvert ! appsink\";\n\tstd::cout<<\"gst:\"<<gst_str<<\":\"<<std::endl;\n\treturn gst_str;\n}\n \n \nvoid startGStream(std::string rtsp_uri, int width, int height, int latency) {\n\tstd::string gst_str = get_rtsp_h264_gst(rtsp_uri, width, height, latency);\nstart:\n\tcv::VideoCapture capture;\n\tcapture.open(gst_str, cv::CAP_GSTREAMER);\n\twhile (true) {\n\t\tcv::Mat frame;\n\t\t//方法一：>>析取器\n\t\tcapture >> frame;  //每个循环从cap中解析一帧，赋给frame, \n\t\tif (frame.empty()) {\n\t\t\tbreak;\n\t\t}\n\t\t//cv::imshow(\"frame\", frame);\n\t\t//cv::waitKey(1);\n\t\tstd::cout<<\"frame :\"<<frame.cols<<\" \"<<frame.rows<<std::endl;\n\t}\n \n\tcapture.release();\n\tstd::cout<<\" ...................................................release \"<<std::endl;\n\tgoto start;\n}\n \n \nint main(int argc, char** argv){\n \n\t//std::string gst_src = \"rtspsrc location=rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream latency=4000 ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! appsink\";\n\t// if (argc > 1){\n\t// \tgst_src = argv[1];\n\t// }\n\t// startGStream(gst_src);\n \n\tstd::string file_src = \"rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream\";\n\tint width = 1280;\n\tint height = 720;\n\tint latency = 5000;\n\tif (argc > 4){\n\t\tfile_src = argv[1];\n\t\twidth = atoi(argv[2]);\n\t\theight = atoi(argv[3]);\n\t\tlatency = atoi(argv[4]);\n\t}\n\tstartGStream(file_src, width, height, latency);\n\tstd::cout<<\"finished.\"<<std::endl;\n\treturn 0;\n}\n\n```\n\n配合ROS实现\n\n```cpp\n#include <ros/ros.h>\n#include <sensor_msgs/Image.h>\n#include <cv_bridge/cv_bridge.h>\n#include <opencv2/opencv.hpp>\n#include <image_transport/image_transport.h>\n#include <thread>\n#include <atomic>\n\nclass OpenCVGStreamerNode {\npublic:\n    OpenCVGStreamerNode(ros::NodeHandle& nh) : it(nh), running(true) {\n        // 从参数服务器获取 GStreamer 管道配置\n        nh.param<std::string>(\"gstreamer_pipeline\", gstreamer_pipeline,\n                               \"udpsrc port=5600 caps='application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265' ! rtph265depay ! h265parse ! mppvideodec ! videoconvert ! appsink\");\n        nh.param<std::string>(\"output_topic\", output_topic, \"/openipc_camera/image\");\n\n        // 发布图像话题\n        image_pub = it.advertise(output_topic, 1);\n\n        // 启动图像捕获线程\n        capture_thread = std::thread(&OpenCVGStreamerNode::captureImages, this);\n    }\n\n    ~OpenCVGStreamerNode() {\n        running = false;\n        if (capture_thread.joinable()) {\n            capture_thread.join();\n        }\n    }\n\nprivate:\n    void captureImages() {\n        // 使用 GStreamer 管道配置初始化 VideoCapture\n        cv::VideoCapture cap(gstreamer_pipeline, cv::CAP_GSTREAMER);\n        if (!cap.isOpened()) {\n            ROS_ERROR(\"Failed to open video stream using GStreamer pipeline: %s\", gstreamer_pipeline.c_str());\n            return;\n        }\n\n        cv::Mat frame;\n        while (running) {\n            cap >> frame;  // 从视频流捕获一帧\n            if (frame.empty()) {\n                ROS_WARN(\"Received empty frame from video stream\");\n                continue;\n            }\n\n            // 将 OpenCV 图像转换为 ROS 图像消息\n            sensor_msgs::ImagePtr msg = cv_bridge::CvImage(std_msgs::Header(), \"bgr8\", frame).toImageMsg();\n            image_pub.publish(msg);\n        }\n    }\n\n    image_transport::ImageTransport it_;\n    image_transport::Publisher image_pub_;\n    std::string gstreamer_pipeline;\n    std::string output_topic;\n    std::thread capture_thread;\n    std::atomic<bool> running;\n};\n\nint main(int argc, char** argv) {\n    ros::init(argc, argv, \"opencv_gstreamer_node\");\n    ros::NodeHandle nh;\n\n    // 创建 OpenCV GStreamer 节点\n    OpenCVGStreamerNode opencv_gstreamer_node(nh);\n    ros::spin();\n    return 0;\n}\n\n```\n\n```cpp\n\n\n#include <ros/ros.h>\n#include <sensor_msgs/Image.h>\n#include <cv_bridge/cv_bridge.h>\n#include <opencv2/opencv.hpp>\n#include <image_transport/image_transport.h>\n#include <thread>\n#include <atomic>\n\nclass OpenCVGStreamerNode {\npublic:\n    OpenCVGStreamerNode(ros::NodeHandle& nh) : it(nh), running(true) {\n        // 从参数服务器获取 GStreamer 管道配置\n        nh.param<std::string>(\"gstreamer_pipeline\", gstreamer_pipeline,\n                               \"udpsrc port=5600 caps='application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265' ! rtph265depay ! h265parse ! nvv4l2decoder ! nv3dsink -e\");\n        nh.param<std::string>(\"output_topic\", output_topic, \"/openipc_camera/image\");\n\n        // 发布图像话题\n        image_pub_ = it_.advertise(output_topic, 1);\n\n        // 启动图像捕获线程\n        capture_thread = std::thread(&OpenCVGStreamerNode::captureImages, this);\n    }\n\n    ~OpenCVGStreamerNode() {\n        running = false;\n        if (capture_thread.joinable()) {\n            capture_thread.join();\n        }\n    }\n\nprivate:\n    void captureImages() {\n        // 使用 GStreamer 管道配置初始化 VideoCapture\n        cv::VideoCapture cap(gstreamer_pipeline, cv::CAP_GSTREAMER);\n        if (!cap.isOpened()) {\n            ROS_ERROR(\"Failed to open video stream using GStreamer pipeline: %s\", gstreamer_pipeline.c_str());\n            return;\n        }\n\n        cv::Mat frame;\n        while (running) {\n            cap >> frame;  // 从视频流捕获一帧\n            if (frame.empty()) {\n                ROS_WARN(\"Received empty frame from video stream\");\n                continue;\n            }\n\n            // 将 OpenCV 图像转换为 ROS 图像消息\n            sensor_msgs::ImagePtr msg = cv_bridge::CvImage(std_msgs::Header(), \"bgr8\", frame).toImageMsg();\n            image_pub_.publish(msg);\n        }\n    }\n\n    image_transport::ImageTransport it_;\n    image_transport::Publisher image_pub_;\n    std::string gstreamer_pipeline;\n    std::string output_topic;\n    std::thread capture_thread;\n    std::atomic<bool> running;\n};\n\nint main(int argc, char** argv) {\n    ros::init(argc, argv, \"opencv_gstreamer_node\");\n    ros::NodeHandle nh;\n\n    // 创建 OpenCV GStreamer 节点\n    OpenCVGStreamerNode opencv_gstreamer_node(nh);\n    ros::spin();\n    return 0;\n}\n```","source":"_posts/OpenIPC开发文档.md","raw":"---\ntitle: OpenIPC开发文档\nabbrlink: 9117\ndate: 2025-01-09 15:13:14\ntags:\ndescription:\ncategories:\ncover:\nswiper_index:\n---\n\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/1/9 -->\n通过 TFTP 和 UART 逐步安装 OpenIPC 固件。\n<!-- endtimeline -->\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n{% link 参考文章, https://github.com/OpenIPC/wiki/blob/master/en/installation.md, https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp %} \n# 说明\n核心就是利用网络摄像头，而且网络监控的市场很大，网络摄像头可选择的范围很大，可以根据主控芯片、图像传感器的型号，以及板载的串口（刷鞋固件、通信），USB(连接WIFI网卡)的情况自由选择\n我这里选择的是 **SigmaStar SsC338Q  分辨率4K@20FPS  内置2Gb DDR3**\n\n# 架构：\n![架构](https://image.aruoshui.fun/i/2025/01/02/sf653e-0.webp)\n# 我的工作任务：\n- 硬件环境的搭建\n  - openipc固件的烧写\n  - 天空端电路搭建\n  - 地面端环境的烧写\n- 固件的编译和编译脚本\n- 裁剪的openipc linux内核中执行启动脚本的过程\n- rtl8812网卡天空端驱动（内核配置的）、rtl8812au地面端驱动（开源项目）\n- 摄像头驱动（开源的），视频编码器（闭源方案）\n- wfb-ng数据链路\n- 地面端解码方案（安卓、linux、嵌入式开发板）\n\n# 固件安装\n这里是利用的TFTP和UART来安装固件\n### SoC识别\nSoC（系统级芯片）包括相机的 CPU 内核以及所有必要的外围设备，例如相机和网络接口。**这部分由摄像头厂商确定**，需要看IC标记丝印来查看，或者使用ipctool软件识别SoC型号\n\n### 闪存芯片大小\n通常是摄像头8引脚的一个芯片，可以通过U-boot启动过程确认，也可以查看丝印（丝印包含64，即是8M，包含128，即16M）\n\n### TFTP服务器\nTFTP（Trivial File Transfer Protocol）服务器是一种简单的文件传输协议服务器，用于在网络设备之间传输文件。与FTP（File Transfer Protocol）相比，TFTP更轻量级，通常用于在局域网（LAN）中传输小文件，如配置文件、固件更新等。 \n\n说白了就是用它来传固件的\n\n### 连接相机的UART端口\n最好是看摄像头手册 好用的就是一个usb转ttl的串口适配器\n![](https://image.aruoshui.fun/i/2025/01/13/xl7rg7-0.webp)\n\n将适配器上的引脚连接到 UART 端口的可能触点。使用标准电源适配器为相机供电。如果幸运，就可以在终端窗口中看到 Booting log。在某些情况下，如果在屏幕上看到乱码文本而不是引导内核，需要将连接速度更改为 57600 bps，然后重试。RX、TX\n\n\n### 访问bootloader\n通过按计算机键盘上的组合键来引导加载程序控制台， 在 bootloader 启动和 Linux 内核启动之前。 在上电的时候疯狂enter\n\n进入u-boot的命令行\n```powershell\nsetenv ipaddr 10.81.1.230;setenv serverip 10.81.1.102\nmw.b x21000000 x x1000000\ntftpboot 0x21000000 openipc-ssc338q-fpv-16mb.bin\ntftp 0x21000000 openipc-ssc338q-fpv-16mb.binsf probe 0;sf lock 0;\nsf erase 0x0 0x1000000;sf write 0x21000000 0x0 0x1000000\nreset\n```\n\n U-Boot 命令系列显示了一个典型的嵌入式系统启动流程，尤其是在网络启动（TFTP）和闪存操作方面的详细步骤。\n\n1. **`setenv ipaddr 10.81.1.230` 和 `setenv serverip 10.81.1.102`**\n这两个命令设置了 U-Boot 环境变量，用于指定网络设置,用于通过 TFTP 下载内核或文件系统镜像：\n   - **`ipaddr`**：这设置了 U-Boot 启动时使用的本机 IP 地址，`10.81.1.230` 是设备将会使用的 IP 地址。\n   - **`serverip`**：指定了 TFTP 服务器的 IP 地址，`10.81.1.102` 是存储内核镜像的服务器。\n1. **`mw.b x21000000 x x1000000`**\n    清空或初始化内存区域，确保内存中没有残留数据\n   - **`mw.b`** 是 U-Boot 中的 \"Memory Write Byte\" 命令，它用于在内存中写入数据。\n   - **`x21000000`** 是目标内存地址，这里是指将数据写入设备内存的地址 `0x21000000`（通常是设备的 RAM）。\n   - **`x`** 是要写入的值，代表数据的内容。\n   - **`x1000000`** 是写入的字节数，表示要写入的字节数为 `0x1000000`（即 16MB）。\n\n\n\n2. **`tftpboot 0x21000000 openipc-ssc338q-fpv-16mb.bin`**\n    通过网络从 `10.81.1.102` 服务器上获取 `openipc-ssc338q-fpv-16mb.bin` 文件，并将其存储到设备内存中，准备进行闪存写入。\n   - **`tftpboot`** 命令从 TFTP 服务器下载文件，并将文件加载到指定的内存地址。\n   - **`0x21000000`** 是目标内存地址，这里表示将下载的文件存储在内存地址 `0x21000000` 开始的位置。\n   - **`openipc-ssc338q-fpv-16mb.bin`** 是要下载的文件名，通常是嵌入式设备的固件或内核镜像文件。\n\n\n\n4. **`sf probe 0; sf lock 0;`**\n    在闪存上执行写入操作时，相关区域不会被意外覆盖。\n   - **`sf probe 0`**：初始化并识别闪存设备，`0` 是闪存设备的编号。在 U-Boot 中，`sf` 是指闪存（SPI Flash），这个命令确保设备能够识别并与闪存进行通信。\n   - **`sf lock 0`**：锁定闪存的第一个区域，通常用于防止闪存区域被意外擦除或写入。\n  \n5. **`sf erase 0x0 0x1000000`**\n    这个命令用于擦除闪存的特定区域，擦除操作确保闪存上的旧数据被清除，为写入新的镜像做准备。：\n   - **`sf erase 0x0 0x1000000`** 表示擦除从地址 `0x0` 开始，大小为 `0x1000000`（即 16MB）的闪存区域。\n  \n6. **`sf write 0x21000000 0x0 0x1000000`**\n   将内核镜像（或者其他固件文件）写入到设备的闪存中，为下次启动准备好内核。\n   - **`sf write`** 用于将数据从内存写入闪存。\n   - **`0x21000000`** 是内存中的数据起始地址，前面的 TFTP 操作已经将内核镜像存放在该地址。\n   - **`0x0`** 是闪存的起始地址，表示将数据写入闪存的第一个位置。\n   - **`0x1000000`** 是写入的字节数，表示将 16MB 的数据从内存写入闪存。\n\n\n\n7. **`reset`**\n   - **`reset`** 命令重启设备，使设备重新启动并从闪存或其他启动介质加载操作系统。\n\n\n\nU-Boot 命令，设备完成了以下操作：\n\n1. 配置了网络设置（`ipaddr` 和 `serverip`）。\n2. 清空并初始化了内存区域。\n3. 从 TFTP 服务器下载了一个固件镜像到内存。\n4. 对闪存进行了操作，包括擦除和写入内核镜像。\n5. 最终触发系统重启，准备从新写入的镜像启动。\n\n\n### 保存原始固件\n### 固件烧写\n### 串口登录设置\n### 网络配置及远程登录\n### 连接wifi网卡\n### 检查WiFi模块的识别情况\n### 生成和安装 WFB-NG 的密钥配对\n### 编辑 wfb.conf 以设置正确的 wifi 频道\n### 在相机上配置 majestic.yaml 文件\n\n# 视频延时组成\n\n视频链路：摄像头==》编码==》传输==》解码==》显示\n整个图传系统的延时主要是：编码延时、传输延时、解码延时：\n1. 摄像头数据采集延时(camera)\n2. 编码器编码延时(H264 codec)\n3. 无线网络延时(wfb_ng)： ~ 5ms\n4. 解码器解码延时(H264 decoder)\n5. 显示器刷新延时(monitor refresh rate)\n\n## 解码延时\n解码延时中包含\n- Wfb 解包时间\n- 内核队列延迟 \n- 硬件解码时间\n\n### gstreamer\nJetson 的 NVIDIA V4L2 解码器（如 nvv4l2decoder）通过专用硬件模块（如 NVDEC）实现 H.264/H.265 视频流的硬解码，显著降低 CPU 负载并减少处理延迟\n\n**V4L2 驱动：**\nV4L2 是 Linux 内核中用于视频设备的标准接口。\n- 用户空间程序（如 GStreamer）访问摄像头数据。\n- Jetson 平台上的 V4L2 驱动经过优化，能够直接将数据传递到硬件加速器（如 NVDEC 和 NVENC），从而减少 CPU 的负载。\n\n当摄像头驱动捕获到一帧数据后，会将其放入内核中的缓冲区队列中。GStreamer 应用程序通过 V4L2 接口从内核队列中读取数据。\n\n![v4l2](https://image.aruoshui.fun/i/2025/04/21/xce35n-0.webp)\n\n**GStreamer 缓冲区与网络弹性**\n\n动态缓冲管理：\n- 流媒体场景中，通过监听 GST_MESSAGE_BUFFERING 消息动态调整缓冲区大小。例如，当缓冲级别低于 100% 时暂停流水线，待缓冲恢复后继续播放，避免因网络波动导致的数据饥饿。\n\n时钟同步机制：\n- GStreamer 全局时钟（如 GST_CLOCK_TYPE_REALTIME）的丢失会触发重新同步。处理 GST_MESSAGE_CLOCK_LOST 消息时，需暂停并重启流水线以重建时钟基准。\n\n使用 queue 插件限制缓冲区大小\n`udpsrc port=5600 ! queue max-size-buffers=2 ! rtph265depay ! ...`\n\n基础的解码脚本：\n```powershell\n#!/bin/bash\ncurrent_date=$(date +'%Y%d%m_%H%M%S')\ncd ~/Videos\n\nif [[ $1 == \"save\" ]]\nthen\n\tgst-launch-1.0 -e udpsrc port=5600 caps='application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265' ! rtph265depay ! h265parse ! tee name=t ! queue ! mppvideodec ! xvimagesink sync=false t. ! queue ! matroskamux ! filesink location=record_${current_date}.mkv\nelse\n\tgst-launch-1.0 udpsrc port=5600 caps='application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265' ! rtph265depay ! h265parse ! mppvideodec ! xvimagesink sync=false\nfi\n\n```\n\n在 jetson 上查看是否调用硬件解码的方法是使用 jtop 工具，具体方法参考[《 NVIDIA查看CPU、内存、GPU使用情况 》](https://blog.csdn.net/zong596568821xp/article/details/80268034)\n\n[jetson上的硬件解码器](https://docs.nvidia.com/jetson/archives/r35.6.1/DeveloperGuide/SD/Multimedia/AcceleratedGstreamer.html)\n\n\n\n# 地面站\n## 接收端网卡\n目前开发的地面站支持的大多是rtl8812au这一款网卡（主要是网卡驱动问题）\n并支持monitor 模式\n\n## monitor模式\n### 什么是monitor模式\nWiFi Monitor模式需要WiFi芯片本身支持，并且驱动要支持相应的接口。\n\n在非Monitor模式 （平时正常使用的状态）下，内核会将802.11帧封装成普通网络帧传递给上层； 而在Monitor模式 下，内核则会直接将802.11帧传给上层，不会进行封装，用户层就通过接口拿到RAW包，可以按802.11帧格式进行包解析处理。\n\n在Linux内核中，hostap_80211_rx 函数是IEEE 802.11接收无线skb的tasklet函数，其作用是处理802.11网卡传递过来的数据包。倘若网卡被设置成monitor模式，该函数中会调用如下分支：\n```c\n if (local->iw_mode == IW_MODE_MONITOR) {\n\n    \n     monitor_rx(dev, skb, rx_stats);\n    \n     return;\n    \n }\n```\n在monitor_rx 函数中，主要是prism2_rx_80211 函数，将带有802.11头的skb直接发送给netif。netif为linux内核网络数据包的标准框架。在prism2_rx_80211中，在skb里补充了一个抓包的头，给用户提供更多的包信息。这个头对应的数据结构为linux_wlan_ng_cap_hdr ，具体声明如下：\n```c\n struct linux_wlan_ng_cap_hdr {\n\n    \n     __be32 version;\n    \n     __be32 length;\n    \n     __be64 mactime;\n    \n     __be64 hosttime;\n    \n     __be32 phytype;\n    \n     __be32 channel;\n    \n     __be32 datarate;\n    \n     __be32 antenna;\n    \n     __be32 priority;\n    \n     __be32 ssi_type;\n    \n     __be32 ssi_signal;\n    \n     __be32 ssi_noise;\n    \n     __be32 preamble;\n    \n     __be32 encoding;\n    \n } __packed;\n```\n### 如何开启\n使用如下命令可以实现：\n`iwconfig wlan0 mode Monitor`\n其调用了如下ioctl来配置：\n`ret = ioctl(skfd, SIOCSIWMODE, &wrq);`\n对应的配置模式，通过wrq参数来定义。而上面的skfd则由下面操作获取：\n`skfd = socket(AF_INET, SOCK_DGRAM, 0);`\n\n\n## 网卡选择\n网卡官方支持：\nRTL8812AU、ar9271、rtl8812eu\n\nhttps://forums.developer.nvidia.com/t/rtl8822ce-access-point-mode/288083\n板载算力板上的网卡型号为rtl8812CE，不支持monitor mode\n\n\n## WIfibroadcast的原理分析：\n### 远距离wifi技术：\n{% link Wi-Fi极限谈1：最大传输距离的“标准”答案, https://zhuanlan.zhihu.com/p/121872101,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n2.4GHz 频率\nRSSI（Received Signal Strength Indicator）值代表设备接收到的信号强度，通常用负值表示。RSSI 值范围一般如下：\n\n接近 0（如 -30）: 信号非常强，设备与信号源的距离较近。\n中等值（如 -50 至 -70）: 信号质量良好，适合正常通信。\n较弱值（如 -80 至 -90）: 信号较弱，可能会影响通信质量。\n非常弱（小于 -90）: 信号几乎不可用，设备可能会断开连接。\n解读你的 RSSI 值\n你当前的 RSSI 值是 -41：\n\n这是一个非常强的信号，表示设备离信号源很近，通信质量应该非常好。\n\npkt/s代表每秒传输的数据包数量（packets per second）。这是一种衡量网络性能的指标，用于表示网络接口在一秒钟内可以发送或接收的数据包的数量。这个数值可以帮助评估网络的负载情况和传输效率。较高的pkt/s值意味着网络接口能够处理更多的数据包\n\n8 Mbps (MCS #1 调制) 涉及到的是无线网络通信中的两个概念：数据传输速率和调制编码方案（MCS，Modulation and Coding Scheme）。\n\n1. **8 Mbps**：指的是数据传输速率，即每秒可以传输的数据量为8兆比特。这是一个衡量网络速度的指标，表示理论上一秒钟内可以传送8兆比特（Mb）的数据。\n\n2. **MCS #1**：MCS代表调制编码方案，它用于指定在无线通信中使用的调制方式和编码率。不同的MCS索引号对应着不同的调制方式和编码率组合，从而影响数据传输速率和可靠性。MCS #1通常指使用相对较低复杂度的调制和编码策略，以确保更稳定的传输质量，特别是在信号条件不是最优的情况下。\n\n对于802.11n标准（Wi-Fi 4），MCS #1一般对应于使用BPSK（二进制相移键控）调制和1/2编码率。这意味着每个符号携带1个比特的信息，并且有一半的数据位被用于前向纠错编码，以增强数据传输的可靠性。在单空间流（Single Spatial Stream）和20 MHz带宽的条件下，这种配置可以达到大约7.2 Mbps到8 Mbps的数据传输速率。\n\n因此，“8 Mbps (MCS #1调制)”意味着在网络使用特定的调制和编码设置（在此例中为MCS #1，涉及BPSK调制和1/2编码率）时，能够实现的最大理论数据传输速率为8 Mbps。需要注意的是，实际传输速率可能会受到环境因素、设备性能等多种因素的影响。\n\n\n#### 目标板配置\n`devices/ssc338q_fpv_openipc-urllc-aio/br-ext-chip-sigmastar/configs/ssc338q_fpv_openipc-urllc-aio_defconfig#L103`\n\n`BR2_PACKAGE_WIFIBROADCAST=y`配置好选项\n\n#### 软件版配置\n`general/package/wifibroadcast/wifibroadcast.mk#L7`\n\n`WIFIBROADCAST_VERSION = 24.08`\n\n#### 视频数据发送 & 接收\n\n`general/package/wifibroadcast/files/wifibroadcast#L109-L117`\n\n运行：\n```powershell\nstart_drone_wfb() {\n\twfb_tx -p \"$stream\" -u \"$udp_port\" -R \"$rcv_buf\" -K \"$keydir/$unit.key\" -B \"$bandwidth\" \\\n\t\t-M \"$mcs_index\" -S \"$stbc\" -L \"$ldpc\" -G \"$guard_interval\" -k \"$fec_k\" -n \"$fec_n\" \\\n\t\t-T \"$pool_timeout\" -i \"$link_id\" -f \"$frame_type\" -C 8000 \"$wlan\" > /dev/null &\n}\n\nstart_gs_wfb() {\n\twfb_rx -c \"$udp_addr\" -u \"$udp_port\" -p \"$stream\" -K \"$keydir/$unit.key\" -i \"$link_id\" \"$wlan\" > /dev/null &\n}\n```\n\n\n### datalink\n`devices/ssc338q_fpv_openipc-urllc-aio/br-ext-chip-sigmastar/configs/ssc338q_fpv_openipc-urllc-aio_defconfig#L102`\n\nBR2_PACKAGE_DATALINK=y\n\n#### 软件版配置\n`general/package/datalink/files/telemetry#L13-L16`\n\n```powershell\nif [ ! -f /usr/bin/telemetry_rx ] && [ ! -f /usr/bin/telemetry_tx ]; then\n\tln -s /usr/bin/wfb_rx /usr/bin/telemetry_rx\n\tln -s /usr/bin/wfb_tx /usr/bin/telemetry_tx\nfi\n```\n\n`general/package/datalink/files/telemetry_drone.conf#L15-L20`\n\n```powershell\nstream_rx=144\nstream_tx=16\nlink_id=7669206\nframe_type=data\nport_rx=14551\nport_tx=14550\n```\n\n\n`general/package/datalink/files/telemetry_gs.conf#L15-L20`\n```powershell\nstream_rx=16\nstream_tx=144\nlink_id=7669206\nframe_type=data\nport_rx=14651\nport_tx=14650\n```\n\n#### 数据发送 & 接收\n```powershell\nstart_drone_telemetry() {\n\tif [ \"$one_way\" = \"false\" ]; then\n\t\ttelemetry_rx -p \"$stream_rx\" -u \"$port_rx\" -K \"$keydir/$unit.key\" -i \"$link_id\" \"$wlan\" > /dev/null &\n\tfi\n\ttelemetry_tx -p \"$stream_tx\" -u \"$port_tx\" -K \"$keydir/$unit.key\" -B \"$bandwidth\" \\\n\t\t-M \"$mcs_index\" -S \"$stbc\" -L \"$ldpc\" -G \"$guard_interval\" -k \"$fec_k\" -n \"$fec_n\" \\\n\t\t-T \"$pool_timeout\" -i \"$link_id\" -f \"$frame_type\" \"$wlan\" > /dev/null &\n}\n\nstart_gs_telemetry() {\n\tif [ \"$one_way\" = \"false\" ]; then\n\t\ttelemetry_tx -p \"$stream_tx\" -u \"$port_tx\" -K \"$keydir/$unit.key\" -B \"$bandwidth\" \\\n\t\t\t-M \"$mcs_index\" -S \"$stbc\" -L \"$ldpc\" -G \"$guard_interval\" -k \"$fec_k\" -n \"$fec_n\" \\\n\t\t\t-T \"$pool_timeout\" -i \"$link_id\" -f \"$frame_type\" \"$wlan\" > /dev/null &\n\tfi\n\ttelemetry_rx -p \"$stream_rx\" -u \"$port_rx\" -K \"$keydir/$unit.key\" -i \"$link_id\" \"$wlan\" > /dev/null &\n}\n```\n\n## 🧱 **WiFiBroadcast (WFB-TX) 架构分析图**\n\n```\nmain(int argc, char* const *argv)\n│\n├── 命令行参数解析（getopt）\n│    ├── 设置运行模式：LOCAL / DISTRIBUTOR / INJECTOR\n│    ├── FEC 参数：k, n, fec_delay, fec_timeout\n│    ├── 网络配置：UDP 端口 / Unix socket / 接收方地址列表\n│    ├── 加密参数：keypair 文件路径\n│    ├── 日志设置：log_interval\n│    ├── 控制接口：control_port\n│    └── 物理层参数：bandwidth, MCS index, VHT mode, STBC/LDPC 等\n│\n├── 系统熵检查（确保随机数安全）\n│    └── 检查 /dev/random 的熵池是否足够用于加密 key 生成\n│\n├── libsodium 初始化\n│    └── sodium_init()：初始化加密库，用于 FEC session key 和数据加密\n│\n├── radiotap header 初始化\n│    └── 根据物理层参数构造 IEEE80211_RADIOTAP_HDR，用于注入原始帧\n│\n├── 根据 tx_mode 启动不同主循环\n│\n│    ┌────────────────────────────────────────────────────────────┐\n│    │ case LOCAL: 本地发送模式（发射端）                        │\n│    │   ├─ 使用 local_loop_udp 或 local_loop_unix                │\n│    │   ├─ 打开 raw socket 向 wlanX 注入原始数据包               │\n│    │   └─ 创建 LocalTransmitter 实例负责 FEC 编码和加密         │\n│    │                                                            │\n│    │    ┌──────────────────────────────────────────────────┐    │\n│    │    │ LocalTransmitter                                  │    │\n│    │    │   ├── FEC 编码 (Reed-Solomon k/n)                 │    │\n│    │    │   ├── 数据分块与 FEC 分组                           │    │\n│    │    │   ├── 加密（使用 libsodium）                       │    │\n│    │    │   ├── 时间戳与 epoch 管理                          │    │\n│    │    │   └── tags 管理（用于 FEC block 标识）             │    │\n│    │    └──────────────────────────────────────────────────┘    │\n│    │                                                            │\n│    │    ┌──────────────────────────────────────────────────┐    │\n│    │    │ data_source_local(): 主事件循环                   │    │\n│    │    │   ├── 监听输入源（如 stdin 或 video pipe）        │    │\n│    │    │   ├── 触发 FEC 编码                               │    │\n│    │    │   ├── 发送 FEC block 到所有目标设备               │    │\n│    │    └──────────────────────────────────────────────────┘    │\n│    │                                                            │\n│    └────────────────────────────────────────────────────────────┘\n│\n│    ┌────────────────────────────────────────────────────────────┐\n│    │ case DISTRIBUTOR: 接收端（分布式接收器）                  │\n│    │   ├─ 使用 distributor_loop_udp 或 distributor_loop_unix    │\n│    │   ├─ 多路复用多个 UDP/Unix socket                         │\n│    │   └─ 创建 RemoteTransmitter 实例处理 FEC 解码              │\n│    │                                                            │\n│    │    ┌──────────────────────────────────────────────────┐    │\n│    │    │ RemoteTransmitter                              │    │\n│    │    │   ├── FEC 解码                                 │    │\n│    │    │   ├── 包重组                                   │    │\n│    │    │   ├── 支持 FEC 超时机制                        │    │\n│    │    │   └── 数据恢复并注入到 wlanX 设备              │    │\n│    │    └────────────────────────────────────────────────┘    │\n│    │                                                            │\n│    │    ┌──────────────────────────────────────────────────┐    │\n│    │    │ data_source(): 主事件循环                       │    │\n│    │    │   ├── 接收远程 FEC block                        │    │\n│    │    │   ├── FEC 解码并恢复丢失的数据包                │    │\n│    │    │   ├── 控制指令处理（修改 FEC 参数等）           │    │\n│    │    └────────────────────────────────────────────────┘    │\n│    │                                                            │\n│    └────────────────────────────────────────────────────────────┘\n│\n│    ┌────────────────────────────────────────────────────────────┐\n│    │ case INJECTOR: 测试注入器                                │\n│    │   └─ injector_loop()：模拟 FEC block 注入测试流量          │\n│    └────────────────────────────────────────────────────────────┘\n│\n├── 异常捕获（try-catch）\n│    └── 捕获 runtime_error 并输出错误信息后退出\n│\n└── 正常退出\n```\n\n---\n\n## 📊 总结说明\n\n| 模块 | 功能 |\n|------|------|\n| main() | 程序入口，负责参数解析、初始化、启动主循环 |\n| LocalTransmitter | 负责 FEC 编码、加密、时间戳管理、标签分配 |\n| RemoteTransmitter | 负责 FEC 解码、丢包恢复、数据注入到 wlanX |\n| data_source / data_source_local | 主事件循环，处理数据流和控制信号 |\n| FEC 编解码 | 基于 Reed-Solomon(k,n)，支持前向纠错 |\n| 加密机制 | 使用 libsodium 库进行 session key 管理和数据加密 |\n| Radiotap Header | 封装物理层参数，兼容多种无线网卡 |\n| 控制接口 | 支持通过 control_port 动态调整 FEC 参数 |\n| 日志系统 | 输出运行状态、丢包率、延迟等关键指标 |\n\n---\n\n## 📎 示例命令对照\n\n\n| 模式 | 命令示例 | 对应函数 |\n|------|----------|----------|\n| 发射端 | `wfb_tx -u 5600 -k 8 -n 12 -f data wlan0` | `local_loop_udp()` |\n| 接收端 | `wfb_rx -d -u 5600 host:5600` | `distributor_loop()` |\n| 本地测试 | `wfb_rx -U /tmp/wfb -d host:port` | `distributor_loop_unix()` |\n| 注入测试 | `wfb_rx -I 10000 wlan0` | `injector_loop()` |\n\n## Linux 内核启动过程\n一旦 U-Boot 把内核加载到内存并将控制权交给内核，Linux 内核就开始启动。内核启动的过程可以分为几个重要的阶段：\n\n\n## 内核说明\n### 内核初始化：\n\n解压内核：如果内核是压缩格式（uImage），它会首先被解压。\n设置系统环境：内核初始化过程中，会初始化硬件环境，包括内存、CPU、时钟、I/O 控制器等。\n启动内核主线程：内核开始执行第一个用户空间进程，通常是 init 进程。\n设备驱动加载：内核会根据设备树（Device Tree，DT）或者硬编码的设备信息来加载相关硬件设备的驱动，确保硬件能够被正确识别并与操作系统交互。\n\n内核调度和管理资源：内核的调度器开始工作，管理系统资源，如 CPU、内存、I/O 等。\n\n### init 进程和用户空间启动\n在 Linux 内核初始化完毕后，控制权会传递给第一个用户空间进程 init，它通常会启动系统中所有的守护进程和服务。\n\n- 挂载 /proc 文件系统。\n- 检查并挂载支持的根文件系统。\n- 通过 overlay 或 overlayfs 文件系统进行联合挂载，允许在嵌入式系统中以最小化的方式实现根文件系统的可写层。\n- 使用 pivot_root 更改根文件系统。\n- 挂载其他系统关键文件系统（如 /proc、/dev 和 /overlay）。\n\n#### RootFS 的内容\n   \n在 Buildroot 中，根文件系统（RootFS）是由多个目录和文件构成的，这些目录和文件用于支持系统运行。常见的文件夹有：\n\n/bin/：基本的可执行文件，如 sh、ls 等。\n/sbin/：系统管理程序，如 init、ifconfig 等。\n/etc/：系统配置文件，如网络配置、服务启动配置等。\n/lib/：共享库。\n/tmp/：临时文件。\n/proc/：虚拟文件系统，提供系统信息。\n/sys/：虚拟文件系统，提供内核信息。\n/dev/：设备文件。\n\n```powershell\n├── bin\n├── dev\n├── etc\n├── init\n├── lib\n├── lib32 -> lib\n├── linuxrc -> bin/busybox\n├── media\n├── mnt\n├── opt\n├── overlay\n├── proc\n├── rom\n├── root\n├── run\n├── sbin\n├── sys\n├── tmp\n├── usr\n├── utils\n└── var\n```\n\n\n在这些目录中，init 文件是根文件系统中用于启动系统的第一个进程。\n\n#### init 与文件系统的关系\n在Linux嵌入式系统的开发和维护过程中，了解系统启动和服务管理机制是至关重要的。init 文件本身就是嵌入在构建的文件系统中的。\n\n\n其中，/etc/init.d/目录扮演了关键角色，它包含了用于初始化、启动、重启或停止各种服务的脚本。\ninit.d是指包含一系列 Shell脚本 的目录，这些脚本用于控制服务（也称为守护进程）的生命周期。当系统启动时，init进程会根据预定义的规则执行这些脚本，以确保必要的服务能够正确启动。\n\n```powershell\nrcK         S01syslogd  S30customizer  S40network   S60crond     S98datalink\nrcS         S02klogd    S35modules     S49ntpd      S70vendor    S98vtun\nS01seedrng  S02sysctl   S38mdev        S50dropbear  S95majestic  S99rc.local\n```\n\n\n\n\n#### 系统脚本运行情况\n{% folding rcS%}\n\n先看一下rcS文件，它是本目录在开机时最先启动的文件。也是系统进入多用户模式之前的初始化脚本。它会根据配置启动各种系统服务，通常会依赖其他脚本来执行特定的任务。\n\nrcS通常用于：\n- 初始化基本系统服务\n- 挂载文件系统\n- 启动 init.d 目录下的所有 S 开头的脚本\n- init.d 目录结构遵循了 SysV init 启动方式，rcS 主要是用来遍历 S 开头的脚本，并依次执行它们。\n- 在使用 **Buildroot** 进行内核裁剪之后，init进程的启动工作流会根据 `/etc/init.d` 中的启动脚本顺序来执行。\n\n```powershell\n#!/bin/sh\nexport SENSOR=$(fw_printenv -n sensor)\nexport UPGRADE=$(fw_printenv -n upgrade)\nexport TZ=$(cat /etc/TZ)\n\nfor i in /etc/init.d/S??*; do\n\t[ ! -f \"$i\" ] && continue\n\tcase \"$i\" in\n\t\t*)\n\t\t\t$i start\n\t\t\t;;\n\tesac\ndone\n```\n- 循环遍历 `/etc/init.d/` 目录下所有以 `S` 开头且后面跟有两位数字（`S??*`）的文件。\n- `[ ! -f \"$i\" ] && continue` 检查每个文件是否是普通文件（不是目录等其他类型），如果不是普通文件，则跳过该文件。\n- `case \"$i\" in *) $i start ;; esac` 对每个文件（即每个服务脚本）执行 `start` 参数。触发服务脚本的启动。服务脚本内会定义如何启动服务（如启动系统守护进程、初始化硬件设备、配置网络等）。\n\n{% endfolding %}\n\n\n{% folding rcK%}\n\n与rcS相对\n这个脚本通常在系统关闭或者进入单用户模式时运行。它主要用来停止一些服务，清理系统资源。\n```powershell\n#!/bin/sh\n\nfor i in $(ls -r /etc/init.d/S??*); do\n\t[ ! -f \"$i\" ] && continue\n\tcase \"$i\" in\n\t\t*)\n\t\t\t$i stop\n\t\t\t;;\n\tesac\ndone\n```\n\n{% endfolding %}\n\n\n{% folding S01seedrng%}\n\n作用是启动一个随机数生成服务，确保系统在启动时能够使用持久化的种子数据来生成加密级别的随机数。其主要作用是增强系统的随机性，确保用于加密和安全任务时生成的随机数质量高，防止系统依赖不安全或预测性的随机数。脚本还支持动态配置种子存储位置和一些特定的安全选项。\n\n{% endfolding %}\n\n{% folding S01syslogd%}\n`S01syslogd` 脚本的作用是启动和管理 `syslogd` 服务，`syslogd` 是一个日志守护进程，用于收集、存储和转发系统日志。这个脚本确保 `syslogd` 正常运行，并在系统启动时自动启动它。\n\n```bash\nDAEMON=\"syslogd\"\nPIDFILE=\"/var/run/$DAEMON.pid\"\nDAEMON_ARGS=\"-n -C64 -t\"\n```\n- `DAEMON=\"syslogd\"`：定义了守护进程的名称，即 `syslogd`，它是负责处理系统日志的服务。\n- `PIDFILE=\"/var/run/$DAEMON.pid\"`：定义了守护进程的 PID 文件位置，`/var/run/syslogd.pid` 用于存储 `syslogd` 的进程 ID。\n- `DAEMON_ARGS=\"-n -C64 -t\"`：定义了 `syslogd` 启动时的参数：\n  - `-n`：告诉 `syslogd` 以非守护进程模式启动，即不将其转为后台进程。\n  - `-C64`：设置日志缓冲区大小为 64 KB。\n  - `-t`：标记每条日志信息，通常用于调试日志输出。\n\n### `start` 函数\n```bash\nstart() {\n\techo -n \"Starting $DAEMON: \"\n\tstart-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"$DAEMON\" -- $DAEMON_ARGS\n\tif [ $? -eq 0 ]; then\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n}\n```\n- `start` 函数用于启动 `syslogd`：\n  - `start-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"$DAEMON\" -- $DAEMON_ARGS`：该命令通过 `start-stop-daemon` 启动守护进程 `syslogd`，并将其参数传递给进程。选项解析：\n    - `-b`：使进程在后台运行。\n    - `-m`：以守护进程的方式启动。\n    - `-S`：启动进程时保持锁定。\n    - `-q`：安静模式，不显示多余信息。\n    - `-p \"$PIDFILE\"`：指定存储 PID 文件的位置。\n    - `-x \"$DAEMON\"`：指定要启动的守护进程程序，即 `syslogd`。\n    - `-- $DAEMON_ARGS`：传递参数给 `syslogd`，如日志缓冲区大小等。\n\n- 启动成功后输出 `OK`，失败则输出 `FAIL`。\n\n### `stop` 函数\n```bash\nstop() {\n\techo -n \"Stopping $DAEMON: \"\n\tstart-stop-daemon -K -q -p \"$PIDFILE\"\n\tif [ $? -eq 0 ]; then\n\t\trm -f \"$PIDFILE\"\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n}\n```\n- `stop` 函数用于停止 `syslogd`：\n  - `start-stop-daemon -K -q -p \"$PIDFILE\"`：使用 `start-stop-daemon` 停止守护进程，`-K` 表示终止进程，`-q` 表示安静模式，`-p \"$PIDFILE\"` 用于指定 PID 文件。\n  - 停止成功后，删除 PID 文件并输出 `OK`，否则输出 `FAIL`。\n\n### 处理脚本参数\n```bash\ncase \"$1\" in\n\tstart|stop)\n\t\t$1\n\t\t;;\n\n\trestart|reload)\n\t\tstop\n\t\tsleep 1\n\t\tstart\n\t\t;;\n\n\t*)\n\t\techo \"Usage: $0 {start|stop|restart|reload}\"\n\t\texit 1\n\t\t;;\nesac\n```\n- 脚本通过 `case` 语句根据传入的参数来决定执行哪个操作：\n  - `start`：调用 `start` 函数，启动 `syslogd`。\n  - `stop`：调用 `stop` 函数，停止 `syslogd`。\n  - `restart` 或 `reload`：先停止进程，等待 1 秒后重新启动，确保服务能平滑重启。\n  - 如果参数无效，输出使用提示并退出脚本。\n{% endfolding %}\n\n\n{% folding S02klogd%}\n**klogd** 会收集内核级别的日志信息，通常与 **syslogd** 配合使用，将内核日志发送到合适的位置。\n这个 `S02klogd` 脚本是一个 **SysV-style** 启动脚本，专门用于管理 `klogd` 进程（Kernel Logging Daemon）。它遵循传统的 init 脚本格式，使用 `start-stop-daemon` 命令来启动和停止 `klogd`，并且能够创建 `PIDFILE` 以便于进程管理。\n\n---\n\n## **详细解析**\n这个脚本的主要作用是控制 `klogd`（Kernel Log Daemon）的启动、停止和重启，并且遵循 SysV init 脚本的标准格式。它的结构清晰，主要由以下几个部分组成：\n\n### **1. 变量定义**\n```sh\nDAEMON=\"klogd\"\nPIDFILE=\"/var/run/$DAEMON.pid\"\nKLOGD_ARGS=\"\"\n```\n- `DAEMON=\"klogd\"`：定义守护进程的名称。\n- `PIDFILE=\"/var/run/$DAEMON.pid\"`：定义进程的 PID 文件路径。\n- `KLOGD_ARGS=\"\"`：定义 `klogd` 运行时的附加参数，默认是空的。\n\n### **2. 读取默认配置**\n```sh\n[ -r \"/etc/default/$DAEMON\" ] && . \"/etc/default/$DAEMON\"\n```\n- 这里会检查 `/etc/default/klogd` 文件是否可读，如果存在，则加载它的内容。\n- 这个设计使得 `klogd` 的启动参数可以在 `/etc/default/klogd` 里定义，而不是硬编码在脚本中，增强了灵活性。\n\n### **3. `start()` 函数**\n```sh\nstart() {\n\tprintf 'Starting %s: ' \"$DAEMON\"\n\tstart-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"/sbin/$DAEMON\" \\\n\t\t-- -n $KLOGD_ARGS\n\tstatus=$?\n\tif [ \"$status\" -eq 0 ]; then\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n\treturn \"$status\"\n}\n```\n- 先打印 `\"Starting klogd: \"` 提示信息。\n- 使用 `start-stop-daemon` 启动 `klogd`：\n  - `-b`：后台运行（daemonize）。\n  - `-m`：创建 `PIDFILE`。\n  - `-S`：启动服务（start）。\n  - `-q`：安静模式（quiet），不打印额外信息。\n  - `-p \"$PIDFILE\"`：指定 `PIDFILE`。\n  - `-x \"/sbin/$DAEMON\"`：执行 `/sbin/klogd`。\n  - `-- -n $KLOGD_ARGS`：传递 `-n` 选项给 `klogd`，表示不创建 `PIDFILE`，因为 `BusyBox` 版 `klogd` 不会自己管理 `PIDFILE`，所以这里用 `start-stop-daemon` 处理。\n- `status=$?` 获取 `start-stop-daemon` 的退出状态码：\n  - `0` 代表成功，打印 `\"OK\"`。\n  - 非 `0` 代表失败，打印 `\"FAIL\"`。\n- `return \"$status\"` 返回状态码，以便于外部脚本检查。\n\n### **4. `stop()` 函数**\n```sh\nstop() {\n\tprintf 'Stopping %s: ' \"$DAEMON\"\n\tstart-stop-daemon -K -q -p \"$PIDFILE\"\n\tstatus=$?\n\tif [ \"$status\" -eq 0 ]; then\n\t\trm -f \"$PIDFILE\"\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n\treturn \"$status\"\n}\n```\n- 先打印 `\"Stopping klogd: \"` 提示信息。\n- `start-stop-daemon -K -q -p \"$PIDFILE\"`：\n  - `-K` 选项用于停止（kill）进程。\n  - `-q` 选项是安静模式（quiet）。\n  - `-p \"$PIDFILE\"` 选项指定 `PIDFILE`，以便找到并杀死 `klogd` 进程。\n- 如果进程成功终止：\n  - 删除 `PIDFILE`。\n  - 打印 `\"OK\"`。\n- 如果失败，打印 `\"FAIL\"` 并返回错误码。\n\n### **5. `restart()` 函数**\n```sh\nrestart() {\n\tstop\n\tsleep 1\n\tstart\n}\n```\n- 先调用 `stop()` 终止进程。\n- `sleep 1` 等待 1 秒，确保进程完全退出。\n- 重新调用 `start()` 启动 `klogd`。\n\n### **6. 命令行参数解析**\n```sh\ncase \"$1\" in\n\tstart|stop|restart)\n\t\t\"$1\";;\n\treload)\n\t\trestart;;\n\t*)\n\t\techo \"Usage: $0 {start|stop|restart|reload}\"\n\t\texit 1\nesac\n```\n- 允许 `start|stop|restart` 作为参数，直接调用相应的函数。\n- `reload` 其实是 `restart`，因为 `klogd` 本身没有 `reload` 机制，所以用 `restart` 代替。\n- 其他情况打印用法说明，并返回 `exit 1` 表示参数错误。\n\n---\n\n{% endfolding %}\n\n\n{% folding S02sysctl %}\n\n**sysctl** 用于配置和调整内核参数。这个脚本会设置一些内核的运行时参数，比如文件系统、内存、网络等方面的配置。\n\n\n---\n### **脚本概述**\n这个 `S02sysctl` 脚本用于管理 `sysctl` 配置文件的加载。它读取多个配置文件，并将其应用到内核参数中。它还根据是否存在 `logger` 命令来决定是将输出发送到系统日志中，还是直接输出到标准输出。\n\n### **详细结构**\n\n1. **变量定义**\n    ```sh\n    PROGRAM=\"sysctl\"\n    SYSCTL_ARGS=\"\"\n    ```\n    - `PROGRAM`：定义要运行的程序，这里是 `sysctl`。\n    - `SYSCTL_ARGS`：用于传递给 `sysctl` 的附加参数，默认为空。\n\n2. **加载配置**\n    ```sh\n    [ -r \"/etc/default/$PROGRAM\" ] && . \"/etc/default/$PROGRAM\"\n    ```\n    - 通过检查 `/etc/default/sysctl` 文件是否可读，来加载该文件中的配置。\n\n3. **配置文件源定义**\n    ```sh\n    SYSCTL_SOURCES=\"/etc/sysctl.d/ /usr/local/lib/sysctl.d/ /usr/lib/sysctl.d/ /lib/sysctl.d/ /etc/sysctl.conf\"\n    ```\n    - 这是一个包含多个路径的列表，`sysctl` 配置文件会在这些路径中查找，并按顺序加载。\n\n4. **日志功能：`run_logger()` 和 `run_std()`**\n    - `run_logger()`：如果 `logger` 可用，将 `sysctl` 的输出发送到系统日志。\n    - `run_std()`：如果 `logger` 不可用，将输出直接发送到标准输出或错误输出。\n\n5. **启动函数 `start()`**\n    ```sh\n    start() {\n        printf '%s %s: ' \"$1\" \"$PROGRAM\"\n        status=$(\"$run_program\" 4>&1)\n        echo \"$status\"\n        if [ \"$status\" = \"OK\" ]; then\n            return 0\n        fi\n        return 1\n    }\n    ```\n    - 根据配置执行 `sysctl`，并根据 `status` 输出结果。\n\n6. **命令行参数处理**\n    ```sh\n    case \"$1\" in\n        start)\n            start \"Running\";;\n        restart|reload)\n            start \"Rerunning\";;\n        stop)\n            :;;\n        *)\n            echo \"Usage: $0 {start|stop|restart|reload}\"\n            exit 1\n    esac\n    ```\n    - 提供了 `start|stop|restart|reload` 的参数，执行相应的操作。对于 `stop`，没有实际操作，`:` 是一个空操作。\n\n\n\n\n{% endfolding %}\n\n{% folding S30customizer %}\n---\n\n### 功能概述\n1. **脚本入口**\n   - 使用 `case \"$1\"` 判断传入参数（如 `start` 或 `stop`）。\n   - 通常由 `/etc/init.d/` 框架调用，传入参数为 `start`。\n\n2. **主要功能**\n   - 设置系统时间。\n   - 执行自定义化脚本（`customizer.sh`）。\n   - 配置无线网络（`wireless.sh`）。\n   - 配置多路复用器和 GPIO（`muxes.sh`）。\n   - 检查 MAC 地址。\n\n{% endfolding %}\n\n\n{% folding S35modules %}\n负责加载内核模块，这里没有用到。\n{% endfolding %}\n\n{% folding S38mdev %}\n**mdev** 是一个轻量级的设备管理工具，类似于 **udev**，它会管理和创建设备节点，确保设备被正确识别和配置，由于系统没有使用设备接口，没有使用。\n{% endfolding %}\n\n{% folding S40network %} \n\n管理网络接口的启动和停止，包括有线网络和无线网络。通过读取 U-Boot 环境变量来动态配置网络设备，并根据设备类型调用不同的初始化逻辑。\n---\n\n### **脚本内容**\n\n#### **1. 读取 U-Boot 环境变量**\n```bash\ndev=$(fw_printenv -n wlandev)\nmac=$(fw_printenv -n wlanmac)\nnet=$(fw_printenv -n netaddr_fallback)\n```\n- **`fw_printenv`**：\n  - 这是一个工具，用于读取 U-Boot 的环境变量。\n  - `-n` 参数表示只输出变量值，而不包含变量名。\n- **变量含义**：\n  - **`dev` (`wlandev`)**：\n    - 表示无线网络设备的类型或标识符（如 USB、SDIO 或 Modem）。\n  - **`mac` (`wlanmac`)**：\n    - 表示无线网卡的 MAC 地址。\n  - **`net` (`netaddr_fallback`)**：\n    - 表示默认的网络地址（如 IP 地址），当没有其他配置时使用。\n    - 默认值为 `192.168.2.10`。\n\n---\n\n#### **2. 配置无线网络接口**\n```bash\nset_wireless() {\n\tpath=/etc/wireless\n\tif $path/usb \"$dev\" || $path/sdio \"$dev\"; then\n\t\t[ -n \"$mac\" ] && ip link set dev wlan0 address \"$mac\"\n\t\tifup wlan0\n\telif $path/modem \"$dev\"; then\n\t\tifup usb0\n\t\tifup eth1\n\tfi\n\t[ -e /sys/class/net/eth0 ] && ifconfig eth0 \"${net:-192.168.2.10}\"\n}\n```\n- **功能**：\n  - 根据 `dev` 的值判断无线设备的类型，并执行相应的初始化逻辑。\n- **逻辑分支**：\n  1. **USB 或 SDIO 设备**：\n     ```bash\n     if $path/usb \"$dev\" || $path/sdio \"$dev\"; then\n         [ -n \"$mac\" ] && ip link set dev wlan0 address \"$mac\"\n         ifup wlan0\n     ```\n     - 检查 `/etc/wireless/usb` 或 `/etc/wireless/sdio` 脚本是否支持当前设备。\n     - 如果支持：\n       - 设置无线网卡 `wlan0` 的 MAC 地址（如果有 `wlanmac`）。\n       - 启动无线接口 `wlan0`。\n  2. **Modem 设备**：\n     ```bash\n     elif $path/modem \"$dev\"; then\n         ifup usb0\n         ifup eth1\n     ```\n     - 如果设备是 Modem 类型，则启动 `usb0` 和 `eth1` 接口。\n  3. **回退配置**：\n     ```bash\n     [ -e /sys/class/net/eth0 ] && ifconfig eth0 \"${net:-192.168.2.10}\"\n     ```\n     - 如果存在 `eth0` 接口，则为其分配一个默认 IP 地址（`netaddr_fallback` 或 `192.168.2.10`）。\n\n---\n\n#### **3. 启动网络服务**\n```bash\nstart() {\n\techo \"Starting network...\"\n\tifup lo\n\tif [ -n \"$dev\" ]; then\n\t\tset_wireless\n\telse\n\t\tifup eth0\n\tfi\n}\n```\n- **功能**：\n  - 启动网络服务，按以下顺序：\n    1. 启动本地回环接口 `lo`。\n    2. 如果存在无线设备（`dev` 不为空），调用 `set_wireless` 函数配置无线网络。\n    3. 如果没有无线设备，直接启动有线接口 `eth0`。\n\n---\n\n#### **4. 停止网络服务**\n```bash\nstop() {\n\techo \"Stopping network...\"\n\tifdown lo\n\tifdown -f wlan0\n\tifdown -f usb0\n\tifdown -f eth1\n\tifdown -f eth0\n}\n```\n- **功能**：\n  - 停止所有网络接口，包括：\n    - 本地回环接口 `lo`。\n    - 无线接口 `wlan0`。\n    - USB 网络接口 `usb0`。\n    - 以太网接口 `eth1` 和 `eth0`。\n  - `-f` 参数强制关闭接口，即使接口不存在也不会报错。\n\n---\n\n#### **5. 脚本入口**\n```bash\ncase \"$1\" in\n\tstart|stop)\n\t\t$1\n\t\t;;\n\n\trestart|reload)\n\t\tstop\n\t\tstart\n\t\t;;\n\n\t*)\n\t\techo \"Usage: $0 {start|stop|restart|reload}\"\n\t\texit 1\n\t\t;;\nesac\n```\n- **功能**：\n  - 根据传入参数执行相应的操作：\n    - `start`：启动网络服务。\n    - `stop`：停止网络服务。\n    - `restart` 或 `reload`：先停止再启动网络服务。\n    - 默认：打印用法提示并退出。\n\n---\n\n### **总结**\n\n#### **核心功能**\n1. **动态配置网络接口**：\n   - 根据 U-Boot 环境变量（`wlandev`、`wlanmac`、`netaddr_fallback`）动态配置网络设备。\n   - 支持多种无线设备类型（USB、SDIO、Modem）。\n2. **启动和停止网络服务**：\n   - 启动时按需配置无线或有线网络接口。\n   - 停止时关闭所有网络接口。\n\n#### **运行流程**\n1. **启动流程**：\n   - 启动本地回环接口 `lo`。\n   - 如果存在无线设备，调用 `set_wireless` 配置无线网络。\n   - 如果没有无线设备，直接启动有线接口 `eth0`。\n2. **停止流程**：\n   - 关闭所有网络接口。\n\n{% endfolding %}\n\n{% folding S49ntpd %}\n网络时间协议守护进程，同步系统时间，校准系统的时钟。\n###  `S49ntpd` 脚本\n\n这个脚本的主要功能是管理 NTP 守护进程（`ntpd`）的启动、停止和重启。它通过 `start-stop-daemon` 工具来控制守护进程的生命周期，并使用 PID 文件来跟踪进程状态。\n\n---\n\n### **脚本内容**\n\n#### **1. 变量定义**\n```bash\nDAEMON=\"ntpd\"\nPIDFILE=\"/var/run/$DAEMON.pid\"\nDAEMON_ARGS=\"-n\"\n```\n- **`DAEMON`**：\n  - 表示要管理的守护进程名称，这里是 `ntpd`（网络时间协议守护进程）。\n- **`PIDFILE`**：\n  - 存储 `ntpd` 进程的 PID 文件路径，用于跟踪进程状态。\n- **`DAEMON_ARGS`**：\n  - 传递给 `ntpd` 的启动参数：\n    - `-n`：表示以非后台模式运行（但实际会通过 `start-stop-daemon` 后台化）。\n\n---\n\n#### **2. 启动函数**\n```bash\nstart() {\n\techo -n \"Starting $DAEMON: \"\n\tstart-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"$DAEMON\" -- $DAEMON_ARGS\n\tif [ $? -eq 0 ]; then\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n}\n```\n- **功能**：\n  - 启动 `ntpd` 守护进程。\n- **关键命令**：\n  ```bash\n  start-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"$DAEMON\" -- $DAEMON_ARGS\n  ```\n  - `-b`：以后台模式运行进程。\n  - `-m`：创建 PID 文件。\n  - `-S`：启动进程。\n  - `-q`：静默模式，不输出额外信息。\n  - `-p \"$PIDFILE\"`：指定 PID 文件路径。\n  - `-x \"$DAEMON\"`：指定要启动的可执行文件。\n  - `-- $DAEMON_ARGS`：传递给守护进程的参数。\n- **错误处理**：\n  - 检查 `start-stop-daemon` 的返回值：\n    - 如果成功（返回值为 0），打印 `OK`。\n    - 如果失败，打印 `FAIL`。\n\n---\n\n#### **3. 停止函数**\n```bash\nstop() {\n\techo -n \"Stopping $DAEMON: \"\n\tstart-stop-daemon -K -q -p \"$PIDFILE\"\n\tif [ $? -eq 0 ]; then\n\t\trm -f \"$PIDFILE\"\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n}\n```\n- **功能**：\n  - 停止 `ntpd` 守护进程。\n- **关键命令**：\n  ```bash\n  start-stop-daemon -K -q -p \"$PIDFILE\"\n  ```\n  - `-K`：发送信号终止进程。\n  - `-q`：静默模式。\n  - `-p \"$PIDFILE\"`：根据 PID 文件找到目标进程并终止。\n- **清理工作**：\n  - 如果成功停止进程，则删除 PID 文件。\n- **错误处理**：\n  - 检查 `start-stop-daemon` 的返回值：\n    - 如果成功，打印 `OK`。\n    - 如果失败，打印 `FAIL`。\n\n---\n\n#### **4. 脚本入口**\n```bash\ncase \"$1\" in\n\tstart|stop)\n\t\t$1\n\t\t;;\n\n\trestart|reload)\n\t\tstop\n\t\tsleep 1\n\t\tstart\n\t\t;;\n\n\t*)\n\t\techo \"Usage: $0 {start|stop|restart|reload}\"\n\t\texit 1\n\t\t;;\nesac\n```\n- **功能**：\n  - 根据传入参数执行相应的操作：\n    - `start`：调用 `start` 函数启动 `ntpd`。\n    - `stop`：调用 `stop` 函数停止 `ntpd`。\n    - `restart` 或 `reload`：先停止再启动 `ntpd`。\n    - 默认：打印用法提示并退出。\n- **注意**：\n  - 在 `restart` 和 `reload` 中，停止后等待 1 秒再启动，避免资源冲突。\n\n---\n\n### **总结**\n\n#### **核心功能**\n1. **启动 NTP 守护进程**：\n   - 使用 `start-stop-daemon` 后台运行 `ntpd`，并生成 PID 文件。\n2. **停止 NTP 守护进程**：\n   - 根据 PID 文件终止 `ntpd` 进程，并清理 PID 文件。\n3. **支持重启和重载**：\n   - 提供 `restart` 和 `reload` 操作，方便重新配置或恢复服务。\n\n#### **运行流程**\n1. **启动流程**：\n   - 检查是否可以启动 `ntpd`。\n   - 使用 `start-stop-daemon` 启动守护进程，并记录 PID。\n2. **停止流程**：\n   - 根据 PID 文件终止进程，并删除 PID 文件。\n3. **重启流程**：\n   - 先停止，再启动，确保服务重新加载。\n{% endfolding %}\n\n{% folding S50dropbear %}    \n**dropbear**，这是一种轻量级的SSH服务器，允许远程访问系统。这个脚本会初始化SSH服务，允许通过SSH连接。\n{% endfolding %}\n\n{% folding S60crond %} \n启动 **crond**，即定时任务守护进程。它负责执行预定的定时任务，比如周期性地运行某些脚本或程序。\n{% endfolding %}\n\n{% folding S70vendor %} \n这个脚本通常用于执行供应商特定的初始化任务，为了加载厂商的特定驱动、配置或者服务。\n\n###  `S70vendor` 脚本\n\n这个脚本的主要功能是在系统启动时加载特定厂商的模块（可能包括驱动程序或其他硬件相关的初始化逻辑）。它通过调用 `ipcinfo` 工具获取设备的厂商信息，并动态加载与该厂商相关的模块。\n\n---\n\n### **脚本内容**\n\n#### **1. 脚本入口**\n```bash\ncase \"$1\" in\n\tstart)\n\t\techo \"Loading vendor modules...\"\n\t\tvendor=$(ipcinfo -v)\n\t\tload_\"$vendor\" -i\n\t\t;;\n\n\tstop)\n\t\t;;\n\n\t*)\n\t\techo \"Usage: $0 {start}\"\n\t\texit 1\n\t\t;;\nesac\n```\n- **功能**：\n  - 根据传入参数执行相应的操作：\n    - `start`：加载厂商模块。\n    - `stop`：当前为空，表示不支持停止操作。\n    - 默认：打印用法提示并退出。\n\n---\n\n#### **2. 加载厂商模块**\n```bash\necho \"Loading vendor modules...\"\nvendor=$(ipcinfo -v)\nload_\"$vendor\" -i\n```\n- **功能**：\n  - 使用 `ipcinfo -v` 获取设备的厂商信息。\n  - 动态调用与厂商相关的加载函数（如 `load_<vendor>`）。\n- **关键命令**：\n  1. **`ipcinfo -v`**：\n     - 这是一个工具，用于查询设备的硬件或固件信息。\n     - `-v` 参数返回设备的厂商名称（如 `sony`、`samsung` 等）。\n  2. **`load_\"$vendor\"`**：\n     - 动态构造函数名，例如：\n       - 如果 `vendor=\"sony\"`，则调用 `load_sony`。\n       - 如果 `vendor=\"samsung\"`，则调用 `load_samsung`。\n  3. **`-i` 参数**：\n     - 传递给加载函数的参数，可能是初始化选项。\n\n---\n\n#### **3. 停止分支**\n```bash\nstop)\n\t;;\n```\n- **功能**：\n  - 当前为空，表示该脚本不支持停止操作。\n- **可能原因**：\n  - 厂商模块通常是内核模块或硬件驱动，加载后无需显式卸载。\n  - 或者，卸载逻辑由其他脚本（如 `rcK` 或其他 `Kxx` 脚本）处理。\n\n---\n\n### **总结**\n\n#### **核心功能**\n1. **动态加载厂商模块**：\n   - 使用 `ipcinfo` 工具获取设备的厂商信息。\n   - 根据厂商信息调用对应的加载函数（如 `load_sony` 或 `load_samsung`）。\n2. **支持启动操作**：\n   - 脚本仅支持 `start` 操作，用于加载厂商模块。\n3. **不支持停止操作**：\n   - 当前未实现停止逻辑，可能由其他机制处理。\n\n#### **运行流程**\n1. **启动流程**：\n   - 打印提示信息：“Loading vendor modules...”。\n   - 调用 `ipcinfo -v` 获取厂商名称。\n   - 动态调用对应的加载函数（如 `load_<vendor>`），并传递 `-i` 参数。\n2. **停止流程**：\n   - 当前未实现停止逻辑。\n\n#### **适用场景**\n- 该脚本适用于嵌入式设备（如 IP 摄像头）中加载厂商特定的硬件模块或驱动程序。\n- 它通过动态调用的方式支持多种厂商，灵活性较高。\n  \n---\n\n{% endfolding %}\n\n{% folding S95majestic %}\n###  `S95majestic` 脚本\n\n这个脚本的主要功能是管理 `majestic` 守护进程的启动、停止、重启和重载。它通过 `start-stop-daemon` 工具来控制守护进程的生命周期，并使用 PID 文件来跟踪进程状态。相比之前的 `ntpd` 脚本，该脚本增加了对 `reload` 操作的支持。\n\n---\n\n### **脚本内容**\n\n#### **1. 变量定义**\n```bash\nDAEMON=\"majestic\"\nPIDFILE=\"/var/run/$DAEMON.pid\"\nDAEMON_ARGS=\"-s\"\n```\n- **`DAEMON`**：\n  - 表示要管理的守护进程名称，这里是 `majestic`。\n  - `majestic` 是 OpenIPC 项目中的一个核心组件，通常用于处理视频流（如 RTSP、HTTP 等）。\n- **`PIDFILE`**：\n  - 存储 `majestic` 进程的 PID 文件路径，用于跟踪进程状态。\n- **`DAEMON_ARGS`**：\n  - 传递给 `majestic` 的启动参数：\n    - `-s`：可能是以静默模式或后台模式运行的选项。\n\n---\n\n#### **2. 启动函数**\n```bash\nstart() {\n\techo -n \"Starting $DAEMON: \"\n\tstart-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"$DAEMON\" -- $DAEMON_ARGS\n\tif [ $? -eq 0 ]; then\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n}\n```\n- **功能**：\n  - 启动 `majestic` 守护进程。\n- **关键命令**：\n  ```bash\n  start-stop-daemon -b -m -S -q -p \"$PIDFILE\" -x \"$DAEMON\" -- $DAEMON_ARGS\n  ```\n  - `-b`：以后台模式运行进程。\n  - `-m`：创建 PID 文件。\n  - `-S`：启动进程。\n  - `-q`：静默模式，不输出额外信息。\n  - `-p \"$PIDFILE\"`：指定 PID 文件路径。\n  - `-x \"$DAEMON\"`：指定要启动的可执行文件。\n  - `-- $DAEMON_ARGS`：传递给守护进程的参数。\n- **错误处理**：\n  - 检查 `start-stop-daemon` 的返回值：\n    - 如果成功（返回值为 0），打印 `OK`。\n    - 如果失败，打印 `FAIL`。\n\n---\n\n#### **3. 停止函数**\n```bash\nstop() {\n\techo -n \"Stopping $DAEMON: \"\n\tstart-stop-daemon -K -q -p \"$PIDFILE\"\n\tif [ $? -eq 0 ]; then\n\t\trm -f \"$PIDFILE\"\n\t\techo \"OK\"\n\telse\n\t\techo \"FAIL\"\n\tfi\n}\n```\n- **功能**：\n  - 停止 `majestic` 守护进程。\n- **关键命令**：\n  ```bash\n  start-stop-daemon -K -q -p \"$PIDFILE\"\n  ```\n  - `-K`：发送信号终止进程。\n  - `-q`：静默模式。\n  - `-p \"$PIDFILE\"`：根据 PID 文件找到目标进程并终止。\n- **清理工作**：\n  - 如果成功停止进程，则删除 PID 文件。\n- **错误处理**：\n  - 检查 `start-stop-daemon` 的返回值：\n    - 如果成功，打印 `OK`。\n    - 如果失败，打印 `FAIL`。\n\n---\n\n#### **4. 重启函数**\n```bash\nrestart)\n\tstop\n\tsleep 3\n\tstart\n\t;;\n```\n- **功能**：\n  - 先调用 `stop` 函数停止 `majestic`。\n  - 等待 3 秒（避免资源冲突）。\n  - 再调用 `start` 函数重新启动 `majestic`。\n- **注意**：\n  - 等待时间（`sleep 3`）可以防止频繁操作导致的问题。\n\n---\n\n#### **5. 重载函数**\n```bash\nreload)\n\tkillall -1 \"$DAEMON\"\n\t;;\n```\n- **功能**：\n  - 向 `majestic` 发送 `SIGHUP` 信号（信号编号为 1），触发其重新加载配置。\n- **关键命令**：\n  ```bash\n  killall -1 \"$DAEMON\"\n  ```\n  - `-1`：发送 `SIGHUP` 信号。\n  - `$DAEMON`：目标进程名称。\n- **用途**：\n  - `SIGHUP` 通常用于通知守护进程重新读取配置文件，而无需完全重启。\n\n---\n\n#### **6. 脚本入口**\n```bash\ncase \"$1\" in\n\tstart|stop)\n\t\t$1\n\t\t;;\n\n\trestart)\n\t\tstop\n\t\tsleep 3\n\t\tstart\n\t\t;;\n\n\treload)\n\t\tkillall -1 \"$DAEMON\"\n\t\t;;\n\n\t*)\n\t\techo \"Usage: $0 {start|stop|restart|reload}\"\n\t\texit 1\n\t\t;;\nesac\n```\n- **功能**：\n  - 根据传入参数执行相应的操作：\n    - `start`：启动 `majestic`。\n    - `stop`：停止 `majestic`。\n    - `restart`：先停止再启动 `majestic`。\n    - `reload`：向 `majestic` 发送 `SIGHUP` 信号以重载配置。\n    - 默认：打印用法提示并退出。\n\n---\n\n### **总结**\n\n#### **核心功能**\n1. **启动 `majestic` 守护进程**：\n   - 使用 `start-stop-daemon` 后台运行 `majestic`，并生成 PID 文件。\n2. **停止 `majestic` 守护进程**：\n   - 根据 PID 文件终止进程，并删除 PID 文件。\n3. **支持重启和重载**：\n   - 提供 `restart` 和 `reload` 操作，方便重新加载配置或恢复服务。\n4. **动态配置管理**：\n   - `reload` 操作允许在不停止服务的情况下重新加载配置。\n\n#### **运行流程**\n1. **启动流程**：\n   - 检查是否可以启动 `majestic`。\n   - 使用 `start-stop-daemon` 启动守护进程，并记录 PID。\n2. **停止流程**：\n   - 根据 PID 文件终止进程，并删除 PID 文件。\n3. **重启流程**：\n   - 先停止，再启动，确保服务重新加载。\n4. **重载流程**：\n   - 向 `majestic` 发送 `SIGHUP` 信号，触发配置重载。\n\n#### **适用场景**\n- 该脚本适用于嵌入式设备（如 IP 摄像头）中管理视频流服务。\n- 它通过标准化的方式管理 `majestic` 守护进程，适合资源受限的环境。\n\n---\n\n{% endfolding %}\n\n\n{% folding S98datalink %}\n###  `S98datalink` 脚本\n\n这个脚本的主要功能是管理数据链路服务（如 LTE 模块、ZeroTier 网络和 Wi-Fi 广播）。它根据设备的硬件信息（通过 `ipcinfo` 和 U-Boot 环境变量）以及配置文件 `/etc/datalink.conf` 的内容，动态启动或停止相关服务。\n\n---\n\n### **脚本内容**\n\n#### **1. 变量定义**\n```bash\nchip=$(ipcinfo -c)\nfw=$(grep \"BUILD_OPTION\" \"/etc/os-release\" | cut -d= -f2)\n```\n- **`chip`**：\n  - 使用 `ipcinfo -c` 获取设备的芯片型号。\n  - 示例是 `ssc338q` 或其他 SoC 名称。\n- **`fw`**：\n  - 从 `/etc/os-release` 文件中提取 `BUILD_OPTION` 的值。\n  - 示例输出可能是 `lte` 或其他构建选项。\n\n---\n\n#### **2. 加载配置文件**\n```bash\nif [ -e /etc/datalink.conf ]; then\n\t. /etc/datalink.conf\nfi\n```\n- **功能**：\n  - 如果存在 `/etc/datalink.conf` 文件，则加载其内容。\n  - `. /etc/datalink.conf` 表示将该文件的内容作为当前脚本的一部分执行。\n- **用途**：\n  - 配置文件可能包含以下变量：\n    - `usb_modem`：是否启用 USB LTE 模块。\n    - `use_zt`：是否启用 ZeroTier 网络。\n    - `zt_netid`：ZeroTier 网络 ID。\n    - `telemetry`：是否启用遥测功能。\n\n---\n\n#### **3. 启动 LTE 数据链路**\n```bash\nstart_lte() {\n\techo \"Starting fpv datalink...\"\n\tif [ \"$usb_modem\" = \"true\" ]; then\n\t\techo \"Starting lte modem configuration...\"\n\tfi\n\n\tif [ \"$use_zt\" = \"true\" ]; then\n\t\techo \"Starting ZeroTier-One daemon...\"\n\t\tzerotier-one -d &\n\t\tif [ ! -f \"/var/lib/zerotier-one/networks.d/$zt_netid.conf\" ]; then\n\t\t\tsleep 8\n\t\t\tzerotier-cli join \"$zt_netid\" > /dev/null\n\t\t\techo \"Don't forget to authorize my.zerotier.com!\"\n\t\tfi\n\tfi\n\n\tif [ \"$telemetry\" = \"true\" ]; then\n\t\ttelemetry start\n\tfi\n\n\texit 0\n}\n```\n- **功能**：\n  - 启动 LTE 数据链路相关的服务。\n- **逻辑分支**：\n  1. **USB LTE 模块**：\n     ```bash\n     if [ \"$usb_modem\" = \"true\" ]; then\n         echo \"Starting lte modem configuration...\"\n     fi\n     ```\n     - 如果 `usb_modem=\"true\"`，表示启用了 USB LTE 模块，并打印提示信息。\n  2. **ZeroTier 网络**：\n     ```bash\n     if [ \"$use_zt\" = \"true\" ]; then\n         echo \"Starting ZeroTier-One daemon...\"\n         zerotier-one -d &\n         if [ ! -f \"/var/lib/zerotier-one/networks.d/$zt_netid.conf\" ]; then\n             sleep 8\n             zerotier-cli join \"$zt_netid\" > /dev/null\n             echo \"Don't forget to authorize my.zerotier.com!\"\n         fi\n     fi\n     ```\n     - 如果 `use_zt=\"true\"`，启动 ZeroTier 守护进程（`zerotier-one`）。\n     - 如果尚未加入指定的网络（`$zt_netid`），则等待 8 秒后尝试加入，并提醒用户在 ZeroTier 控制台授权设备。\n  3. **遥测功能**：\n     ```bash\n     if [ \"$telemetry\" = \"true\" ]; then\n         telemetry start\n     fi\n     ```\n     - 如果 `telemetry=\"true\"`，启动遥测服务。\n\n---\n\n#### **4. 启动分支**\n```bash\ncase \"$1\" in\n\tstart)\n\t\tif [ -n \"$(fw_printenv -n wlandev)\" ]; then\n\t\t\texit 0\n\t\tfi\n\n\t\tif [ ! -f /etc/system.ok ]; then\n\t\t\ttweaksys \"$chip\"\n\t\tfi\n\n\t\tif [ \"$fw\" = \"lte\" ]; then\n\t\t\tstart_lte\n\t\tfi\n\t\n\t\techo \"Starting wifibroadcast service...\"\n\t\twifibroadcast start\n\t\t;;\n```\n- **功能**：\n  - 根据传入参数执行相应的操作。\n- **逻辑分支**：\n  1. **检查无线设备**：\n     ```bash\n     if [ -n \"$(fw_printenv -n wlandev)\" ]; then\n         exit 0\n     fi\n     ```\n     - 如果 U-Boot 环境变量中存在 `wlandev`，直接退出脚本。\n     - 这可能是因为无线设备已由其他脚本（如 `S40network`）处理。\n  2. **系统初始化**：\n     ```bash\n     if [ ! -f /etc/system.ok ]; then\n         tweaksys \"$chip\"\n     fi\n     ```\n     - 如果 `/etc/system.ok` 文件不存在，调用 `tweaksys` 函数对系统进行初始化。\n     - `tweaksys` 可能是一个自定义函数，用于调整系统配置以适配特定芯片。\n  3. **启动 LTE 数据链路**：\n     ```bash\n     if [ \"$fw\" = \"lte\" ]; then\n         start_lte\n     fi\n     ```\n     - 如果 `BUILD_OPTION=lte`，调用 `start_lte` 函数启动 LTE 相关服务。\n  4. **启动 Wi-Fi 广播**：\n     ```bash\n     echo \"Starting wifibroadcast service...\"\n     wifibroadcast start\n     ```\n     - 启动 Wi-Fi 广播服务（`wifibroadcast`）。\n\n---\n\n#### **5. 停止分支**\n```bash\nstop)\n\techo \"Stopping wifibroadcast service...\"\n\twifibroadcast stop\n\t;;\n```\n- **功能**：\n  - 停止 Wi-Fi 广播服务。\n\n---\n\n#### **6. 默认分支**\n```bash\n*)\n\techo \"Usage: $0 {start|stop}\"\n\texit 1\n\t;;\n```\n- **功能**：\n  - 如果传入参数无效，打印用法提示并退出。\n\n---\n\n### **总结**\n\n#### **核心功能**\n1. **动态加载配置**：\n   - 根据 `/etc/datalink.conf` 文件的内容，决定启用哪些服务（如 LTE 模块、ZeroTier 网络、遥测功能）。\n2. **启动数据链路服务**：\n   - 包括 LTE 模块、ZeroTier 网络、Wi-Fi 广播等。\n3. **系统初始化**：\n   - 根据芯片型号调用 `tweaksys` 函数进行系统调整。\n4. **支持启动和停止操作**：\n   - 提供 `start` 和 `stop` 操作，分别用于启动和停止服务。\n\n#### **运行流程**\n1. **启动流程**：\n   - 检查无线设备是否存在。如果存在，直接退出。\n   - 如果系统未初始化，调用 `tweaksys` 函数。\n   - 根据 `BUILD_OPTION` 决定是否启动 LTE 数据链路。\n   - 启动 Wi-Fi 广播服务。\n2. **停止流程**：\n   - 停止 Wi-Fi 广播服务。\n\n#### **适用场景**\n- 该脚本适用于嵌入式设备（如 IP 摄像头或无人机）中管理数据链路服务。\n- 它通过动态加载配置和硬件信息，灵活地支持多种网络和服务。\n\n---\n\n{% endfolding %}\n\n{% folding S98vtun%}\n启动 **vtun**，这是一个虚拟隧道工具，通常用于建立加密隧道，这里没有用到\n{% endfolding %}\n\n{% folding S99rc.local %}\n**rc.local** 是启动过程的最后一个步骤，通常用于执行最后的初始化任务或者自定义命令。系统初始化完成后，这里可以添加需要的启动命令，或者启动一些不属于其他服务的应用。\n{% endfolding %}\n \n##### 工作流：\n1. **系统初始化阶段**：`rcS` 脚本会启动，并执行一些基础的系统配置，包括随机数生成、日志守护进程、内核参数配置等。\n2. **服务启动**：之后，系统会依次启动一些基本的服务，如内核模块加载、设备管理、网络配置、时间同步等。\n3. **特定应用和服务**：进入更具体的应用服务启动，如SSH服务、定时任务、供应商服务、特定功能应用等。\n4. **最后的清理和自定义配置**：`rc.local` 负责执行最后的清理、日志保存、或者启动一些额外的定制化服务。\n\n##### 天空端启动总结\n```powershell\n/etc/init.d/rcS\n ├──> S30customizer\n │   ├──> /usr/share/openipc/customizer.sh\n │   └──> sh /usr/share/openipc/wireless.sh\n ├──> S98datalink\n │   ├──> tweaksys ssc33x  // configure majestic, h265, 1080p, udp://127.0.0.1:5600\n │   └──> wifibroadcast start\n │       ├──> [video]  // udp_port == 5600\n │       │   └──> wfb_tx -p \"$stream\" -u \"$udp_port\" -R \"$rcv_buf\" -K \"$keydir/$unit.key\" -B \"$bandwidth\" \\\n │       │           -M \"$mcs_index\" -S \"$stbc\" -L \"$ldpc\" -G \"$guard_interval\" -k \"$fec_k\" -n \"$fec_n\" \\\n │       │           -T \"$pool_timeout\" -i \"$link_id\" -f \"$frame_type\" -C 8000 \"$wlan\" > /dev/null &\n │       └──> telemetry start  // telemetry_rx == wfb_rx, telemetry_tx == wfb_tx, port_rx == 14551, port_tx == 14550\n │           ├──> mavfwd --channels \"$channels\" --master \"$serial\" --baudrate \"$baud\" -p 100 -t -a \"$aggregate\" \\\n │           │           --out 127.0.0.1:$port_tx --in 127.0.0.1:$port_rx > /dev/null &\n │           ├──> telemetry_rx -p \"$stream_rx\" -u \"$port_rx\" -K \"$keydir/$unit.key\" -i \"$link_id\" \"$wlan\" > /dev/null &\n │           └──> telemetry_tx -p \"$stream_tx\" -u \"$port_tx\" -K \"$keydir/$unit.key\" -B \"$bandwidth\" \\\n │                             -M \"$mcs_index\" -S \"$stbc\" -L \"$ldpc\" -G \"$guard_interval\" -k \"$fec_k\" -n \"$fec_n\" \\\n │                             -T \"$pool_timeout\" -i \"$link_id\" -f \"$frame_type\" \"$wlan\" > /dev/null &\n └──> S95majestic\n```\n\n.bin文件角色：作为固件被内核加载，初始化摄像头硬件。\n\n数据流路径：摄像头 → 内核驱动（通过固件） → /dev/video0节点 → 用户空间应用（通过V4L2接口）。\n\n关键检查点：设备节点存在性、内核日志中的固件加载记录、V4L2工具（如v4l2-ctl）测试。\n\n\n\n## 地面站选择\n### 虚拟机Ubuntu\n### 泰山派Android系统\n### 泰山派Ubuntu\n### 算力版jetson\n### ROS端部署：\n\n\n```cpp\n#include <iostream>\n#include <thread>\n#include <opencv2/opencv.hpp>\n \n \nvoid startCamera() {\n\tcv::VideoCapture cap;\n\tcap.open(\"clip.mp4\");\n\twhile (true) {\n\t\tcv::Mat frame;\n\t\t//方法一：>>析取器\n\t\tcap >> frame;  //每个循环从cap中解析一帧，赋给frame, \n\t\tif (frame.empty()) {\n\t\t\tbreak;\n\t\t}\n\t\t//cv::imshow(\"frame\", frame);\n\t\t//cv::waitKey(1);\n\t\tstd::cout<<\"frame :\"<<frame.cols<<\" \"<<frame.rows<<std::endl;\n\t}\n\tcap.release();\n}\n \nvoid startGStream(std::string gst_src) {\n\tcv::VideoCapture cap;\n\t// \"rtspsrc location=rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream latency=4000 ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! appsink\"\n\t// \"filesrc location=clip.mp4 ! qtdemux ! h264parse ! omxh264dec ! nvvidconv ! appsink\"\n\t// \"v4l2src device=/dev/video0 ! video/x-raw, width=1280, height=720 ! videoconvert ! appsink\"\n\tcap.open(gst_src, cv::CAP_GSTREAMER);\n\twhile (true) {\n\t\tcv::Mat frame;\n\t\t//方法一：>>析取器\n\t\tcap >> frame;  //每个循环从cap中解析一帧，赋给frame, \n\t\tif (frame.empty()) {\n\t\t\tbreak;\n\t\t}\n\t\t//cv::imshow(\"frame\", frame);\n\t\t//cv::waitKey(1);\n\t\tstd::cout<<\"frame :\"<<frame.cols<<\" \"<<frame.rows<<std::endl;\n\t}\n\tcap.release();\n}\n \n \n// \"rtspsrc location=rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream latency=4000 ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! appsink\"\n// \"filesrc location=clip.mp4 ! qtdemux ! h264parse ! omxh264dec ! nvvidconv ! appsink\"\n// \"v4l2src device=/dev/video0 ! video/x-raw, width=1280, height=720 ! videoconvert ! appsink\"\nstd::string get_rtsp_h264_gst(std::string rtsp_uri, int width, int height, int latency)\n{\n\tstd::string gst_str = \"rtspsrc location=\" + rtsp_uri+ \" latency=\"+ std::to_string(latency)+ \" ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=\"+std::to_string(width)+\", height=\"+std::to_string(height)+\", format=BGRx ! videoconvert ! appsink\";\n\tstd::cout<<\"gst:\"<<gst_str<<\":\"<<std::endl;\n\treturn gst_str;\n}\nstd::string get_rtsp_h265_gst(std::string rtsp_uri, int width, int height, int latency)\n{\n\tstd::string gst_str = \"rtspsrc location=\" + rtsp_uri+ \" latency=\"+ std::to_string(latency)+ \" ! rtph265depay ! h265parse ! omxh265dec ! nvvidconv !  video/x-raw, width=\"+std::to_string(width)+\", height=\"+std::to_string(height)+\", format=BGRx ! videoconvert ! appsink\";\n\tstd::cout<<\"gst:\"<<gst_str<<\":\"<<std::endl;\n\treturn gst_str;\n}\nstd::string get_mp4_h264_gst(std::string file_name, int width, int height)\n{\n\tstd::string gst_str = \"filesrc location=\" + file_name+ \" ! qtdemux ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=\"+std::to_string(width)+\", height=\"+std::to_string(height)+\", format=BGRx ! videoconvert ! appsink\";\n\tstd::cout<<\"gst:\"<<gst_str<<\":\"<<std::endl;\n\treturn gst_str;\n}\nstd::string get_v4l2_gst(std::string device_id, int width, int height)\n{\n\tstd::string gst_str = \"v4l2src device=\" + device_id+ \" !  video/x-raw, width=\"+std::to_string(width)+\", height=\"+std::to_string(height)+\", format=BGRx ! videoconvert ! appsink\";\n\tstd::cout<<\"gst:\"<<gst_str<<\":\"<<std::endl;\n\treturn gst_str;\n}\n \n \nvoid startGStream(std::string rtsp_uri, int width, int height, int latency) {\n\tstd::string gst_str = get_rtsp_h264_gst(rtsp_uri, width, height, latency);\nstart:\n\tcv::VideoCapture capture;\n\tcapture.open(gst_str, cv::CAP_GSTREAMER);\n\twhile (true) {\n\t\tcv::Mat frame;\n\t\t//方法一：>>析取器\n\t\tcapture >> frame;  //每个循环从cap中解析一帧，赋给frame, \n\t\tif (frame.empty()) {\n\t\t\tbreak;\n\t\t}\n\t\t//cv::imshow(\"frame\", frame);\n\t\t//cv::waitKey(1);\n\t\tstd::cout<<\"frame :\"<<frame.cols<<\" \"<<frame.rows<<std::endl;\n\t}\n \n\tcapture.release();\n\tstd::cout<<\" ...................................................release \"<<std::endl;\n\tgoto start;\n}\n \n \nint main(int argc, char** argv){\n \n\t//std::string gst_src = \"rtspsrc location=rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream latency=4000 ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! appsink\";\n\t// if (argc > 1){\n\t// \tgst_src = argv[1];\n\t// }\n\t// startGStream(gst_src);\n \n\tstd::string file_src = \"rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream\";\n\tint width = 1280;\n\tint height = 720;\n\tint latency = 5000;\n\tif (argc > 4){\n\t\tfile_src = argv[1];\n\t\twidth = atoi(argv[2]);\n\t\theight = atoi(argv[3]);\n\t\tlatency = atoi(argv[4]);\n\t}\n\tstartGStream(file_src, width, height, latency);\n\tstd::cout<<\"finished.\"<<std::endl;\n\treturn 0;\n}\n\n```\n\n配合ROS实现\n\n```cpp\n#include <ros/ros.h>\n#include <sensor_msgs/Image.h>\n#include <cv_bridge/cv_bridge.h>\n#include <opencv2/opencv.hpp>\n#include <image_transport/image_transport.h>\n#include <thread>\n#include <atomic>\n\nclass OpenCVGStreamerNode {\npublic:\n    OpenCVGStreamerNode(ros::NodeHandle& nh) : it(nh), running(true) {\n        // 从参数服务器获取 GStreamer 管道配置\n        nh.param<std::string>(\"gstreamer_pipeline\", gstreamer_pipeline,\n                               \"udpsrc port=5600 caps='application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265' ! rtph265depay ! h265parse ! mppvideodec ! videoconvert ! appsink\");\n        nh.param<std::string>(\"output_topic\", output_topic, \"/openipc_camera/image\");\n\n        // 发布图像话题\n        image_pub = it.advertise(output_topic, 1);\n\n        // 启动图像捕获线程\n        capture_thread = std::thread(&OpenCVGStreamerNode::captureImages, this);\n    }\n\n    ~OpenCVGStreamerNode() {\n        running = false;\n        if (capture_thread.joinable()) {\n            capture_thread.join();\n        }\n    }\n\nprivate:\n    void captureImages() {\n        // 使用 GStreamer 管道配置初始化 VideoCapture\n        cv::VideoCapture cap(gstreamer_pipeline, cv::CAP_GSTREAMER);\n        if (!cap.isOpened()) {\n            ROS_ERROR(\"Failed to open video stream using GStreamer pipeline: %s\", gstreamer_pipeline.c_str());\n            return;\n        }\n\n        cv::Mat frame;\n        while (running) {\n            cap >> frame;  // 从视频流捕获一帧\n            if (frame.empty()) {\n                ROS_WARN(\"Received empty frame from video stream\");\n                continue;\n            }\n\n            // 将 OpenCV 图像转换为 ROS 图像消息\n            sensor_msgs::ImagePtr msg = cv_bridge::CvImage(std_msgs::Header(), \"bgr8\", frame).toImageMsg();\n            image_pub.publish(msg);\n        }\n    }\n\n    image_transport::ImageTransport it_;\n    image_transport::Publisher image_pub_;\n    std::string gstreamer_pipeline;\n    std::string output_topic;\n    std::thread capture_thread;\n    std::atomic<bool> running;\n};\n\nint main(int argc, char** argv) {\n    ros::init(argc, argv, \"opencv_gstreamer_node\");\n    ros::NodeHandle nh;\n\n    // 创建 OpenCV GStreamer 节点\n    OpenCVGStreamerNode opencv_gstreamer_node(nh);\n    ros::spin();\n    return 0;\n}\n\n```\n\n```cpp\n\n\n#include <ros/ros.h>\n#include <sensor_msgs/Image.h>\n#include <cv_bridge/cv_bridge.h>\n#include <opencv2/opencv.hpp>\n#include <image_transport/image_transport.h>\n#include <thread>\n#include <atomic>\n\nclass OpenCVGStreamerNode {\npublic:\n    OpenCVGStreamerNode(ros::NodeHandle& nh) : it(nh), running(true) {\n        // 从参数服务器获取 GStreamer 管道配置\n        nh.param<std::string>(\"gstreamer_pipeline\", gstreamer_pipeline,\n                               \"udpsrc port=5600 caps='application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265' ! rtph265depay ! h265parse ! nvv4l2decoder ! nv3dsink -e\");\n        nh.param<std::string>(\"output_topic\", output_topic, \"/openipc_camera/image\");\n\n        // 发布图像话题\n        image_pub_ = it_.advertise(output_topic, 1);\n\n        // 启动图像捕获线程\n        capture_thread = std::thread(&OpenCVGStreamerNode::captureImages, this);\n    }\n\n    ~OpenCVGStreamerNode() {\n        running = false;\n        if (capture_thread.joinable()) {\n            capture_thread.join();\n        }\n    }\n\nprivate:\n    void captureImages() {\n        // 使用 GStreamer 管道配置初始化 VideoCapture\n        cv::VideoCapture cap(gstreamer_pipeline, cv::CAP_GSTREAMER);\n        if (!cap.isOpened()) {\n            ROS_ERROR(\"Failed to open video stream using GStreamer pipeline: %s\", gstreamer_pipeline.c_str());\n            return;\n        }\n\n        cv::Mat frame;\n        while (running) {\n            cap >> frame;  // 从视频流捕获一帧\n            if (frame.empty()) {\n                ROS_WARN(\"Received empty frame from video stream\");\n                continue;\n            }\n\n            // 将 OpenCV 图像转换为 ROS 图像消息\n            sensor_msgs::ImagePtr msg = cv_bridge::CvImage(std_msgs::Header(), \"bgr8\", frame).toImageMsg();\n            image_pub_.publish(msg);\n        }\n    }\n\n    image_transport::ImageTransport it_;\n    image_transport::Publisher image_pub_;\n    std::string gstreamer_pipeline;\n    std::string output_topic;\n    std::thread capture_thread;\n    std::atomic<bool> running;\n};\n\nint main(int argc, char** argv) {\n    ros::init(argc, argv, \"opencv_gstreamer_node\");\n    ros::NodeHandle nh;\n\n    // 创建 OpenCV GStreamer 节点\n    OpenCVGStreamerNode opencv_gstreamer_node(nh);\n    ros::spin();\n    return 0;\n}\n```","slug":"OpenIPC开发文档","published":1,"updated":"2025-05-27T11:31:17.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6inx000wmktt9qri8his","content":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/1/9</p>\n</div></div><div class='timeline-item-content'><p>通过 TFTP 和 UART 逐步安装 OpenIPC 固件。</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://github.com/OpenIPC/wiki/blob/master/en/installation.md\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://github.com/OpenIPC/wiki/blob/master/en/installation.md</p></div></a></div> \n<h1>说明</h1>\n<p>核心就是利用网络摄像头，而且网络监控的市场很大，网络摄像头可选择的范围很大，可以根据主控芯片、图像传感器的型号，以及板载的串口（刷鞋固件、通信），USB(连接WIFI网卡)的情况自由选择<br>\n我这里选择的是 <strong>SigmaStar SsC338Q  分辨率4K@20FPS  内置2Gb DDR3</strong></p>\n<h1>架构：</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/01/02/sf653e-0.webp\" alt=\"架构\"></p>\n<h1>我的工作任务：</h1>\n<ul>\n<li>硬件环境的搭建\n<ul>\n<li>openipc固件的烧写</li>\n<li>天空端电路搭建</li>\n<li>地面端环境的烧写</li>\n</ul>\n</li>\n<li>固件的编译和编译脚本</li>\n<li>裁剪的openipc linux内核中执行启动脚本的过程</li>\n<li>rtl8812网卡天空端驱动（内核配置的）、rtl8812au地面端驱动（开源项目）</li>\n<li>摄像头驱动（开源的），视频编码器（闭源方案）</li>\n<li>wfb-ng数据链路</li>\n<li>地面端解码方案（安卓、linux、嵌入式开发板）</li>\n</ul>\n<h1>固件安装</h1>\n<p>这里是利用的TFTP和UART来安装固件</p>\n<h3 id=\"SoC识别\">SoC识别</h3>\n<p>SoC（系统级芯片）包括相机的 CPU 内核以及所有必要的外围设备，例如相机和网络接口。<strong>这部分由摄像头厂商确定</strong>，需要看IC标记丝印来查看，或者使用ipctool软件识别SoC型号</p>\n<h3 id=\"闪存芯片大小\">闪存芯片大小</h3>\n<p>通常是摄像头8引脚的一个芯片，可以通过U-boot启动过程确认，也可以查看丝印（丝印包含64，即是8M，包含128，即16M）</p>\n<h3 id=\"TFTP服务器\">TFTP服务器</h3>\n<p>TFTP（Trivial File Transfer Protocol）服务器是一种简单的文件传输协议服务器，用于在网络设备之间传输文件。与FTP（File Transfer Protocol）相比，TFTP更轻量级，通常用于在局域网（LAN）中传输小文件，如配置文件、固件更新等。</p>\n<p>说白了就是用它来传固件的</p>\n<h3 id=\"连接相机的UART端口\">连接相机的UART端口</h3>\n<p>最好是看摄像头手册 好用的就是一个usb转ttl的串口适配器<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/13/xl7rg7-0.webp\" alt=\"\"></p>\n<p>将适配器上的引脚连接到 UART 端口的可能触点。使用标准电源适配器为相机供电。如果幸运，就可以在终端窗口中看到 Booting log。在某些情况下，如果在屏幕上看到乱码文本而不是引导内核，需要将连接速度更改为 57600 bps，然后重试。RX、TX</p>\n<h3 id=\"访问bootloader\">访问bootloader</h3>\n<p>通过按计算机键盘上的组合键来引导加载程序控制台， 在 bootloader 启动和 Linux 内核启动之前。 在上电的时候疯狂enter</p>\n<p>进入u-boot的命令行</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">setenv ipaddr <span class=\"number\">10.81</span>.<span class=\"number\">1.230</span>;setenv serverip <span class=\"number\">10.81</span>.<span class=\"number\">1.102</span></span><br><span class=\"line\">mw.b x21000000 x x1000000</span><br><span class=\"line\">tftpboot <span class=\"number\">0</span>x21000000 openipc<span class=\"literal\">-ssc338q-fpv-16mb</span>.bin</span><br><span class=\"line\">tftp <span class=\"number\">0</span>x21000000 openipc<span class=\"literal\">-ssc338q-fpv-16mb</span>.binsf probe <span class=\"number\">0</span>;sf lock <span class=\"number\">0</span>;</span><br><span class=\"line\">sf <span class=\"built_in\">erase</span> <span class=\"number\">0</span>x0 <span class=\"number\">0</span>x1000000;sf <span class=\"built_in\">write</span> <span class=\"number\">0</span>x21000000 <span class=\"number\">0</span>x0 <span class=\"number\">0</span>x1000000</span><br><span class=\"line\">reset</span><br></pre></td></tr></table></figure>\n<p>U-Boot 命令系列显示了一个典型的嵌入式系统启动流程，尤其是在网络启动（TFTP）和闪存操作方面的详细步骤。</p>\n<ol>\n<li>\n<p><strong><code>setenv ipaddr 10.81.1.230</code> 和 <code>setenv serverip 10.81.1.102</code></strong><br>\n这两个命令设置了 U-Boot 环境变量，用于指定网络设置,用于通过 TFTP 下载内核或文件系统镜像：</p>\n<ul>\n<li><strong><code>ipaddr</code></strong>：这设置了 U-Boot 启动时使用的本机 IP 地址，<code>10.81.1.230</code> 是设备将会使用的 IP 地址。</li>\n<li><strong><code>serverip</code></strong>：指定了 TFTP 服务器的 IP 地址，<code>10.81.1.102</code> 是存储内核镜像的服务器。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>mw.b x21000000 x x1000000</code></strong><br>\n清空或初始化内存区域，确保内存中没有残留数据</p>\n<ul>\n<li><strong><code>mw.b</code></strong> 是 U-Boot 中的 “Memory Write Byte” 命令，它用于在内存中写入数据。</li>\n<li><strong><code>x21000000</code></strong> 是目标内存地址，这里是指将数据写入设备内存的地址 <code>0x21000000</code>（通常是设备的 RAM）。</li>\n<li><strong><code>x</code></strong> 是要写入的值，代表数据的内容。</li>\n<li><strong><code>x1000000</code></strong> 是写入的字节数，表示要写入的字节数为 <code>0x1000000</code>（即 16MB）。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>tftpboot 0x21000000 openipc-ssc338q-fpv-16mb.bin</code></strong><br>\n通过网络从 <code>10.81.1.102</code> 服务器上获取 <code>openipc-ssc338q-fpv-16mb.bin</code> 文件，并将其存储到设备内存中，准备进行闪存写入。</p>\n<ul>\n<li><strong><code>tftpboot</code></strong> 命令从 TFTP 服务器下载文件，并将文件加载到指定的内存地址。</li>\n<li><strong><code>0x21000000</code></strong> 是目标内存地址，这里表示将下载的文件存储在内存地址 <code>0x21000000</code> 开始的位置。</li>\n<li><strong><code>openipc-ssc338q-fpv-16mb.bin</code></strong> 是要下载的文件名，通常是嵌入式设备的固件或内核镜像文件。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>sf probe 0; sf lock 0;</code></strong><br>\n在闪存上执行写入操作时，相关区域不会被意外覆盖。</p>\n<ul>\n<li><strong><code>sf probe 0</code></strong>：初始化并识别闪存设备，<code>0</code> 是闪存设备的编号。在 U-Boot 中，<code>sf</code> 是指闪存（SPI Flash），这个命令确保设备能够识别并与闪存进行通信。</li>\n<li><strong><code>sf lock 0</code></strong>：锁定闪存的第一个区域，通常用于防止闪存区域被意外擦除或写入。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>sf erase 0x0 0x1000000</code></strong><br>\n这个命令用于擦除闪存的特定区域，擦除操作确保闪存上的旧数据被清除，为写入新的镜像做准备。：</p>\n<ul>\n<li><strong><code>sf erase 0x0 0x1000000</code></strong> 表示擦除从地址 <code>0x0</code> 开始，大小为 <code>0x1000000</code>（即 16MB）的闪存区域。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>sf write 0x21000000 0x0 0x1000000</code></strong><br>\n将内核镜像（或者其他固件文件）写入到设备的闪存中，为下次启动准备好内核。</p>\n<ul>\n<li><strong><code>sf write</code></strong> 用于将数据从内存写入闪存。</li>\n<li><strong><code>0x21000000</code></strong> 是内存中的数据起始地址，前面的 TFTP 操作已经将内核镜像存放在该地址。</li>\n<li><strong><code>0x0</code></strong> 是闪存的起始地址，表示将数据写入闪存的第一个位置。</li>\n<li><strong><code>0x1000000</code></strong> 是写入的字节数，表示将 16MB 的数据从内存写入闪存。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>reset</code></strong></p>\n<ul>\n<li><strong><code>reset</code></strong> 命令重启设备，使设备重新启动并从闪存或其他启动介质加载操作系统。</li>\n</ul>\n</li>\n</ol>\n<p>U-Boot 命令，设备完成了以下操作：</p>\n<ol>\n<li>配置了网络设置（<code>ipaddr</code> 和 <code>serverip</code>）。</li>\n<li>清空并初始化了内存区域。</li>\n<li>从 TFTP 服务器下载了一个固件镜像到内存。</li>\n<li>对闪存进行了操作，包括擦除和写入内核镜像。</li>\n<li>最终触发系统重启，准备从新写入的镜像启动。</li>\n</ol>\n<h3 id=\"保存原始固件\">保存原始固件</h3>\n<h3 id=\"固件烧写\">固件烧写</h3>\n<h3 id=\"串口登录设置\">串口登录设置</h3>\n<h3 id=\"网络配置及远程登录\">网络配置及远程登录</h3>\n<h3 id=\"连接wifi网卡\">连接wifi网卡</h3>\n<h3 id=\"检查WiFi模块的识别情况\">检查WiFi模块的识别情况</h3>\n<h3 id=\"生成和安装-WFB-NG-的密钥配对\">生成和安装 WFB-NG 的密钥配对</h3>\n<h3 id=\"编辑-wfb-conf-以设置正确的-wifi-频道\">编辑 wfb.conf 以设置正确的 wifi 频道</h3>\n<h3 id=\"在相机上配置-majestic-yaml-文件\">在相机上配置 majestic.yaml 文件</h3>\n<h1>视频延时组成</h1>\n<p>视频链路：摄像头==》编码==》传输==》解码==》显示<br>\n整个图传系统的延时主要是：编码延时、传输延时、解码延时：</p>\n<ol>\n<li>摄像头数据采集延时(camera)</li>\n<li>编码器编码延时(H264 codec)</li>\n<li>无线网络延时(wfb_ng)： ~ 5ms</li>\n<li>解码器解码延时(H264 decoder)</li>\n<li>显示器刷新延时(monitor refresh rate)</li>\n</ol>\n<h2 id=\"解码延时\">解码延时</h2>\n<p>解码延时中包含</p>\n<ul>\n<li>Wfb 解包时间</li>\n<li>内核队列延迟</li>\n<li>硬件解码时间</li>\n</ul>\n<h3 id=\"gstreamer\">gstreamer</h3>\n<p>Jetson 的 NVIDIA V4L2 解码器（如 nvv4l2decoder）通过专用硬件模块（如 NVDEC）实现 H.264/H.265 视频流的硬解码，显著降低 CPU 负载并减少处理延迟</p>\n<p><strong>V4L2 驱动：</strong><br>\nV4L2 是 Linux 内核中用于视频设备的标准接口。</p>\n<ul>\n<li>用户空间程序（如 GStreamer）访问摄像头数据。</li>\n<li>Jetson 平台上的 V4L2 驱动经过优化，能够直接将数据传递到硬件加速器（如 NVDEC 和 NVENC），从而减少 CPU 的负载。</li>\n</ul>\n<p>当摄像头驱动捕获到一帧数据后，会将其放入内核中的缓冲区队列中。GStreamer 应用程序通过 V4L2 接口从内核队列中读取数据。</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/04/21/xce35n-0.webp\" alt=\"v4l2\"></p>\n<p><strong>GStreamer 缓冲区与网络弹性</strong></p>\n<p>动态缓冲管理：</p>\n<ul>\n<li>流媒体场景中，通过监听 GST_MESSAGE_BUFFERING 消息动态调整缓冲区大小。例如，当缓冲级别低于 100% 时暂停流水线，待缓冲恢复后继续播放，避免因网络波动导致的数据饥饿。</li>\n</ul>\n<p>时钟同步机制：</p>\n<ul>\n<li>GStreamer 全局时钟（如 GST_CLOCK_TYPE_REALTIME）的丢失会触发重新同步。处理 GST_MESSAGE_CLOCK_LOST 消息时，需暂停并重启流水线以重建时钟基准。</li>\n</ul>\n<p>使用 queue 插件限制缓冲区大小<br>\n<code>udpsrc port=5600 ! queue max-size-buffers=2 ! rtph265depay ! ...</code></p>\n<p>基础的解码脚本：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">current_date=<span class=\"variable\">$</span>(date +<span class=\"string\">&#x27;%Y%d%m_%H%M%S&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/Videos</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$1</span> == <span class=\"string\">&quot;save&quot;</span> ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">\tgst<span class=\"literal\">-launch-1</span>.<span class=\"number\">0</span> <span class=\"literal\">-e</span> udpsrc port=<span class=\"number\">5600</span> caps=<span class=\"string\">&#x27;application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265&#x27;</span> ! rtph265depay ! h265parse ! <span class=\"built_in\">tee</span> name=t ! queue ! mppvideodec ! xvimagesink sync=false t. ! queue ! matroskamux ! filesink location=record_<span class=\"variable\">$</span>&#123;current_date&#125;.mkv</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tgst<span class=\"literal\">-launch-1</span>.<span class=\"number\">0</span> udpsrc port=<span class=\"number\">5600</span> caps=<span class=\"string\">&#x27;application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265&#x27;</span> ! rtph265depay ! h265parse ! mppvideodec ! xvimagesink sync=false</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 jetson 上查看是否调用硬件解码的方法是使用 jtop 工具，具体方法参考<a href=\"https://blog.csdn.net/zong596568821xp/article/details/80268034\">《 NVIDIA查看CPU、内存、GPU使用情况 》</a></p>\n<p><a href=\"https://docs.nvidia.com/jetson/archives/r35.6.1/DeveloperGuide/SD/Multimedia/AcceleratedGstreamer.html\">jetson上的硬件解码器</a></p>\n<h1>地面站</h1>\n<h2 id=\"接收端网卡\">接收端网卡</h2>\n<p>目前开发的地面站支持的大多是rtl8812au这一款网卡（主要是网卡驱动问题）<br>\n并支持monitor 模式</p>\n<h2 id=\"monitor模式\">monitor模式</h2>\n<h3 id=\"什么是monitor模式\">什么是monitor模式</h3>\n<p>WiFi Monitor模式需要WiFi芯片本身支持，并且驱动要支持相应的接口。</p>\n<p>在非Monitor模式 （平时正常使用的状态）下，内核会将802.11帧封装成普通网络帧传递给上层； 而在Monitor模式 下，内核则会直接将802.11帧传给上层，不会进行封装，用户层就通过接口拿到RAW包，可以按802.11帧格式进行包解析处理。</p>\n<p>在Linux内核中，hostap_80211_rx 函数是IEEE 802.11接收无线skb的tasklet函数，其作用是处理802.11网卡传递过来的数据包。倘若网卡被设置成monitor模式，该函数中会调用如下分支：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (local-&gt;iw_mode == IW_MODE_MONITOR) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">    monitor_rx(dev, skb, rx_stats);</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在monitor_rx 函数中，主要是prism2_rx_80211 函数，将带有802.11头的skb直接发送给netif。netif为linux内核网络数据包的标准框架。在prism2_rx_80211中，在skb里补充了一个抓包的头，给用户提供更多的包信息。这个头对应的数据结构为linux_wlan_ng_cap_hdr ，具体声明如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">linux_wlan_ng_cap_hdr</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 version;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 length;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be64 mactime;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be64 hosttime;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 phytype;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 channel;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 datarate;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 antenna;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 priority;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 ssi_type;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 ssi_signal;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 ssi_noise;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 preamble;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 encoding;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125; __packed;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何开启\">如何开启</h3>\n<p>使用如下命令可以实现：<br>\n<code>iwconfig wlan0 mode Monitor</code><br>\n其调用了如下ioctl来配置：<br>\n<code>ret = ioctl(skfd, SIOCSIWMODE, &amp;wrq);</code><br>\n对应的配置模式，通过wrq参数来定义。而上面的skfd则由下面操作获取：<br>\n<code>skfd = socket(AF_INET, SOCK_DGRAM, 0);</code></p>\n<h2 id=\"网卡选择\">网卡选择</h2>\n<p>网卡官方支持：<br>\nRTL8812AU、ar9271、rtl8812eu</p>\n<p><a href=\"https://forums.developer.nvidia.com/t/rtl8822ce-access-point-mode/288083\">https://forums.developer.nvidia.com/t/rtl8822ce-access-point-mode/288083</a><br>\n板载算力板上的网卡型号为rtl8812CE，不支持monitor mode</p>\n<h2 id=\"WIfibroadcast的原理分析：\">WIfibroadcast的原理分析：</h2>\n<h3 id=\"远距离wifi技术：\">远距离wifi技术：</h3>\n<div class=\"tag link\"><a class=\"link-card\" title=\"Wi-Fi极限谈1：最大传输距离的“标准”答案\" href=\"https://zhuanlan.zhihu.com/p/121872101\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">Wi-Fi极限谈1：最大传输距离的“标准”答案</p><p class=\"url\">https://zhuanlan.zhihu.com/p/121872101</p></div></a></div> \n<p>2.4GHz 频率<br>\nRSSI（Received Signal Strength Indicator）值代表设备接收到的信号强度，通常用负值表示。RSSI 值范围一般如下：</p>\n<p>接近 0（如 -30）: 信号非常强，设备与信号源的距离较近。<br>\n中等值（如 -50 至 -70）: 信号质量良好，适合正常通信。<br>\n较弱值（如 -80 至 -90）: 信号较弱，可能会影响通信质量。<br>\n非常弱（小于 -90）: 信号几乎不可用，设备可能会断开连接。<br>\n解读你的 RSSI 值<br>\n你当前的 RSSI 值是 -41：</p>\n<p>这是一个非常强的信号，表示设备离信号源很近，通信质量应该非常好。</p>\n<p>pkt/s代表每秒传输的数据包数量（packets per second）。这是一种衡量网络性能的指标，用于表示网络接口在一秒钟内可以发送或接收的数据包的数量。这个数值可以帮助评估网络的负载情况和传输效率。较高的pkt/s值意味着网络接口能够处理更多的数据包</p>\n<p>8 Mbps (MCS #1 调制) 涉及到的是无线网络通信中的两个概念：数据传输速率和调制编码方案（MCS，Modulation and Coding Scheme）。</p>\n<ol>\n<li>\n<p><strong>8 Mbps</strong>：指的是数据传输速率，即每秒可以传输的数据量为8兆比特。这是一个衡量网络速度的指标，表示理论上一秒钟内可以传送8兆比特（Mb）的数据。</p>\n</li>\n<li>\n<p><strong>MCS #1</strong>：MCS代表调制编码方案，它用于指定在无线通信中使用的调制方式和编码率。不同的MCS索引号对应着不同的调制方式和编码率组合，从而影响数据传输速率和可靠性。MCS #1通常指使用相对较低复杂度的调制和编码策略，以确保更稳定的传输质量，特别是在信号条件不是最优的情况下。</p>\n</li>\n</ol>\n<p>对于802.11n标准（Wi-Fi 4），MCS #1一般对应于使用BPSK（二进制相移键控）调制和1/2编码率。这意味着每个符号携带1个比特的信息，并且有一半的数据位被用于前向纠错编码，以增强数据传输的可靠性。在单空间流（Single Spatial Stream）和20 MHz带宽的条件下，这种配置可以达到大约7.2 Mbps到8 Mbps的数据传输速率。</p>\n<p>因此，“8 Mbps (MCS #1调制)”意味着在网络使用特定的调制和编码设置（在此例中为MCS #1，涉及BPSK调制和1/2编码率）时，能够实现的最大理论数据传输速率为8 Mbps。需要注意的是，实际传输速率可能会受到环境因素、设备性能等多种因素的影响。</p>\n<h4 id=\"目标板配置\">目标板配置</h4>\n<p><code>devices/ssc338q_fpv_openipc-urllc-aio/br-ext-chip-sigmastar/configs/ssc338q_fpv_openipc-urllc-aio_defconfig#L103</code></p>\n<p><code>BR2_PACKAGE_WIFIBROADCAST=y</code>配置好选项</p>\n<h4 id=\"软件版配置\">软件版配置</h4>\n<p><code>general/package/wifibroadcast/wifibroadcast.mk#L7</code></p>\n<p><code>WIFIBROADCAST_VERSION = 24.08</code></p>\n<h4 id=\"视频数据发送-接收\">视频数据发送 &amp; 接收</h4>\n<p><code>general/package/wifibroadcast/files/wifibroadcast#L109-L117</code></p>\n<p>运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">start_drone_wfb() &#123;</span><br><span class=\"line\">\twfb_tx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$udp_port</span>&quot;</span> <span class=\"literal\">-R</span> <span class=\"string\">&quot;<span class=\"variable\">$rcv_buf</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-B</span> <span class=\"string\">&quot;<span class=\"variable\">$bandwidth</span>&quot;</span> \\</span><br><span class=\"line\">\t\t<span class=\"literal\">-M</span> <span class=\"string\">&quot;<span class=\"variable\">$mcs_index</span>&quot;</span> <span class=\"literal\">-S</span> <span class=\"string\">&quot;<span class=\"variable\">$stbc</span>&quot;</span> <span class=\"literal\">-L</span> <span class=\"string\">&quot;<span class=\"variable\">$ldpc</span>&quot;</span> <span class=\"literal\">-G</span> <span class=\"string\">&quot;<span class=\"variable\">$guard_interval</span>&quot;</span> <span class=\"literal\">-k</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_k</span>&quot;</span> <span class=\"literal\">-n</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_n</span>&quot;</span> \\</span><br><span class=\"line\">\t\t<span class=\"literal\">-T</span> <span class=\"string\">&quot;<span class=\"variable\">$pool_timeout</span>&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"operator\">-f</span> <span class=\"string\">&quot;<span class=\"variable\">$frame_type</span>&quot;</span> <span class=\"literal\">-C</span> <span class=\"number\">8000</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">start_gs_wfb() &#123;</span><br><span class=\"line\">\twfb_rx <span class=\"literal\">-c</span> <span class=\"string\">&quot;<span class=\"variable\">$udp_addr</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$udp_port</span>&quot;</span> <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"datalink\">datalink</h3>\n<p><code>devices/ssc338q_fpv_openipc-urllc-aio/br-ext-chip-sigmastar/configs/ssc338q_fpv_openipc-urllc-aio_defconfig#L102</code></p>\n<p>BR2_PACKAGE_DATALINK=y</p>\n<h4 id=\"软件版配置-2\">软件版配置</h4>\n<p><code>general/package/datalink/files/telemetry#L13-L16</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ ! -<span class=\"type\">f</span> /<span class=\"type\">usr</span>/<span class=\"type\">bin</span>/<span class=\"type\">telemetry_rx</span> ] &amp;&amp; [ ! -<span class=\"type\">f</span> /<span class=\"type\">usr</span>/<span class=\"type\">bin</span>/<span class=\"type\">telemetry_tx</span> ]; then</span><br><span class=\"line\">\tln <span class=\"literal\">-s</span> /usr/bin/wfb_rx /usr/bin/telemetry_rx</span><br><span class=\"line\">\tln <span class=\"literal\">-s</span> /usr/bin/wfb_tx /usr/bin/telemetry_tx</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p><code>general/package/datalink/files/telemetry_drone.conf#L15-L20</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">stream_rx=<span class=\"number\">144</span></span><br><span class=\"line\">stream_tx=<span class=\"number\">16</span></span><br><span class=\"line\">link_id=<span class=\"number\">7669206</span></span><br><span class=\"line\">frame_type=<span class=\"keyword\">data</span></span><br><span class=\"line\">port_rx=<span class=\"number\">14551</span></span><br><span class=\"line\">port_tx=<span class=\"number\">14550</span></span><br></pre></td></tr></table></figure>\n<p><code>general/package/datalink/files/telemetry_gs.conf#L15-L20</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">stream_rx=<span class=\"number\">16</span></span><br><span class=\"line\">stream_tx=<span class=\"number\">144</span></span><br><span class=\"line\">link_id=<span class=\"number\">7669206</span></span><br><span class=\"line\">frame_type=<span class=\"keyword\">data</span></span><br><span class=\"line\">port_rx=<span class=\"number\">14651</span></span><br><span class=\"line\">port_tx=<span class=\"number\">14650</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数据发送-接收\">数据发送 &amp; 接收</h4>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">start_drone_telemetry() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$one_way</span>&quot;</span> = <span class=\"string\">&quot;false&quot;</span> ]; then</span><br><span class=\"line\">\t\ttelemetry_rx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream_rx</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$port_rx</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">\ttelemetry_tx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream_tx</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$port_tx</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-B</span> <span class=\"string\">&quot;<span class=\"variable\">$bandwidth</span>&quot;</span> \\</span><br><span class=\"line\">\t\t<span class=\"literal\">-M</span> <span class=\"string\">&quot;<span class=\"variable\">$mcs_index</span>&quot;</span> <span class=\"literal\">-S</span> <span class=\"string\">&quot;<span class=\"variable\">$stbc</span>&quot;</span> <span class=\"literal\">-L</span> <span class=\"string\">&quot;<span class=\"variable\">$ldpc</span>&quot;</span> <span class=\"literal\">-G</span> <span class=\"string\">&quot;<span class=\"variable\">$guard_interval</span>&quot;</span> <span class=\"literal\">-k</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_k</span>&quot;</span> <span class=\"literal\">-n</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_n</span>&quot;</span> \\</span><br><span class=\"line\">\t\t<span class=\"literal\">-T</span> <span class=\"string\">&quot;<span class=\"variable\">$pool_timeout</span>&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"operator\">-f</span> <span class=\"string\">&quot;<span class=\"variable\">$frame_type</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">start_gs_telemetry() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$one_way</span>&quot;</span> = <span class=\"string\">&quot;false&quot;</span> ]; then</span><br><span class=\"line\">\t\ttelemetry_tx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream_tx</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$port_tx</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-B</span> <span class=\"string\">&quot;<span class=\"variable\">$bandwidth</span>&quot;</span> \\</span><br><span class=\"line\">\t\t\t<span class=\"literal\">-M</span> <span class=\"string\">&quot;<span class=\"variable\">$mcs_index</span>&quot;</span> <span class=\"literal\">-S</span> <span class=\"string\">&quot;<span class=\"variable\">$stbc</span>&quot;</span> <span class=\"literal\">-L</span> <span class=\"string\">&quot;<span class=\"variable\">$ldpc</span>&quot;</span> <span class=\"literal\">-G</span> <span class=\"string\">&quot;<span class=\"variable\">$guard_interval</span>&quot;</span> <span class=\"literal\">-k</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_k</span>&quot;</span> <span class=\"literal\">-n</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_n</span>&quot;</span> \\</span><br><span class=\"line\">\t\t\t<span class=\"literal\">-T</span> <span class=\"string\">&quot;<span class=\"variable\">$pool_timeout</span>&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"operator\">-f</span> <span class=\"string\">&quot;<span class=\"variable\">$frame_type</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">\ttelemetry_rx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream_rx</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$port_rx</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"🧱-WiFiBroadcast-WFB-TX-架构分析图\">🧱 <strong>WiFiBroadcast (WFB-TX) 架构分析图</strong></h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">main(int argc, char* const *argv)</span><br><span class=\"line\">│</span><br><span class=\"line\">├── 命令行参数解析（getopt）</span><br><span class=\"line\">│    ├── 设置运行模式：LOCAL / DISTRIBUTOR / INJECTOR</span><br><span class=\"line\">│    ├── FEC 参数：k, n, fec_delay, fec_timeout</span><br><span class=\"line\">│    ├── 网络配置：UDP 端口 / Unix socket / 接收方地址列表</span><br><span class=\"line\">│    ├── 加密参数：keypair 文件路径</span><br><span class=\"line\">│    ├── 日志设置：log_interval</span><br><span class=\"line\">│    ├── 控制接口：control_port</span><br><span class=\"line\">│    └── 物理层参数：bandwidth, MCS index, VHT mode, STBC/LDPC 等</span><br><span class=\"line\">│</span><br><span class=\"line\">├── 系统熵检查（确保随机数安全）</span><br><span class=\"line\">│    └── 检查 /dev/random 的熵池是否足够用于加密 key 生成</span><br><span class=\"line\">│</span><br><span class=\"line\">├── libsodium 初始化</span><br><span class=\"line\">│    └── sodium_init()：初始化加密库，用于 FEC session key 和数据加密</span><br><span class=\"line\">│</span><br><span class=\"line\">├── radiotap header 初始化</span><br><span class=\"line\">│    └── 根据物理层参数构造 IEEE80211_RADIOTAP_HDR，用于注入原始帧</span><br><span class=\"line\">│</span><br><span class=\"line\">├── 根据 tx_mode 启动不同主循环</span><br><span class=\"line\">│</span><br><span class=\"line\">│    ┌────────────────────────────────────────────────────────────┐</span><br><span class=\"line\">│    │ case LOCAL: 本地发送模式（发射端）                        │</span><br><span class=\"line\">│    │   ├─ 使用 local_loop_udp 或 local_loop_unix                │</span><br><span class=\"line\">│    │   ├─ 打开 raw socket 向 wlanX 注入原始数据包               │</span><br><span class=\"line\">│    │   └─ 创建 LocalTransmitter 实例负责 FEC 编码和加密         │</span><br><span class=\"line\">│    │                                                            │</span><br><span class=\"line\">│    │    ┌──────────────────────────────────────────────────┐    │</span><br><span class=\"line\">│    │    │ LocalTransmitter                                  │    │</span><br><span class=\"line\">│    │    │   ├── FEC 编码 (Reed-Solomon k/n)                 │    │</span><br><span class=\"line\">│    │    │   ├── 数据分块与 FEC 分组                           │    │</span><br><span class=\"line\">│    │    │   ├── 加密（使用 libsodium）                       │    │</span><br><span class=\"line\">│    │    │   ├── 时间戳与 epoch 管理                          │    │</span><br><span class=\"line\">│    │    │   └── tags 管理（用于 FEC block 标识）             │    │</span><br><span class=\"line\">│    │    └──────────────────────────────────────────────────┘    │</span><br><span class=\"line\">│    │                                                            │</span><br><span class=\"line\">│    │    ┌──────────────────────────────────────────────────┐    │</span><br><span class=\"line\">│    │    │ data_source_local(): 主事件循环                   │    │</span><br><span class=\"line\">│    │    │   ├── 监听输入源（如 stdin 或 video pipe）        │    │</span><br><span class=\"line\">│    │    │   ├── 触发 FEC 编码                               │    │</span><br><span class=\"line\">│    │    │   ├── 发送 FEC block 到所有目标设备               │    │</span><br><span class=\"line\">│    │    └──────────────────────────────────────────────────┘    │</span><br><span class=\"line\">│    │                                                            │</span><br><span class=\"line\">│    └────────────────────────────────────────────────────────────┘</span><br><span class=\"line\">│</span><br><span class=\"line\">│    ┌────────────────────────────────────────────────────────────┐</span><br><span class=\"line\">│    │ case DISTRIBUTOR: 接收端（分布式接收器）                  │</span><br><span class=\"line\">│    │   ├─ 使用 distributor_loop_udp 或 distributor_loop_unix    │</span><br><span class=\"line\">│    │   ├─ 多路复用多个 UDP/Unix socket                         │</span><br><span class=\"line\">│    │   └─ 创建 RemoteTransmitter 实例处理 FEC 解码              │</span><br><span class=\"line\">│    │                                                            │</span><br><span class=\"line\">│    │    ┌──────────────────────────────────────────────────┐    │</span><br><span class=\"line\">│    │    │ RemoteTransmitter                              │    │</span><br><span class=\"line\">│    │    │   ├── FEC 解码                                 │    │</span><br><span class=\"line\">│    │    │   ├── 包重组                                   │    │</span><br><span class=\"line\">│    │    │   ├── 支持 FEC 超时机制                        │    │</span><br><span class=\"line\">│    │    │   └── 数据恢复并注入到 wlanX 设备              │    │</span><br><span class=\"line\">│    │    └────────────────────────────────────────────────┘    │</span><br><span class=\"line\">│    │                                                            │</span><br><span class=\"line\">│    │    ┌──────────────────────────────────────────────────┐    │</span><br><span class=\"line\">│    │    │ data_source(): 主事件循环                       │    │</span><br><span class=\"line\">│    │    │   ├── 接收远程 FEC block                        │    │</span><br><span class=\"line\">│    │    │   ├── FEC 解码并恢复丢失的数据包                │    │</span><br><span class=\"line\">│    │    │   ├── 控制指令处理（修改 FEC 参数等）           │    │</span><br><span class=\"line\">│    │    └────────────────────────────────────────────────┘    │</span><br><span class=\"line\">│    │                                                            │</span><br><span class=\"line\">│    └────────────────────────────────────────────────────────────┘</span><br><span class=\"line\">│</span><br><span class=\"line\">│    ┌────────────────────────────────────────────────────────────┐</span><br><span class=\"line\">│    │ case INJECTOR: 测试注入器                                │</span><br><span class=\"line\">│    │   └─ injector_loop()：模拟 FEC block 注入测试流量          │</span><br><span class=\"line\">│    └────────────────────────────────────────────────────────────┘</span><br><span class=\"line\">│</span><br><span class=\"line\">├── 异常捕获（try-catch）</span><br><span class=\"line\">│    └── 捕获 runtime_error 并输出错误信息后退出</span><br><span class=\"line\">│</span><br><span class=\"line\">└── 正常退出</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"📊-总结说明\">📊 总结说明</h2>\n<table>\n<thead>\n<tr>\n<th>模块</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>main()</td>\n<td>程序入口，负责参数解析、初始化、启动主循环</td>\n</tr>\n<tr>\n<td>LocalTransmitter</td>\n<td>负责 FEC 编码、加密、时间戳管理、标签分配</td>\n</tr>\n<tr>\n<td>RemoteTransmitter</td>\n<td>负责 FEC 解码、丢包恢复、数据注入到 wlanX</td>\n</tr>\n<tr>\n<td>data_source / data_source_local</td>\n<td>主事件循环，处理数据流和控制信号</td>\n</tr>\n<tr>\n<td>FEC 编解码</td>\n<td>基于 Reed-Solomon(k,n)，支持前向纠错</td>\n</tr>\n<tr>\n<td>加密机制</td>\n<td>使用 libsodium 库进行 session key 管理和数据加密</td>\n</tr>\n<tr>\n<td>Radiotap Header</td>\n<td>封装物理层参数，兼容多种无线网卡</td>\n</tr>\n<tr>\n<td>控制接口</td>\n<td>支持通过 control_port 动态调整 FEC 参数</td>\n</tr>\n<tr>\n<td>日志系统</td>\n<td>输出运行状态、丢包率、延迟等关键指标</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"📎-示例命令对照\">📎 示例命令对照</h2>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>命令示例</th>\n<th>对应函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>发射端</td>\n<td><code>wfb_tx -u 5600 -k 8 -n 12 -f data wlan0</code></td>\n<td><code>local_loop_udp()</code></td>\n</tr>\n<tr>\n<td>接收端</td>\n<td><code>wfb_rx -d -u 5600 host:5600</code></td>\n<td><code>distributor_loop()</code></td>\n</tr>\n<tr>\n<td>本地测试</td>\n<td><code>wfb_rx -U /tmp/wfb -d host:port</code></td>\n<td><code>distributor_loop_unix()</code></td>\n</tr>\n<tr>\n<td>注入测试</td>\n<td><code>wfb_rx -I 10000 wlan0</code></td>\n<td><code>injector_loop()</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Linux-内核启动过程\">Linux 内核启动过程</h2>\n<p>一旦 U-Boot 把内核加载到内存并将控制权交给内核，Linux 内核就开始启动。内核启动的过程可以分为几个重要的阶段：</p>\n<h2 id=\"内核说明\">内核说明</h2>\n<h3 id=\"内核初始化：\">内核初始化：</h3>\n<p>解压内核：如果内核是压缩格式（uImage），它会首先被解压。<br>\n设置系统环境：内核初始化过程中，会初始化硬件环境，包括内存、CPU、时钟、I/O 控制器等。<br>\n启动内核主线程：内核开始执行第一个用户空间进程，通常是 init 进程。<br>\n设备驱动加载：内核会根据设备树（Device Tree，DT）或者硬编码的设备信息来加载相关硬件设备的驱动，确保硬件能够被正确识别并与操作系统交互。</p>\n<p>内核调度和管理资源：内核的调度器开始工作，管理系统资源，如 CPU、内存、I/O 等。</p>\n<h3 id=\"init-进程和用户空间启动\">init 进程和用户空间启动</h3>\n<p>在 Linux 内核初始化完毕后，控制权会传递给第一个用户空间进程 init，它通常会启动系统中所有的守护进程和服务。</p>\n<ul>\n<li>挂载 /proc 文件系统。</li>\n<li>检查并挂载支持的根文件系统。</li>\n<li>通过 overlay 或 overlayfs 文件系统进行联合挂载，允许在嵌入式系统中以最小化的方式实现根文件系统的可写层。</li>\n<li>使用 pivot_root 更改根文件系统。</li>\n<li>挂载其他系统关键文件系统（如 /proc、/dev 和 /overlay）。</li>\n</ul>\n<h4 id=\"RootFS-的内容\">RootFS 的内容</h4>\n<p>在 Buildroot 中，根文件系统（RootFS）是由多个目录和文件构成的，这些目录和文件用于支持系统运行。常见的文件夹有：</p>\n<p>/bin/：基本的可执行文件，如 sh、ls 等。<br>\n/sbin/：系统管理程序，如 init、ifconfig 等。<br>\n/etc/：系统配置文件，如网络配置、服务启动配置等。<br>\n/lib/：共享库。<br>\n/tmp/：临时文件。<br>\n/proc/：虚拟文件系统，提供系统信息。<br>\n/sys/：虚拟文件系统，提供内核信息。<br>\n/dev/：设备文件。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── bin</span><br><span class=\"line\">├── dev</span><br><span class=\"line\">├── etc</span><br><span class=\"line\">├── init</span><br><span class=\"line\">├── lib</span><br><span class=\"line\">├── lib32 -&gt; lib</span><br><span class=\"line\">├── linuxrc -&gt; bin/busybox</span><br><span class=\"line\">├── media</span><br><span class=\"line\">├── mnt</span><br><span class=\"line\">├── opt</span><br><span class=\"line\">├── overlay</span><br><span class=\"line\">├── proc</span><br><span class=\"line\">├── rom</span><br><span class=\"line\">├── root</span><br><span class=\"line\">├── run</span><br><span class=\"line\">├── sbin</span><br><span class=\"line\">├── sys</span><br><span class=\"line\">├── tmp</span><br><span class=\"line\">├── usr</span><br><span class=\"line\">├── utils</span><br><span class=\"line\">└── var</span><br></pre></td></tr></table></figure>\n<p>在这些目录中，init 文件是根文件系统中用于启动系统的第一个进程。</p>\n<h4 id=\"init-与文件系统的关系\">init 与文件系统的关系</h4>\n<p>在Linux嵌入式系统的开发和维护过程中，了解系统启动和服务管理机制是至关重要的。init 文件本身就是嵌入在构建的文件系统中的。</p>\n<p>其中，/etc/init.d/目录扮演了关键角色，它包含了用于初始化、启动、重启或停止各种服务的脚本。<br>\ninit.d是指包含一系列 Shell脚本 的目录，这些脚本用于控制服务（也称为守护进程）的生命周期。当系统启动时，init进程会根据预定义的规则执行这些脚本，以确保必要的服务能够正确启动。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rcK         S01syslogd  S30customizer  S40network   S60crond     S98datalink</span><br><span class=\"line\">rcS         S02klogd    S35modules     S49ntpd      S70vendor    S98vtun</span><br><span class=\"line\">S01seedrng  S02sysctl   S38mdev        S50dropbear  S95majestic  S99rc.local</span><br></pre></td></tr></table></figure>\n<h4 id=\"系统脚本运行情况\">系统脚本运行情况</h4>\n<details class=\"folding-tag\" ><summary> rcS </summary>\n              <div class='content'>\n              <p>先看一下rcS文件，它是本目录在开机时最先启动的文件。也是系统进入多用户模式之前的初始化脚本。它会根据配置启动各种系统服务，通常会依赖其他脚本来执行特定的任务。</p><p>rcS通常用于：</p><ul><li>初始化基本系统服务</li><li>挂载文件系统</li><li>启动 init.d 目录下的所有 S 开头的脚本</li><li>init.d 目录结构遵循了 SysV init 启动方式，rcS 主要是用来遍历 S 开头的脚本，并依次执行它们。</li><li>在使用 <strong>Buildroot</strong> 进行内核裁剪之后，init进程的启动工作流会根据 <code>/etc/init.d</code> 中的启动脚本顺序来执行。</li></ul><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\">export SENSOR=<span class=\"variable\">$</span>(fw_printenv <span class=\"literal\">-n</span> sensor)</span><br><span class=\"line\">export UPGRADE=<span class=\"variable\">$</span>(fw_printenv <span class=\"literal\">-n</span> upgrade)</span><br><span class=\"line\">export TZ=<span class=\"variable\">$</span>(<span class=\"built_in\">cat</span> /etc/TZ)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> /etc/init.d/S??*; <span class=\"keyword\">do</span></span><br><span class=\"line\">\t[ ! -<span class=\"type\">f</span> <span class=\"string\">&quot;<span class=\"variable\">$i</span>&quot;</span> ] &amp;&amp; <span class=\"keyword\">continue</span></span><br><span class=\"line\">\tcase <span class=\"string\">&quot;<span class=\"variable\">$i</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\t*)</span><br><span class=\"line\">\t\t\t<span class=\"variable\">$i</span> <span class=\"built_in\">start</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\tesac</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure><ul><li>循环遍历 <code>/etc/init.d/</code> 目录下所有以 <code>S</code> 开头且后面跟有两位数字（<code>S??*</code>）的文件。</li><li><code>[ ! -f &quot;$i&quot; ] &amp;&amp; continue</code> 检查每个文件是否是普通文件（不是目录等其他类型），如果不是普通文件，则跳过该文件。</li><li><code>case &quot;$i&quot; in *) $i start ;; esac</code> 对每个文件（即每个服务脚本）执行 <code>start</code> 参数。触发服务脚本的启动。服务脚本内会定义如何启动服务（如启动系统守护进程、初始化硬件设备、配置网络等）。</li></ul>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> rcK </summary>\n              <div class='content'>\n              <p>与rcS相对<br>这个脚本通常在系统关闭或者进入单用户模式时运行。它主要用来停止一些服务，清理系统资源。</p><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$</span>(<span class=\"built_in\">ls</span> <span class=\"literal\">-r</span> /etc/init.d/S??*); <span class=\"keyword\">do</span></span><br><span class=\"line\">\t[ ! -<span class=\"type\">f</span> <span class=\"string\">&quot;<span class=\"variable\">$i</span>&quot;</span> ] &amp;&amp; <span class=\"keyword\">continue</span></span><br><span class=\"line\">\tcase <span class=\"string\">&quot;<span class=\"variable\">$i</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\t*)</span><br><span class=\"line\">\t\t\t<span class=\"variable\">$i</span> stop</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\tesac</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S01seedrng </summary>\n              <div class='content'>\n              <p>作用是启动一个随机数生成服务，确保系统在启动时能够使用持久化的种子数据来生成加密级别的随机数。其主要作用是增强系统的随机性，确保用于加密和安全任务时生成的随机数质量高，防止系统依赖不安全或预测性的随机数。脚本还支持动态配置种子存储位置和一些特定的安全选项。</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S01syslogd </summary>\n              <div class='content'>\n              <p><code>S01syslogd</code> 脚本的作用是启动和管理 <code>syslogd</code> 服务，<code>syslogd</code> 是一个日志守护进程，用于收集、存储和转发系统日志。这个脚本确保 <code>syslogd</code> 正常运行，并在系统启动时自动启动它。</p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DAEMON=<span class=\"string\">&quot;syslogd&quot;</span></span><br><span class=\"line\">PIDFILE=<span class=\"string\">&quot;/var/run/<span class=\"variable\">$DAEMON</span>.pid&quot;</span></span><br><span class=\"line\">DAEMON_ARGS=<span class=\"string\">&quot;-n -C64 -t&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>DAEMON=&quot;syslogd&quot;</code>：定义了守护进程的名称，即 <code>syslogd</code>，它是负责处理系统日志的服务。</li><li><code>PIDFILE=&quot;/var/run/$DAEMON.pid&quot;</code>：定义了守护进程的 PID 文件位置，<code>/var/run/syslogd.pid</code> 用于存储 <code>syslogd</code> 的进程 ID。</li><li><code>DAEMON_ARGS=&quot;-n -C64 -t&quot;</code>：定义了 <code>syslogd</code> 启动时的参数：<ul><li><code>-n</code>：告诉 <code>syslogd</code> 以非守护进程模式启动，即不将其转为后台进程。</li><li><code>-C64</code>：设置日志缓冲区大小为 64 KB。</li><li><code>-t</code>：标记每条日志信息，通常用于调试日志输出。</li></ul></li></ul><h3 id=\"start-函数\"><code>start</code> 函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Starting <span class=\"variable\">$DAEMON</span>: &quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -b -m -S -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span> -x <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span> -- <span class=\"variable\">$DAEMON_ARGS</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>start</code> 函数用于启动 <code>syslogd</code>：</p><ul><li><code>start-stop-daemon -b -m -S -q -p &quot;$PIDFILE&quot; -x &quot;$DAEMON&quot; -- $DAEMON_ARGS</code>：该命令通过 <code>start-stop-daemon</code> 启动守护进程 <code>syslogd</code>，并将其参数传递给进程。选项解析：<ul><li><code>-b</code>：使进程在后台运行。</li><li><code>-m</code>：以守护进程的方式启动。</li><li><code>-S</code>：启动进程时保持锁定。</li><li><code>-q</code>：安静模式，不显示多余信息。</li><li><code>-p &quot;$PIDFILE&quot;</code>：指定存储 PID 文件的位置。</li><li><code>-x &quot;$DAEMON&quot;</code>：指定要启动的守护进程程序，即 <code>syslogd</code>。</li><li><code>-- $DAEMON_ARGS</code>：传递参数给 <code>syslogd</code>，如日志缓冲区大小等。</li></ul></li></ul></li><li><p>启动成功后输出 <code>OK</code>，失败则输出 <code>FAIL</code>。</p></li></ul><h3 id=\"stop-函数\"><code>stop</code> 函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Stopping <span class=\"variable\">$DAEMON</span>: &quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -K -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">rm</span> -f <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>stop</code> 函数用于停止 <code>syslogd</code>：<ul><li><code>start-stop-daemon -K -q -p &quot;$PIDFILE&quot;</code>：使用 <code>start-stop-daemon</code> 停止守护进程，<code>-K</code> 表示终止进程，<code>-q</code> 表示安静模式，<code>-p &quot;$PIDFILE&quot;</code> 用于指定 PID 文件。</li><li>停止成功后，删除 PID 文件并输出 <code>OK</code>，否则输出 <code>FAIL</code>。</li></ul></li></ul><h3 id=\"处理脚本参数\">处理脚本参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart|stop)</span><br><span class=\"line\">\t\t<span class=\"variable\">$1</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\trestart|reload)</span><br><span class=\"line\">\t\tstop</span><br><span class=\"line\">\t\t<span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">\t\tstart</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li>脚本通过 <code>case</code> 语句根据传入的参数来决定执行哪个操作：<ul><li><code>start</code>：调用 <code>start</code> 函数，启动 <code>syslogd</code>。</li><li><code>stop</code>：调用 <code>stop</code> 函数，停止 <code>syslogd</code>。</li><li><code>restart</code> 或 <code>reload</code>：先停止进程，等待 1 秒后重新启动，确保服务能平滑重启。</li><li>如果参数无效，输出使用提示并退出脚本。</li></ul></li></ul>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S02klogd </summary>\n              <div class='content'>\n              <p><strong>klogd</strong> 会收集内核级别的日志信息，通常与 <strong>syslogd</strong> 配合使用，将内核日志发送到合适的位置。<br>这个 <code>S02klogd</code> 脚本是一个 <strong>SysV-style</strong> 启动脚本，专门用于管理 <code>klogd</code> 进程（Kernel Logging Daemon）。它遵循传统的 init 脚本格式，使用 <code>start-stop-daemon</code> 命令来启动和停止 <code>klogd</code>，并且能够创建 <code>PIDFILE</code> 以便于进程管理。</p><hr><h2 id=\"详细解析\"><strong>详细解析</strong></h2><p>这个脚本的主要作用是控制 <code>klogd</code>（Kernel Log Daemon）的启动、停止和重启，并且遵循 SysV init 脚本的标准格式。它的结构清晰，主要由以下几个部分组成：</p><h3 id=\"1-变量定义\"><strong>1. 变量定义</strong></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">DAEMON=<span class=\"string\">&quot;klogd&quot;</span></span><br><span class=\"line\">PIDFILE=<span class=\"string\">&quot;/var/run/<span class=\"variable\">$DAEMON</span>.pid&quot;</span></span><br><span class=\"line\">KLOGD_ARGS=<span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>DAEMON=&quot;klogd&quot;</code>：定义守护进程的名称。</li><li><code>PIDFILE=&quot;/var/run/$DAEMON.pid&quot;</code>：定义进程的 PID 文件路径。</li><li><code>KLOGD_ARGS=&quot;&quot;</code>：定义 <code>klogd</code> 运行时的附加参数，默认是空的。</li></ul><h3 id=\"2-读取默认配置\"><strong>2. 读取默认配置</strong></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ -r <span class=\"string\">&quot;/etc/default/<span class=\"variable\">$DAEMON</span>&quot;</span> ] &amp;&amp; . <span class=\"string\">&quot;/etc/default/<span class=\"variable\">$DAEMON</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li>这里会检查 <code>/etc/default/klogd</code> 文件是否可读，如果存在，则加载它的内容。</li><li>这个设计使得 <code>klogd</code> 的启动参数可以在 <code>/etc/default/klogd</code> 里定义，而不是硬编码在脚本中，增强了灵活性。</li></ul><h3 id=\"3-start-函数\"><strong>3. <code>start()</code> 函数</strong></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span> <span class=\"string\">&#x27;Starting %s: &#x27;</span> <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -b -m -S -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span> -x <span class=\"string\">&quot;/sbin/<span class=\"variable\">$DAEMON</span>&quot;</span> \\</span><br><span class=\"line\">\t\t-- -n <span class=\"variable\">$KLOGD_ARGS</span></span><br><span class=\"line\">\tstatus=$?</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$status</span>&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"string\">&quot;<span class=\"variable\">$status</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>先打印 <code>&quot;Starting klogd: &quot;</code> 提示信息。</li><li>使用 <code>start-stop-daemon</code> 启动 <code>klogd</code>：<ul><li><code>-b</code>：后台运行（daemonize）。</li><li><code>-m</code>：创建 <code>PIDFILE</code>。</li><li><code>-S</code>：启动服务（start）。</li><li><code>-q</code>：安静模式（quiet），不打印额外信息。</li><li><code>-p &quot;$PIDFILE&quot;</code>：指定 <code>PIDFILE</code>。</li><li><code>-x &quot;/sbin/$DAEMON&quot;</code>：执行 <code>/sbin/klogd</code>。</li><li><code>-- -n $KLOGD_ARGS</code>：传递 <code>-n</code> 选项给 <code>klogd</code>，表示不创建 <code>PIDFILE</code>，因为 <code>BusyBox</code> 版 <code>klogd</code> 不会自己管理 <code>PIDFILE</code>，所以这里用 <code>start-stop-daemon</code> 处理。</li></ul></li><li><code>status=$?</code> 获取 <code>start-stop-daemon</code> 的退出状态码：<ul><li><code>0</code> 代表成功，打印 <code>&quot;OK&quot;</code>。</li><li>非 <code>0</code> 代表失败，打印 <code>&quot;FAIL&quot;</code>。</li></ul></li><li><code>return &quot;$status&quot;</code> 返回状态码，以便于外部脚本检查。</li></ul><h3 id=\"4-stop-函数\"><strong>4. <code>stop()</code> 函数</strong></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span> <span class=\"string\">&#x27;Stopping %s: &#x27;</span> <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -K -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\tstatus=$?</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$status</span>&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">rm</span> -f <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"string\">&quot;<span class=\"variable\">$status</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>先打印 <code>&quot;Stopping klogd: &quot;</code> 提示信息。</li><li><code>start-stop-daemon -K -q -p &quot;$PIDFILE&quot;</code>：<ul><li><code>-K</code> 选项用于停止（kill）进程。</li><li><code>-q</code> 选项是安静模式（quiet）。</li><li><code>-p &quot;$PIDFILE&quot;</code> 选项指定 <code>PIDFILE</code>，以便找到并杀死 <code>klogd</code> 进程。</li></ul></li><li>如果进程成功终止：<ul><li>删除 <code>PIDFILE</code>。</li><li>打印 <code>&quot;OK&quot;</code>。</li></ul></li><li>如果失败，打印 <code>&quot;FAIL&quot;</code> 并返回错误码。</li></ul><h3 id=\"5-restart-函数\"><strong>5. <code>restart()</code> 函数</strong></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">restart</span></span>() &#123;</span><br><span class=\"line\">\tstop</span><br><span class=\"line\">\t<span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">\tstart</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>先调用 <code>stop()</code> 终止进程。</li><li><code>sleep 1</code> 等待 1 秒，确保进程完全退出。</li><li>重新调用 <code>start()</code> 启动 <code>klogd</code>。</li></ul><h3 id=\"6-命令行参数解析\"><strong>6. 命令行参数解析</strong></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart|stop|restart)</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span>;;</span><br><span class=\"line\">\treload)</span><br><span class=\"line\">\t\trestart;;</span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li>允许 <code>start|stop|restart</code> 作为参数，直接调用相应的函数。</li><li><code>reload</code> 其实是 <code>restart</code>，因为 <code>klogd</code> 本身没有 <code>reload</code> 机制，所以用 <code>restart</code> 代替。</li><li>其他情况打印用法说明，并返回 <code>exit 1</code> 表示参数错误。</li></ul><hr>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S02sysctl </summary>\n              <div class='content'>\n              <p><strong>sysctl</strong> 用于配置和调整内核参数。这个脚本会设置一些内核的运行时参数，比如文件系统、内存、网络等方面的配置。</p><hr><h3 id=\"脚本概述\"><strong>脚本概述</strong></h3><p>这个 <code>S02sysctl</code> 脚本用于管理 <code>sysctl</code> 配置文件的加载。它读取多个配置文件，并将其应用到内核参数中。它还根据是否存在 <code>logger</code> 命令来决定是将输出发送到系统日志中，还是直接输出到标准输出。</p><h3 id=\"详细结构\"><strong>详细结构</strong></h3><ol><li><p><strong>变量定义</strong></p> <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">PROGRAM=<span class=\"string\">&quot;sysctl&quot;</span></span><br><span class=\"line\">SYSCTL_ARGS=<span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>PROGRAM</code>：定义要运行的程序，这里是 <code>sysctl</code>。</li><li><code>SYSCTL_ARGS</code>：用于传递给 <code>sysctl</code> 的附加参数，默认为空。</li></ul></li><li><p><strong>加载配置</strong></p> <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ -r <span class=\"string\">&quot;/etc/default/<span class=\"variable\">$PROGRAM</span>&quot;</span> ] &amp;&amp; . <span class=\"string\">&quot;/etc/default/<span class=\"variable\">$PROGRAM</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li>通过检查 <code>/etc/default/sysctl</code> 文件是否可读，来加载该文件中的配置。</li></ul></li><li><p><strong>配置文件源定义</strong></p> <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">SYSCTL_SOURCES=<span class=\"string\">&quot;/etc/sysctl.d/ /usr/local/lib/sysctl.d/ /usr/lib/sysctl.d/ /lib/sysctl.d/ /etc/sysctl.conf&quot;</span></span><br></pre></td></tr></table></figure><ul><li>这是一个包含多个路径的列表，<code>sysctl</code> 配置文件会在这些路径中查找，并按顺序加载。</li></ul></li><li><p><strong>日志功能：<code>run_logger()</code> 和 <code>run_std()</code></strong></p><ul><li><code>run_logger()</code>：如果 <code>logger</code> 可用，将 <code>sysctl</code> 的输出发送到系统日志。</li><li><code>run_std()</code>：如果 <code>logger</code> 不可用，将输出直接发送到标准输出或错误输出。</li></ul></li><li><p><strong>启动函数 <code>start()</code></strong></p> <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&#x27;%s %s: &#x27;</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$PROGRAM</span>&quot;</span></span><br><span class=\"line\">    status=$(<span class=\"string\">&quot;<span class=\"variable\">$run_program</span>&quot;</span> 4&gt;&amp;1)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$status</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$status</span>&quot;</span> = <span class=\"string\">&quot;OK&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> 0</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据配置执行 <code>sysctl</code>，并根据 <code>status</code> 输出结果。</li></ul></li><li><p><strong>命令行参数处理</strong></p> <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start <span class=\"string\">&quot;Running&quot;</span>;;</span><br><span class=\"line\">    restart|reload)</span><br><span class=\"line\">        start <span class=\"string\">&quot;Rerunning&quot;</span>;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        :;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li>提供了 <code>start|stop|restart|reload</code> 的参数，执行相应的操作。对于 <code>stop</code>，没有实际操作，<code>:</code> 是一个空操作。</li></ul></li></ol>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S30customizer </summary>\n              <div class='content'>\n              <hr><h3 id=\"功能概述\">功能概述</h3><ol><li><p><strong>脚本入口</strong></p><ul><li>使用 <code>case &quot;$1&quot;</code> 判断传入参数（如 <code>start</code> 或 <code>stop</code>）。</li><li>通常由 <code>/etc/init.d/</code> 框架调用，传入参数为 <code>start</code>。</li></ul></li><li><p><strong>主要功能</strong></p><ul><li>设置系统时间。</li><li>执行自定义化脚本（<code>customizer.sh</code>）。</li><li>配置无线网络（<code>wireless.sh</code>）。</li><li>配置多路复用器和 GPIO（<code>muxes.sh</code>）。</li><li>检查 MAC 地址。</li></ul></li></ol>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S35modules </summary>\n              <div class='content'>\n              <p>负责加载内核模块，这里没有用到。</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S38mdev </summary>\n              <div class='content'>\n              <p><strong>mdev</strong> 是一个轻量级的设备管理工具，类似于 <strong>udev</strong>，它会管理和创建设备节点，确保设备被正确识别和配置，由于系统没有使用设备接口，没有使用。</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S40network </summary>\n              <div class='content'>\n              <h2 id=\"管理网络接口的启动和停止，包括有线网络和无线网络。通过读取-U-Boot-环境变量来动态配置网络设备，并根据设备类型调用不同的初始化逻辑。\">管理网络接口的启动和停止，包括有线网络和无线网络。通过读取 U-Boot 环境变量来动态配置网络设备，并根据设备类型调用不同的初始化逻辑。</h2><h3 id=\"脚本内容\"><strong>脚本内容</strong></h3><h4 id=\"1-读取-U-Boot-环境变量\"><strong>1. 读取 U-Boot 环境变量</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dev=$(fw_printenv -n wlandev)</span><br><span class=\"line\">mac=$(fw_printenv -n wlanmac)</span><br><span class=\"line\">net=$(fw_printenv -n netaddr_fallback)</span><br></pre></td></tr></table></figure><ul><li><strong><code>fw_printenv</code></strong>：<ul><li>这是一个工具，用于读取 U-Boot 的环境变量。</li><li><code>-n</code> 参数表示只输出变量值，而不包含变量名。</li></ul></li><li><strong>变量含义</strong>：<ul><li><strong><code>dev</code> (<code>wlandev</code>)</strong>：<ul><li>表示无线网络设备的类型或标识符（如 USB、SDIO 或 Modem）。</li></ul></li><li><strong><code>mac</code> (<code>wlanmac</code>)</strong>：<ul><li>表示无线网卡的 MAC 地址。</li></ul></li><li><strong><code>net</code> (<code>netaddr_fallback</code>)</strong>：<ul><li>表示默认的网络地址（如 IP 地址），当没有其他配置时使用。</li><li>默认值为 <code>192.168.2.10</code>。</li></ul></li></ul></li></ul><hr><h4 id=\"2-配置无线网络接口\"><strong>2. 配置无线网络接口</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">set_wireless</span></span>() &#123;</span><br><span class=\"line\">\tpath=/etc/wireless</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"variable\">$path</span>/usb <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span> || <span class=\"variable\">$path</span>/sdio <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t[ -n <span class=\"string\">&quot;<span class=\"variable\">$mac</span>&quot;</span> ] &amp;&amp; ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> dev wlan0 address <span class=\"string\">&quot;<span class=\"variable\">$mac</span>&quot;</span></span><br><span class=\"line\">\t\tifup wlan0</span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> <span class=\"variable\">$path</span>/modem <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tifup usb0</span><br><span class=\"line\">\t\tifup eth1</span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t[ -e /sys/class/net/eth0 ] &amp;&amp; ifconfig eth0 <span class=\"string\">&quot;<span class=\"variable\">$&#123;net:-192.168.2.10&#125;</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>根据 <code>dev</code> 的值判断无线设备的类型，并执行相应的初始化逻辑。</li></ul></li><li><strong>逻辑分支</strong>：<ol><li><strong>USB 或 SDIO 设备</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"variable\">$path</span>/usb <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span> || <span class=\"variable\">$path</span>/sdio <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">    [ -n <span class=\"string\">&quot;<span class=\"variable\">$mac</span>&quot;</span> ] &amp;&amp; ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> dev wlan0 address <span class=\"string\">&quot;<span class=\"variable\">$mac</span>&quot;</span></span><br><span class=\"line\">    ifup wlan0</span><br></pre></td></tr></table></figure><ul><li>检查 <code>/etc/wireless/usb</code> 或 <code>/etc/wireless/sdio</code> 脚本是否支持当前设备。</li><li>如果支持：<ul><li>设置无线网卡 <code>wlan0</code> 的 MAC 地址（如果有 <code>wlanmac</code>）。</li><li>启动无线接口 <code>wlan0</code>。</li></ul></li></ul></li><li><strong>Modem 设备</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"variable\">$path</span>/modem <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">    ifup usb0</span><br><span class=\"line\">    ifup eth1</span><br></pre></td></tr></table></figure><ul><li>如果设备是 Modem 类型，则启动 <code>usb0</code> 和 <code>eth1</code> 接口。</li></ul></li><li><strong>回退配置</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ -e /sys/class/net/eth0 ] &amp;&amp; ifconfig eth0 <span class=\"string\">&quot;<span class=\"variable\">$&#123;net:-192.168.2.10&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li>如果存在 <code>eth0</code> 接口，则为其分配一个默认 IP 地址（<code>netaddr_fallback</code> 或 <code>192.168.2.10</code>）。</li></ul></li></ol></li></ul><hr><h4 id=\"3-启动网络服务\"><strong>3. 启动网络服务</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting network...&quot;</span></span><br><span class=\"line\">\tifup lo</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tset_wireless</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tifup eth0</span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>启动网络服务，按以下顺序：<ol><li>启动本地回环接口 <code>lo</code>。</li><li>如果存在无线设备（<code>dev</code> 不为空），调用 <code>set_wireless</code> 函数配置无线网络。</li><li>如果没有无线设备，直接启动有线接口 <code>eth0</code>。</li></ol></li></ul></li></ul><hr><h4 id=\"4-停止网络服务\"><strong>4. 停止网络服务</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Stopping network...&quot;</span></span><br><span class=\"line\">\tifdown lo</span><br><span class=\"line\">\tifdown -f wlan0</span><br><span class=\"line\">\tifdown -f usb0</span><br><span class=\"line\">\tifdown -f eth1</span><br><span class=\"line\">\tifdown -f eth0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>停止所有网络接口，包括：<ul><li>本地回环接口 <code>lo</code>。</li><li>无线接口 <code>wlan0</code>。</li><li>USB 网络接口 <code>usb0</code>。</li><li>以太网接口 <code>eth1</code> 和 <code>eth0</code>。</li></ul></li><li><code>-f</code> 参数强制关闭接口，即使接口不存在也不会报错。</li></ul></li></ul><hr><h4 id=\"5-脚本入口\"><strong>5. 脚本入口</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart|stop)</span><br><span class=\"line\">\t\t<span class=\"variable\">$1</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\trestart|reload)</span><br><span class=\"line\">\t\tstop</span><br><span class=\"line\">\t\tstart</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>根据传入参数执行相应的操作：<ul><li><code>start</code>：启动网络服务。</li><li><code>stop</code>：停止网络服务。</li><li><code>restart</code> 或 <code>reload</code>：先停止再启动网络服务。</li><li>默认：打印用法提示并退出。</li></ul></li></ul></li></ul><hr><h3 id=\"总结\"><strong>总结</strong></h3><h4 id=\"核心功能\"><strong>核心功能</strong></h4><ol><li><strong>动态配置网络接口</strong>：<ul><li>根据 U-Boot 环境变量（<code>wlandev</code>、<code>wlanmac</code>、<code>netaddr_fallback</code>）动态配置网络设备。</li><li>支持多种无线设备类型（USB、SDIO、Modem）。</li></ul></li><li><strong>启动和停止网络服务</strong>：<ul><li>启动时按需配置无线或有线网络接口。</li><li>停止时关闭所有网络接口。</li></ul></li></ol><h4 id=\"运行流程\"><strong>运行流程</strong></h4><ol><li><strong>启动流程</strong>：<ul><li>启动本地回环接口 <code>lo</code>。</li><li>如果存在无线设备，调用 <code>set_wireless</code> 配置无线网络。</li><li>如果没有无线设备，直接启动有线接口 <code>eth0</code>。</li></ul></li><li><strong>停止流程</strong>：<ul><li>关闭所有网络接口。</li></ul></li></ol>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S49ntpd </summary>\n              <div class='content'>\n              <p>网络时间协议守护进程，同步系统时间，校准系统的时钟。</p><h3 id=\"S49ntpd-脚本\"><code>S49ntpd</code> 脚本</h3><p>这个脚本的主要功能是管理 NTP 守护进程（<code>ntpd</code>）的启动、停止和重启。它通过 <code>start-stop-daemon</code> 工具来控制守护进程的生命周期，并使用 PID 文件来跟踪进程状态。</p><hr><h3 id=\"脚本内容\"><strong>脚本内容</strong></h3><h4 id=\"1-变量定义\"><strong>1. 变量定义</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DAEMON=<span class=\"string\">&quot;ntpd&quot;</span></span><br><span class=\"line\">PIDFILE=<span class=\"string\">&quot;/var/run/<span class=\"variable\">$DAEMON</span>.pid&quot;</span></span><br><span class=\"line\">DAEMON_ARGS=<span class=\"string\">&quot;-n&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>DAEMON</code></strong>：<ul><li>表示要管理的守护进程名称，这里是 <code>ntpd</code>（网络时间协议守护进程）。</li></ul></li><li><strong><code>PIDFILE</code></strong>：<ul><li>存储 <code>ntpd</code> 进程的 PID 文件路径，用于跟踪进程状态。</li></ul></li><li><strong><code>DAEMON_ARGS</code></strong>：<ul><li>传递给 <code>ntpd</code> 的启动参数：<ul><li><code>-n</code>：表示以非后台模式运行（但实际会通过 <code>start-stop-daemon</code> 后台化）。</li></ul></li></ul></li></ul><hr><h4 id=\"2-启动函数\"><strong>2. 启动函数</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Starting <span class=\"variable\">$DAEMON</span>: &quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -b -m -S -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span> -x <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span> -- <span class=\"variable\">$DAEMON_ARGS</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>启动 <code>ntpd</code> 守护进程。</li></ul></li><li><strong>关键命令</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">start-stop-daemon -b -m -S -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span> -x <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span> -- <span class=\"variable\">$DAEMON_ARGS</span></span><br></pre></td></tr></table></figure><ul><li><code>-b</code>：以后台模式运行进程。</li><li><code>-m</code>：创建 PID 文件。</li><li><code>-S</code>：启动进程。</li><li><code>-q</code>：静默模式，不输出额外信息。</li><li><code>-p &quot;$PIDFILE&quot;</code>：指定 PID 文件路径。</li><li><code>-x &quot;$DAEMON&quot;</code>：指定要启动的可执行文件。</li><li><code>-- $DAEMON_ARGS</code>：传递给守护进程的参数。</li></ul></li><li><strong>错误处理</strong>：<ul><li>检查 <code>start-stop-daemon</code> 的返回值：<ul><li>如果成功（返回值为 0），打印 <code>OK</code>。</li><li>如果失败，打印 <code>FAIL</code>。</li></ul></li></ul></li></ul><hr><h4 id=\"3-停止函数\"><strong>3. 停止函数</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Stopping <span class=\"variable\">$DAEMON</span>: &quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -K -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">rm</span> -f <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>停止 <code>ntpd</code> 守护进程。</li></ul></li><li><strong>关键命令</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">start-stop-daemon -K -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>-K</code>：发送信号终止进程。</li><li><code>-q</code>：静默模式。</li><li><code>-p &quot;$PIDFILE&quot;</code>：根据 PID 文件找到目标进程并终止。</li></ul></li><li><strong>清理工作</strong>：<ul><li>如果成功停止进程，则删除 PID 文件。</li></ul></li><li><strong>错误处理</strong>：<ul><li>检查 <code>start-stop-daemon</code> 的返回值：<ul><li>如果成功，打印 <code>OK</code>。</li><li>如果失败，打印 <code>FAIL</code>。</li></ul></li></ul></li></ul><hr><h4 id=\"4-脚本入口\"><strong>4. 脚本入口</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart|stop)</span><br><span class=\"line\">\t\t<span class=\"variable\">$1</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\trestart|reload)</span><br><span class=\"line\">\t\tstop</span><br><span class=\"line\">\t\t<span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">\t\tstart</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>根据传入参数执行相应的操作：<ul><li><code>start</code>：调用 <code>start</code> 函数启动 <code>ntpd</code>。</li><li><code>stop</code>：调用 <code>stop</code> 函数停止 <code>ntpd</code>。</li><li><code>restart</code> 或 <code>reload</code>：先停止再启动 <code>ntpd</code>。</li><li>默认：打印用法提示并退出。</li></ul></li></ul></li><li><strong>注意</strong>：<ul><li>在 <code>restart</code> 和 <code>reload</code> 中，停止后等待 1 秒再启动，避免资源冲突。</li></ul></li></ul><hr><h3 id=\"总结\"><strong>总结</strong></h3><h4 id=\"核心功能\"><strong>核心功能</strong></h4><ol><li><strong>启动 NTP 守护进程</strong>：<ul><li>使用 <code>start-stop-daemon</code> 后台运行 <code>ntpd</code>，并生成 PID 文件。</li></ul></li><li><strong>停止 NTP 守护进程</strong>：<ul><li>根据 PID 文件终止 <code>ntpd</code> 进程，并清理 PID 文件。</li></ul></li><li><strong>支持重启和重载</strong>：<ul><li>提供 <code>restart</code> 和 <code>reload</code> 操作，方便重新配置或恢复服务。</li></ul></li></ol><h4 id=\"运行流程\"><strong>运行流程</strong></h4><ol><li><strong>启动流程</strong>：<ul><li>检查是否可以启动 <code>ntpd</code>。</li><li>使用 <code>start-stop-daemon</code> 启动守护进程，并记录 PID。</li></ul></li><li><strong>停止流程</strong>：<ul><li>根据 PID 文件终止进程，并删除 PID 文件。</li></ul></li><li><strong>重启流程</strong>：<ul><li>先停止，再启动，确保服务重新加载。</li></ul></li></ol>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S50dropbear </summary>\n              <div class='content'>\n              <p><strong>dropbear</strong>，这是一种轻量级的SSH服务器，允许远程访问系统。这个脚本会初始化SSH服务，允许通过SSH连接。</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S60crond </summary>\n              <div class='content'>\n              <p>启动 <strong>crond</strong>，即定时任务守护进程。它负责执行预定的定时任务，比如周期性地运行某些脚本或程序。</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S70vendor </summary>\n              <div class='content'>\n              <p>这个脚本通常用于执行供应商特定的初始化任务，为了加载厂商的特定驱动、配置或者服务。</p><h3 id=\"S70vendor-脚本\"><code>S70vendor</code> 脚本</h3><p>这个脚本的主要功能是在系统启动时加载特定厂商的模块（可能包括驱动程序或其他硬件相关的初始化逻辑）。它通过调用 <code>ipcinfo</code> 工具获取设备的厂商信息，并动态加载与该厂商相关的模块。</p><hr><h3 id=\"脚本内容\"><strong>脚本内容</strong></h3><h4 id=\"1-脚本入口\"><strong>1. 脚本入口</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Loading vendor modules...&quot;</span></span><br><span class=\"line\">\t\tvendor=$(ipcinfo -v)</span><br><span class=\"line\">\t\tload_<span class=\"string\">&quot;<span class=\"variable\">$vendor</span>&quot;</span> -i</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstop)</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start&#125;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>根据传入参数执行相应的操作：<ul><li><code>start</code>：加载厂商模块。</li><li><code>stop</code>：当前为空，表示不支持停止操作。</li><li>默认：打印用法提示并退出。</li></ul></li></ul></li></ul><hr><h4 id=\"2-加载厂商模块\"><strong>2. 加载厂商模块</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Loading vendor modules...&quot;</span></span><br><span class=\"line\">vendor=$(ipcinfo -v)</span><br><span class=\"line\">load_<span class=\"string\">&quot;<span class=\"variable\">$vendor</span>&quot;</span> -i</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>使用 <code>ipcinfo -v</code> 获取设备的厂商信息。</li><li>动态调用与厂商相关的加载函数（如 <code>load_&lt;vendor&gt;</code>）。</li></ul></li><li><strong>关键命令</strong>：<ol><li><strong><code>ipcinfo -v</code></strong>：<ul><li>这是一个工具，用于查询设备的硬件或固件信息。</li><li><code>-v</code> 参数返回设备的厂商名称（如 <code>sony</code>、<code>samsung</code> 等）。</li></ul></li><li><strong><code>load_&quot;$vendor&quot;</code></strong>：<ul><li>动态构造函数名，例如：<ul><li>如果 <code>vendor=&quot;sony&quot;</code>，则调用 <code>load_sony</code>。</li><li>如果 <code>vendor=&quot;samsung&quot;</code>，则调用 <code>load_samsung</code>。</li></ul></li></ul></li><li><strong><code>-i</code> 参数</strong>：<ul><li>传递给加载函数的参数，可能是初始化选项。</li></ul></li></ol></li></ul><hr><h4 id=\"3-停止分支\"><strong>3. 停止分支</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">stop)</span><br><span class=\"line\">\t;;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>当前为空，表示该脚本不支持停止操作。</li></ul></li><li><strong>可能原因</strong>：<ul><li>厂商模块通常是内核模块或硬件驱动，加载后无需显式卸载。</li><li>或者，卸载逻辑由其他脚本（如 <code>rcK</code> 或其他 <code>Kxx</code> 脚本）处理。</li></ul></li></ul><hr><h3 id=\"总结\"><strong>总结</strong></h3><h4 id=\"核心功能\"><strong>核心功能</strong></h4><ol><li><strong>动态加载厂商模块</strong>：<ul><li>使用 <code>ipcinfo</code> 工具获取设备的厂商信息。</li><li>根据厂商信息调用对应的加载函数（如 <code>load_sony</code> 或 <code>load_samsung</code>）。</li></ul></li><li><strong>支持启动操作</strong>：<ul><li>脚本仅支持 <code>start</code> 操作，用于加载厂商模块。</li></ul></li><li><strong>不支持停止操作</strong>：<ul><li>当前未实现停止逻辑，可能由其他机制处理。</li></ul></li></ol><h4 id=\"运行流程\"><strong>运行流程</strong></h4><ol><li><strong>启动流程</strong>：<ul><li>打印提示信息：“Loading vendor modules…”。</li><li>调用 <code>ipcinfo -v</code> 获取厂商名称。</li><li>动态调用对应的加载函数（如 <code>load_&lt;vendor&gt;</code>），并传递 <code>-i</code> 参数。</li></ul></li><li><strong>停止流程</strong>：<ul><li>当前未实现停止逻辑。</li></ul></li></ol><h4 id=\"适用场景\"><strong>适用场景</strong></h4><ul><li>该脚本适用于嵌入式设备（如 IP 摄像头）中加载厂商特定的硬件模块或驱动程序。</li><li>它通过动态调用的方式支持多种厂商，灵活性较高。</li></ul><hr>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S95majestic </summary>\n              <div class='content'>\n              <h3 id=\"S95majestic-脚本\"><code>S95majestic</code> 脚本</h3><p>这个脚本的主要功能是管理 <code>majestic</code> 守护进程的启动、停止、重启和重载。它通过 <code>start-stop-daemon</code> 工具来控制守护进程的生命周期，并使用 PID 文件来跟踪进程状态。相比之前的 <code>ntpd</code> 脚本，该脚本增加了对 <code>reload</code> 操作的支持。</p><hr><h3 id=\"脚本内容\"><strong>脚本内容</strong></h3><h4 id=\"1-变量定义\"><strong>1. 变量定义</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DAEMON=<span class=\"string\">&quot;majestic&quot;</span></span><br><span class=\"line\">PIDFILE=<span class=\"string\">&quot;/var/run/<span class=\"variable\">$DAEMON</span>.pid&quot;</span></span><br><span class=\"line\">DAEMON_ARGS=<span class=\"string\">&quot;-s&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>DAEMON</code></strong>：<ul><li>表示要管理的守护进程名称，这里是 <code>majestic</code>。</li><li><code>majestic</code> 是 OpenIPC 项目中的一个核心组件，通常用于处理视频流（如 RTSP、HTTP 等）。</li></ul></li><li><strong><code>PIDFILE</code></strong>：<ul><li>存储 <code>majestic</code> 进程的 PID 文件路径，用于跟踪进程状态。</li></ul></li><li><strong><code>DAEMON_ARGS</code></strong>：<ul><li>传递给 <code>majestic</code> 的启动参数：<ul><li><code>-s</code>：可能是以静默模式或后台模式运行的选项。</li></ul></li></ul></li></ul><hr><h4 id=\"2-启动函数\"><strong>2. 启动函数</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Starting <span class=\"variable\">$DAEMON</span>: &quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -b -m -S -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span> -x <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span> -- <span class=\"variable\">$DAEMON_ARGS</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>启动 <code>majestic</code> 守护进程。</li></ul></li><li><strong>关键命令</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">start-stop-daemon -b -m -S -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span> -x <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span> -- <span class=\"variable\">$DAEMON_ARGS</span></span><br></pre></td></tr></table></figure><ul><li><code>-b</code>：以后台模式运行进程。</li><li><code>-m</code>：创建 PID 文件。</li><li><code>-S</code>：启动进程。</li><li><code>-q</code>：静默模式，不输出额外信息。</li><li><code>-p &quot;$PIDFILE&quot;</code>：指定 PID 文件路径。</li><li><code>-x &quot;$DAEMON&quot;</code>：指定要启动的可执行文件。</li><li><code>-- $DAEMON_ARGS</code>：传递给守护进程的参数。</li></ul></li><li><strong>错误处理</strong>：<ul><li>检查 <code>start-stop-daemon</code> 的返回值：<ul><li>如果成功（返回值为 0），打印 <code>OK</code>。</li><li>如果失败，打印 <code>FAIL</code>。</li></ul></li></ul></li></ul><hr><h4 id=\"3-停止函数\"><strong>3. 停止函数</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Stopping <span class=\"variable\">$DAEMON</span>: &quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -K -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">rm</span> -f <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>停止 <code>majestic</code> 守护进程。</li></ul></li><li><strong>关键命令</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">start-stop-daemon -K -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>-K</code>：发送信号终止进程。</li><li><code>-q</code>：静默模式。</li><li><code>-p &quot;$PIDFILE&quot;</code>：根据 PID 文件找到目标进程并终止。</li></ul></li><li><strong>清理工作</strong>：<ul><li>如果成功停止进程，则删除 PID 文件。</li></ul></li><li><strong>错误处理</strong>：<ul><li>检查 <code>start-stop-daemon</code> 的返回值：<ul><li>如果成功，打印 <code>OK</code>。</li><li>如果失败，打印 <code>FAIL</code>。</li></ul></li></ul></li></ul><hr><h4 id=\"4-重启函数\"><strong>4. 重启函数</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">restart)</span><br><span class=\"line\">\tstop</span><br><span class=\"line\">\t<span class=\"built_in\">sleep</span> 3</span><br><span class=\"line\">\tstart</span><br><span class=\"line\">\t;;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>先调用 <code>stop</code> 函数停止 <code>majestic</code>。</li><li>等待 3 秒（避免资源冲突）。</li><li>再调用 <code>start</code> 函数重新启动 <code>majestic</code>。</li></ul></li><li><strong>注意</strong>：<ul><li>等待时间（<code>sleep 3</code>）可以防止频繁操作导致的问题。</li></ul></li></ul><hr><h4 id=\"5-重载函数\"><strong>5. 重载函数</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">reload)</span><br><span class=\"line\">\tkillall -1 <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span></span><br><span class=\"line\">\t;;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>向 <code>majestic</code> 发送 <code>SIGHUP</code> 信号（信号编号为 1），触发其重新加载配置。</li></ul></li><li><strong>关键命令</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">killall -1 <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>-1</code>：发送 <code>SIGHUP</code> 信号。</li><li><code>$DAEMON</code>：目标进程名称。</li></ul></li><li><strong>用途</strong>：<ul><li><code>SIGHUP</code> 通常用于通知守护进程重新读取配置文件，而无需完全重启。</li></ul></li></ul><hr><h4 id=\"6-脚本入口\"><strong>6. 脚本入口</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart|stop)</span><br><span class=\"line\">\t\t<span class=\"variable\">$1</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\trestart)</span><br><span class=\"line\">\t\tstop</span><br><span class=\"line\">\t\t<span class=\"built_in\">sleep</span> 3</span><br><span class=\"line\">\t\tstart</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\treload)</span><br><span class=\"line\">\t\tkillall -1 <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>根据传入参数执行相应的操作：<ul><li><code>start</code>：启动 <code>majestic</code>。</li><li><code>stop</code>：停止 <code>majestic</code>。</li><li><code>restart</code>：先停止再启动 <code>majestic</code>。</li><li><code>reload</code>：向 <code>majestic</code> 发送 <code>SIGHUP</code> 信号以重载配置。</li><li>默认：打印用法提示并退出。</li></ul></li></ul></li></ul><hr><h3 id=\"总结\"><strong>总结</strong></h3><h4 id=\"核心功能\"><strong>核心功能</strong></h4><ol><li><strong>启动 <code>majestic</code> 守护进程</strong>：<ul><li>使用 <code>start-stop-daemon</code> 后台运行 <code>majestic</code>，并生成 PID 文件。</li></ul></li><li><strong>停止 <code>majestic</code> 守护进程</strong>：<ul><li>根据 PID 文件终止进程，并删除 PID 文件。</li></ul></li><li><strong>支持重启和重载</strong>：<ul><li>提供 <code>restart</code> 和 <code>reload</code> 操作，方便重新加载配置或恢复服务。</li></ul></li><li><strong>动态配置管理</strong>：<ul><li><code>reload</code> 操作允许在不停止服务的情况下重新加载配置。</li></ul></li></ol><h4 id=\"运行流程\"><strong>运行流程</strong></h4><ol><li><strong>启动流程</strong>：<ul><li>检查是否可以启动 <code>majestic</code>。</li><li>使用 <code>start-stop-daemon</code> 启动守护进程，并记录 PID。</li></ul></li><li><strong>停止流程</strong>：<ul><li>根据 PID 文件终止进程，并删除 PID 文件。</li></ul></li><li><strong>重启流程</strong>：<ul><li>先停止，再启动，确保服务重新加载。</li></ul></li><li><strong>重载流程</strong>：<ul><li>向 <code>majestic</code> 发送 <code>SIGHUP</code> 信号，触发配置重载。</li></ul></li></ol><h4 id=\"适用场景\"><strong>适用场景</strong></h4><ul><li>该脚本适用于嵌入式设备（如 IP 摄像头）中管理视频流服务。</li><li>它通过标准化的方式管理 <code>majestic</code> 守护进程，适合资源受限的环境。</li></ul><hr>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S98datalink </summary>\n              <div class='content'>\n              <h3 id=\"S98datalink-脚本\"><code>S98datalink</code> 脚本</h3><p>这个脚本的主要功能是管理数据链路服务（如 LTE 模块、ZeroTier 网络和 Wi-Fi 广播）。它根据设备的硬件信息（通过 <code>ipcinfo</code> 和 U-Boot 环境变量）以及配置文件 <code>/etc/datalink.conf</code> 的内容，动态启动或停止相关服务。</p><hr><h3 id=\"脚本内容\"><strong>脚本内容</strong></h3><h4 id=\"1-变量定义\"><strong>1. 变量定义</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">chip=$(ipcinfo -c)</span><br><span class=\"line\">fw=$(grep <span class=\"string\">&quot;BUILD_OPTION&quot;</span> <span class=\"string\">&quot;/etc/os-release&quot;</span> | <span class=\"built_in\">cut</span> -d= -f2)</span><br></pre></td></tr></table></figure><ul><li><strong><code>chip</code></strong>：<ul><li>使用 <code>ipcinfo -c</code> 获取设备的芯片型号。</li><li>示例是 <code>ssc338q</code> 或其他 SoC 名称。</li></ul></li><li><strong><code>fw</code></strong>：<ul><li>从 <code>/etc/os-release</code> 文件中提取 <code>BUILD_OPTION</code> 的值。</li><li>示例输出可能是 <code>lte</code> 或其他构建选项。</li></ul></li></ul><hr><h4 id=\"2-加载配置文件\"><strong>2. 加载配置文件</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ -e /etc/datalink.conf ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t. /etc/datalink.conf</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>如果存在 <code>/etc/datalink.conf</code> 文件，则加载其内容。</li><li><code>. /etc/datalink.conf</code> 表示将该文件的内容作为当前脚本的一部分执行。</li></ul></li><li><strong>用途</strong>：<ul><li>配置文件可能包含以下变量：<ul><li><code>usb_modem</code>：是否启用 USB LTE 模块。</li><li><code>use_zt</code>：是否启用 ZeroTier 网络。</li><li><code>zt_netid</code>：ZeroTier 网络 ID。</li><li><code>telemetry</code>：是否启用遥测功能。</li></ul></li></ul></li></ul><hr><h4 id=\"3-启动-LTE-数据链路\"><strong>3. 启动 LTE 数据链路</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start_lte</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting fpv datalink...&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$usb_modem</span>&quot;</span> = <span class=\"string\">&quot;true&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting lte modem configuration...&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$use_zt</span>&quot;</span> = <span class=\"string\">&quot;true&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting ZeroTier-One daemon...&quot;</span></span><br><span class=\"line\">\t\tzerotier-one -d &amp;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> [ ! -f <span class=\"string\">&quot;/var/lib/zerotier-one/networks.d/<span class=\"variable\">$zt_netid</span>.conf&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">sleep</span> 8</span><br><span class=\"line\">\t\t\tzerotier-cli <span class=\"built_in\">join</span> <span class=\"string\">&quot;<span class=\"variable\">$zt_netid</span>&quot;</span> &gt; /dev/null</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Don&#x27;t forget to authorize my.zerotier.com!&quot;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$telemetry</span>&quot;</span> = <span class=\"string\">&quot;true&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\ttelemetry start</span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>启动 LTE 数据链路相关的服务。</li></ul></li><li><strong>逻辑分支</strong>：<ol><li><strong>USB LTE 模块</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$usb_modem</span>&quot;</span> = <span class=\"string\">&quot;true&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting lte modem configuration...&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果 <code>usb_modem=&quot;true&quot;</code>，表示启用了 USB LTE 模块，并打印提示信息。</li></ul></li><li><strong>ZeroTier 网络</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$use_zt</span>&quot;</span> = <span class=\"string\">&quot;true&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting ZeroTier-One daemon...&quot;</span></span><br><span class=\"line\">    zerotier-one -d &amp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! -f <span class=\"string\">&quot;/var/lib/zerotier-one/networks.d/<span class=\"variable\">$zt_netid</span>.conf&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">sleep</span> 8</span><br><span class=\"line\">        zerotier-cli <span class=\"built_in\">join</span> <span class=\"string\">&quot;<span class=\"variable\">$zt_netid</span>&quot;</span> &gt; /dev/null</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Don&#x27;t forget to authorize my.zerotier.com!&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果 <code>use_zt=&quot;true&quot;</code>，启动 ZeroTier 守护进程（<code>zerotier-one</code>）。</li><li>如果尚未加入指定的网络（<code>$zt_netid</code>），则等待 8 秒后尝试加入，并提醒用户在 ZeroTier 控制台授权设备。</li></ul></li><li><strong>遥测功能</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$telemetry</span>&quot;</span> = <span class=\"string\">&quot;true&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    telemetry start</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果 <code>telemetry=&quot;true&quot;</code>，启动遥测服务。</li></ul></li></ol></li></ul><hr><h4 id=\"4-启动分支\"><strong>4. 启动分支</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"subst\">$(fw_printenv -n wlandev)</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> [ ! -f /etc/system.ok ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\ttweaksys <span class=\"string\">&quot;<span class=\"variable\">$chip</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$fw</span>&quot;</span> = <span class=\"string\">&quot;lte&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\tstart_lte</span><br><span class=\"line\">\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting wifibroadcast service...&quot;</span></span><br><span class=\"line\">\t\twifibroadcast start</span><br><span class=\"line\">\t\t;;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>根据传入参数执行相应的操作。</li></ul></li><li><strong>逻辑分支</strong>：<ol><li><strong>检查无线设备</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"subst\">$(fw_printenv -n wlandev)</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果 U-Boot 环境变量中存在 <code>wlandev</code>，直接退出脚本。</li><li>这可能是因为无线设备已由其他脚本（如 <code>S40network</code>）处理。</li></ul></li><li><strong>系统初始化</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ ! -f /etc/system.ok ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    tweaksys <span class=\"string\">&quot;<span class=\"variable\">$chip</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果 <code>/etc/system.ok</code> 文件不存在，调用 <code>tweaksys</code> 函数对系统进行初始化。</li><li><code>tweaksys</code> 可能是一个自定义函数，用于调整系统配置以适配特定芯片。</li></ul></li><li><strong>启动 LTE 数据链路</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$fw</span>&quot;</span> = <span class=\"string\">&quot;lte&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    start_lte</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果 <code>BUILD_OPTION=lte</code>，调用 <code>start_lte</code> 函数启动 LTE 相关服务。</li></ul></li><li><strong>启动 Wi-Fi 广播</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting wifibroadcast service...&quot;</span></span><br><span class=\"line\">wifibroadcast start</span><br></pre></td></tr></table></figure><ul><li>启动 Wi-Fi 广播服务（<code>wifibroadcast</code>）。</li></ul></li></ol></li></ul><hr><h4 id=\"5-停止分支\"><strong>5. 停止分支</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">stop)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Stopping wifibroadcast service...&quot;</span></span><br><span class=\"line\">\twifibroadcast stop</span><br><span class=\"line\">\t;;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>停止 Wi-Fi 广播服务。</li></ul></li></ul><hr><h4 id=\"6-默认分支\"><strong>6. 默认分支</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">*)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop&#125;&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t;;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>如果传入参数无效，打印用法提示并退出。</li></ul></li></ul><hr><h3 id=\"总结\"><strong>总结</strong></h3><h4 id=\"核心功能\"><strong>核心功能</strong></h4><ol><li><strong>动态加载配置</strong>：<ul><li>根据 <code>/etc/datalink.conf</code> 文件的内容，决定启用哪些服务（如 LTE 模块、ZeroTier 网络、遥测功能）。</li></ul></li><li><strong>启动数据链路服务</strong>：<ul><li>包括 LTE 模块、ZeroTier 网络、Wi-Fi 广播等。</li></ul></li><li><strong>系统初始化</strong>：<ul><li>根据芯片型号调用 <code>tweaksys</code> 函数进行系统调整。</li></ul></li><li><strong>支持启动和停止操作</strong>：<ul><li>提供 <code>start</code> 和 <code>stop</code> 操作，分别用于启动和停止服务。</li></ul></li></ol><h4 id=\"运行流程\"><strong>运行流程</strong></h4><ol><li><strong>启动流程</strong>：<ul><li>检查无线设备是否存在。如果存在，直接退出。</li><li>如果系统未初始化，调用 <code>tweaksys</code> 函数。</li><li>根据 <code>BUILD_OPTION</code> 决定是否启动 LTE 数据链路。</li><li>启动 Wi-Fi 广播服务。</li></ul></li><li><strong>停止流程</strong>：<ul><li>停止 Wi-Fi 广播服务。</li></ul></li></ol><h4 id=\"适用场景\"><strong>适用场景</strong></h4><ul><li>该脚本适用于嵌入式设备（如 IP 摄像头或无人机）中管理数据链路服务。</li><li>它通过动态加载配置和硬件信息，灵活地支持多种网络和服务。</li></ul><hr>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S98vtun </summary>\n              <div class='content'>\n              <p>启动 <strong>vtun</strong>，这是一个虚拟隧道工具，通常用于建立加密隧道，这里没有用到</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S99rc.local </summary>\n              <div class='content'>\n              <p><strong>rc.local</strong> 是启动过程的最后一个步骤，通常用于执行最后的初始化任务或者自定义命令。系统初始化完成后，这里可以添加需要的启动命令，或者启动一些不属于其他服务的应用。</p>\n              </div>\n            </details>\n<h5 id=\"工作流：\">工作流：</h5>\n<ol>\n<li><strong>系统初始化阶段</strong>：<code>rcS</code> 脚本会启动，并执行一些基础的系统配置，包括随机数生成、日志守护进程、内核参数配置等。</li>\n<li><strong>服务启动</strong>：之后，系统会依次启动一些基本的服务，如内核模块加载、设备管理、网络配置、时间同步等。</li>\n<li><strong>特定应用和服务</strong>：进入更具体的应用服务启动，如SSH服务、定时任务、供应商服务、特定功能应用等。</li>\n<li><strong>最后的清理和自定义配置</strong>：<code>rc.local</code> 负责执行最后的清理、日志保存、或者启动一些额外的定制化服务。</li>\n</ol>\n<h5 id=\"天空端启动总结\">天空端启动总结</h5>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">/etc/init.d/rcS</span><br><span class=\"line\"> ├──&gt; S30customizer</span><br><span class=\"line\"> │   ├──&gt; /usr/share/openipc/customizer.sh</span><br><span class=\"line\"> │   └──&gt; sh /usr/share/openipc/wireless.sh</span><br><span class=\"line\"> ├──&gt; S98datalink</span><br><span class=\"line\"> │   ├──&gt; tweaksys ssc33x  // configure majestic, h265, <span class=\"number\">1080</span>p, udp://<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">5600</span></span><br><span class=\"line\"> │   └──&gt; wifibroadcast <span class=\"built_in\">start</span></span><br><span class=\"line\"> │       ├──&gt; [<span class=\"type\">video</span>]  // udp_port == <span class=\"number\">5600</span></span><br><span class=\"line\"> │       │   └──&gt; wfb_tx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$udp_port</span>&quot;</span> <span class=\"literal\">-R</span> <span class=\"string\">&quot;<span class=\"variable\">$rcv_buf</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-B</span> <span class=\"string\">&quot;<span class=\"variable\">$bandwidth</span>&quot;</span> \\</span><br><span class=\"line\"> │       │           <span class=\"literal\">-M</span> <span class=\"string\">&quot;<span class=\"variable\">$mcs_index</span>&quot;</span> <span class=\"literal\">-S</span> <span class=\"string\">&quot;<span class=\"variable\">$stbc</span>&quot;</span> <span class=\"literal\">-L</span> <span class=\"string\">&quot;<span class=\"variable\">$ldpc</span>&quot;</span> <span class=\"literal\">-G</span> <span class=\"string\">&quot;<span class=\"variable\">$guard_interval</span>&quot;</span> <span class=\"literal\">-k</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_k</span>&quot;</span> <span class=\"literal\">-n</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_n</span>&quot;</span> \\</span><br><span class=\"line\"> │       │           <span class=\"literal\">-T</span> <span class=\"string\">&quot;<span class=\"variable\">$pool_timeout</span>&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"operator\">-f</span> <span class=\"string\">&quot;<span class=\"variable\">$frame_type</span>&quot;</span> <span class=\"literal\">-C</span> <span class=\"number\">8000</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\"> │       └──&gt; telemetry <span class=\"built_in\">start</span>  // telemetry_rx == wfb_rx, telemetry_tx == wfb_tx, port_rx == <span class=\"number\">14551</span>, port_tx == <span class=\"number\">14550</span></span><br><span class=\"line\"> │           ├──&gt; mavfwd <span class=\"literal\">--channels</span> <span class=\"string\">&quot;<span class=\"variable\">$channels</span>&quot;</span> <span class=\"literal\">--master</span> <span class=\"string\">&quot;<span class=\"variable\">$serial</span>&quot;</span> <span class=\"literal\">--baudrate</span> <span class=\"string\">&quot;<span class=\"variable\">$baud</span>&quot;</span> <span class=\"literal\">-p</span> <span class=\"number\">100</span> <span class=\"literal\">-t</span> <span class=\"literal\">-a</span> <span class=\"string\">&quot;<span class=\"variable\">$aggregate</span>&quot;</span> \\</span><br><span class=\"line\"> │           │           <span class=\"literal\">--out</span> <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"variable\">$port_tx</span> <span class=\"literal\">--in</span> <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"variable\">$port_rx</span> &gt; /dev/null &amp;</span><br><span class=\"line\"> │           ├──&gt; telemetry_rx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream_rx</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$port_rx</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\"> │           └──&gt; telemetry_tx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream_tx</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$port_tx</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-B</span> <span class=\"string\">&quot;<span class=\"variable\">$bandwidth</span>&quot;</span> \\</span><br><span class=\"line\"> │                             <span class=\"literal\">-M</span> <span class=\"string\">&quot;<span class=\"variable\">$mcs_index</span>&quot;</span> <span class=\"literal\">-S</span> <span class=\"string\">&quot;<span class=\"variable\">$stbc</span>&quot;</span> <span class=\"literal\">-L</span> <span class=\"string\">&quot;<span class=\"variable\">$ldpc</span>&quot;</span> <span class=\"literal\">-G</span> <span class=\"string\">&quot;<span class=\"variable\">$guard_interval</span>&quot;</span> <span class=\"literal\">-k</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_k</span>&quot;</span> <span class=\"literal\">-n</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_n</span>&quot;</span> \\</span><br><span class=\"line\"> │                             <span class=\"literal\">-T</span> <span class=\"string\">&quot;<span class=\"variable\">$pool_timeout</span>&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"operator\">-f</span> <span class=\"string\">&quot;<span class=\"variable\">$frame_type</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\"> └──&gt; S95majestic</span><br></pre></td></tr></table></figure>\n<p>.bin文件角色：作为固件被内核加载，初始化摄像头硬件。</p>\n<p>数据流路径：摄像头 → 内核驱动（通过固件） → /dev/video0节点 → 用户空间应用（通过V4L2接口）。</p>\n<p>关键检查点：设备节点存在性、内核日志中的固件加载记录、V4L2工具（如v4l2-ctl）测试。</p>\n<h2 id=\"地面站选择\">地面站选择</h2>\n<h3 id=\"虚拟机Ubuntu\">虚拟机Ubuntu</h3>\n<h3 id=\"泰山派Android系统\">泰山派Android系统</h3>\n<h3 id=\"泰山派Ubuntu\">泰山派Ubuntu</h3>\n<h3 id=\"算力版jetson\">算力版jetson</h3>\n<h3 id=\"ROS端部署：\">ROS端部署：</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">startCamera</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcv::VideoCapture cap;</span><br><span class=\"line\">\tcap.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;clip.mp4&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\tcv::Mat frame;</span><br><span class=\"line\">\t\t<span class=\"comment\">//方法一：&gt;&gt;析取器</span></span><br><span class=\"line\">\t\tcap &gt;&gt; frame;  <span class=\"comment\">//每个循环从cap中解析一帧，赋给frame, </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cv::imshow(&quot;frame&quot;, frame);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//cv::waitKey(1);</span></span><br><span class=\"line\">\t\tstd::cout&lt;&lt;<span class=\"string\">&quot;frame :&quot;</span>&lt;&lt;frame.cols&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;frame.rows&lt;&lt;std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcap.<span class=\"built_in\">release</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">startGStream</span><span class=\"params\">(std::string gst_src)</span> </span>&#123;</span><br><span class=\"line\">\tcv::VideoCapture cap;</span><br><span class=\"line\">\t<span class=\"comment\">// &quot;rtspsrc location=rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream latency=4000 ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! appsink&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// &quot;filesrc location=clip.mp4 ! qtdemux ! h264parse ! omxh264dec ! nvvidconv ! appsink&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// &quot;v4l2src device=/dev/video0 ! video/x-raw, width=1280, height=720 ! videoconvert ! appsink&quot;</span></span><br><span class=\"line\">\tcap.<span class=\"built_in\">open</span>(gst_src, cv::CAP_GSTREAMER);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\tcv::Mat frame;</span><br><span class=\"line\">\t\t<span class=\"comment\">//方法一：&gt;&gt;析取器</span></span><br><span class=\"line\">\t\tcap &gt;&gt; frame;  <span class=\"comment\">//每个循环从cap中解析一帧，赋给frame, </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cv::imshow(&quot;frame&quot;, frame);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//cv::waitKey(1);</span></span><br><span class=\"line\">\t\tstd::cout&lt;&lt;<span class=\"string\">&quot;frame :&quot;</span>&lt;&lt;frame.cols&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;frame.rows&lt;&lt;std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcap.<span class=\"built_in\">release</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// &quot;rtspsrc location=rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream latency=4000 ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! appsink&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;filesrc location=clip.mp4 ! qtdemux ! h264parse ! omxh264dec ! nvvidconv ! appsink&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;v4l2src device=/dev/video0 ! video/x-raw, width=1280, height=720 ! videoconvert ! appsink&quot;</span></span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">get_rtsp_h264_gst</span><span class=\"params\">(std::string rtsp_uri, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height, <span class=\"type\">int</span> latency)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::string gst_str = <span class=\"string\">&quot;rtspsrc location=&quot;</span> + rtsp_uri+ <span class=\"string\">&quot; latency=&quot;</span>+ std::<span class=\"built_in\">to_string</span>(latency)+ <span class=\"string\">&quot; ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=&quot;</span>+std::<span class=\"built_in\">to_string</span>(width)+<span class=\"string\">&quot;, height=&quot;</span>+std::<span class=\"built_in\">to_string</span>(height)+<span class=\"string\">&quot;, format=BGRx ! videoconvert ! appsink&quot;</span>;</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot;gst:&quot;</span>&lt;&lt;gst_str&lt;&lt;<span class=\"string\">&quot;:&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gst_str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">get_rtsp_h265_gst</span><span class=\"params\">(std::string rtsp_uri, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height, <span class=\"type\">int</span> latency)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::string gst_str = <span class=\"string\">&quot;rtspsrc location=&quot;</span> + rtsp_uri+ <span class=\"string\">&quot; latency=&quot;</span>+ std::<span class=\"built_in\">to_string</span>(latency)+ <span class=\"string\">&quot; ! rtph265depay ! h265parse ! omxh265dec ! nvvidconv !  video/x-raw, width=&quot;</span>+std::<span class=\"built_in\">to_string</span>(width)+<span class=\"string\">&quot;, height=&quot;</span>+std::<span class=\"built_in\">to_string</span>(height)+<span class=\"string\">&quot;, format=BGRx ! videoconvert ! appsink&quot;</span>;</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot;gst:&quot;</span>&lt;&lt;gst_str&lt;&lt;<span class=\"string\">&quot;:&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gst_str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">get_mp4_h264_gst</span><span class=\"params\">(std::string file_name, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::string gst_str = <span class=\"string\">&quot;filesrc location=&quot;</span> + file_name+ <span class=\"string\">&quot; ! qtdemux ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=&quot;</span>+std::<span class=\"built_in\">to_string</span>(width)+<span class=\"string\">&quot;, height=&quot;</span>+std::<span class=\"built_in\">to_string</span>(height)+<span class=\"string\">&quot;, format=BGRx ! videoconvert ! appsink&quot;</span>;</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot;gst:&quot;</span>&lt;&lt;gst_str&lt;&lt;<span class=\"string\">&quot;:&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gst_str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">get_v4l2_gst</span><span class=\"params\">(std::string device_id, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::string gst_str = <span class=\"string\">&quot;v4l2src device=&quot;</span> + device_id+ <span class=\"string\">&quot; !  video/x-raw, width=&quot;</span>+std::<span class=\"built_in\">to_string</span>(width)+<span class=\"string\">&quot;, height=&quot;</span>+std::<span class=\"built_in\">to_string</span>(height)+<span class=\"string\">&quot;, format=BGRx ! videoconvert ! appsink&quot;</span>;</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot;gst:&quot;</span>&lt;&lt;gst_str&lt;&lt;<span class=\"string\">&quot;:&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gst_str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">startGStream</span><span class=\"params\">(std::string rtsp_uri, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height, <span class=\"type\">int</span> latency)</span> </span>&#123;</span><br><span class=\"line\">\tstd::string gst_str = <span class=\"built_in\">get_rtsp_h264_gst</span>(rtsp_uri, width, height, latency);</span><br><span class=\"line\">start:</span><br><span class=\"line\">\tcv::VideoCapture capture;</span><br><span class=\"line\">\tcapture.<span class=\"built_in\">open</span>(gst_str, cv::CAP_GSTREAMER);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\tcv::Mat frame;</span><br><span class=\"line\">\t\t<span class=\"comment\">//方法一：&gt;&gt;析取器</span></span><br><span class=\"line\">\t\tcapture &gt;&gt; frame;  <span class=\"comment\">//每个循环从cap中解析一帧，赋给frame, </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cv::imshow(&quot;frame&quot;, frame);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//cv::waitKey(1);</span></span><br><span class=\"line\">\t\tstd::cout&lt;&lt;<span class=\"string\">&quot;frame :&quot;</span>&lt;&lt;frame.cols&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;frame.rows&lt;&lt;std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tcapture.<span class=\"built_in\">release</span>();</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot; ...................................................release &quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">//std::string gst_src = &quot;rtspsrc location=rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream latency=4000 ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! appsink&quot;;</span></span><br><span class=\"line\">\t<span class=\"comment\">// if (argc &gt; 1)&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// \tgst_src = argv[1];</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#125;</span></span><br><span class=\"line\">\t<span class=\"comment\">// startGStream(gst_src);</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\tstd::string file_src = <span class=\"string\">&quot;rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> width = <span class=\"number\">1280</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> height = <span class=\"number\">720</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> latency = <span class=\"number\">5000</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (argc &gt; <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">\t\tfile_src = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\twidth = <span class=\"built_in\">atoi</span>(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t\theight = <span class=\"built_in\">atoi</span>(argv[<span class=\"number\">3</span>]);</span><br><span class=\"line\">\t\tlatency = <span class=\"built_in\">atoi</span>(argv[<span class=\"number\">4</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">startGStream</span>(file_src, width, height, latency);</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot;finished.&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>配合ROS实现</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ros/ros.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sensor_msgs/Image.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cv_bridge/cv_bridge.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;image_transport/image_transport.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;atomic&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OpenCVGStreamerNode</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">OpenCVGStreamerNode</span>(ros::NodeHandle&amp; nh) : <span class=\"built_in\">it</span>(nh), <span class=\"built_in\">running</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从参数服务器获取 GStreamer 管道配置</span></span><br><span class=\"line\">        nh.<span class=\"built_in\">param</span>&lt;std::string&gt;(<span class=\"string\">&quot;gstreamer_pipeline&quot;</span>, gstreamer_pipeline,</span><br><span class=\"line\">                               <span class=\"string\">&quot;udpsrc port=5600 caps=&#x27;application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265&#x27; ! rtph265depay ! h265parse ! mppvideodec ! videoconvert ! appsink&quot;</span>);</span><br><span class=\"line\">        nh.<span class=\"built_in\">param</span>&lt;std::string&gt;(<span class=\"string\">&quot;output_topic&quot;</span>, output_topic, <span class=\"string\">&quot;/openipc_camera/image&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发布图像话题</span></span><br><span class=\"line\">        image_pub = it.<span class=\"built_in\">advertise</span>(output_topic, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动图像捕获线程</span></span><br><span class=\"line\">        capture_thread = std::<span class=\"built_in\">thread</span>(&amp;OpenCVGStreamerNode::captureImages, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">OpenCVGStreamerNode</span>() &#123;</span><br><span class=\"line\">        running = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (capture_thread.<span class=\"built_in\">joinable</span>()) &#123;</span><br><span class=\"line\">            capture_thread.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">captureImages</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 GStreamer 管道配置初始化 VideoCapture</span></span><br><span class=\"line\">        <span class=\"function\">cv::VideoCapture <span class=\"title\">cap</span><span class=\"params\">(gstreamer_pipeline, cv::CAP_GSTREAMER)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cap.<span class=\"built_in\">isOpened</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">ROS_ERROR</span>(<span class=\"string\">&quot;Failed to open video stream using GStreamer pipeline: %s&quot;</span>, gstreamer_pipeline.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cv::Mat frame;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (running) &#123;</span><br><span class=\"line\">            cap &gt;&gt; frame;  <span class=\"comment\">// 从视频流捕获一帧</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (frame.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">ROS_WARN</span>(<span class=\"string\">&quot;Received empty frame from video stream&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将 OpenCV 图像转换为 ROS 图像消息</span></span><br><span class=\"line\">            sensor_msgs::ImagePtr msg = cv_bridge::<span class=\"built_in\">CvImage</span>(std_msgs::<span class=\"built_in\">Header</span>(), <span class=\"string\">&quot;bgr8&quot;</span>, frame).<span class=\"built_in\">toImageMsg</span>();</span><br><span class=\"line\">            image_pub.<span class=\"built_in\">publish</span>(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image_transport::ImageTransport it_;</span><br><span class=\"line\">    image_transport::Publisher image_pub_;</span><br><span class=\"line\">    std::string gstreamer_pipeline;</span><br><span class=\"line\">    std::string output_topic;</span><br><span class=\"line\">    std::thread capture_thread;</span><br><span class=\"line\">    std::atomic&lt;<span class=\"type\">bool</span>&gt; running;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    ros::<span class=\"built_in\">init</span>(argc, argv, <span class=\"string\">&quot;opencv_gstreamer_node&quot;</span>);</span><br><span class=\"line\">    ros::NodeHandle nh;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建 OpenCV GStreamer 节点</span></span><br><span class=\"line\">    <span class=\"function\">OpenCVGStreamerNode <span class=\"title\">opencv_gstreamer_node</span><span class=\"params\">(nh)</span></span>;</span><br><span class=\"line\">    ros::<span class=\"built_in\">spin</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ros/ros.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sensor_msgs/Image.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cv_bridge/cv_bridge.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;image_transport/image_transport.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;atomic&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OpenCVGStreamerNode</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">OpenCVGStreamerNode</span>(ros::NodeHandle&amp; nh) : <span class=\"built_in\">it</span>(nh), <span class=\"built_in\">running</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从参数服务器获取 GStreamer 管道配置</span></span><br><span class=\"line\">        nh.<span class=\"built_in\">param</span>&lt;std::string&gt;(<span class=\"string\">&quot;gstreamer_pipeline&quot;</span>, gstreamer_pipeline,</span><br><span class=\"line\">                               <span class=\"string\">&quot;udpsrc port=5600 caps=&#x27;application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265&#x27; ! rtph265depay ! h265parse ! nvv4l2decoder ! nv3dsink -e&quot;</span>);</span><br><span class=\"line\">        nh.<span class=\"built_in\">param</span>&lt;std::string&gt;(<span class=\"string\">&quot;output_topic&quot;</span>, output_topic, <span class=\"string\">&quot;/openipc_camera/image&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发布图像话题</span></span><br><span class=\"line\">        image_pub_ = it_.<span class=\"built_in\">advertise</span>(output_topic, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动图像捕获线程</span></span><br><span class=\"line\">        capture_thread = std::<span class=\"built_in\">thread</span>(&amp;OpenCVGStreamerNode::captureImages, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">OpenCVGStreamerNode</span>() &#123;</span><br><span class=\"line\">        running = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (capture_thread.<span class=\"built_in\">joinable</span>()) &#123;</span><br><span class=\"line\">            capture_thread.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">captureImages</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 GStreamer 管道配置初始化 VideoCapture</span></span><br><span class=\"line\">        <span class=\"function\">cv::VideoCapture <span class=\"title\">cap</span><span class=\"params\">(gstreamer_pipeline, cv::CAP_GSTREAMER)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cap.<span class=\"built_in\">isOpened</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">ROS_ERROR</span>(<span class=\"string\">&quot;Failed to open video stream using GStreamer pipeline: %s&quot;</span>, gstreamer_pipeline.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cv::Mat frame;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (running) &#123;</span><br><span class=\"line\">            cap &gt;&gt; frame;  <span class=\"comment\">// 从视频流捕获一帧</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (frame.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">ROS_WARN</span>(<span class=\"string\">&quot;Received empty frame from video stream&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将 OpenCV 图像转换为 ROS 图像消息</span></span><br><span class=\"line\">            sensor_msgs::ImagePtr msg = cv_bridge::<span class=\"built_in\">CvImage</span>(std_msgs::<span class=\"built_in\">Header</span>(), <span class=\"string\">&quot;bgr8&quot;</span>, frame).<span class=\"built_in\">toImageMsg</span>();</span><br><span class=\"line\">            image_pub_.<span class=\"built_in\">publish</span>(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image_transport::ImageTransport it_;</span><br><span class=\"line\">    image_transport::Publisher image_pub_;</span><br><span class=\"line\">    std::string gstreamer_pipeline;</span><br><span class=\"line\">    std::string output_topic;</span><br><span class=\"line\">    std::thread capture_thread;</span><br><span class=\"line\">    std::atomic&lt;<span class=\"type\">bool</span>&gt; running;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    ros::<span class=\"built_in\">init</span>(argc, argv, <span class=\"string\">&quot;opencv_gstreamer_node&quot;</span>);</span><br><span class=\"line\">    ros::NodeHandle nh;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建 OpenCV GStreamer 节点</span></span><br><span class=\"line\">    <span class=\"function\">OpenCVGStreamerNode <span class=\"title\">opencv_gstreamer_node</span><span class=\"params\">(nh)</span></span>;</span><br><span class=\"line\">    ros::<span class=\"built_in\">spin</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/1/9</p>\n</div></div><div class='timeline-item-content'><p>通过 TFTP 和 UART 逐步安装 OpenIPC 固件。</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://github.com/OpenIPC/wiki/blob/master/en/installation.md\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://github.com/OpenIPC/wiki/blob/master/en/installation.md</p></div></a></div> \n<h1>说明</h1>\n<p>核心就是利用网络摄像头，而且网络监控的市场很大，网络摄像头可选择的范围很大，可以根据主控芯片、图像传感器的型号，以及板载的串口（刷鞋固件、通信），USB(连接WIFI网卡)的情况自由选择<br>\n我这里选择的是 <strong>SigmaStar SsC338Q  分辨率4K@20FPS  内置2Gb DDR3</strong></p>\n<h1>架构：</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/01/02/sf653e-0.webp\" alt=\"架构\"></p>\n<h1>我的工作任务：</h1>\n<ul>\n<li>硬件环境的搭建\n<ul>\n<li>openipc固件的烧写</li>\n<li>天空端电路搭建</li>\n<li>地面端环境的烧写</li>\n</ul>\n</li>\n<li>固件的编译和编译脚本</li>\n<li>裁剪的openipc linux内核中执行启动脚本的过程</li>\n<li>rtl8812网卡天空端驱动（内核配置的）、rtl8812au地面端驱动（开源项目）</li>\n<li>摄像头驱动（开源的），视频编码器（闭源方案）</li>\n<li>wfb-ng数据链路</li>\n<li>地面端解码方案（安卓、linux、嵌入式开发板）</li>\n</ul>\n<h1>固件安装</h1>\n<p>这里是利用的TFTP和UART来安装固件</p>\n<h3 id=\"SoC识别\">SoC识别</h3>\n<p>SoC（系统级芯片）包括相机的 CPU 内核以及所有必要的外围设备，例如相机和网络接口。<strong>这部分由摄像头厂商确定</strong>，需要看IC标记丝印来查看，或者使用ipctool软件识别SoC型号</p>\n<h3 id=\"闪存芯片大小\">闪存芯片大小</h3>\n<p>通常是摄像头8引脚的一个芯片，可以通过U-boot启动过程确认，也可以查看丝印（丝印包含64，即是8M，包含128，即16M）</p>\n<h3 id=\"TFTP服务器\">TFTP服务器</h3>\n<p>TFTP（Trivial File Transfer Protocol）服务器是一种简单的文件传输协议服务器，用于在网络设备之间传输文件。与FTP（File Transfer Protocol）相比，TFTP更轻量级，通常用于在局域网（LAN）中传输小文件，如配置文件、固件更新等。</p>\n<p>说白了就是用它来传固件的</p>\n<h3 id=\"连接相机的UART端口\">连接相机的UART端口</h3>\n<p>最好是看摄像头手册 好用的就是一个usb转ttl的串口适配器<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/13/xl7rg7-0.webp\" alt=\"\"></p>\n<p>将适配器上的引脚连接到 UART 端口的可能触点。使用标准电源适配器为相机供电。如果幸运，就可以在终端窗口中看到 Booting log。在某些情况下，如果在屏幕上看到乱码文本而不是引导内核，需要将连接速度更改为 57600 bps，然后重试。RX、TX</p>\n<h3 id=\"访问bootloader\">访问bootloader</h3>\n<p>通过按计算机键盘上的组合键来引导加载程序控制台， 在 bootloader 启动和 Linux 内核启动之前。 在上电的时候疯狂enter</p>\n<p>进入u-boot的命令行</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">setenv ipaddr <span class=\"number\">10.81</span>.<span class=\"number\">1.230</span>;setenv serverip <span class=\"number\">10.81</span>.<span class=\"number\">1.102</span></span><br><span class=\"line\">mw.b x21000000 x x1000000</span><br><span class=\"line\">tftpboot <span class=\"number\">0</span>x21000000 openipc<span class=\"literal\">-ssc338q-fpv-16mb</span>.bin</span><br><span class=\"line\">tftp <span class=\"number\">0</span>x21000000 openipc<span class=\"literal\">-ssc338q-fpv-16mb</span>.binsf probe <span class=\"number\">0</span>;sf lock <span class=\"number\">0</span>;</span><br><span class=\"line\">sf <span class=\"built_in\">erase</span> <span class=\"number\">0</span>x0 <span class=\"number\">0</span>x1000000;sf <span class=\"built_in\">write</span> <span class=\"number\">0</span>x21000000 <span class=\"number\">0</span>x0 <span class=\"number\">0</span>x1000000</span><br><span class=\"line\">reset</span><br></pre></td></tr></table></figure>\n<p>U-Boot 命令系列显示了一个典型的嵌入式系统启动流程，尤其是在网络启动（TFTP）和闪存操作方面的详细步骤。</p>\n<ol>\n<li>\n<p><strong><code>setenv ipaddr 10.81.1.230</code> 和 <code>setenv serverip 10.81.1.102</code></strong><br>\n这两个命令设置了 U-Boot 环境变量，用于指定网络设置,用于通过 TFTP 下载内核或文件系统镜像：</p>\n<ul>\n<li><strong><code>ipaddr</code></strong>：这设置了 U-Boot 启动时使用的本机 IP 地址，<code>10.81.1.230</code> 是设备将会使用的 IP 地址。</li>\n<li><strong><code>serverip</code></strong>：指定了 TFTP 服务器的 IP 地址，<code>10.81.1.102</code> 是存储内核镜像的服务器。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>mw.b x21000000 x x1000000</code></strong><br>\n清空或初始化内存区域，确保内存中没有残留数据</p>\n<ul>\n<li><strong><code>mw.b</code></strong> 是 U-Boot 中的 “Memory Write Byte” 命令，它用于在内存中写入数据。</li>\n<li><strong><code>x21000000</code></strong> 是目标内存地址，这里是指将数据写入设备内存的地址 <code>0x21000000</code>（通常是设备的 RAM）。</li>\n<li><strong><code>x</code></strong> 是要写入的值，代表数据的内容。</li>\n<li><strong><code>x1000000</code></strong> 是写入的字节数，表示要写入的字节数为 <code>0x1000000</code>（即 16MB）。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>tftpboot 0x21000000 openipc-ssc338q-fpv-16mb.bin</code></strong><br>\n通过网络从 <code>10.81.1.102</code> 服务器上获取 <code>openipc-ssc338q-fpv-16mb.bin</code> 文件，并将其存储到设备内存中，准备进行闪存写入。</p>\n<ul>\n<li><strong><code>tftpboot</code></strong> 命令从 TFTP 服务器下载文件，并将文件加载到指定的内存地址。</li>\n<li><strong><code>0x21000000</code></strong> 是目标内存地址，这里表示将下载的文件存储在内存地址 <code>0x21000000</code> 开始的位置。</li>\n<li><strong><code>openipc-ssc338q-fpv-16mb.bin</code></strong> 是要下载的文件名，通常是嵌入式设备的固件或内核镜像文件。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>sf probe 0; sf lock 0;</code></strong><br>\n在闪存上执行写入操作时，相关区域不会被意外覆盖。</p>\n<ul>\n<li><strong><code>sf probe 0</code></strong>：初始化并识别闪存设备，<code>0</code> 是闪存设备的编号。在 U-Boot 中，<code>sf</code> 是指闪存（SPI Flash），这个命令确保设备能够识别并与闪存进行通信。</li>\n<li><strong><code>sf lock 0</code></strong>：锁定闪存的第一个区域，通常用于防止闪存区域被意外擦除或写入。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>sf erase 0x0 0x1000000</code></strong><br>\n这个命令用于擦除闪存的特定区域，擦除操作确保闪存上的旧数据被清除，为写入新的镜像做准备。：</p>\n<ul>\n<li><strong><code>sf erase 0x0 0x1000000</code></strong> 表示擦除从地址 <code>0x0</code> 开始，大小为 <code>0x1000000</code>（即 16MB）的闪存区域。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>sf write 0x21000000 0x0 0x1000000</code></strong><br>\n将内核镜像（或者其他固件文件）写入到设备的闪存中，为下次启动准备好内核。</p>\n<ul>\n<li><strong><code>sf write</code></strong> 用于将数据从内存写入闪存。</li>\n<li><strong><code>0x21000000</code></strong> 是内存中的数据起始地址，前面的 TFTP 操作已经将内核镜像存放在该地址。</li>\n<li><strong><code>0x0</code></strong> 是闪存的起始地址，表示将数据写入闪存的第一个位置。</li>\n<li><strong><code>0x1000000</code></strong> 是写入的字节数，表示将 16MB 的数据从内存写入闪存。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>reset</code></strong></p>\n<ul>\n<li><strong><code>reset</code></strong> 命令重启设备，使设备重新启动并从闪存或其他启动介质加载操作系统。</li>\n</ul>\n</li>\n</ol>\n<p>U-Boot 命令，设备完成了以下操作：</p>\n<ol>\n<li>配置了网络设置（<code>ipaddr</code> 和 <code>serverip</code>）。</li>\n<li>清空并初始化了内存区域。</li>\n<li>从 TFTP 服务器下载了一个固件镜像到内存。</li>\n<li>对闪存进行了操作，包括擦除和写入内核镜像。</li>\n<li>最终触发系统重启，准备从新写入的镜像启动。</li>\n</ol>\n<h3 id=\"保存原始固件\">保存原始固件</h3>\n<h3 id=\"固件烧写\">固件烧写</h3>\n<h3 id=\"串口登录设置\">串口登录设置</h3>\n<h3 id=\"网络配置及远程登录\">网络配置及远程登录</h3>\n<h3 id=\"连接wifi网卡\">连接wifi网卡</h3>\n<h3 id=\"检查WiFi模块的识别情况\">检查WiFi模块的识别情况</h3>\n<h3 id=\"生成和安装-WFB-NG-的密钥配对\">生成和安装 WFB-NG 的密钥配对</h3>\n<h3 id=\"编辑-wfb-conf-以设置正确的-wifi-频道\">编辑 wfb.conf 以设置正确的 wifi 频道</h3>\n<h3 id=\"在相机上配置-majestic-yaml-文件\">在相机上配置 majestic.yaml 文件</h3>\n<h1>视频延时组成</h1>\n<p>视频链路：摄像头==》编码==》传输==》解码==》显示<br>\n整个图传系统的延时主要是：编码延时、传输延时、解码延时：</p>\n<ol>\n<li>摄像头数据采集延时(camera)</li>\n<li>编码器编码延时(H264 codec)</li>\n<li>无线网络延时(wfb_ng)： ~ 5ms</li>\n<li>解码器解码延时(H264 decoder)</li>\n<li>显示器刷新延时(monitor refresh rate)</li>\n</ol>\n<h2 id=\"解码延时\">解码延时</h2>\n<p>解码延时中包含</p>\n<ul>\n<li>Wfb 解包时间</li>\n<li>内核队列延迟</li>\n<li>硬件解码时间</li>\n</ul>\n<h3 id=\"gstreamer\">gstreamer</h3>\n<p>Jetson 的 NVIDIA V4L2 解码器（如 nvv4l2decoder）通过专用硬件模块（如 NVDEC）实现 H.264/H.265 视频流的硬解码，显著降低 CPU 负载并减少处理延迟</p>\n<p><strong>V4L2 驱动：</strong><br>\nV4L2 是 Linux 内核中用于视频设备的标准接口。</p>\n<ul>\n<li>用户空间程序（如 GStreamer）访问摄像头数据。</li>\n<li>Jetson 平台上的 V4L2 驱动经过优化，能够直接将数据传递到硬件加速器（如 NVDEC 和 NVENC），从而减少 CPU 的负载。</li>\n</ul>\n<p>当摄像头驱动捕获到一帧数据后，会将其放入内核中的缓冲区队列中。GStreamer 应用程序通过 V4L2 接口从内核队列中读取数据。</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/04/21/xce35n-0.webp\" alt=\"v4l2\"></p>\n<p><strong>GStreamer 缓冲区与网络弹性</strong></p>\n<p>动态缓冲管理：</p>\n<ul>\n<li>流媒体场景中，通过监听 GST_MESSAGE_BUFFERING 消息动态调整缓冲区大小。例如，当缓冲级别低于 100% 时暂停流水线，待缓冲恢复后继续播放，避免因网络波动导致的数据饥饿。</li>\n</ul>\n<p>时钟同步机制：</p>\n<ul>\n<li>GStreamer 全局时钟（如 GST_CLOCK_TYPE_REALTIME）的丢失会触发重新同步。处理 GST_MESSAGE_CLOCK_LOST 消息时，需暂停并重启流水线以重建时钟基准。</li>\n</ul>\n<p>使用 queue 插件限制缓冲区大小<br>\n<code>udpsrc port=5600 ! queue max-size-buffers=2 ! rtph265depay ! ...</code></p>\n<p>基础的解码脚本：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">current_date=<span class=\"variable\">$</span>(date +<span class=\"string\">&#x27;%Y%d%m_%H%M%S&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/Videos</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$1</span> == <span class=\"string\">&quot;save&quot;</span> ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">\tgst<span class=\"literal\">-launch-1</span>.<span class=\"number\">0</span> <span class=\"literal\">-e</span> udpsrc port=<span class=\"number\">5600</span> caps=<span class=\"string\">&#x27;application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265&#x27;</span> ! rtph265depay ! h265parse ! <span class=\"built_in\">tee</span> name=t ! queue ! mppvideodec ! xvimagesink sync=false t. ! queue ! matroskamux ! filesink location=record_<span class=\"variable\">$</span>&#123;current_date&#125;.mkv</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tgst<span class=\"literal\">-launch-1</span>.<span class=\"number\">0</span> udpsrc port=<span class=\"number\">5600</span> caps=<span class=\"string\">&#x27;application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265&#x27;</span> ! rtph265depay ! h265parse ! mppvideodec ! xvimagesink sync=false</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 jetson 上查看是否调用硬件解码的方法是使用 jtop 工具，具体方法参考<a href=\"https://blog.csdn.net/zong596568821xp/article/details/80268034\">《 NVIDIA查看CPU、内存、GPU使用情况 》</a></p>\n<p><a href=\"https://docs.nvidia.com/jetson/archives/r35.6.1/DeveloperGuide/SD/Multimedia/AcceleratedGstreamer.html\">jetson上的硬件解码器</a></p>\n<h1>地面站</h1>\n<h2 id=\"接收端网卡\">接收端网卡</h2>\n<p>目前开发的地面站支持的大多是rtl8812au这一款网卡（主要是网卡驱动问题）<br>\n并支持monitor 模式</p>\n<h2 id=\"monitor模式\">monitor模式</h2>\n<h3 id=\"什么是monitor模式\">什么是monitor模式</h3>\n<p>WiFi Monitor模式需要WiFi芯片本身支持，并且驱动要支持相应的接口。</p>\n<p>在非Monitor模式 （平时正常使用的状态）下，内核会将802.11帧封装成普通网络帧传递给上层； 而在Monitor模式 下，内核则会直接将802.11帧传给上层，不会进行封装，用户层就通过接口拿到RAW包，可以按802.11帧格式进行包解析处理。</p>\n<p>在Linux内核中，hostap_80211_rx 函数是IEEE 802.11接收无线skb的tasklet函数，其作用是处理802.11网卡传递过来的数据包。倘若网卡被设置成monitor模式，该函数中会调用如下分支：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (local-&gt;iw_mode == IW_MODE_MONITOR) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">    monitor_rx(dev, skb, rx_stats);</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在monitor_rx 函数中，主要是prism2_rx_80211 函数，将带有802.11头的skb直接发送给netif。netif为linux内核网络数据包的标准框架。在prism2_rx_80211中，在skb里补充了一个抓包的头，给用户提供更多的包信息。这个头对应的数据结构为linux_wlan_ng_cap_hdr ，具体声明如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">linux_wlan_ng_cap_hdr</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 version;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 length;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be64 mactime;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be64 hosttime;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 phytype;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 channel;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 datarate;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 antenna;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 priority;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 ssi_type;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 ssi_signal;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 ssi_noise;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 preamble;</span><br><span class=\"line\">   </span><br><span class=\"line\">    __be32 encoding;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125; __packed;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何开启\">如何开启</h3>\n<p>使用如下命令可以实现：<br>\n<code>iwconfig wlan0 mode Monitor</code><br>\n其调用了如下ioctl来配置：<br>\n<code>ret = ioctl(skfd, SIOCSIWMODE, &amp;wrq);</code><br>\n对应的配置模式，通过wrq参数来定义。而上面的skfd则由下面操作获取：<br>\n<code>skfd = socket(AF_INET, SOCK_DGRAM, 0);</code></p>\n<h2 id=\"网卡选择\">网卡选择</h2>\n<p>网卡官方支持：<br>\nRTL8812AU、ar9271、rtl8812eu</p>\n<p><a href=\"https://forums.developer.nvidia.com/t/rtl8822ce-access-point-mode/288083\">https://forums.developer.nvidia.com/t/rtl8822ce-access-point-mode/288083</a><br>\n板载算力板上的网卡型号为rtl8812CE，不支持monitor mode</p>\n<h2 id=\"WIfibroadcast的原理分析：\">WIfibroadcast的原理分析：</h2>\n<h3 id=\"远距离wifi技术：\">远距离wifi技术：</h3>\n<div class=\"tag link\"><a class=\"link-card\" title=\"Wi-Fi极限谈1：最大传输距离的“标准”答案\" href=\"https://zhuanlan.zhihu.com/p/121872101\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">Wi-Fi极限谈1：最大传输距离的“标准”答案</p><p class=\"url\">https://zhuanlan.zhihu.com/p/121872101</p></div></a></div> \n<p>2.4GHz 频率<br>\nRSSI（Received Signal Strength Indicator）值代表设备接收到的信号强度，通常用负值表示。RSSI 值范围一般如下：</p>\n<p>接近 0（如 -30）: 信号非常强，设备与信号源的距离较近。<br>\n中等值（如 -50 至 -70）: 信号质量良好，适合正常通信。<br>\n较弱值（如 -80 至 -90）: 信号较弱，可能会影响通信质量。<br>\n非常弱（小于 -90）: 信号几乎不可用，设备可能会断开连接。<br>\n解读你的 RSSI 值<br>\n你当前的 RSSI 值是 -41：</p>\n<p>这是一个非常强的信号，表示设备离信号源很近，通信质量应该非常好。</p>\n<p>pkt/s代表每秒传输的数据包数量（packets per second）。这是一种衡量网络性能的指标，用于表示网络接口在一秒钟内可以发送或接收的数据包的数量。这个数值可以帮助评估网络的负载情况和传输效率。较高的pkt/s值意味着网络接口能够处理更多的数据包</p>\n<p>8 Mbps (MCS #1 调制) 涉及到的是无线网络通信中的两个概念：数据传输速率和调制编码方案（MCS，Modulation and Coding Scheme）。</p>\n<ol>\n<li>\n<p><strong>8 Mbps</strong>：指的是数据传输速率，即每秒可以传输的数据量为8兆比特。这是一个衡量网络速度的指标，表示理论上一秒钟内可以传送8兆比特（Mb）的数据。</p>\n</li>\n<li>\n<p><strong>MCS #1</strong>：MCS代表调制编码方案，它用于指定在无线通信中使用的调制方式和编码率。不同的MCS索引号对应着不同的调制方式和编码率组合，从而影响数据传输速率和可靠性。MCS #1通常指使用相对较低复杂度的调制和编码策略，以确保更稳定的传输质量，特别是在信号条件不是最优的情况下。</p>\n</li>\n</ol>\n<p>对于802.11n标准（Wi-Fi 4），MCS #1一般对应于使用BPSK（二进制相移键控）调制和1/2编码率。这意味着每个符号携带1个比特的信息，并且有一半的数据位被用于前向纠错编码，以增强数据传输的可靠性。在单空间流（Single Spatial Stream）和20 MHz带宽的条件下，这种配置可以达到大约7.2 Mbps到8 Mbps的数据传输速率。</p>\n<p>因此，“8 Mbps (MCS #1调制)”意味着在网络使用特定的调制和编码设置（在此例中为MCS #1，涉及BPSK调制和1/2编码率）时，能够实现的最大理论数据传输速率为8 Mbps。需要注意的是，实际传输速率可能会受到环境因素、设备性能等多种因素的影响。</p>\n<h4 id=\"目标板配置\">目标板配置</h4>\n<p><code>devices/ssc338q_fpv_openipc-urllc-aio/br-ext-chip-sigmastar/configs/ssc338q_fpv_openipc-urllc-aio_defconfig#L103</code></p>\n<p><code>BR2_PACKAGE_WIFIBROADCAST=y</code>配置好选项</p>\n<h4 id=\"软件版配置\">软件版配置</h4>\n<p><code>general/package/wifibroadcast/wifibroadcast.mk#L7</code></p>\n<p><code>WIFIBROADCAST_VERSION = 24.08</code></p>\n<h4 id=\"视频数据发送-接收\">视频数据发送 &amp; 接收</h4>\n<p><code>general/package/wifibroadcast/files/wifibroadcast#L109-L117</code></p>\n<p>运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">start_drone_wfb() &#123;</span><br><span class=\"line\">\twfb_tx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$udp_port</span>&quot;</span> <span class=\"literal\">-R</span> <span class=\"string\">&quot;<span class=\"variable\">$rcv_buf</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-B</span> <span class=\"string\">&quot;<span class=\"variable\">$bandwidth</span>&quot;</span> \\</span><br><span class=\"line\">\t\t<span class=\"literal\">-M</span> <span class=\"string\">&quot;<span class=\"variable\">$mcs_index</span>&quot;</span> <span class=\"literal\">-S</span> <span class=\"string\">&quot;<span class=\"variable\">$stbc</span>&quot;</span> <span class=\"literal\">-L</span> <span class=\"string\">&quot;<span class=\"variable\">$ldpc</span>&quot;</span> <span class=\"literal\">-G</span> <span class=\"string\">&quot;<span class=\"variable\">$guard_interval</span>&quot;</span> <span class=\"literal\">-k</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_k</span>&quot;</span> <span class=\"literal\">-n</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_n</span>&quot;</span> \\</span><br><span class=\"line\">\t\t<span class=\"literal\">-T</span> <span class=\"string\">&quot;<span class=\"variable\">$pool_timeout</span>&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"operator\">-f</span> <span class=\"string\">&quot;<span class=\"variable\">$frame_type</span>&quot;</span> <span class=\"literal\">-C</span> <span class=\"number\">8000</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">start_gs_wfb() &#123;</span><br><span class=\"line\">\twfb_rx <span class=\"literal\">-c</span> <span class=\"string\">&quot;<span class=\"variable\">$udp_addr</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$udp_port</span>&quot;</span> <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"datalink\">datalink</h3>\n<p><code>devices/ssc338q_fpv_openipc-urllc-aio/br-ext-chip-sigmastar/configs/ssc338q_fpv_openipc-urllc-aio_defconfig#L102</code></p>\n<p>BR2_PACKAGE_DATALINK=y</p>\n<h4 id=\"软件版配置-2\">软件版配置</h4>\n<p><code>general/package/datalink/files/telemetry#L13-L16</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ ! -<span class=\"type\">f</span> /<span class=\"type\">usr</span>/<span class=\"type\">bin</span>/<span class=\"type\">telemetry_rx</span> ] &amp;&amp; [ ! -<span class=\"type\">f</span> /<span class=\"type\">usr</span>/<span class=\"type\">bin</span>/<span class=\"type\">telemetry_tx</span> ]; then</span><br><span class=\"line\">\tln <span class=\"literal\">-s</span> /usr/bin/wfb_rx /usr/bin/telemetry_rx</span><br><span class=\"line\">\tln <span class=\"literal\">-s</span> /usr/bin/wfb_tx /usr/bin/telemetry_tx</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p><code>general/package/datalink/files/telemetry_drone.conf#L15-L20</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">stream_rx=<span class=\"number\">144</span></span><br><span class=\"line\">stream_tx=<span class=\"number\">16</span></span><br><span class=\"line\">link_id=<span class=\"number\">7669206</span></span><br><span class=\"line\">frame_type=<span class=\"keyword\">data</span></span><br><span class=\"line\">port_rx=<span class=\"number\">14551</span></span><br><span class=\"line\">port_tx=<span class=\"number\">14550</span></span><br></pre></td></tr></table></figure>\n<p><code>general/package/datalink/files/telemetry_gs.conf#L15-L20</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">stream_rx=<span class=\"number\">16</span></span><br><span class=\"line\">stream_tx=<span class=\"number\">144</span></span><br><span class=\"line\">link_id=<span class=\"number\">7669206</span></span><br><span class=\"line\">frame_type=<span class=\"keyword\">data</span></span><br><span class=\"line\">port_rx=<span class=\"number\">14651</span></span><br><span class=\"line\">port_tx=<span class=\"number\">14650</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数据发送-接收\">数据发送 &amp; 接收</h4>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">start_drone_telemetry() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$one_way</span>&quot;</span> = <span class=\"string\">&quot;false&quot;</span> ]; then</span><br><span class=\"line\">\t\ttelemetry_rx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream_rx</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$port_rx</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">\ttelemetry_tx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream_tx</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$port_tx</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-B</span> <span class=\"string\">&quot;<span class=\"variable\">$bandwidth</span>&quot;</span> \\</span><br><span class=\"line\">\t\t<span class=\"literal\">-M</span> <span class=\"string\">&quot;<span class=\"variable\">$mcs_index</span>&quot;</span> <span class=\"literal\">-S</span> <span class=\"string\">&quot;<span class=\"variable\">$stbc</span>&quot;</span> <span class=\"literal\">-L</span> <span class=\"string\">&quot;<span class=\"variable\">$ldpc</span>&quot;</span> <span class=\"literal\">-G</span> <span class=\"string\">&quot;<span class=\"variable\">$guard_interval</span>&quot;</span> <span class=\"literal\">-k</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_k</span>&quot;</span> <span class=\"literal\">-n</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_n</span>&quot;</span> \\</span><br><span class=\"line\">\t\t<span class=\"literal\">-T</span> <span class=\"string\">&quot;<span class=\"variable\">$pool_timeout</span>&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"operator\">-f</span> <span class=\"string\">&quot;<span class=\"variable\">$frame_type</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">start_gs_telemetry() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$one_way</span>&quot;</span> = <span class=\"string\">&quot;false&quot;</span> ]; then</span><br><span class=\"line\">\t\ttelemetry_tx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream_tx</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$port_tx</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-B</span> <span class=\"string\">&quot;<span class=\"variable\">$bandwidth</span>&quot;</span> \\</span><br><span class=\"line\">\t\t\t<span class=\"literal\">-M</span> <span class=\"string\">&quot;<span class=\"variable\">$mcs_index</span>&quot;</span> <span class=\"literal\">-S</span> <span class=\"string\">&quot;<span class=\"variable\">$stbc</span>&quot;</span> <span class=\"literal\">-L</span> <span class=\"string\">&quot;<span class=\"variable\">$ldpc</span>&quot;</span> <span class=\"literal\">-G</span> <span class=\"string\">&quot;<span class=\"variable\">$guard_interval</span>&quot;</span> <span class=\"literal\">-k</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_k</span>&quot;</span> <span class=\"literal\">-n</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_n</span>&quot;</span> \\</span><br><span class=\"line\">\t\t\t<span class=\"literal\">-T</span> <span class=\"string\">&quot;<span class=\"variable\">$pool_timeout</span>&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"operator\">-f</span> <span class=\"string\">&quot;<span class=\"variable\">$frame_type</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">\ttelemetry_rx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream_rx</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$port_rx</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"🧱-WiFiBroadcast-WFB-TX-架构分析图\">🧱 <strong>WiFiBroadcast (WFB-TX) 架构分析图</strong></h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">main(int argc, char* const *argv)</span><br><span class=\"line\">│</span><br><span class=\"line\">├── 命令行参数解析（getopt）</span><br><span class=\"line\">│    ├── 设置运行模式：LOCAL / DISTRIBUTOR / INJECTOR</span><br><span class=\"line\">│    ├── FEC 参数：k, n, fec_delay, fec_timeout</span><br><span class=\"line\">│    ├── 网络配置：UDP 端口 / Unix socket / 接收方地址列表</span><br><span class=\"line\">│    ├── 加密参数：keypair 文件路径</span><br><span class=\"line\">│    ├── 日志设置：log_interval</span><br><span class=\"line\">│    ├── 控制接口：control_port</span><br><span class=\"line\">│    └── 物理层参数：bandwidth, MCS index, VHT mode, STBC/LDPC 等</span><br><span class=\"line\">│</span><br><span class=\"line\">├── 系统熵检查（确保随机数安全）</span><br><span class=\"line\">│    └── 检查 /dev/random 的熵池是否足够用于加密 key 生成</span><br><span class=\"line\">│</span><br><span class=\"line\">├── libsodium 初始化</span><br><span class=\"line\">│    └── sodium_init()：初始化加密库，用于 FEC session key 和数据加密</span><br><span class=\"line\">│</span><br><span class=\"line\">├── radiotap header 初始化</span><br><span class=\"line\">│    └── 根据物理层参数构造 IEEE80211_RADIOTAP_HDR，用于注入原始帧</span><br><span class=\"line\">│</span><br><span class=\"line\">├── 根据 tx_mode 启动不同主循环</span><br><span class=\"line\">│</span><br><span class=\"line\">│    ┌────────────────────────────────────────────────────────────┐</span><br><span class=\"line\">│    │ case LOCAL: 本地发送模式（发射端）                        │</span><br><span class=\"line\">│    │   ├─ 使用 local_loop_udp 或 local_loop_unix                │</span><br><span class=\"line\">│    │   ├─ 打开 raw socket 向 wlanX 注入原始数据包               │</span><br><span class=\"line\">│    │   └─ 创建 LocalTransmitter 实例负责 FEC 编码和加密         │</span><br><span class=\"line\">│    │                                                            │</span><br><span class=\"line\">│    │    ┌──────────────────────────────────────────────────┐    │</span><br><span class=\"line\">│    │    │ LocalTransmitter                                  │    │</span><br><span class=\"line\">│    │    │   ├── FEC 编码 (Reed-Solomon k/n)                 │    │</span><br><span class=\"line\">│    │    │   ├── 数据分块与 FEC 分组                           │    │</span><br><span class=\"line\">│    │    │   ├── 加密（使用 libsodium）                       │    │</span><br><span class=\"line\">│    │    │   ├── 时间戳与 epoch 管理                          │    │</span><br><span class=\"line\">│    │    │   └── tags 管理（用于 FEC block 标识）             │    │</span><br><span class=\"line\">│    │    └──────────────────────────────────────────────────┘    │</span><br><span class=\"line\">│    │                                                            │</span><br><span class=\"line\">│    │    ┌──────────────────────────────────────────────────┐    │</span><br><span class=\"line\">│    │    │ data_source_local(): 主事件循环                   │    │</span><br><span class=\"line\">│    │    │   ├── 监听输入源（如 stdin 或 video pipe）        │    │</span><br><span class=\"line\">│    │    │   ├── 触发 FEC 编码                               │    │</span><br><span class=\"line\">│    │    │   ├── 发送 FEC block 到所有目标设备               │    │</span><br><span class=\"line\">│    │    └──────────────────────────────────────────────────┘    │</span><br><span class=\"line\">│    │                                                            │</span><br><span class=\"line\">│    └────────────────────────────────────────────────────────────┘</span><br><span class=\"line\">│</span><br><span class=\"line\">│    ┌────────────────────────────────────────────────────────────┐</span><br><span class=\"line\">│    │ case DISTRIBUTOR: 接收端（分布式接收器）                  │</span><br><span class=\"line\">│    │   ├─ 使用 distributor_loop_udp 或 distributor_loop_unix    │</span><br><span class=\"line\">│    │   ├─ 多路复用多个 UDP/Unix socket                         │</span><br><span class=\"line\">│    │   └─ 创建 RemoteTransmitter 实例处理 FEC 解码              │</span><br><span class=\"line\">│    │                                                            │</span><br><span class=\"line\">│    │    ┌──────────────────────────────────────────────────┐    │</span><br><span class=\"line\">│    │    │ RemoteTransmitter                              │    │</span><br><span class=\"line\">│    │    │   ├── FEC 解码                                 │    │</span><br><span class=\"line\">│    │    │   ├── 包重组                                   │    │</span><br><span class=\"line\">│    │    │   ├── 支持 FEC 超时机制                        │    │</span><br><span class=\"line\">│    │    │   └── 数据恢复并注入到 wlanX 设备              │    │</span><br><span class=\"line\">│    │    └────────────────────────────────────────────────┘    │</span><br><span class=\"line\">│    │                                                            │</span><br><span class=\"line\">│    │    ┌──────────────────────────────────────────────────┐    │</span><br><span class=\"line\">│    │    │ data_source(): 主事件循环                       │    │</span><br><span class=\"line\">│    │    │   ├── 接收远程 FEC block                        │    │</span><br><span class=\"line\">│    │    │   ├── FEC 解码并恢复丢失的数据包                │    │</span><br><span class=\"line\">│    │    │   ├── 控制指令处理（修改 FEC 参数等）           │    │</span><br><span class=\"line\">│    │    └────────────────────────────────────────────────┘    │</span><br><span class=\"line\">│    │                                                            │</span><br><span class=\"line\">│    └────────────────────────────────────────────────────────────┘</span><br><span class=\"line\">│</span><br><span class=\"line\">│    ┌────────────────────────────────────────────────────────────┐</span><br><span class=\"line\">│    │ case INJECTOR: 测试注入器                                │</span><br><span class=\"line\">│    │   └─ injector_loop()：模拟 FEC block 注入测试流量          │</span><br><span class=\"line\">│    └────────────────────────────────────────────────────────────┘</span><br><span class=\"line\">│</span><br><span class=\"line\">├── 异常捕获（try-catch）</span><br><span class=\"line\">│    └── 捕获 runtime_error 并输出错误信息后退出</span><br><span class=\"line\">│</span><br><span class=\"line\">└── 正常退出</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"📊-总结说明\">📊 总结说明</h2>\n<table>\n<thead>\n<tr>\n<th>模块</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>main()</td>\n<td>程序入口，负责参数解析、初始化、启动主循环</td>\n</tr>\n<tr>\n<td>LocalTransmitter</td>\n<td>负责 FEC 编码、加密、时间戳管理、标签分配</td>\n</tr>\n<tr>\n<td>RemoteTransmitter</td>\n<td>负责 FEC 解码、丢包恢复、数据注入到 wlanX</td>\n</tr>\n<tr>\n<td>data_source / data_source_local</td>\n<td>主事件循环，处理数据流和控制信号</td>\n</tr>\n<tr>\n<td>FEC 编解码</td>\n<td>基于 Reed-Solomon(k,n)，支持前向纠错</td>\n</tr>\n<tr>\n<td>加密机制</td>\n<td>使用 libsodium 库进行 session key 管理和数据加密</td>\n</tr>\n<tr>\n<td>Radiotap Header</td>\n<td>封装物理层参数，兼容多种无线网卡</td>\n</tr>\n<tr>\n<td>控制接口</td>\n<td>支持通过 control_port 动态调整 FEC 参数</td>\n</tr>\n<tr>\n<td>日志系统</td>\n<td>输出运行状态、丢包率、延迟等关键指标</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"📎-示例命令对照\">📎 示例命令对照</h2>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>命令示例</th>\n<th>对应函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>发射端</td>\n<td><code>wfb_tx -u 5600 -k 8 -n 12 -f data wlan0</code></td>\n<td><code>local_loop_udp()</code></td>\n</tr>\n<tr>\n<td>接收端</td>\n<td><code>wfb_rx -d -u 5600 host:5600</code></td>\n<td><code>distributor_loop()</code></td>\n</tr>\n<tr>\n<td>本地测试</td>\n<td><code>wfb_rx -U /tmp/wfb -d host:port</code></td>\n<td><code>distributor_loop_unix()</code></td>\n</tr>\n<tr>\n<td>注入测试</td>\n<td><code>wfb_rx -I 10000 wlan0</code></td>\n<td><code>injector_loop()</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Linux-内核启动过程\">Linux 内核启动过程</h2>\n<p>一旦 U-Boot 把内核加载到内存并将控制权交给内核，Linux 内核就开始启动。内核启动的过程可以分为几个重要的阶段：</p>\n<h2 id=\"内核说明\">内核说明</h2>\n<h3 id=\"内核初始化：\">内核初始化：</h3>\n<p>解压内核：如果内核是压缩格式（uImage），它会首先被解压。<br>\n设置系统环境：内核初始化过程中，会初始化硬件环境，包括内存、CPU、时钟、I/O 控制器等。<br>\n启动内核主线程：内核开始执行第一个用户空间进程，通常是 init 进程。<br>\n设备驱动加载：内核会根据设备树（Device Tree，DT）或者硬编码的设备信息来加载相关硬件设备的驱动，确保硬件能够被正确识别并与操作系统交互。</p>\n<p>内核调度和管理资源：内核的调度器开始工作，管理系统资源，如 CPU、内存、I/O 等。</p>\n<h3 id=\"init-进程和用户空间启动\">init 进程和用户空间启动</h3>\n<p>在 Linux 内核初始化完毕后，控制权会传递给第一个用户空间进程 init，它通常会启动系统中所有的守护进程和服务。</p>\n<ul>\n<li>挂载 /proc 文件系统。</li>\n<li>检查并挂载支持的根文件系统。</li>\n<li>通过 overlay 或 overlayfs 文件系统进行联合挂载，允许在嵌入式系统中以最小化的方式实现根文件系统的可写层。</li>\n<li>使用 pivot_root 更改根文件系统。</li>\n<li>挂载其他系统关键文件系统（如 /proc、/dev 和 /overlay）。</li>\n</ul>\n<h4 id=\"RootFS-的内容\">RootFS 的内容</h4>\n<p>在 Buildroot 中，根文件系统（RootFS）是由多个目录和文件构成的，这些目录和文件用于支持系统运行。常见的文件夹有：</p>\n<p>/bin/：基本的可执行文件，如 sh、ls 等。<br>\n/sbin/：系统管理程序，如 init、ifconfig 等。<br>\n/etc/：系统配置文件，如网络配置、服务启动配置等。<br>\n/lib/：共享库。<br>\n/tmp/：临时文件。<br>\n/proc/：虚拟文件系统，提供系统信息。<br>\n/sys/：虚拟文件系统，提供内核信息。<br>\n/dev/：设备文件。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── bin</span><br><span class=\"line\">├── dev</span><br><span class=\"line\">├── etc</span><br><span class=\"line\">├── init</span><br><span class=\"line\">├── lib</span><br><span class=\"line\">├── lib32 -&gt; lib</span><br><span class=\"line\">├── linuxrc -&gt; bin/busybox</span><br><span class=\"line\">├── media</span><br><span class=\"line\">├── mnt</span><br><span class=\"line\">├── opt</span><br><span class=\"line\">├── overlay</span><br><span class=\"line\">├── proc</span><br><span class=\"line\">├── rom</span><br><span class=\"line\">├── root</span><br><span class=\"line\">├── run</span><br><span class=\"line\">├── sbin</span><br><span class=\"line\">├── sys</span><br><span class=\"line\">├── tmp</span><br><span class=\"line\">├── usr</span><br><span class=\"line\">├── utils</span><br><span class=\"line\">└── var</span><br></pre></td></tr></table></figure>\n<p>在这些目录中，init 文件是根文件系统中用于启动系统的第一个进程。</p>\n<h4 id=\"init-与文件系统的关系\">init 与文件系统的关系</h4>\n<p>在Linux嵌入式系统的开发和维护过程中，了解系统启动和服务管理机制是至关重要的。init 文件本身就是嵌入在构建的文件系统中的。</p>\n<p>其中，/etc/init.d/目录扮演了关键角色，它包含了用于初始化、启动、重启或停止各种服务的脚本。<br>\ninit.d是指包含一系列 Shell脚本 的目录，这些脚本用于控制服务（也称为守护进程）的生命周期。当系统启动时，init进程会根据预定义的规则执行这些脚本，以确保必要的服务能够正确启动。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rcK         S01syslogd  S30customizer  S40network   S60crond     S98datalink</span><br><span class=\"line\">rcS         S02klogd    S35modules     S49ntpd      S70vendor    S98vtun</span><br><span class=\"line\">S01seedrng  S02sysctl   S38mdev        S50dropbear  S95majestic  S99rc.local</span><br></pre></td></tr></table></figure>\n<h4 id=\"系统脚本运行情况\">系统脚本运行情况</h4>\n<details class=\"folding-tag\" ><summary> rcS </summary>\n              <div class='content'>\n              <p>先看一下rcS文件，它是本目录在开机时最先启动的文件。也是系统进入多用户模式之前的初始化脚本。它会根据配置启动各种系统服务，通常会依赖其他脚本来执行特定的任务。</p><p>rcS通常用于：</p><ul><li>初始化基本系统服务</li><li>挂载文件系统</li><li>启动 init.d 目录下的所有 S 开头的脚本</li><li>init.d 目录结构遵循了 SysV init 启动方式，rcS 主要是用来遍历 S 开头的脚本，并依次执行它们。</li><li>在使用 <strong>Buildroot</strong> 进行内核裁剪之后，init进程的启动工作流会根据 <code>/etc/init.d</code> 中的启动脚本顺序来执行。</li></ul><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\">export SENSOR=<span class=\"variable\">$</span>(fw_printenv <span class=\"literal\">-n</span> sensor)</span><br><span class=\"line\">export UPGRADE=<span class=\"variable\">$</span>(fw_printenv <span class=\"literal\">-n</span> upgrade)</span><br><span class=\"line\">export TZ=<span class=\"variable\">$</span>(<span class=\"built_in\">cat</span> /etc/TZ)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> /etc/init.d/S??*; <span class=\"keyword\">do</span></span><br><span class=\"line\">\t[ ! -<span class=\"type\">f</span> <span class=\"string\">&quot;<span class=\"variable\">$i</span>&quot;</span> ] &amp;&amp; <span class=\"keyword\">continue</span></span><br><span class=\"line\">\tcase <span class=\"string\">&quot;<span class=\"variable\">$i</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\t*)</span><br><span class=\"line\">\t\t\t<span class=\"variable\">$i</span> <span class=\"built_in\">start</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\tesac</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure><ul><li>循环遍历 <code>/etc/init.d/</code> 目录下所有以 <code>S</code> 开头且后面跟有两位数字（<code>S??*</code>）的文件。</li><li><code>[ ! -f &quot;$i&quot; ] &amp;&amp; continue</code> 检查每个文件是否是普通文件（不是目录等其他类型），如果不是普通文件，则跳过该文件。</li><li><code>case &quot;$i&quot; in *) $i start ;; esac</code> 对每个文件（即每个服务脚本）执行 <code>start</code> 参数。触发服务脚本的启动。服务脚本内会定义如何启动服务（如启动系统守护进程、初始化硬件设备、配置网络等）。</li></ul>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> rcK </summary>\n              <div class='content'>\n              <p>与rcS相对<br>这个脚本通常在系统关闭或者进入单用户模式时运行。它主要用来停止一些服务，清理系统资源。</p><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$</span>(<span class=\"built_in\">ls</span> <span class=\"literal\">-r</span> /etc/init.d/S??*); <span class=\"keyword\">do</span></span><br><span class=\"line\">\t[ ! -<span class=\"type\">f</span> <span class=\"string\">&quot;<span class=\"variable\">$i</span>&quot;</span> ] &amp;&amp; <span class=\"keyword\">continue</span></span><br><span class=\"line\">\tcase <span class=\"string\">&quot;<span class=\"variable\">$i</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\t*)</span><br><span class=\"line\">\t\t\t<span class=\"variable\">$i</span> stop</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\tesac</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S01seedrng </summary>\n              <div class='content'>\n              <p>作用是启动一个随机数生成服务，确保系统在启动时能够使用持久化的种子数据来生成加密级别的随机数。其主要作用是增强系统的随机性，确保用于加密和安全任务时生成的随机数质量高，防止系统依赖不安全或预测性的随机数。脚本还支持动态配置种子存储位置和一些特定的安全选项。</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S01syslogd </summary>\n              <div class='content'>\n              <p><code>S01syslogd</code> 脚本的作用是启动和管理 <code>syslogd</code> 服务，<code>syslogd</code> 是一个日志守护进程，用于收集、存储和转发系统日志。这个脚本确保 <code>syslogd</code> 正常运行，并在系统启动时自动启动它。</p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DAEMON=<span class=\"string\">&quot;syslogd&quot;</span></span><br><span class=\"line\">PIDFILE=<span class=\"string\">&quot;/var/run/<span class=\"variable\">$DAEMON</span>.pid&quot;</span></span><br><span class=\"line\">DAEMON_ARGS=<span class=\"string\">&quot;-n -C64 -t&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>DAEMON=&quot;syslogd&quot;</code>：定义了守护进程的名称，即 <code>syslogd</code>，它是负责处理系统日志的服务。</li><li><code>PIDFILE=&quot;/var/run/$DAEMON.pid&quot;</code>：定义了守护进程的 PID 文件位置，<code>/var/run/syslogd.pid</code> 用于存储 <code>syslogd</code> 的进程 ID。</li><li><code>DAEMON_ARGS=&quot;-n -C64 -t&quot;</code>：定义了 <code>syslogd</code> 启动时的参数：<ul><li><code>-n</code>：告诉 <code>syslogd</code> 以非守护进程模式启动，即不将其转为后台进程。</li><li><code>-C64</code>：设置日志缓冲区大小为 64 KB。</li><li><code>-t</code>：标记每条日志信息，通常用于调试日志输出。</li></ul></li></ul><h3 id=\"start-函数\"><code>start</code> 函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Starting <span class=\"variable\">$DAEMON</span>: &quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -b -m -S -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span> -x <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span> -- <span class=\"variable\">$DAEMON_ARGS</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>start</code> 函数用于启动 <code>syslogd</code>：</p><ul><li><code>start-stop-daemon -b -m -S -q -p &quot;$PIDFILE&quot; -x &quot;$DAEMON&quot; -- $DAEMON_ARGS</code>：该命令通过 <code>start-stop-daemon</code> 启动守护进程 <code>syslogd</code>，并将其参数传递给进程。选项解析：<ul><li><code>-b</code>：使进程在后台运行。</li><li><code>-m</code>：以守护进程的方式启动。</li><li><code>-S</code>：启动进程时保持锁定。</li><li><code>-q</code>：安静模式，不显示多余信息。</li><li><code>-p &quot;$PIDFILE&quot;</code>：指定存储 PID 文件的位置。</li><li><code>-x &quot;$DAEMON&quot;</code>：指定要启动的守护进程程序，即 <code>syslogd</code>。</li><li><code>-- $DAEMON_ARGS</code>：传递参数给 <code>syslogd</code>，如日志缓冲区大小等。</li></ul></li></ul></li><li><p>启动成功后输出 <code>OK</code>，失败则输出 <code>FAIL</code>。</p></li></ul><h3 id=\"stop-函数\"><code>stop</code> 函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Stopping <span class=\"variable\">$DAEMON</span>: &quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -K -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">rm</span> -f <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>stop</code> 函数用于停止 <code>syslogd</code>：<ul><li><code>start-stop-daemon -K -q -p &quot;$PIDFILE&quot;</code>：使用 <code>start-stop-daemon</code> 停止守护进程，<code>-K</code> 表示终止进程，<code>-q</code> 表示安静模式，<code>-p &quot;$PIDFILE&quot;</code> 用于指定 PID 文件。</li><li>停止成功后，删除 PID 文件并输出 <code>OK</code>，否则输出 <code>FAIL</code>。</li></ul></li></ul><h3 id=\"处理脚本参数\">处理脚本参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart|stop)</span><br><span class=\"line\">\t\t<span class=\"variable\">$1</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\trestart|reload)</span><br><span class=\"line\">\t\tstop</span><br><span class=\"line\">\t\t<span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">\t\tstart</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li>脚本通过 <code>case</code> 语句根据传入的参数来决定执行哪个操作：<ul><li><code>start</code>：调用 <code>start</code> 函数，启动 <code>syslogd</code>。</li><li><code>stop</code>：调用 <code>stop</code> 函数，停止 <code>syslogd</code>。</li><li><code>restart</code> 或 <code>reload</code>：先停止进程，等待 1 秒后重新启动，确保服务能平滑重启。</li><li>如果参数无效，输出使用提示并退出脚本。</li></ul></li></ul>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S02klogd </summary>\n              <div class='content'>\n              <p><strong>klogd</strong> 会收集内核级别的日志信息，通常与 <strong>syslogd</strong> 配合使用，将内核日志发送到合适的位置。<br>这个 <code>S02klogd</code> 脚本是一个 <strong>SysV-style</strong> 启动脚本，专门用于管理 <code>klogd</code> 进程（Kernel Logging Daemon）。它遵循传统的 init 脚本格式，使用 <code>start-stop-daemon</code> 命令来启动和停止 <code>klogd</code>，并且能够创建 <code>PIDFILE</code> 以便于进程管理。</p><hr><h2 id=\"详细解析\"><strong>详细解析</strong></h2><p>这个脚本的主要作用是控制 <code>klogd</code>（Kernel Log Daemon）的启动、停止和重启，并且遵循 SysV init 脚本的标准格式。它的结构清晰，主要由以下几个部分组成：</p><h3 id=\"1-变量定义\"><strong>1. 变量定义</strong></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">DAEMON=<span class=\"string\">&quot;klogd&quot;</span></span><br><span class=\"line\">PIDFILE=<span class=\"string\">&quot;/var/run/<span class=\"variable\">$DAEMON</span>.pid&quot;</span></span><br><span class=\"line\">KLOGD_ARGS=<span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>DAEMON=&quot;klogd&quot;</code>：定义守护进程的名称。</li><li><code>PIDFILE=&quot;/var/run/$DAEMON.pid&quot;</code>：定义进程的 PID 文件路径。</li><li><code>KLOGD_ARGS=&quot;&quot;</code>：定义 <code>klogd</code> 运行时的附加参数，默认是空的。</li></ul><h3 id=\"2-读取默认配置\"><strong>2. 读取默认配置</strong></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ -r <span class=\"string\">&quot;/etc/default/<span class=\"variable\">$DAEMON</span>&quot;</span> ] &amp;&amp; . <span class=\"string\">&quot;/etc/default/<span class=\"variable\">$DAEMON</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li>这里会检查 <code>/etc/default/klogd</code> 文件是否可读，如果存在，则加载它的内容。</li><li>这个设计使得 <code>klogd</code> 的启动参数可以在 <code>/etc/default/klogd</code> 里定义，而不是硬编码在脚本中，增强了灵活性。</li></ul><h3 id=\"3-start-函数\"><strong>3. <code>start()</code> 函数</strong></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span> <span class=\"string\">&#x27;Starting %s: &#x27;</span> <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -b -m -S -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span> -x <span class=\"string\">&quot;/sbin/<span class=\"variable\">$DAEMON</span>&quot;</span> \\</span><br><span class=\"line\">\t\t-- -n <span class=\"variable\">$KLOGD_ARGS</span></span><br><span class=\"line\">\tstatus=$?</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$status</span>&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"string\">&quot;<span class=\"variable\">$status</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>先打印 <code>&quot;Starting klogd: &quot;</code> 提示信息。</li><li>使用 <code>start-stop-daemon</code> 启动 <code>klogd</code>：<ul><li><code>-b</code>：后台运行（daemonize）。</li><li><code>-m</code>：创建 <code>PIDFILE</code>。</li><li><code>-S</code>：启动服务（start）。</li><li><code>-q</code>：安静模式（quiet），不打印额外信息。</li><li><code>-p &quot;$PIDFILE&quot;</code>：指定 <code>PIDFILE</code>。</li><li><code>-x &quot;/sbin/$DAEMON&quot;</code>：执行 <code>/sbin/klogd</code>。</li><li><code>-- -n $KLOGD_ARGS</code>：传递 <code>-n</code> 选项给 <code>klogd</code>，表示不创建 <code>PIDFILE</code>，因为 <code>BusyBox</code> 版 <code>klogd</code> 不会自己管理 <code>PIDFILE</code>，所以这里用 <code>start-stop-daemon</code> 处理。</li></ul></li><li><code>status=$?</code> 获取 <code>start-stop-daemon</code> 的退出状态码：<ul><li><code>0</code> 代表成功，打印 <code>&quot;OK&quot;</code>。</li><li>非 <code>0</code> 代表失败，打印 <code>&quot;FAIL&quot;</code>。</li></ul></li><li><code>return &quot;$status&quot;</code> 返回状态码，以便于外部脚本检查。</li></ul><h3 id=\"4-stop-函数\"><strong>4. <code>stop()</code> 函数</strong></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span> <span class=\"string\">&#x27;Stopping %s: &#x27;</span> <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -K -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\tstatus=$?</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$status</span>&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">rm</span> -f <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"string\">&quot;<span class=\"variable\">$status</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>先打印 <code>&quot;Stopping klogd: &quot;</code> 提示信息。</li><li><code>start-stop-daemon -K -q -p &quot;$PIDFILE&quot;</code>：<ul><li><code>-K</code> 选项用于停止（kill）进程。</li><li><code>-q</code> 选项是安静模式（quiet）。</li><li><code>-p &quot;$PIDFILE&quot;</code> 选项指定 <code>PIDFILE</code>，以便找到并杀死 <code>klogd</code> 进程。</li></ul></li><li>如果进程成功终止：<ul><li>删除 <code>PIDFILE</code>。</li><li>打印 <code>&quot;OK&quot;</code>。</li></ul></li><li>如果失败，打印 <code>&quot;FAIL&quot;</code> 并返回错误码。</li></ul><h3 id=\"5-restart-函数\"><strong>5. <code>restart()</code> 函数</strong></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">restart</span></span>() &#123;</span><br><span class=\"line\">\tstop</span><br><span class=\"line\">\t<span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">\tstart</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>先调用 <code>stop()</code> 终止进程。</li><li><code>sleep 1</code> 等待 1 秒，确保进程完全退出。</li><li>重新调用 <code>start()</code> 启动 <code>klogd</code>。</li></ul><h3 id=\"6-命令行参数解析\"><strong>6. 命令行参数解析</strong></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart|stop|restart)</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span>;;</span><br><span class=\"line\">\treload)</span><br><span class=\"line\">\t\trestart;;</span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li>允许 <code>start|stop|restart</code> 作为参数，直接调用相应的函数。</li><li><code>reload</code> 其实是 <code>restart</code>，因为 <code>klogd</code> 本身没有 <code>reload</code> 机制，所以用 <code>restart</code> 代替。</li><li>其他情况打印用法说明，并返回 <code>exit 1</code> 表示参数错误。</li></ul><hr>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S02sysctl </summary>\n              <div class='content'>\n              <p><strong>sysctl</strong> 用于配置和调整内核参数。这个脚本会设置一些内核的运行时参数，比如文件系统、内存、网络等方面的配置。</p><hr><h3 id=\"脚本概述\"><strong>脚本概述</strong></h3><p>这个 <code>S02sysctl</code> 脚本用于管理 <code>sysctl</code> 配置文件的加载。它读取多个配置文件，并将其应用到内核参数中。它还根据是否存在 <code>logger</code> 命令来决定是将输出发送到系统日志中，还是直接输出到标准输出。</p><h3 id=\"详细结构\"><strong>详细结构</strong></h3><ol><li><p><strong>变量定义</strong></p> <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">PROGRAM=<span class=\"string\">&quot;sysctl&quot;</span></span><br><span class=\"line\">SYSCTL_ARGS=<span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>PROGRAM</code>：定义要运行的程序，这里是 <code>sysctl</code>。</li><li><code>SYSCTL_ARGS</code>：用于传递给 <code>sysctl</code> 的附加参数，默认为空。</li></ul></li><li><p><strong>加载配置</strong></p> <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ -r <span class=\"string\">&quot;/etc/default/<span class=\"variable\">$PROGRAM</span>&quot;</span> ] &amp;&amp; . <span class=\"string\">&quot;/etc/default/<span class=\"variable\">$PROGRAM</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li>通过检查 <code>/etc/default/sysctl</code> 文件是否可读，来加载该文件中的配置。</li></ul></li><li><p><strong>配置文件源定义</strong></p> <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">SYSCTL_SOURCES=<span class=\"string\">&quot;/etc/sysctl.d/ /usr/local/lib/sysctl.d/ /usr/lib/sysctl.d/ /lib/sysctl.d/ /etc/sysctl.conf&quot;</span></span><br></pre></td></tr></table></figure><ul><li>这是一个包含多个路径的列表，<code>sysctl</code> 配置文件会在这些路径中查找，并按顺序加载。</li></ul></li><li><p><strong>日志功能：<code>run_logger()</code> 和 <code>run_std()</code></strong></p><ul><li><code>run_logger()</code>：如果 <code>logger</code> 可用，将 <code>sysctl</code> 的输出发送到系统日志。</li><li><code>run_std()</code>：如果 <code>logger</code> 不可用，将输出直接发送到标准输出或错误输出。</li></ul></li><li><p><strong>启动函数 <code>start()</code></strong></p> <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&#x27;%s %s: &#x27;</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$PROGRAM</span>&quot;</span></span><br><span class=\"line\">    status=$(<span class=\"string\">&quot;<span class=\"variable\">$run_program</span>&quot;</span> 4&gt;&amp;1)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$status</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$status</span>&quot;</span> = <span class=\"string\">&quot;OK&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> 0</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据配置执行 <code>sysctl</code>，并根据 <code>status</code> 输出结果。</li></ul></li><li><p><strong>命令行参数处理</strong></p> <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start <span class=\"string\">&quot;Running&quot;</span>;;</span><br><span class=\"line\">    restart|reload)</span><br><span class=\"line\">        start <span class=\"string\">&quot;Rerunning&quot;</span>;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        :;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li>提供了 <code>start|stop|restart|reload</code> 的参数，执行相应的操作。对于 <code>stop</code>，没有实际操作，<code>:</code> 是一个空操作。</li></ul></li></ol>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S30customizer </summary>\n              <div class='content'>\n              <hr><h3 id=\"功能概述\">功能概述</h3><ol><li><p><strong>脚本入口</strong></p><ul><li>使用 <code>case &quot;$1&quot;</code> 判断传入参数（如 <code>start</code> 或 <code>stop</code>）。</li><li>通常由 <code>/etc/init.d/</code> 框架调用，传入参数为 <code>start</code>。</li></ul></li><li><p><strong>主要功能</strong></p><ul><li>设置系统时间。</li><li>执行自定义化脚本（<code>customizer.sh</code>）。</li><li>配置无线网络（<code>wireless.sh</code>）。</li><li>配置多路复用器和 GPIO（<code>muxes.sh</code>）。</li><li>检查 MAC 地址。</li></ul></li></ol>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S35modules </summary>\n              <div class='content'>\n              <p>负责加载内核模块，这里没有用到。</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S38mdev </summary>\n              <div class='content'>\n              <p><strong>mdev</strong> 是一个轻量级的设备管理工具，类似于 <strong>udev</strong>，它会管理和创建设备节点，确保设备被正确识别和配置，由于系统没有使用设备接口，没有使用。</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S40network </summary>\n              <div class='content'>\n              <h2 id=\"管理网络接口的启动和停止，包括有线网络和无线网络。通过读取-U-Boot-环境变量来动态配置网络设备，并根据设备类型调用不同的初始化逻辑。\">管理网络接口的启动和停止，包括有线网络和无线网络。通过读取 U-Boot 环境变量来动态配置网络设备，并根据设备类型调用不同的初始化逻辑。</h2><h3 id=\"脚本内容\"><strong>脚本内容</strong></h3><h4 id=\"1-读取-U-Boot-环境变量\"><strong>1. 读取 U-Boot 环境变量</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dev=$(fw_printenv -n wlandev)</span><br><span class=\"line\">mac=$(fw_printenv -n wlanmac)</span><br><span class=\"line\">net=$(fw_printenv -n netaddr_fallback)</span><br></pre></td></tr></table></figure><ul><li><strong><code>fw_printenv</code></strong>：<ul><li>这是一个工具，用于读取 U-Boot 的环境变量。</li><li><code>-n</code> 参数表示只输出变量值，而不包含变量名。</li></ul></li><li><strong>变量含义</strong>：<ul><li><strong><code>dev</code> (<code>wlandev</code>)</strong>：<ul><li>表示无线网络设备的类型或标识符（如 USB、SDIO 或 Modem）。</li></ul></li><li><strong><code>mac</code> (<code>wlanmac</code>)</strong>：<ul><li>表示无线网卡的 MAC 地址。</li></ul></li><li><strong><code>net</code> (<code>netaddr_fallback</code>)</strong>：<ul><li>表示默认的网络地址（如 IP 地址），当没有其他配置时使用。</li><li>默认值为 <code>192.168.2.10</code>。</li></ul></li></ul></li></ul><hr><h4 id=\"2-配置无线网络接口\"><strong>2. 配置无线网络接口</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">set_wireless</span></span>() &#123;</span><br><span class=\"line\">\tpath=/etc/wireless</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"variable\">$path</span>/usb <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span> || <span class=\"variable\">$path</span>/sdio <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t[ -n <span class=\"string\">&quot;<span class=\"variable\">$mac</span>&quot;</span> ] &amp;&amp; ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> dev wlan0 address <span class=\"string\">&quot;<span class=\"variable\">$mac</span>&quot;</span></span><br><span class=\"line\">\t\tifup wlan0</span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> <span class=\"variable\">$path</span>/modem <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tifup usb0</span><br><span class=\"line\">\t\tifup eth1</span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t[ -e /sys/class/net/eth0 ] &amp;&amp; ifconfig eth0 <span class=\"string\">&quot;<span class=\"variable\">$&#123;net:-192.168.2.10&#125;</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>根据 <code>dev</code> 的值判断无线设备的类型，并执行相应的初始化逻辑。</li></ul></li><li><strong>逻辑分支</strong>：<ol><li><strong>USB 或 SDIO 设备</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"variable\">$path</span>/usb <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span> || <span class=\"variable\">$path</span>/sdio <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">    [ -n <span class=\"string\">&quot;<span class=\"variable\">$mac</span>&quot;</span> ] &amp;&amp; ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> dev wlan0 address <span class=\"string\">&quot;<span class=\"variable\">$mac</span>&quot;</span></span><br><span class=\"line\">    ifup wlan0</span><br></pre></td></tr></table></figure><ul><li>检查 <code>/etc/wireless/usb</code> 或 <code>/etc/wireless/sdio</code> 脚本是否支持当前设备。</li><li>如果支持：<ul><li>设置无线网卡 <code>wlan0</code> 的 MAC 地址（如果有 <code>wlanmac</code>）。</li><li>启动无线接口 <code>wlan0</code>。</li></ul></li></ul></li><li><strong>Modem 设备</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"variable\">$path</span>/modem <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">    ifup usb0</span><br><span class=\"line\">    ifup eth1</span><br></pre></td></tr></table></figure><ul><li>如果设备是 Modem 类型，则启动 <code>usb0</code> 和 <code>eth1</code> 接口。</li></ul></li><li><strong>回退配置</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ -e /sys/class/net/eth0 ] &amp;&amp; ifconfig eth0 <span class=\"string\">&quot;<span class=\"variable\">$&#123;net:-192.168.2.10&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li>如果存在 <code>eth0</code> 接口，则为其分配一个默认 IP 地址（<code>netaddr_fallback</code> 或 <code>192.168.2.10</code>）。</li></ul></li></ol></li></ul><hr><h4 id=\"3-启动网络服务\"><strong>3. 启动网络服务</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting network...&quot;</span></span><br><span class=\"line\">\tifup lo</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$dev</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tset_wireless</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tifup eth0</span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>启动网络服务，按以下顺序：<ol><li>启动本地回环接口 <code>lo</code>。</li><li>如果存在无线设备（<code>dev</code> 不为空），调用 <code>set_wireless</code> 函数配置无线网络。</li><li>如果没有无线设备，直接启动有线接口 <code>eth0</code>。</li></ol></li></ul></li></ul><hr><h4 id=\"4-停止网络服务\"><strong>4. 停止网络服务</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Stopping network...&quot;</span></span><br><span class=\"line\">\tifdown lo</span><br><span class=\"line\">\tifdown -f wlan0</span><br><span class=\"line\">\tifdown -f usb0</span><br><span class=\"line\">\tifdown -f eth1</span><br><span class=\"line\">\tifdown -f eth0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>停止所有网络接口，包括：<ul><li>本地回环接口 <code>lo</code>。</li><li>无线接口 <code>wlan0</code>。</li><li>USB 网络接口 <code>usb0</code>。</li><li>以太网接口 <code>eth1</code> 和 <code>eth0</code>。</li></ul></li><li><code>-f</code> 参数强制关闭接口，即使接口不存在也不会报错。</li></ul></li></ul><hr><h4 id=\"5-脚本入口\"><strong>5. 脚本入口</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart|stop)</span><br><span class=\"line\">\t\t<span class=\"variable\">$1</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\trestart|reload)</span><br><span class=\"line\">\t\tstop</span><br><span class=\"line\">\t\tstart</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>根据传入参数执行相应的操作：<ul><li><code>start</code>：启动网络服务。</li><li><code>stop</code>：停止网络服务。</li><li><code>restart</code> 或 <code>reload</code>：先停止再启动网络服务。</li><li>默认：打印用法提示并退出。</li></ul></li></ul></li></ul><hr><h3 id=\"总结\"><strong>总结</strong></h3><h4 id=\"核心功能\"><strong>核心功能</strong></h4><ol><li><strong>动态配置网络接口</strong>：<ul><li>根据 U-Boot 环境变量（<code>wlandev</code>、<code>wlanmac</code>、<code>netaddr_fallback</code>）动态配置网络设备。</li><li>支持多种无线设备类型（USB、SDIO、Modem）。</li></ul></li><li><strong>启动和停止网络服务</strong>：<ul><li>启动时按需配置无线或有线网络接口。</li><li>停止时关闭所有网络接口。</li></ul></li></ol><h4 id=\"运行流程\"><strong>运行流程</strong></h4><ol><li><strong>启动流程</strong>：<ul><li>启动本地回环接口 <code>lo</code>。</li><li>如果存在无线设备，调用 <code>set_wireless</code> 配置无线网络。</li><li>如果没有无线设备，直接启动有线接口 <code>eth0</code>。</li></ul></li><li><strong>停止流程</strong>：<ul><li>关闭所有网络接口。</li></ul></li></ol>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S49ntpd </summary>\n              <div class='content'>\n              <p>网络时间协议守护进程，同步系统时间，校准系统的时钟。</p><h3 id=\"S49ntpd-脚本\"><code>S49ntpd</code> 脚本</h3><p>这个脚本的主要功能是管理 NTP 守护进程（<code>ntpd</code>）的启动、停止和重启。它通过 <code>start-stop-daemon</code> 工具来控制守护进程的生命周期，并使用 PID 文件来跟踪进程状态。</p><hr><h3 id=\"脚本内容\"><strong>脚本内容</strong></h3><h4 id=\"1-变量定义\"><strong>1. 变量定义</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DAEMON=<span class=\"string\">&quot;ntpd&quot;</span></span><br><span class=\"line\">PIDFILE=<span class=\"string\">&quot;/var/run/<span class=\"variable\">$DAEMON</span>.pid&quot;</span></span><br><span class=\"line\">DAEMON_ARGS=<span class=\"string\">&quot;-n&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>DAEMON</code></strong>：<ul><li>表示要管理的守护进程名称，这里是 <code>ntpd</code>（网络时间协议守护进程）。</li></ul></li><li><strong><code>PIDFILE</code></strong>：<ul><li>存储 <code>ntpd</code> 进程的 PID 文件路径，用于跟踪进程状态。</li></ul></li><li><strong><code>DAEMON_ARGS</code></strong>：<ul><li>传递给 <code>ntpd</code> 的启动参数：<ul><li><code>-n</code>：表示以非后台模式运行（但实际会通过 <code>start-stop-daemon</code> 后台化）。</li></ul></li></ul></li></ul><hr><h4 id=\"2-启动函数\"><strong>2. 启动函数</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Starting <span class=\"variable\">$DAEMON</span>: &quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -b -m -S -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span> -x <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span> -- <span class=\"variable\">$DAEMON_ARGS</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>启动 <code>ntpd</code> 守护进程。</li></ul></li><li><strong>关键命令</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">start-stop-daemon -b -m -S -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span> -x <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span> -- <span class=\"variable\">$DAEMON_ARGS</span></span><br></pre></td></tr></table></figure><ul><li><code>-b</code>：以后台模式运行进程。</li><li><code>-m</code>：创建 PID 文件。</li><li><code>-S</code>：启动进程。</li><li><code>-q</code>：静默模式，不输出额外信息。</li><li><code>-p &quot;$PIDFILE&quot;</code>：指定 PID 文件路径。</li><li><code>-x &quot;$DAEMON&quot;</code>：指定要启动的可执行文件。</li><li><code>-- $DAEMON_ARGS</code>：传递给守护进程的参数。</li></ul></li><li><strong>错误处理</strong>：<ul><li>检查 <code>start-stop-daemon</code> 的返回值：<ul><li>如果成功（返回值为 0），打印 <code>OK</code>。</li><li>如果失败，打印 <code>FAIL</code>。</li></ul></li></ul></li></ul><hr><h4 id=\"3-停止函数\"><strong>3. 停止函数</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Stopping <span class=\"variable\">$DAEMON</span>: &quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -K -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">rm</span> -f <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>停止 <code>ntpd</code> 守护进程。</li></ul></li><li><strong>关键命令</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">start-stop-daemon -K -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>-K</code>：发送信号终止进程。</li><li><code>-q</code>：静默模式。</li><li><code>-p &quot;$PIDFILE&quot;</code>：根据 PID 文件找到目标进程并终止。</li></ul></li><li><strong>清理工作</strong>：<ul><li>如果成功停止进程，则删除 PID 文件。</li></ul></li><li><strong>错误处理</strong>：<ul><li>检查 <code>start-stop-daemon</code> 的返回值：<ul><li>如果成功，打印 <code>OK</code>。</li><li>如果失败，打印 <code>FAIL</code>。</li></ul></li></ul></li></ul><hr><h4 id=\"4-脚本入口\"><strong>4. 脚本入口</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart|stop)</span><br><span class=\"line\">\t\t<span class=\"variable\">$1</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\trestart|reload)</span><br><span class=\"line\">\t\tstop</span><br><span class=\"line\">\t\t<span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">\t\tstart</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>根据传入参数执行相应的操作：<ul><li><code>start</code>：调用 <code>start</code> 函数启动 <code>ntpd</code>。</li><li><code>stop</code>：调用 <code>stop</code> 函数停止 <code>ntpd</code>。</li><li><code>restart</code> 或 <code>reload</code>：先停止再启动 <code>ntpd</code>。</li><li>默认：打印用法提示并退出。</li></ul></li></ul></li><li><strong>注意</strong>：<ul><li>在 <code>restart</code> 和 <code>reload</code> 中，停止后等待 1 秒再启动，避免资源冲突。</li></ul></li></ul><hr><h3 id=\"总结\"><strong>总结</strong></h3><h4 id=\"核心功能\"><strong>核心功能</strong></h4><ol><li><strong>启动 NTP 守护进程</strong>：<ul><li>使用 <code>start-stop-daemon</code> 后台运行 <code>ntpd</code>，并生成 PID 文件。</li></ul></li><li><strong>停止 NTP 守护进程</strong>：<ul><li>根据 PID 文件终止 <code>ntpd</code> 进程，并清理 PID 文件。</li></ul></li><li><strong>支持重启和重载</strong>：<ul><li>提供 <code>restart</code> 和 <code>reload</code> 操作，方便重新配置或恢复服务。</li></ul></li></ol><h4 id=\"运行流程\"><strong>运行流程</strong></h4><ol><li><strong>启动流程</strong>：<ul><li>检查是否可以启动 <code>ntpd</code>。</li><li>使用 <code>start-stop-daemon</code> 启动守护进程，并记录 PID。</li></ul></li><li><strong>停止流程</strong>：<ul><li>根据 PID 文件终止进程，并删除 PID 文件。</li></ul></li><li><strong>重启流程</strong>：<ul><li>先停止，再启动，确保服务重新加载。</li></ul></li></ol>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S50dropbear </summary>\n              <div class='content'>\n              <p><strong>dropbear</strong>，这是一种轻量级的SSH服务器，允许远程访问系统。这个脚本会初始化SSH服务，允许通过SSH连接。</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S60crond </summary>\n              <div class='content'>\n              <p>启动 <strong>crond</strong>，即定时任务守护进程。它负责执行预定的定时任务，比如周期性地运行某些脚本或程序。</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S70vendor </summary>\n              <div class='content'>\n              <p>这个脚本通常用于执行供应商特定的初始化任务，为了加载厂商的特定驱动、配置或者服务。</p><h3 id=\"S70vendor-脚本\"><code>S70vendor</code> 脚本</h3><p>这个脚本的主要功能是在系统启动时加载特定厂商的模块（可能包括驱动程序或其他硬件相关的初始化逻辑）。它通过调用 <code>ipcinfo</code> 工具获取设备的厂商信息，并动态加载与该厂商相关的模块。</p><hr><h3 id=\"脚本内容\"><strong>脚本内容</strong></h3><h4 id=\"1-脚本入口\"><strong>1. 脚本入口</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Loading vendor modules...&quot;</span></span><br><span class=\"line\">\t\tvendor=$(ipcinfo -v)</span><br><span class=\"line\">\t\tload_<span class=\"string\">&quot;<span class=\"variable\">$vendor</span>&quot;</span> -i</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstop)</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start&#125;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>根据传入参数执行相应的操作：<ul><li><code>start</code>：加载厂商模块。</li><li><code>stop</code>：当前为空，表示不支持停止操作。</li><li>默认：打印用法提示并退出。</li></ul></li></ul></li></ul><hr><h4 id=\"2-加载厂商模块\"><strong>2. 加载厂商模块</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Loading vendor modules...&quot;</span></span><br><span class=\"line\">vendor=$(ipcinfo -v)</span><br><span class=\"line\">load_<span class=\"string\">&quot;<span class=\"variable\">$vendor</span>&quot;</span> -i</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>使用 <code>ipcinfo -v</code> 获取设备的厂商信息。</li><li>动态调用与厂商相关的加载函数（如 <code>load_&lt;vendor&gt;</code>）。</li></ul></li><li><strong>关键命令</strong>：<ol><li><strong><code>ipcinfo -v</code></strong>：<ul><li>这是一个工具，用于查询设备的硬件或固件信息。</li><li><code>-v</code> 参数返回设备的厂商名称（如 <code>sony</code>、<code>samsung</code> 等）。</li></ul></li><li><strong><code>load_&quot;$vendor&quot;</code></strong>：<ul><li>动态构造函数名，例如：<ul><li>如果 <code>vendor=&quot;sony&quot;</code>，则调用 <code>load_sony</code>。</li><li>如果 <code>vendor=&quot;samsung&quot;</code>，则调用 <code>load_samsung</code>。</li></ul></li></ul></li><li><strong><code>-i</code> 参数</strong>：<ul><li>传递给加载函数的参数，可能是初始化选项。</li></ul></li></ol></li></ul><hr><h4 id=\"3-停止分支\"><strong>3. 停止分支</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">stop)</span><br><span class=\"line\">\t;;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>当前为空，表示该脚本不支持停止操作。</li></ul></li><li><strong>可能原因</strong>：<ul><li>厂商模块通常是内核模块或硬件驱动，加载后无需显式卸载。</li><li>或者，卸载逻辑由其他脚本（如 <code>rcK</code> 或其他 <code>Kxx</code> 脚本）处理。</li></ul></li></ul><hr><h3 id=\"总结\"><strong>总结</strong></h3><h4 id=\"核心功能\"><strong>核心功能</strong></h4><ol><li><strong>动态加载厂商模块</strong>：<ul><li>使用 <code>ipcinfo</code> 工具获取设备的厂商信息。</li><li>根据厂商信息调用对应的加载函数（如 <code>load_sony</code> 或 <code>load_samsung</code>）。</li></ul></li><li><strong>支持启动操作</strong>：<ul><li>脚本仅支持 <code>start</code> 操作，用于加载厂商模块。</li></ul></li><li><strong>不支持停止操作</strong>：<ul><li>当前未实现停止逻辑，可能由其他机制处理。</li></ul></li></ol><h4 id=\"运行流程\"><strong>运行流程</strong></h4><ol><li><strong>启动流程</strong>：<ul><li>打印提示信息：“Loading vendor modules…”。</li><li>调用 <code>ipcinfo -v</code> 获取厂商名称。</li><li>动态调用对应的加载函数（如 <code>load_&lt;vendor&gt;</code>），并传递 <code>-i</code> 参数。</li></ul></li><li><strong>停止流程</strong>：<ul><li>当前未实现停止逻辑。</li></ul></li></ol><h4 id=\"适用场景\"><strong>适用场景</strong></h4><ul><li>该脚本适用于嵌入式设备（如 IP 摄像头）中加载厂商特定的硬件模块或驱动程序。</li><li>它通过动态调用的方式支持多种厂商，灵活性较高。</li></ul><hr>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S95majestic </summary>\n              <div class='content'>\n              <h3 id=\"S95majestic-脚本\"><code>S95majestic</code> 脚本</h3><p>这个脚本的主要功能是管理 <code>majestic</code> 守护进程的启动、停止、重启和重载。它通过 <code>start-stop-daemon</code> 工具来控制守护进程的生命周期，并使用 PID 文件来跟踪进程状态。相比之前的 <code>ntpd</code> 脚本，该脚本增加了对 <code>reload</code> 操作的支持。</p><hr><h3 id=\"脚本内容\"><strong>脚本内容</strong></h3><h4 id=\"1-变量定义\"><strong>1. 变量定义</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DAEMON=<span class=\"string\">&quot;majestic&quot;</span></span><br><span class=\"line\">PIDFILE=<span class=\"string\">&quot;/var/run/<span class=\"variable\">$DAEMON</span>.pid&quot;</span></span><br><span class=\"line\">DAEMON_ARGS=<span class=\"string\">&quot;-s&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>DAEMON</code></strong>：<ul><li>表示要管理的守护进程名称，这里是 <code>majestic</code>。</li><li><code>majestic</code> 是 OpenIPC 项目中的一个核心组件，通常用于处理视频流（如 RTSP、HTTP 等）。</li></ul></li><li><strong><code>PIDFILE</code></strong>：<ul><li>存储 <code>majestic</code> 进程的 PID 文件路径，用于跟踪进程状态。</li></ul></li><li><strong><code>DAEMON_ARGS</code></strong>：<ul><li>传递给 <code>majestic</code> 的启动参数：<ul><li><code>-s</code>：可能是以静默模式或后台模式运行的选项。</li></ul></li></ul></li></ul><hr><h4 id=\"2-启动函数\"><strong>2. 启动函数</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Starting <span class=\"variable\">$DAEMON</span>: &quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -b -m -S -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span> -x <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span> -- <span class=\"variable\">$DAEMON_ARGS</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>启动 <code>majestic</code> 守护进程。</li></ul></li><li><strong>关键命令</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">start-stop-daemon -b -m -S -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span> -x <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span> -- <span class=\"variable\">$DAEMON_ARGS</span></span><br></pre></td></tr></table></figure><ul><li><code>-b</code>：以后台模式运行进程。</li><li><code>-m</code>：创建 PID 文件。</li><li><code>-S</code>：启动进程。</li><li><code>-q</code>：静默模式，不输出额外信息。</li><li><code>-p &quot;$PIDFILE&quot;</code>：指定 PID 文件路径。</li><li><code>-x &quot;$DAEMON&quot;</code>：指定要启动的可执行文件。</li><li><code>-- $DAEMON_ARGS</code>：传递给守护进程的参数。</li></ul></li><li><strong>错误处理</strong>：<ul><li>检查 <code>start-stop-daemon</code> 的返回值：<ul><li>如果成功（返回值为 0），打印 <code>OK</code>。</li><li>如果失败，打印 <code>FAIL</code>。</li></ul></li></ul></li></ul><hr><h4 id=\"3-停止函数\"><strong>3. 停止函数</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Stopping <span class=\"variable\">$DAEMON</span>: &quot;</span></span><br><span class=\"line\">\tstart-stop-daemon -K -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">rm</span> -f <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;OK&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;FAIL&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>停止 <code>majestic</code> 守护进程。</li></ul></li><li><strong>关键命令</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">start-stop-daemon -K -q -p <span class=\"string\">&quot;<span class=\"variable\">$PIDFILE</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>-K</code>：发送信号终止进程。</li><li><code>-q</code>：静默模式。</li><li><code>-p &quot;$PIDFILE&quot;</code>：根据 PID 文件找到目标进程并终止。</li></ul></li><li><strong>清理工作</strong>：<ul><li>如果成功停止进程，则删除 PID 文件。</li></ul></li><li><strong>错误处理</strong>：<ul><li>检查 <code>start-stop-daemon</code> 的返回值：<ul><li>如果成功，打印 <code>OK</code>。</li><li>如果失败，打印 <code>FAIL</code>。</li></ul></li></ul></li></ul><hr><h4 id=\"4-重启函数\"><strong>4. 重启函数</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">restart)</span><br><span class=\"line\">\tstop</span><br><span class=\"line\">\t<span class=\"built_in\">sleep</span> 3</span><br><span class=\"line\">\tstart</span><br><span class=\"line\">\t;;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>先调用 <code>stop</code> 函数停止 <code>majestic</code>。</li><li>等待 3 秒（避免资源冲突）。</li><li>再调用 <code>start</code> 函数重新启动 <code>majestic</code>。</li></ul></li><li><strong>注意</strong>：<ul><li>等待时间（<code>sleep 3</code>）可以防止频繁操作导致的问题。</li></ul></li></ul><hr><h4 id=\"5-重载函数\"><strong>5. 重载函数</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">reload)</span><br><span class=\"line\">\tkillall -1 <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span></span><br><span class=\"line\">\t;;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>向 <code>majestic</code> 发送 <code>SIGHUP</code> 信号（信号编号为 1），触发其重新加载配置。</li></ul></li><li><strong>关键命令</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">killall -1 <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>-1</code>：发送 <code>SIGHUP</code> 信号。</li><li><code>$DAEMON</code>：目标进程名称。</li></ul></li><li><strong>用途</strong>：<ul><li><code>SIGHUP</code> 通常用于通知守护进程重新读取配置文件，而无需完全重启。</li></ul></li></ul><hr><h4 id=\"6-脚本入口\"><strong>6. 脚本入口</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart|stop)</span><br><span class=\"line\">\t\t<span class=\"variable\">$1</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\trestart)</span><br><span class=\"line\">\t\tstop</span><br><span class=\"line\">\t\t<span class=\"built_in\">sleep</span> 3</span><br><span class=\"line\">\t\tstart</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\treload)</span><br><span class=\"line\">\t\tkillall -1 <span class=\"string\">&quot;<span class=\"variable\">$DAEMON</span>&quot;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>根据传入参数执行相应的操作：<ul><li><code>start</code>：启动 <code>majestic</code>。</li><li><code>stop</code>：停止 <code>majestic</code>。</li><li><code>restart</code>：先停止再启动 <code>majestic</code>。</li><li><code>reload</code>：向 <code>majestic</code> 发送 <code>SIGHUP</code> 信号以重载配置。</li><li>默认：打印用法提示并退出。</li></ul></li></ul></li></ul><hr><h3 id=\"总结\"><strong>总结</strong></h3><h4 id=\"核心功能\"><strong>核心功能</strong></h4><ol><li><strong>启动 <code>majestic</code> 守护进程</strong>：<ul><li>使用 <code>start-stop-daemon</code> 后台运行 <code>majestic</code>，并生成 PID 文件。</li></ul></li><li><strong>停止 <code>majestic</code> 守护进程</strong>：<ul><li>根据 PID 文件终止进程，并删除 PID 文件。</li></ul></li><li><strong>支持重启和重载</strong>：<ul><li>提供 <code>restart</code> 和 <code>reload</code> 操作，方便重新加载配置或恢复服务。</li></ul></li><li><strong>动态配置管理</strong>：<ul><li><code>reload</code> 操作允许在不停止服务的情况下重新加载配置。</li></ul></li></ol><h4 id=\"运行流程\"><strong>运行流程</strong></h4><ol><li><strong>启动流程</strong>：<ul><li>检查是否可以启动 <code>majestic</code>。</li><li>使用 <code>start-stop-daemon</code> 启动守护进程，并记录 PID。</li></ul></li><li><strong>停止流程</strong>：<ul><li>根据 PID 文件终止进程，并删除 PID 文件。</li></ul></li><li><strong>重启流程</strong>：<ul><li>先停止，再启动，确保服务重新加载。</li></ul></li><li><strong>重载流程</strong>：<ul><li>向 <code>majestic</code> 发送 <code>SIGHUP</code> 信号，触发配置重载。</li></ul></li></ol><h4 id=\"适用场景\"><strong>适用场景</strong></h4><ul><li>该脚本适用于嵌入式设备（如 IP 摄像头）中管理视频流服务。</li><li>它通过标准化的方式管理 <code>majestic</code> 守护进程，适合资源受限的环境。</li></ul><hr>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S98datalink </summary>\n              <div class='content'>\n              <h3 id=\"S98datalink-脚本\"><code>S98datalink</code> 脚本</h3><p>这个脚本的主要功能是管理数据链路服务（如 LTE 模块、ZeroTier 网络和 Wi-Fi 广播）。它根据设备的硬件信息（通过 <code>ipcinfo</code> 和 U-Boot 环境变量）以及配置文件 <code>/etc/datalink.conf</code> 的内容，动态启动或停止相关服务。</p><hr><h3 id=\"脚本内容\"><strong>脚本内容</strong></h3><h4 id=\"1-变量定义\"><strong>1. 变量定义</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">chip=$(ipcinfo -c)</span><br><span class=\"line\">fw=$(grep <span class=\"string\">&quot;BUILD_OPTION&quot;</span> <span class=\"string\">&quot;/etc/os-release&quot;</span> | <span class=\"built_in\">cut</span> -d= -f2)</span><br></pre></td></tr></table></figure><ul><li><strong><code>chip</code></strong>：<ul><li>使用 <code>ipcinfo -c</code> 获取设备的芯片型号。</li><li>示例是 <code>ssc338q</code> 或其他 SoC 名称。</li></ul></li><li><strong><code>fw</code></strong>：<ul><li>从 <code>/etc/os-release</code> 文件中提取 <code>BUILD_OPTION</code> 的值。</li><li>示例输出可能是 <code>lte</code> 或其他构建选项。</li></ul></li></ul><hr><h4 id=\"2-加载配置文件\"><strong>2. 加载配置文件</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ -e /etc/datalink.conf ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t. /etc/datalink.conf</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>如果存在 <code>/etc/datalink.conf</code> 文件，则加载其内容。</li><li><code>. /etc/datalink.conf</code> 表示将该文件的内容作为当前脚本的一部分执行。</li></ul></li><li><strong>用途</strong>：<ul><li>配置文件可能包含以下变量：<ul><li><code>usb_modem</code>：是否启用 USB LTE 模块。</li><li><code>use_zt</code>：是否启用 ZeroTier 网络。</li><li><code>zt_netid</code>：ZeroTier 网络 ID。</li><li><code>telemetry</code>：是否启用遥测功能。</li></ul></li></ul></li></ul><hr><h4 id=\"3-启动-LTE-数据链路\"><strong>3. 启动 LTE 数据链路</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">start_lte</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting fpv datalink...&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$usb_modem</span>&quot;</span> = <span class=\"string\">&quot;true&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting lte modem configuration...&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$use_zt</span>&quot;</span> = <span class=\"string\">&quot;true&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting ZeroTier-One daemon...&quot;</span></span><br><span class=\"line\">\t\tzerotier-one -d &amp;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> [ ! -f <span class=\"string\">&quot;/var/lib/zerotier-one/networks.d/<span class=\"variable\">$zt_netid</span>.conf&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">sleep</span> 8</span><br><span class=\"line\">\t\t\tzerotier-cli <span class=\"built_in\">join</span> <span class=\"string\">&quot;<span class=\"variable\">$zt_netid</span>&quot;</span> &gt; /dev/null</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Don&#x27;t forget to authorize my.zerotier.com!&quot;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$telemetry</span>&quot;</span> = <span class=\"string\">&quot;true&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\ttelemetry start</span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>启动 LTE 数据链路相关的服务。</li></ul></li><li><strong>逻辑分支</strong>：<ol><li><strong>USB LTE 模块</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$usb_modem</span>&quot;</span> = <span class=\"string\">&quot;true&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting lte modem configuration...&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果 <code>usb_modem=&quot;true&quot;</code>，表示启用了 USB LTE 模块，并打印提示信息。</li></ul></li><li><strong>ZeroTier 网络</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$use_zt</span>&quot;</span> = <span class=\"string\">&quot;true&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting ZeroTier-One daemon...&quot;</span></span><br><span class=\"line\">    zerotier-one -d &amp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! -f <span class=\"string\">&quot;/var/lib/zerotier-one/networks.d/<span class=\"variable\">$zt_netid</span>.conf&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">sleep</span> 8</span><br><span class=\"line\">        zerotier-cli <span class=\"built_in\">join</span> <span class=\"string\">&quot;<span class=\"variable\">$zt_netid</span>&quot;</span> &gt; /dev/null</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Don&#x27;t forget to authorize my.zerotier.com!&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果 <code>use_zt=&quot;true&quot;</code>，启动 ZeroTier 守护进程（<code>zerotier-one</code>）。</li><li>如果尚未加入指定的网络（<code>$zt_netid</code>），则等待 8 秒后尝试加入，并提醒用户在 ZeroTier 控制台授权设备。</li></ul></li><li><strong>遥测功能</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$telemetry</span>&quot;</span> = <span class=\"string\">&quot;true&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    telemetry start</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果 <code>telemetry=&quot;true&quot;</code>，启动遥测服务。</li></ul></li></ol></li></ul><hr><h4 id=\"4-启动分支\"><strong>4. 启动分支</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\tstart)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"subst\">$(fw_printenv -n wlandev)</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> [ ! -f /etc/system.ok ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\ttweaksys <span class=\"string\">&quot;<span class=\"variable\">$chip</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$fw</span>&quot;</span> = <span class=\"string\">&quot;lte&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\tstart_lte</span><br><span class=\"line\">\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting wifibroadcast service...&quot;</span></span><br><span class=\"line\">\t\twifibroadcast start</span><br><span class=\"line\">\t\t;;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>根据传入参数执行相应的操作。</li></ul></li><li><strong>逻辑分支</strong>：<ol><li><strong>检查无线设备</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"subst\">$(fw_printenv -n wlandev)</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果 U-Boot 环境变量中存在 <code>wlandev</code>，直接退出脚本。</li><li>这可能是因为无线设备已由其他脚本（如 <code>S40network</code>）处理。</li></ul></li><li><strong>系统初始化</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ ! -f /etc/system.ok ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    tweaksys <span class=\"string\">&quot;<span class=\"variable\">$chip</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果 <code>/etc/system.ok</code> 文件不存在，调用 <code>tweaksys</code> 函数对系统进行初始化。</li><li><code>tweaksys</code> 可能是一个自定义函数，用于调整系统配置以适配特定芯片。</li></ul></li><li><strong>启动 LTE 数据链路</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$fw</span>&quot;</span> = <span class=\"string\">&quot;lte&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    start_lte</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果 <code>BUILD_OPTION=lte</code>，调用 <code>start_lte</code> 函数启动 LTE 相关服务。</li></ul></li><li><strong>启动 Wi-Fi 广播</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting wifibroadcast service...&quot;</span></span><br><span class=\"line\">wifibroadcast start</span><br></pre></td></tr></table></figure><ul><li>启动 Wi-Fi 广播服务（<code>wifibroadcast</code>）。</li></ul></li></ol></li></ul><hr><h4 id=\"5-停止分支\"><strong>5. 停止分支</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">stop)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Stopping wifibroadcast service...&quot;</span></span><br><span class=\"line\">\twifibroadcast stop</span><br><span class=\"line\">\t;;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>停止 Wi-Fi 广播服务。</li></ul></li></ul><hr><h4 id=\"6-默认分支\"><strong>6. 默认分支</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">*)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop&#125;&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t;;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>如果传入参数无效，打印用法提示并退出。</li></ul></li></ul><hr><h3 id=\"总结\"><strong>总结</strong></h3><h4 id=\"核心功能\"><strong>核心功能</strong></h4><ol><li><strong>动态加载配置</strong>：<ul><li>根据 <code>/etc/datalink.conf</code> 文件的内容，决定启用哪些服务（如 LTE 模块、ZeroTier 网络、遥测功能）。</li></ul></li><li><strong>启动数据链路服务</strong>：<ul><li>包括 LTE 模块、ZeroTier 网络、Wi-Fi 广播等。</li></ul></li><li><strong>系统初始化</strong>：<ul><li>根据芯片型号调用 <code>tweaksys</code> 函数进行系统调整。</li></ul></li><li><strong>支持启动和停止操作</strong>：<ul><li>提供 <code>start</code> 和 <code>stop</code> 操作，分别用于启动和停止服务。</li></ul></li></ol><h4 id=\"运行流程\"><strong>运行流程</strong></h4><ol><li><strong>启动流程</strong>：<ul><li>检查无线设备是否存在。如果存在，直接退出。</li><li>如果系统未初始化，调用 <code>tweaksys</code> 函数。</li><li>根据 <code>BUILD_OPTION</code> 决定是否启动 LTE 数据链路。</li><li>启动 Wi-Fi 广播服务。</li></ul></li><li><strong>停止流程</strong>：<ul><li>停止 Wi-Fi 广播服务。</li></ul></li></ol><h4 id=\"适用场景\"><strong>适用场景</strong></h4><ul><li>该脚本适用于嵌入式设备（如 IP 摄像头或无人机）中管理数据链路服务。</li><li>它通过动态加载配置和硬件信息，灵活地支持多种网络和服务。</li></ul><hr>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S98vtun </summary>\n              <div class='content'>\n              <p>启动 <strong>vtun</strong>，这是一个虚拟隧道工具，通常用于建立加密隧道，这里没有用到</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" ><summary> S99rc.local </summary>\n              <div class='content'>\n              <p><strong>rc.local</strong> 是启动过程的最后一个步骤，通常用于执行最后的初始化任务或者自定义命令。系统初始化完成后，这里可以添加需要的启动命令，或者启动一些不属于其他服务的应用。</p>\n              </div>\n            </details>\n<h5 id=\"工作流：\">工作流：</h5>\n<ol>\n<li><strong>系统初始化阶段</strong>：<code>rcS</code> 脚本会启动，并执行一些基础的系统配置，包括随机数生成、日志守护进程、内核参数配置等。</li>\n<li><strong>服务启动</strong>：之后，系统会依次启动一些基本的服务，如内核模块加载、设备管理、网络配置、时间同步等。</li>\n<li><strong>特定应用和服务</strong>：进入更具体的应用服务启动，如SSH服务、定时任务、供应商服务、特定功能应用等。</li>\n<li><strong>最后的清理和自定义配置</strong>：<code>rc.local</code> 负责执行最后的清理、日志保存、或者启动一些额外的定制化服务。</li>\n</ol>\n<h5 id=\"天空端启动总结\">天空端启动总结</h5>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">/etc/init.d/rcS</span><br><span class=\"line\"> ├──&gt; S30customizer</span><br><span class=\"line\"> │   ├──&gt; /usr/share/openipc/customizer.sh</span><br><span class=\"line\"> │   └──&gt; sh /usr/share/openipc/wireless.sh</span><br><span class=\"line\"> ├──&gt; S98datalink</span><br><span class=\"line\"> │   ├──&gt; tweaksys ssc33x  // configure majestic, h265, <span class=\"number\">1080</span>p, udp://<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">5600</span></span><br><span class=\"line\"> │   └──&gt; wifibroadcast <span class=\"built_in\">start</span></span><br><span class=\"line\"> │       ├──&gt; [<span class=\"type\">video</span>]  // udp_port == <span class=\"number\">5600</span></span><br><span class=\"line\"> │       │   └──&gt; wfb_tx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$udp_port</span>&quot;</span> <span class=\"literal\">-R</span> <span class=\"string\">&quot;<span class=\"variable\">$rcv_buf</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-B</span> <span class=\"string\">&quot;<span class=\"variable\">$bandwidth</span>&quot;</span> \\</span><br><span class=\"line\"> │       │           <span class=\"literal\">-M</span> <span class=\"string\">&quot;<span class=\"variable\">$mcs_index</span>&quot;</span> <span class=\"literal\">-S</span> <span class=\"string\">&quot;<span class=\"variable\">$stbc</span>&quot;</span> <span class=\"literal\">-L</span> <span class=\"string\">&quot;<span class=\"variable\">$ldpc</span>&quot;</span> <span class=\"literal\">-G</span> <span class=\"string\">&quot;<span class=\"variable\">$guard_interval</span>&quot;</span> <span class=\"literal\">-k</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_k</span>&quot;</span> <span class=\"literal\">-n</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_n</span>&quot;</span> \\</span><br><span class=\"line\"> │       │           <span class=\"literal\">-T</span> <span class=\"string\">&quot;<span class=\"variable\">$pool_timeout</span>&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"operator\">-f</span> <span class=\"string\">&quot;<span class=\"variable\">$frame_type</span>&quot;</span> <span class=\"literal\">-C</span> <span class=\"number\">8000</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\"> │       └──&gt; telemetry <span class=\"built_in\">start</span>  // telemetry_rx == wfb_rx, telemetry_tx == wfb_tx, port_rx == <span class=\"number\">14551</span>, port_tx == <span class=\"number\">14550</span></span><br><span class=\"line\"> │           ├──&gt; mavfwd <span class=\"literal\">--channels</span> <span class=\"string\">&quot;<span class=\"variable\">$channels</span>&quot;</span> <span class=\"literal\">--master</span> <span class=\"string\">&quot;<span class=\"variable\">$serial</span>&quot;</span> <span class=\"literal\">--baudrate</span> <span class=\"string\">&quot;<span class=\"variable\">$baud</span>&quot;</span> <span class=\"literal\">-p</span> <span class=\"number\">100</span> <span class=\"literal\">-t</span> <span class=\"literal\">-a</span> <span class=\"string\">&quot;<span class=\"variable\">$aggregate</span>&quot;</span> \\</span><br><span class=\"line\"> │           │           <span class=\"literal\">--out</span> <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"variable\">$port_tx</span> <span class=\"literal\">--in</span> <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"variable\">$port_rx</span> &gt; /dev/null &amp;</span><br><span class=\"line\"> │           ├──&gt; telemetry_rx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream_rx</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$port_rx</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\"> │           └──&gt; telemetry_tx <span class=\"literal\">-p</span> <span class=\"string\">&quot;<span class=\"variable\">$stream_tx</span>&quot;</span> <span class=\"literal\">-u</span> <span class=\"string\">&quot;<span class=\"variable\">$port_tx</span>&quot;</span> <span class=\"literal\">-K</span> <span class=\"string\">&quot;<span class=\"variable\">$keydir</span>/<span class=\"variable\">$unit</span>.key&quot;</span> <span class=\"literal\">-B</span> <span class=\"string\">&quot;<span class=\"variable\">$bandwidth</span>&quot;</span> \\</span><br><span class=\"line\"> │                             <span class=\"literal\">-M</span> <span class=\"string\">&quot;<span class=\"variable\">$mcs_index</span>&quot;</span> <span class=\"literal\">-S</span> <span class=\"string\">&quot;<span class=\"variable\">$stbc</span>&quot;</span> <span class=\"literal\">-L</span> <span class=\"string\">&quot;<span class=\"variable\">$ldpc</span>&quot;</span> <span class=\"literal\">-G</span> <span class=\"string\">&quot;<span class=\"variable\">$guard_interval</span>&quot;</span> <span class=\"literal\">-k</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_k</span>&quot;</span> <span class=\"literal\">-n</span> <span class=\"string\">&quot;<span class=\"variable\">$fec_n</span>&quot;</span> \\</span><br><span class=\"line\"> │                             <span class=\"literal\">-T</span> <span class=\"string\">&quot;<span class=\"variable\">$pool_timeout</span>&quot;</span> <span class=\"literal\">-i</span> <span class=\"string\">&quot;<span class=\"variable\">$link_id</span>&quot;</span> <span class=\"operator\">-f</span> <span class=\"string\">&quot;<span class=\"variable\">$frame_type</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$wlan</span>&quot;</span> &gt; /dev/null &amp;</span><br><span class=\"line\"> └──&gt; S95majestic</span><br></pre></td></tr></table></figure>\n<p>.bin文件角色：作为固件被内核加载，初始化摄像头硬件。</p>\n<p>数据流路径：摄像头 → 内核驱动（通过固件） → /dev/video0节点 → 用户空间应用（通过V4L2接口）。</p>\n<p>关键检查点：设备节点存在性、内核日志中的固件加载记录、V4L2工具（如v4l2-ctl）测试。</p>\n<h2 id=\"地面站选择\">地面站选择</h2>\n<h3 id=\"虚拟机Ubuntu\">虚拟机Ubuntu</h3>\n<h3 id=\"泰山派Android系统\">泰山派Android系统</h3>\n<h3 id=\"泰山派Ubuntu\">泰山派Ubuntu</h3>\n<h3 id=\"算力版jetson\">算力版jetson</h3>\n<h3 id=\"ROS端部署：\">ROS端部署：</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">startCamera</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcv::VideoCapture cap;</span><br><span class=\"line\">\tcap.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;clip.mp4&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\tcv::Mat frame;</span><br><span class=\"line\">\t\t<span class=\"comment\">//方法一：&gt;&gt;析取器</span></span><br><span class=\"line\">\t\tcap &gt;&gt; frame;  <span class=\"comment\">//每个循环从cap中解析一帧，赋给frame, </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cv::imshow(&quot;frame&quot;, frame);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//cv::waitKey(1);</span></span><br><span class=\"line\">\t\tstd::cout&lt;&lt;<span class=\"string\">&quot;frame :&quot;</span>&lt;&lt;frame.cols&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;frame.rows&lt;&lt;std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcap.<span class=\"built_in\">release</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">startGStream</span><span class=\"params\">(std::string gst_src)</span> </span>&#123;</span><br><span class=\"line\">\tcv::VideoCapture cap;</span><br><span class=\"line\">\t<span class=\"comment\">// &quot;rtspsrc location=rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream latency=4000 ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! appsink&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// &quot;filesrc location=clip.mp4 ! qtdemux ! h264parse ! omxh264dec ! nvvidconv ! appsink&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// &quot;v4l2src device=/dev/video0 ! video/x-raw, width=1280, height=720 ! videoconvert ! appsink&quot;</span></span><br><span class=\"line\">\tcap.<span class=\"built_in\">open</span>(gst_src, cv::CAP_GSTREAMER);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\tcv::Mat frame;</span><br><span class=\"line\">\t\t<span class=\"comment\">//方法一：&gt;&gt;析取器</span></span><br><span class=\"line\">\t\tcap &gt;&gt; frame;  <span class=\"comment\">//每个循环从cap中解析一帧，赋给frame, </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cv::imshow(&quot;frame&quot;, frame);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//cv::waitKey(1);</span></span><br><span class=\"line\">\t\tstd::cout&lt;&lt;<span class=\"string\">&quot;frame :&quot;</span>&lt;&lt;frame.cols&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;frame.rows&lt;&lt;std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcap.<span class=\"built_in\">release</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// &quot;rtspsrc location=rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream latency=4000 ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! appsink&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;filesrc location=clip.mp4 ! qtdemux ! h264parse ! omxh264dec ! nvvidconv ! appsink&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;v4l2src device=/dev/video0 ! video/x-raw, width=1280, height=720 ! videoconvert ! appsink&quot;</span></span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">get_rtsp_h264_gst</span><span class=\"params\">(std::string rtsp_uri, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height, <span class=\"type\">int</span> latency)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::string gst_str = <span class=\"string\">&quot;rtspsrc location=&quot;</span> + rtsp_uri+ <span class=\"string\">&quot; latency=&quot;</span>+ std::<span class=\"built_in\">to_string</span>(latency)+ <span class=\"string\">&quot; ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=&quot;</span>+std::<span class=\"built_in\">to_string</span>(width)+<span class=\"string\">&quot;, height=&quot;</span>+std::<span class=\"built_in\">to_string</span>(height)+<span class=\"string\">&quot;, format=BGRx ! videoconvert ! appsink&quot;</span>;</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot;gst:&quot;</span>&lt;&lt;gst_str&lt;&lt;<span class=\"string\">&quot;:&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gst_str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">get_rtsp_h265_gst</span><span class=\"params\">(std::string rtsp_uri, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height, <span class=\"type\">int</span> latency)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::string gst_str = <span class=\"string\">&quot;rtspsrc location=&quot;</span> + rtsp_uri+ <span class=\"string\">&quot; latency=&quot;</span>+ std::<span class=\"built_in\">to_string</span>(latency)+ <span class=\"string\">&quot; ! rtph265depay ! h265parse ! omxh265dec ! nvvidconv !  video/x-raw, width=&quot;</span>+std::<span class=\"built_in\">to_string</span>(width)+<span class=\"string\">&quot;, height=&quot;</span>+std::<span class=\"built_in\">to_string</span>(height)+<span class=\"string\">&quot;, format=BGRx ! videoconvert ! appsink&quot;</span>;</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot;gst:&quot;</span>&lt;&lt;gst_str&lt;&lt;<span class=\"string\">&quot;:&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gst_str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">get_mp4_h264_gst</span><span class=\"params\">(std::string file_name, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::string gst_str = <span class=\"string\">&quot;filesrc location=&quot;</span> + file_name+ <span class=\"string\">&quot; ! qtdemux ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=&quot;</span>+std::<span class=\"built_in\">to_string</span>(width)+<span class=\"string\">&quot;, height=&quot;</span>+std::<span class=\"built_in\">to_string</span>(height)+<span class=\"string\">&quot;, format=BGRx ! videoconvert ! appsink&quot;</span>;</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot;gst:&quot;</span>&lt;&lt;gst_str&lt;&lt;<span class=\"string\">&quot;:&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gst_str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">get_v4l2_gst</span><span class=\"params\">(std::string device_id, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::string gst_str = <span class=\"string\">&quot;v4l2src device=&quot;</span> + device_id+ <span class=\"string\">&quot; !  video/x-raw, width=&quot;</span>+std::<span class=\"built_in\">to_string</span>(width)+<span class=\"string\">&quot;, height=&quot;</span>+std::<span class=\"built_in\">to_string</span>(height)+<span class=\"string\">&quot;, format=BGRx ! videoconvert ! appsink&quot;</span>;</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot;gst:&quot;</span>&lt;&lt;gst_str&lt;&lt;<span class=\"string\">&quot;:&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gst_str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">startGStream</span><span class=\"params\">(std::string rtsp_uri, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height, <span class=\"type\">int</span> latency)</span> </span>&#123;</span><br><span class=\"line\">\tstd::string gst_str = <span class=\"built_in\">get_rtsp_h264_gst</span>(rtsp_uri, width, height, latency);</span><br><span class=\"line\">start:</span><br><span class=\"line\">\tcv::VideoCapture capture;</span><br><span class=\"line\">\tcapture.<span class=\"built_in\">open</span>(gst_str, cv::CAP_GSTREAMER);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\tcv::Mat frame;</span><br><span class=\"line\">\t\t<span class=\"comment\">//方法一：&gt;&gt;析取器</span></span><br><span class=\"line\">\t\tcapture &gt;&gt; frame;  <span class=\"comment\">//每个循环从cap中解析一帧，赋给frame, </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cv::imshow(&quot;frame&quot;, frame);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//cv::waitKey(1);</span></span><br><span class=\"line\">\t\tstd::cout&lt;&lt;<span class=\"string\">&quot;frame :&quot;</span>&lt;&lt;frame.cols&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;frame.rows&lt;&lt;std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tcapture.<span class=\"built_in\">release</span>();</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot; ...................................................release &quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">//std::string gst_src = &quot;rtspsrc location=rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream latency=4000 ! rtph264depay ! h264parse ! omxh264dec ! nvvidconv !  video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! appsink&quot;;</span></span><br><span class=\"line\">\t<span class=\"comment\">// if (argc &gt; 1)&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// \tgst_src = argv[1];</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#125;</span></span><br><span class=\"line\">\t<span class=\"comment\">// startGStream(gst_src);</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\tstd::string file_src = <span class=\"string\">&quot;rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> width = <span class=\"number\">1280</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> height = <span class=\"number\">720</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> latency = <span class=\"number\">5000</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (argc &gt; <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">\t\tfile_src = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\twidth = <span class=\"built_in\">atoi</span>(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t\theight = <span class=\"built_in\">atoi</span>(argv[<span class=\"number\">3</span>]);</span><br><span class=\"line\">\t\tlatency = <span class=\"built_in\">atoi</span>(argv[<span class=\"number\">4</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">startGStream</span>(file_src, width, height, latency);</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot;finished.&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>配合ROS实现</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ros/ros.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sensor_msgs/Image.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cv_bridge/cv_bridge.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;image_transport/image_transport.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;atomic&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OpenCVGStreamerNode</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">OpenCVGStreamerNode</span>(ros::NodeHandle&amp; nh) : <span class=\"built_in\">it</span>(nh), <span class=\"built_in\">running</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从参数服务器获取 GStreamer 管道配置</span></span><br><span class=\"line\">        nh.<span class=\"built_in\">param</span>&lt;std::string&gt;(<span class=\"string\">&quot;gstreamer_pipeline&quot;</span>, gstreamer_pipeline,</span><br><span class=\"line\">                               <span class=\"string\">&quot;udpsrc port=5600 caps=&#x27;application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265&#x27; ! rtph265depay ! h265parse ! mppvideodec ! videoconvert ! appsink&quot;</span>);</span><br><span class=\"line\">        nh.<span class=\"built_in\">param</span>&lt;std::string&gt;(<span class=\"string\">&quot;output_topic&quot;</span>, output_topic, <span class=\"string\">&quot;/openipc_camera/image&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发布图像话题</span></span><br><span class=\"line\">        image_pub = it.<span class=\"built_in\">advertise</span>(output_topic, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动图像捕获线程</span></span><br><span class=\"line\">        capture_thread = std::<span class=\"built_in\">thread</span>(&amp;OpenCVGStreamerNode::captureImages, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">OpenCVGStreamerNode</span>() &#123;</span><br><span class=\"line\">        running = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (capture_thread.<span class=\"built_in\">joinable</span>()) &#123;</span><br><span class=\"line\">            capture_thread.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">captureImages</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 GStreamer 管道配置初始化 VideoCapture</span></span><br><span class=\"line\">        <span class=\"function\">cv::VideoCapture <span class=\"title\">cap</span><span class=\"params\">(gstreamer_pipeline, cv::CAP_GSTREAMER)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cap.<span class=\"built_in\">isOpened</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">ROS_ERROR</span>(<span class=\"string\">&quot;Failed to open video stream using GStreamer pipeline: %s&quot;</span>, gstreamer_pipeline.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cv::Mat frame;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (running) &#123;</span><br><span class=\"line\">            cap &gt;&gt; frame;  <span class=\"comment\">// 从视频流捕获一帧</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (frame.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">ROS_WARN</span>(<span class=\"string\">&quot;Received empty frame from video stream&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将 OpenCV 图像转换为 ROS 图像消息</span></span><br><span class=\"line\">            sensor_msgs::ImagePtr msg = cv_bridge::<span class=\"built_in\">CvImage</span>(std_msgs::<span class=\"built_in\">Header</span>(), <span class=\"string\">&quot;bgr8&quot;</span>, frame).<span class=\"built_in\">toImageMsg</span>();</span><br><span class=\"line\">            image_pub.<span class=\"built_in\">publish</span>(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image_transport::ImageTransport it_;</span><br><span class=\"line\">    image_transport::Publisher image_pub_;</span><br><span class=\"line\">    std::string gstreamer_pipeline;</span><br><span class=\"line\">    std::string output_topic;</span><br><span class=\"line\">    std::thread capture_thread;</span><br><span class=\"line\">    std::atomic&lt;<span class=\"type\">bool</span>&gt; running;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    ros::<span class=\"built_in\">init</span>(argc, argv, <span class=\"string\">&quot;opencv_gstreamer_node&quot;</span>);</span><br><span class=\"line\">    ros::NodeHandle nh;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建 OpenCV GStreamer 节点</span></span><br><span class=\"line\">    <span class=\"function\">OpenCVGStreamerNode <span class=\"title\">opencv_gstreamer_node</span><span class=\"params\">(nh)</span></span>;</span><br><span class=\"line\">    ros::<span class=\"built_in\">spin</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ros/ros.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sensor_msgs/Image.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cv_bridge/cv_bridge.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;image_transport/image_transport.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;atomic&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OpenCVGStreamerNode</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">OpenCVGStreamerNode</span>(ros::NodeHandle&amp; nh) : <span class=\"built_in\">it</span>(nh), <span class=\"built_in\">running</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从参数服务器获取 GStreamer 管道配置</span></span><br><span class=\"line\">        nh.<span class=\"built_in\">param</span>&lt;std::string&gt;(<span class=\"string\">&quot;gstreamer_pipeline&quot;</span>, gstreamer_pipeline,</span><br><span class=\"line\">                               <span class=\"string\">&quot;udpsrc port=5600 caps=&#x27;application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265&#x27; ! rtph265depay ! h265parse ! nvv4l2decoder ! nv3dsink -e&quot;</span>);</span><br><span class=\"line\">        nh.<span class=\"built_in\">param</span>&lt;std::string&gt;(<span class=\"string\">&quot;output_topic&quot;</span>, output_topic, <span class=\"string\">&quot;/openipc_camera/image&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发布图像话题</span></span><br><span class=\"line\">        image_pub_ = it_.<span class=\"built_in\">advertise</span>(output_topic, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动图像捕获线程</span></span><br><span class=\"line\">        capture_thread = std::<span class=\"built_in\">thread</span>(&amp;OpenCVGStreamerNode::captureImages, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">OpenCVGStreamerNode</span>() &#123;</span><br><span class=\"line\">        running = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (capture_thread.<span class=\"built_in\">joinable</span>()) &#123;</span><br><span class=\"line\">            capture_thread.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">captureImages</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 GStreamer 管道配置初始化 VideoCapture</span></span><br><span class=\"line\">        <span class=\"function\">cv::VideoCapture <span class=\"title\">cap</span><span class=\"params\">(gstreamer_pipeline, cv::CAP_GSTREAMER)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cap.<span class=\"built_in\">isOpened</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">ROS_ERROR</span>(<span class=\"string\">&quot;Failed to open video stream using GStreamer pipeline: %s&quot;</span>, gstreamer_pipeline.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cv::Mat frame;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (running) &#123;</span><br><span class=\"line\">            cap &gt;&gt; frame;  <span class=\"comment\">// 从视频流捕获一帧</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (frame.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">ROS_WARN</span>(<span class=\"string\">&quot;Received empty frame from video stream&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将 OpenCV 图像转换为 ROS 图像消息</span></span><br><span class=\"line\">            sensor_msgs::ImagePtr msg = cv_bridge::<span class=\"built_in\">CvImage</span>(std_msgs::<span class=\"built_in\">Header</span>(), <span class=\"string\">&quot;bgr8&quot;</span>, frame).<span class=\"built_in\">toImageMsg</span>();</span><br><span class=\"line\">            image_pub_.<span class=\"built_in\">publish</span>(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image_transport::ImageTransport it_;</span><br><span class=\"line\">    image_transport::Publisher image_pub_;</span><br><span class=\"line\">    std::string gstreamer_pipeline;</span><br><span class=\"line\">    std::string output_topic;</span><br><span class=\"line\">    std::thread capture_thread;</span><br><span class=\"line\">    std::atomic&lt;<span class=\"type\">bool</span>&gt; running;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    ros::<span class=\"built_in\">init</span>(argc, argv, <span class=\"string\">&quot;opencv_gstreamer_node&quot;</span>);</span><br><span class=\"line\">    ros::NodeHandle nh;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建 OpenCV GStreamer 节点</span></span><br><span class=\"line\">    <span class=\"function\">OpenCVGStreamerNode <span class=\"title\">opencv_gstreamer_node</span><span class=\"params\">(nh)</span></span>;</span><br><span class=\"line\">    ros::<span class=\"built_in\">spin</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"arm架构","abbrlink":53135,"date":"2025-02-12T09:11:58.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqtdks-0.webp","swiper_index":null,"_content":"\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n{% link 参考文章, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %} \n\n# ARM\n[ARM1 CPU内部运行的原理图](http://visual6502.org/sim/varm/armgl.html)\nARM架构，过去称作高级精简指令集机器，是一个精简指令集（RISC）处理器架构家族，其广泛地使用在许多嵌入式系统设计。由于节能的特点，其在其他领域上也有很多作为。ARM处理器非常适用于移动通信领域，符合其主要设计目标为低成本、高性能、低耗电的特性。另一方面，超级计算机消耗大量电能，ARM同样被视作更高效的选择。\n\nARM架构版本从ARMv3到ARMv7支持32位空间和32位算数运算，大部分架构的指令为定长32位（Thumb）指令集支持变长的指令集，提供对32位和16位指令集的支持），而2011年发布的ARMv8-A架构添加了对64位空间和64位算术运算的支持，同时也更新了32位定长指令集\n\n至2009年为止，ARM架构处理器占市面上所有32位嵌入式RISC处理器90%的比例[5]，使它成为占全世界最多数的32位架构。\n\n## 产品系列\n![系列](https://image.aruoshui.fun/i/2025/02/12/z0rbp2-0.webp)\nA - 多运行Linux系统\nM - 多用于单片机\n\n![处理器内核版本发布时间](https://image.aruoshui.fun/i/2025/02/12/skc2a0-0.webp)\n\n# ARMv7嵌入式SOC架构框图\n\n![框图](https://image.aruoshui.fun/i/2025/02/12/snbg3v-0.webp)\n\n# ARMv8嵌入式SOC架构框图\n![框图](https://image.aruoshui.fun/i/2025/02/12/srnp05-0.webp)","source":"_posts/arm架构.md","raw":"---\ntitle: arm架构\nabbrlink: 53135\ndate: 2025-02-12 17:11:58\ntags:\ndescription:\ncategories:\ncover:\nswiper_index:\n---\n\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n{% link 参考文章, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %} \n\n# ARM\n[ARM1 CPU内部运行的原理图](http://visual6502.org/sim/varm/armgl.html)\nARM架构，过去称作高级精简指令集机器，是一个精简指令集（RISC）处理器架构家族，其广泛地使用在许多嵌入式系统设计。由于节能的特点，其在其他领域上也有很多作为。ARM处理器非常适用于移动通信领域，符合其主要设计目标为低成本、高性能、低耗电的特性。另一方面，超级计算机消耗大量电能，ARM同样被视作更高效的选择。\n\nARM架构版本从ARMv3到ARMv7支持32位空间和32位算数运算，大部分架构的指令为定长32位（Thumb）指令集支持变长的指令集，提供对32位和16位指令集的支持），而2011年发布的ARMv8-A架构添加了对64位空间和64位算术运算的支持，同时也更新了32位定长指令集\n\n至2009年为止，ARM架构处理器占市面上所有32位嵌入式RISC处理器90%的比例[5]，使它成为占全世界最多数的32位架构。\n\n## 产品系列\n![系列](https://image.aruoshui.fun/i/2025/02/12/z0rbp2-0.webp)\nA - 多运行Linux系统\nM - 多用于单片机\n\n![处理器内核版本发布时间](https://image.aruoshui.fun/i/2025/02/12/skc2a0-0.webp)\n\n# ARMv7嵌入式SOC架构框图\n\n![框图](https://image.aruoshui.fun/i/2025/02/12/snbg3v-0.webp)\n\n# ARMv8嵌入式SOC架构框图\n![框图](https://image.aruoshui.fun/i/2025/02/12/srnp05-0.webp)","slug":"arm架构","published":1,"updated":"2025-02-12T14:22:21.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6iny000ymktt9vw108m3","content":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<h1>ARM</h1>\n<p><a href=\"http://visual6502.org/sim/varm/armgl.html\">ARM1 CPU内部运行的原理图</a><br>\nARM架构，过去称作高级精简指令集机器，是一个精简指令集（RISC）处理器架构家族，其广泛地使用在许多嵌入式系统设计。由于节能的特点，其在其他领域上也有很多作为。ARM处理器非常适用于移动通信领域，符合其主要设计目标为低成本、高性能、低耗电的特性。另一方面，超级计算机消耗大量电能，ARM同样被视作更高效的选择。</p>\n<p>ARM架构版本从ARMv3到ARMv7支持32位空间和32位算数运算，大部分架构的指令为定长32位（Thumb）指令集支持变长的指令集，提供对32位和16位指令集的支持），而2011年发布的ARMv8-A架构添加了对64位空间和64位算术运算的支持，同时也更新了32位定长指令集</p>\n<p>至2009年为止，ARM架构处理器占市面上所有32位嵌入式RISC处理器90%的比例[5]，使它成为占全世界最多数的32位架构。</p>\n<h2 id=\"产品系列\">产品系列</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/z0rbp2-0.webp\" alt=\"系列\"><br>\nA - 多运行Linux系统<br>\nM - 多用于单片机</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/skc2a0-0.webp\" alt=\"处理器内核版本发布时间\"></p>\n<h1>ARMv7嵌入式SOC架构框图</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/snbg3v-0.webp\" alt=\"框图\"></p>\n<h1>ARMv8嵌入式SOC架构框图</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/srnp05-0.webp\" alt=\"框图\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<h1>ARM</h1>\n<p><a href=\"http://visual6502.org/sim/varm/armgl.html\">ARM1 CPU内部运行的原理图</a><br>\nARM架构，过去称作高级精简指令集机器，是一个精简指令集（RISC）处理器架构家族，其广泛地使用在许多嵌入式系统设计。由于节能的特点，其在其他领域上也有很多作为。ARM处理器非常适用于移动通信领域，符合其主要设计目标为低成本、高性能、低耗电的特性。另一方面，超级计算机消耗大量电能，ARM同样被视作更高效的选择。</p>\n<p>ARM架构版本从ARMv3到ARMv7支持32位空间和32位算数运算，大部分架构的指令为定长32位（Thumb）指令集支持变长的指令集，提供对32位和16位指令集的支持），而2011年发布的ARMv8-A架构添加了对64位空间和64位算术运算的支持，同时也更新了32位定长指令集</p>\n<p>至2009年为止，ARM架构处理器占市面上所有32位嵌入式RISC处理器90%的比例[5]，使它成为占全世界最多数的32位架构。</p>\n<h2 id=\"产品系列\">产品系列</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/z0rbp2-0.webp\" alt=\"系列\"><br>\nA - 多运行Linux系统<br>\nM - 多用于单片机</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/skc2a0-0.webp\" alt=\"处理器内核版本发布时间\"></p>\n<h1>ARMv7嵌入式SOC架构框图</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/snbg3v-0.webp\" alt=\"框图\"></p>\n<h1>ARMv8嵌入式SOC架构框图</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/12/srnp05-0.webp\" alt=\"框图\"></p>\n"},{"title":"ROS_BEVDet开发日记","description":"本文用于记录BEVDet在ROS上部署的开发日志","cover":"https://image.aruoshui.fun/i/2024/12/31/vsl54c-0.webp","password":"bevdet","abstract":"有东西被加密了, 请输入密码查看.","message":"您好, 这里需要密码.","theme":"xray","wrong_pass_message":"抱歉, 这个密码看着不太对, 请再试试.","wrong_hash_message":"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.","swiper_index":5,"abbrlink":14994,"date":"2024-05-27T07:06:24.000Z","_content":"\n{% timeline 开发跟踪日志,blue %}\n\n<!-- timeline 2024/5/18 -->\n于jetson orin nano板子上部署好ROS_BVEDet环境，TensorRT部署\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/19 -->\n模型Onnx转换，跑通ROS结点，完成推理\n \n ![结果](/img/1.gif)\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/24 -->\n考试周项目延期\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/27 -->\nBEVDet源码关于图像接口已经阅读完毕，正在进行摄像头的接入工作（修改之前写好的结点），由于项目的依赖关系，需要另外阅读学习，对其中数据包进行深入学习，其中有：\n{% note info flat %}\n参考：[BEVDet by TensorRT、C++](https://github.com/LCH1238/bevdet-tensorrt-cpp)\n项目特色：\n- 结合了调整大小、裁剪和归一化进行预处理的 CUDA 内核\n- 预处理 CUDA 内核包括两种插值方法：最近邻插值和双三次插值\n- 使用 C++ 和 CUDA 内核实现对齐相邻帧 BEV 特征\n{% endnote %}\n\n{% note info flat %}\n参考：[BEVDet-ROS-TensorRT工程实现](https://github.com/linClubs/BEVDet-ROS-TensorRT)\n项目特色：\n- 使用 CUDA、TensorRT、ROS1 和 C++ 进行 BEVDet 在线实时推理的源代码和模型。\n{% endnote %}\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/28 -->\n阅读了bevdet-tensort-cpp-master文件中的bevdet.cpp文件\n此文件中主要是各种引擎，参数的初始化以及部分的处理图像\n图像处理主要是再两个函数：\n    读取相机数据（从文件中读取？！（待定））以及对齐图片，处理矩阵都是函数InitParams\n    预处理、特征提取、BEV特征池化、特征对齐（可选）、BEV阶段网络前向传播以及后处理是DoInfer函数\n[步骤 1] : 预处理图像，包括调整大小、裁剪和归一化\n```cpp\n    CHECK_CUDA(cudaMemcpy(src_imgs_dev, cam_data.imgs_dev,\n        N_img * src_img_h * src_img_w * 3 * sizeof(uchar), cudaMemcpyDeviceToDevice));\n\n    preprocess(src_imgs_dev, (float*)imgstage_buffer[imgbuffer_map[\"images\"]], N_img, src_img_h, src_img_w,\n               input_img_h, input_img_w, resize_radio, resize_radio, crop_h, crop_w, mean, std, pre_sample);\n\n    // 初始化深度信息\n    InitDepth(cam_data.param.cams2ego_rot, cam_data.param.cams2ego_trans, cam_data.param.cams_intrin);\n\n```\n[步骤 2] : 图像阶段网络前向传递\n```cpp\n    cudaStream_t stream;\n    CHECK_CUDA(cudaStreamCreate(&stream));\n    if(!imgstage_context->enqueueV2(imgstage_buffer, stream, nullptr)){\n        printf(\"Image stage forward failing!\\n\");\n    }\n```\n [步骤 3] : BEV池化\n```cpp\n    bev_pool_v2(bevpool_channel, unique_bev_num, bev_h * bev_w,\n                (float*)imgstage_buffer[imgbuffer_map[\"depth\"]],\n                (float*)imgstage_buffer[imgbuffer_map[\"images_feat\"]],\n                ranks_depth_dev, ranks_feat_dev, ranks_bev_dev,\n                interval_starts_dev, interval_lengths_dev,\n                (float*)bevstage_buffer[bevbuffer_map[\"BEV_feat\"]]\n                );\n```\n[步骤 4] : 对齐 BEV 特征\n```cpp\n    if(use_adj){\n        GetAdjFrameFeature(cam_data.param.scene_token, cam_data.param.ego2global_rot,\n                           cam_data.param.ego2global_trans, (float*)bevstage_buffer[bevbuffer_map[\"BEV_feat\"]]);\n        // 同步 CUDA 设备\n        CHECK_CUDA(cudaDeviceSynchronize());\n    }\n```\n[步骤 5] : BEV阶段网络前向传递\n```cpp\n    if(!bevstage_context->enqueueV2(bevstage_buffer, stream, nullptr)){\n        printf(\"BEV stage forward failing!\\n\");\n    }\n```\n[步骤 6] : 后处理\n```cpp\n    postprocess_ptr->DoPostprocess(bevstage_buffer, out_detections);\n```\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/29 -->\n阅读了`bevdet-tensort-cpp-master`文件中的`nvjpegdecoder.cpp`文件\n此文件主要用于图像解码\n对`Jpeg`图像进行解码\n\n阅读了`bevdet-tensort-cpp-master`文件中的`cpu_jpegdecoder.cpp`文件\n此文件主要用于图像输出\n将`Jpeg`压缩图像转化为Reg可是图像\n\n阅读了`bevdet-tensort-cpp-master`文件中的`data.cpp`文件\n此文件主要用于获取数据和是数据处理\n此文件获取数据是从{%span red,yaml%}文件中获取\n\n完成了对`bevdet-tensort-cpp-master`文件主要代码的阅读\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/30 -->\n### 开始阅读BEVDet-Ros-TensorRT-main文件：\n    此文件是基于bevdet-tensort-cpp-master上与ros的结合，所以此文件的src文件与cpp相同，作用也相同\n    所以需要看./test部分\n\n./test/01test.cpp文件中\n    此文件主要为测试单个样例\n    其中值得关注部分为Egobox2Lidarbox函数\n    此函数的目的是\n    1. 将盒子的中心从自车坐标系转换到激光雷达坐标系。\n    2. 使用激光雷达到自车的旋转矩阵和平移向量对盒子进行旋转和平移变换。\n    3. 将变换后的盒子添加到激光雷达坐标系的盒子集合中。\n\n```cpp\nvoid Egobox2Lidarbox(const std::vector<Box>& ego_boxes, \n                     std::vector<Box>& lidar_boxes,\n                     const Eigen::Quaternion<float>& lidar2ego_rot,\n                     const Eigen::Translation3f& lidar2ego_trans){\n    // 遍历所有的自车框 ego_boxes\n    for(size_t i = 0; i < ego_boxes.size(); i++){\n        // 复制当前自车框\n        Box b = ego_boxes[i];\n        // 提取当前框的中心点坐标\n        Eigen::Vector3f center(b.x, b.y, b.z);\n        // 将中心点从自车坐标系转换到激光雷达坐标系\n        center -= lidar2ego_trans.translation();\n        center = lidar2ego_rot.inverse().matrix() * center;\n        // 调整框的旋转角度以匹配激光雷达坐标系\n        b.r -= lidar2ego_rot.matrix().eulerAngles(0, 1, 2).z();\n        // 更新框的位置到激光雷达坐标系\n        b.x = center.x();\n        b.y = center.y();\n        b.z = center.z();\n        // 将转换后的框添加到输出容器 lidar_boxes 中\n        lidar_boxes.push_back(b);\n    }\n}\n```\n`./test/demo_bevdet.cpp`文件\n    此文件是01test的一个demo，可以运行测试一个关键帧\n\n`./test/view.cpp`文件\n    此文件是一个视图文件，和demo没有很大区别\n\n重点：\n    `./test/view.cpp`文件\n        在这个文件中找到了发布订阅消息的部分\n         处理来自多个传感器的数据，执行图像处理和目标检测，并将结果发布到 ROS 话题中。\n             1. 将接收到的点云数据转换为 PCL 中的点云格式。\n             2. 将接收到的图像数据转换为 OpenCV 的图像格式，并存储在一个向量中。\n             3. 将图像数据从 CPU 拷贝到 GPU，并进行通道转换。\n             4. 进行推理，使用深度学习模型对图像数据进行检测，得到一些边界框。\n             5. 将检测到的边界框从车辆坐标系转换到雷达坐标系。\n             6. 发布转换后的边界框消息和点云消息到 ROS。 \n   \n```cpp\nvoid RosNode::callback(const sensor_msgs::PointCloud2ConstPtr& msg_cloud, \n    const sensor_msgs::ImageConstPtr& msg_fl_img,\n    const sensor_msgs::ImageConstPtr& msg_f_img,\n    const sensor_msgs::ImageConstPtr& msg_fr_img,\n    const sensor_msgs::ImageConstPtr& msg_bl_img,\n    const sensor_msgs::ImageConstPtr& msg_b_img,\n    const sensor_msgs::ImageConstPtr& msg_br_img)\n{   \n    // 创建一个指向 PCL 点云的指针\n    pcl::PointCloud<PointT>::Ptr cloud(new pcl::PointCloud<PointT>);\n    \n    // 将 ROS 中的点云消息转换为 PCL 点云格式\n    pcl::fromROSMsg(*msg_cloud, *cloud);\n   \n    // 创建用于存储图像的 OpenCV Mat 对象\n    cv::Mat img_fl, img_f, img_fr, img_bl, img_b, img_br;\n    std::vector<cv::Mat> imgs;\n\n    // 将 ROS 中的图像消息转换为 OpenCV 图像格式\n    img_fl = cv_bridge::toCvShare(msg_fl_img, \"bgr8\")->image;\n    img_f  = cv_bridge::toCvShare(msg_f_img, \"bgr8\")->image;\n    img_fr = cv_bridge::toCvShare(msg_fr_img, \"bgr8\")->image;\n    img_bl = cv_bridge::toCvShare(msg_bl_img, \"bgr8\")->image;\n    img_b  = cv_bridge::toCvShare(msg_b_img, \"bgr8\")->image;\n    img_br = cv_bridge::toCvShare(msg_br_img, \"bgr8\")->image;\n\n    // 将图像存储在一个向量中\n    imgs.emplace_back(img_fl);\n    imgs.emplace_back(img_f);\n    imgs.emplace_back(img_fr);\n    imgs.emplace_back(img_bl);\n    imgs.emplace_back(img_b);\n    imgs.emplace_back(img_br);\n\n    // 将图像数据转换为向量，并存储在 imgs_data 中\n    std::vector<std::vector<char>> imgs_data;\n    cvImgToArr(imgs, imgs_data);\n    \n    // 将图像数据从 CPU 拷贝到 GPU 上，并进行通道转换\n    decode_cpu(imgs_data, imgs_dev_, img_w_, img_h_);\n\n    // 将 GPU 上的图像数据存储在样本数据中\n    sampleData_.imgs_dev = imgs_dev_;\n\n    // 创建一个存储边界框的向量\n    std::vector<Box> ego_boxes;\n    ego_boxes.clear();\n    float time = 0.f;\n    \n    // 使用深度学习模型对图像数据进行推理，得到一些边界框\n    bevdet_->DoInfer(sampleData_, ego_boxes, time);\n    \n    // 创建一个 ROS BoundingBoxArray 消息指针\n    jsk_recognition_msgs::BoundingBoxArrayPtr lidar_boxes(new jsk_recognition_msgs::BoundingBoxArray);\n    \n    // 清空雷达边界框数组\n    lidar_boxes->boxes.clear();\n    \n    // 将车辆坐标系下的边界框转换到雷达坐标系下\n    Egobox2Lidarbox(ego_boxes, lidar_boxes, sampleData_.param.lidar2ego_rot, \n                                            sampleData_.param.lidar2ego_trans);\n\n    // 设置雷达边界框消息的帧 ID 和时间戳\n    lidar_boxes->header.frame_id = \"map\";\n    lidar_boxes->header.stamp = ros::Time::now();\n    \n    // 发布转换后的边界框消息\n    pub_boxes_.publish(*lidar_boxes);\n    \n    // 创建一个新的 ROS 点云消息\n    sensor_msgs::PointCloud2 msg_cloud_new;\n    pcl::toROSMsg(*cloud, msg_cloud_new);\n\n    // 设置点云消息的帧 ID 和时间戳\n    msg_cloud_new.header.frame_id = \"map\";\n    msg_cloud_new.header.stamp = ros::Time::now();\n    \n    // 发布点云消息\n    pub_cloud_.publish(msg_cloud_new);\n}\n\n```\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/31 -->\n### 已经阅读完整体项目代码，已经标记好输入输出\n1. 完成新开发板的环境迁移及项目迁移\n2. 配合研究生学长调试摄像头\n3. 目前实现了opencv读取摄像头\n   \n\n#### 还需要解决的问题\n1. 读取的摄像头图片尺寸问题，可以调整摄像头焦距或opencv对图像大小进行处理\n2. 摄像头结点的标定\n   \n\n<!-- endtimeline -->\n\n<!-- timeline 2024/6/3 -->\n### 发现周五摄像头处理的问题，经过改进发现解决不了，选择换一条思路进行\n- 摄像头不是一般的usb摄像头，直接通过`opencv`读取效果不好，经查询得知拉流使用gstreamer进行拉流 \n- 在orin板子上的`camera.sh`脚本也是通过`gstreamer`进行拉流调取的\n- 经过网络搜索，成功找到了`gstreamer`的官方文档，并找到`opencv`相关，正在学习之中\n- 也找到了一个同样使用`opencv+gstreamer`拉流，并能在`jetson`平台使用的项目\n- 同时也找到如何在ROS结点中传输视频流\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/6/4 -->\n### 继续对周五遗留问题的处理，尝试利用多线程\n- 自己写了一个多线程程序进行读取，但是摄像头出现warning报错，得不到图像数据\n- github上找到了其他人写好的项目，还没有来得及尝试\n- 尝试修改`cv::VideoCapture::VideoCapture`的参数，加入gst的指令\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n# 详细开发过程记录\n\n\n## 参考文档\n{% link BEVDet by TensorRT、C++, https://github.com/LCH1238/bevdet-tensorrt-cpp, https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %} \n{% link BEVDet-ROS-TensorRT工程实现, https://github.com/linClubs/BEVDet-ROS-TensorRT, https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %} \n{% link ROS学习与踩坑记录（持续更新版）, https://blog.csdn.net/weixin_43603658/article/details/130236856, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %} \n{% link 全网最全Linux软件包管理apt-get命令, https://blog.csdn.net/qq_57737603/article/details/131117772, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %} \n\n## 环境配置\n### ROS_BEVDet搭建\n#### 拉取源码\n```bash\nmkdir -p bev_ws/src\ncd bev_ws/src\ngit clone https://github.com/linClubs/BEVDet-ROS-TensorRT.git\n```\n\n#### onnx引擎，TensorRT\n```bash\n# 1 创建一个python环境，并安装相关python库\npip install onnx ruamel.yaml==0.17.32\n\n# 2 进入工程目录\ncd BEVDet-ROS-TensorRT\n\n# 3 onnx2engine\npython tools/export_engine.py ./ckpts/lt_d.yaml ./ckpts/img_stage_lt_d.onnx ./ckpts/bev_stage_lt_d.onnx --postfix=_lt_d --fp16 true\n```\n#### ROS功能包\n```bash\n# 更新软件源列表\nsudo apt-get update\n# 根据ROS版本选择对应的指令\n# ubuntu16.04:kinetic\nsudo apt-get install ros-kinetic-jsk-recognition-msgs\nsudo apt-get install ros-kinetic-jsk-rviz-plugins\n# ubuntu18.04:melodic\nsudo apt-get install ros-melodic-jsk-recognition-msgs\nsudo apt-get install ros-melodic-jsk-rviz-plugins\n# ubuntu20.04:noetic\nsudo apt-get install ros-noetic-jsk-recognition-msgs\nsudo apt-get install ros-noetic-jsk-rviz-plugins\n```\n\n#### 编译运行\n```bash\n# 1. 编译\ncd bev_ws \ncatkin make\n\n# 2 工作空间生效\nsource devel/setup.bash\n\n# 3 运行\nroslaunch bevdet bevdet_node.launch\n\n# 4 播放数据集\nrosbag play nus.bag\n\n```\n\n## 摄像头opencv+gstreamer拉流\n\n### 参考文档\n{% link gstreamer opencv文档, https://gstreamer.freedesktop.org/documentation//opencv/index.html?gi-language=c, https://gstreamer.freedesktop.org/documentation//assets/images/gstreamer-logo.svg %} \n{% link opencv+gstreamer拉流, https://blog.csdn.net/hello_dear_you/article/details/129290712, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %} \n{% link ros_rtsp订阅Image类型topic转换为rtsp视频流, https://blog.csdn.net/qq_42257666/article/details/130559000, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %} \n{% link jetson_gmsl_camera_streamer, https://github.com/stanislavkuskov/jetson_gmsl_camera_streamer, https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %} \n{% link gmsl相机的C++驱动，目前支持ros消息发布, https://github.com/CodeColdCook/gmsl_camera_driver, https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %} \n{% link 读取gmsl接口数据，rosbag录制话题, https://blog.csdn.net/weixin_43492473/article/details/124992400, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %} \n\n\n### gstreamer相关函数说明\n|函数\t\t\t|作用\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| -------------- | ------------------------------ |\n|cameracalibrate\t|通过使用上游/下游相机将相机指向棋盘图案来执行相机校准undistort|\n|cameraundistort\t|该元件执行相机校准。校准程序完成后：包含相机校正参数的事件将发送到上游 和下游被相机消耗不失真元素。settings 属性设置为相机校正参数（如 序列化 OpenCV 对象的不透明字符串）。 此属性的值稍后可用于配置 cameraundistort 元素。该元素变为空闲状态，稍后可以重新启动 [TODO]。|\n|cvdilate\t\t\t|放大图像|\n|cvequalizehist\t|均衡灰度图像的直方图 功能|\n|cverode\t\t\t|侵蚀图像|\n|cvlaplace\t\t|将 cvLaplace OpenCV 函数应用于图像(??)|\n|cvsmooth\t\t|平滑图像|\n|cvtracker\t\t\t|对视频执行对象跟踪，并将其存储在视频缓冲区元数据中|\n|dewarp\t\t\t|畸变图像|\n|disparity\t\t\t|从两个（序列）校正和对齐的立体图像计算立体视差图|\n|edgedetect\t\t|对视频和图像执行精明的边缘检测|\n|faceblur\t\t\t|模糊图像和视频中的人脸|\n|facedetect\t\t|对视频和图像执行人脸检测|\n|grabcut\t\t\t|此元素是 OpenCV grabcut 实现的包装器。|\n|handdetect\t\t|对视频进行手势检测，通过总线消息和导航事件提供检测到的手部位置，并处理手势事件|\n|motioncells\t\t|对视频执行运动检测|\n|opencvtextoverlay\t|OpenCVtextOverlay 在视频帧顶部呈现文本|\n|retinex\t\t\t|用于彩色图像增强的基本和多尺度 retinex|\n|segmentation\t\t|此元素使用多种方法之一创建和更新 fg/bg 模型。|\n|skindetect\t\t\t|视频和图像上的人体皮肤检测|\n|templatematch\t|对视频和图像进行模板匹配，通过总线消息提供检测到的位置。|\n\n\n- GrabCut:\n 是一个 基于图切技术的图像分割方法。它可以看作是 从某些 FG 和 BG“种子”区域对图像进行细粒度分割的方法。这 OpenCV 的实现遵循文章\n- Retinex:\n\t此元素使用多种方法之一创建和更新 fg/bg 模型。 称为“codebook”的是指遵循 opencv 的 codebook 方法 O'Reilly 书 [1] 在 K. Kim 中描述的算法的实现， T. H. Chalidabhongse、D. Harwood 和 L. Davis [2]。背景SubtractorMOG [3]， 或短片的 MOG，指基于高斯混合的背景/前景 分割算法。OpenCV MOG 实现了 [4] 中描述的算法。 背景SubtractorMOG2 [5]，指的是另一个基于高斯混合的 背景/前景分割算法。OpenCV MOG2 实现了 算法在 [6] 和 [7] 中描述。\n\n[1] 学习 OpenCV：使用 OpenCV 库的计算机视觉，作者：Gary Bradski 和 Adrian Kaehler，由 O'Reilly Media 出版，2008 年 10 月 3 日 [2] “使用 Codebook 模型的实时前景-背景分割”， Real-time Imaging，第 11 卷，第 3 期，第 167-256 页，2005 年 6 月。 [3] http://opencv.itseez.com/modules/video/doc/motion_analysis_and_object_tracking.html#backgroundsubtractormog [4] P. KadewTraKuPong 和 R. Bowden，“改进的自适应背景 用于阴影检测实时跟踪的混合模型“，第 2 期 2001年欧洲先进视频监控系统研讨会 [5] http://opencv.itseez.com/modules/video/doc/motion_analysis_and_object_tracking.html#backgroundsubtractormog2 [6] Z.Zivkovic，“改进的背景自适应高斯混合模型 减法“，国际模式识别会议，英国，2004 年 8 月。 [7] Z.Zivkovic，F. van der Heijden，“高效的自适应密度估计 每个图像像素的背景减法任务“，模式识别 《信函》，第27卷，第7期，第773-780页，2006年。\n\n### 尝试利用多线程进行图像数据传输\n尝试多种办法来对摄像头数据进行读取，发现还是不能解决读取连续的问题，搜索后尝试使用多线程来处理这个问题\n```cpp\n#include <ros/ros.h>\n#include <image_transport/image_transport.h>\n#include <opencv2/highgui/highgui.hpp>\n#include <cv_bridge/cv_bridge.h>\n#include <thread> // 引入多线程支持\n\nvoid imagePublisher(int video_source, image_transport::Publisher pub) {\n    cv::VideoCapture cap(video_source);\n    if (!cap.isOpened()) {\n        ROS_ERROR(\"无法打开视频设备\");\n        return;\n    }\n\n    cv::Mat frame;\n    sensor_msgs::ImagePtr msg;\n\n    while (ros::ok()) {\n        cap >> frame;\n        if (!frame.empty()) {\n            msg = cv_bridge::CvImage(std_msgs::Header(), \"bgr8\", frame).toImageMsg();\n            pub.publish(msg);\n            ROS_INFO(\"发布了一帧图像\");\n        } else {\n            ROS_WARN(\"捕获的帧为空\");\n        }\n\n        ros::spinOnce();\n    }\n}\n\nint main(int argc, char** argv) {\n    ros::init(argc, argv, \"image_publisher\");\n    ros::NodeHandle nh;\n    image_transport::ImageTransport it(nh);\n    image_transport::Publisher pub = it.advertise(\"camera/image\", 1);\n\n    int video_source = 2;\n\n    // 创建一个线程来发布图像\n    std::thread image_publish_thread(imagePublisher, video_source, pub);\n\n    ros::spin(); // 主线程继续进行ROS回调处理\n\n    // 等待图像发布线程结束\n    image_publish_thread.join();\n\n    return 0;\n}\n```\n将图像发布的功能封装到了一个名为`imagePublisher`的函数中，并通过`std::thread`在主函数中创建了一个新的线程来运行这个函数。这样，图像的发布和ROS回调处理就可以在不同的线程中并行执行，从而提高发送速度。但是由于摄像头报错，暂未实现得出。\n\n\n\n### 总结：\ngstreamer拉流+opencv大部分是一些关于人体识别的函数，但是一些图像处理的运用是可以使用的。\n\n1. opencv+gstreamer拉流\n来源：https://blog.csdn.net/hello_dear_you/article/details/129290712\n- 此内容主要用在NVIDIA的dGPU和Jetson平台都可以使用。主要是论证硬件解码更好用，但是重点关注代码内容\n- OpenCV的VideoCapture类支持视频文件、图像序列或摄像头作为输入，获取数据。在这小节中，重点介绍如何使用VideoCapture类来拉取RTSP流媒体数据。\n- 通过调用如下的VideoCapure构造函数能实现对RTSP流数据的拉取\n```C++\ncv::VideoCapture::VideoCapture\t(\tconst String & \tfilename,\n\t\t\t\t\t\t\t\t\tint \tapiPreference \t\n)\t\n```\n其中filename的输入可以是：\n1. 视频文件路径；\n2. 图像序列，例如图像序列名为image_00.jpg, image_01.jpg, image_02.jpg, 则可以设置为image_%02d.jpg；\n3. 视频流的URL，例如：rtsp://admin@password:192.168.170.XXX；\n4. streamer的pipeline string，该pipeline可以使用gst-launch-1.0测试可用性；\n5. apiPreference指的是Capture API使用何种后端，包括cv::CAP_FFMPEG or cv::CAP_IMAGES or cv::CAP_DSHOW等。\n\n\n## 问题与解决\n## 参考文档\n{% link 科学的分析和解决ROS运行中产生的undefined symbol类报错的方法, https://blog.csdn.net/qq_44339029/article/details/137341737, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %} \n{% link rosrun Couldn‘t find executable named below, https://zhuanlan.zhihu.com/p/377429776, https://k.sinaimg.cn/n/sinakd20220810s/261/w650h411/20220810/574c-ec748c90d9828e5c452aca3f611d0df6.png/w700d1q75cms.jpg%}\n\n\n\n### 1. ROS功能包（3D边界框）版本依赖\n#### 报错说明：\n```bash\n[ERROR] [1716102452.243813263]: PluginlibFactory: The plugin for class 'jsk_rviz_plugin/BoundingBoxArray' failed to load.  Error: According to the loaded plugin descriptions the cl                ass jsk_rviz_plugin/BoundingBoxArray with base class type rviz::Display does not exist. Declared types are  rviz/AccelStamped rviz/Axes rviz/Camera rviz/DepthCloud rviz/Effort rviz                /FluidPressure rviz/Grid rviz/GridCells rviz/Illuminance rviz/Image rviz/InteractiveMarkers rviz/LaserScan rviz/Map rviz/Marker rviz/MarkerArray rviz/Odometry rviz/Path rviz/PointC                loud rviz/PointCloud2 rviz/PointStamped rviz/Polygon rviz/Pose rviz/PoseArray rviz/PoseWithCovariance rviz/Range rviz/RelativeHumidity rviz/RobotModel rviz/TF rviz/Temperature rviz                /TwistStamped rviz/WrenchStamped rviz_plugin_tutorials/Imu\n```\n##### 解决方法：\n卸载并重新安装`jsk_rviz_plugin/BoundingBoxArray`功能包，但后续遇到：undefined symbol类报错: undefined symbol: _ZN8GMapping 14 sampleGaussianEdm\n该问题一般是缺失或者没有找到该功能包所需的某个.so 动态链接库文件。\n对符号解析：\n```bash\nc++filt _ZN8GMapping14sampleGaussianEdm\n```\n结果是`GMapping::sampleGaussian(double, unsigned long)`\n这表明运行报错的原因是系统在寻找 GMapping::sampleGaussian 函数的定义时，未能成功找到\n估计问题出现在其他依赖版本低，但这个ROS包依赖版本较高，于是使用`sudo apt-get upgrade`更新所有已经安装的依赖包，问题得以解决 \n\n### 2. [rosrun] Couldn‘t find executable named hello_world_cpp below\n#### 报错说明：\ncatkin_make之后source ./devel/setup.bash\nsource之后运行节点的时候,ros找不到可执行文件\n\n#### 解决方法\n1. 检查Cmakelists.txt.\n2. 查看catkin_package()位置.\n3. 要注意的是 This function must be called before declaring any targets with add_library() or add_executable().，也就是说Cmakelists.txt.中，要确保配置是在`catkin_package()`之后，否则编译完运行就会出现这个问题\n\n\n\n#### 摄像头运行报错\n{% note danger flat %}摄像头运行\n(my_publisher:59106): GStreamer-CRITICAL **: 20:44:32.821: \nTrying to dispose element pipeline0, but it is in PAUSED instead of the NULL state.\nYou need to explicitly set elements to the NULL state before\ndropping the final reference, to allow them to clean up.\nThis problem may also be caused by a refcounting bug in the\napplication or some element.\n\n[ WARN:0] global ../modules/videoio/src/cap_gstreamer.cpp (888) open OpenCV | GStreamer warning: unable to start pipeline\n\n(my_publisher:59106): GStreamer-CRITICAL **: 20:44:32.821: \nTrying to dispose element videoconvert0, but it is in PLAYING instead of the NULL state.\nYou need to explicitly set elements to the NULL state before\ndropping the final reference, to allow them to clean up.\nThis problem may also be caused by a refcounting bug in the\napplication or some element.\n\n[ WARN:0] global ../modules/videoio/src/cap_gstreamer.cpp (480) isPipelinePlaying OpenCV | GStreamer warning: GStreamer: pipeline have not been created\n\n(my_publisher:59106): GStreamer-CRITICAL **: 20:44:32.822: \nTrying to dispose element appsink0, but it is in READY instead of the NULL state.\nYou need to explicitly set elements to the NULL state before\ndropping the final reference, to allow them to clean up.\nThis problem may also be caused by a refcounting bug in the\napplication or some element.\n\n[ WARN:0] global ../modules/videoio/src/cap_v4l.cpp (887) open VIDEOIO(V4L2:/dev/video2): can't open camera by index\n[ERROR] [1717505072.826801829]: ????????????????????????\n\n(my_publisher:59106): GStreamer-CRITICAL **: 20:44:32.829: gst_element_post_message: assertion 'GST_IS_ELEMENT (element)' failed\n\n{% endnote %}\n\n#### 解决问题：\n报错原因是因为摄像头打开之后没有关闭，在代码中虽然写了关闭命令，但是没有执行到那一步就直接关闭了，导致的问题，重新启动roscore，rosrun就行\n\n\n\n\n\n\n\n","source":"_posts/ROS-BEVDet开发日记.md","raw":"---\ntitle: ROS_BEVDet开发日记\ntags:\n  - BEV\n  - 目标检测\ncategories:\n  - AI\ndescription: 本文用于记录BEVDet在ROS上部署的开发日志\ncover: 'https://image.aruoshui.fun/i/2024/12/31/vsl54c-0.webp'\npassword: bevdet\nabstract: 有东西被加密了, 请输入密码查看.\nmessage: 您好, 这里需要密码.\ntheme: xray\nwrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试.\nwrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\nswiper_index: 5\nabbrlink: 14994\ndate: 2024-05-27 15:06:24\n---\n\n{% timeline 开发跟踪日志,blue %}\n\n<!-- timeline 2024/5/18 -->\n于jetson orin nano板子上部署好ROS_BVEDet环境，TensorRT部署\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/19 -->\n模型Onnx转换，跑通ROS结点，完成推理\n \n ![结果](/img/1.gif)\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/24 -->\n考试周项目延期\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/27 -->\nBEVDet源码关于图像接口已经阅读完毕，正在进行摄像头的接入工作（修改之前写好的结点），由于项目的依赖关系，需要另外阅读学习，对其中数据包进行深入学习，其中有：\n{% note info flat %}\n参考：[BEVDet by TensorRT、C++](https://github.com/LCH1238/bevdet-tensorrt-cpp)\n项目特色：\n- 结合了调整大小、裁剪和归一化进行预处理的 CUDA 内核\n- 预处理 CUDA 内核包括两种插值方法：最近邻插值和双三次插值\n- 使用 C++ 和 CUDA 内核实现对齐相邻帧 BEV 特征\n{% endnote %}\n\n{% note info flat %}\n参考：[BEVDet-ROS-TensorRT工程实现](https://github.com/linClubs/BEVDet-ROS-TensorRT)\n项目特色：\n- 使用 CUDA、TensorRT、ROS1 和 C++ 进行 BEVDet 在线实时推理的源代码和模型。\n{% endnote %}\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/28 -->\n阅读了bevdet-tensort-cpp-master文件中的bevdet.cpp文件\n此文件中主要是各种引擎，参数的初始化以及部分的处理图像\n图像处理主要是再两个函数：\n    读取相机数据（从文件中读取？！（待定））以及对齐图片，处理矩阵都是函数InitParams\n    预处理、特征提取、BEV特征池化、特征对齐（可选）、BEV阶段网络前向传播以及后处理是DoInfer函数\n[步骤 1] : 预处理图像，包括调整大小、裁剪和归一化\n```cpp\n    CHECK_CUDA(cudaMemcpy(src_imgs_dev, cam_data.imgs_dev,\n        N_img * src_img_h * src_img_w * 3 * sizeof(uchar), cudaMemcpyDeviceToDevice));\n\n    preprocess(src_imgs_dev, (float*)imgstage_buffer[imgbuffer_map[\"images\"]], N_img, src_img_h, src_img_w,\n               input_img_h, input_img_w, resize_radio, resize_radio, crop_h, crop_w, mean, std, pre_sample);\n\n    // 初始化深度信息\n    InitDepth(cam_data.param.cams2ego_rot, cam_data.param.cams2ego_trans, cam_data.param.cams_intrin);\n\n```\n[步骤 2] : 图像阶段网络前向传递\n```cpp\n    cudaStream_t stream;\n    CHECK_CUDA(cudaStreamCreate(&stream));\n    if(!imgstage_context->enqueueV2(imgstage_buffer, stream, nullptr)){\n        printf(\"Image stage forward failing!\\n\");\n    }\n```\n [步骤 3] : BEV池化\n```cpp\n    bev_pool_v2(bevpool_channel, unique_bev_num, bev_h * bev_w,\n                (float*)imgstage_buffer[imgbuffer_map[\"depth\"]],\n                (float*)imgstage_buffer[imgbuffer_map[\"images_feat\"]],\n                ranks_depth_dev, ranks_feat_dev, ranks_bev_dev,\n                interval_starts_dev, interval_lengths_dev,\n                (float*)bevstage_buffer[bevbuffer_map[\"BEV_feat\"]]\n                );\n```\n[步骤 4] : 对齐 BEV 特征\n```cpp\n    if(use_adj){\n        GetAdjFrameFeature(cam_data.param.scene_token, cam_data.param.ego2global_rot,\n                           cam_data.param.ego2global_trans, (float*)bevstage_buffer[bevbuffer_map[\"BEV_feat\"]]);\n        // 同步 CUDA 设备\n        CHECK_CUDA(cudaDeviceSynchronize());\n    }\n```\n[步骤 5] : BEV阶段网络前向传递\n```cpp\n    if(!bevstage_context->enqueueV2(bevstage_buffer, stream, nullptr)){\n        printf(\"BEV stage forward failing!\\n\");\n    }\n```\n[步骤 6] : 后处理\n```cpp\n    postprocess_ptr->DoPostprocess(bevstage_buffer, out_detections);\n```\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/29 -->\n阅读了`bevdet-tensort-cpp-master`文件中的`nvjpegdecoder.cpp`文件\n此文件主要用于图像解码\n对`Jpeg`图像进行解码\n\n阅读了`bevdet-tensort-cpp-master`文件中的`cpu_jpegdecoder.cpp`文件\n此文件主要用于图像输出\n将`Jpeg`压缩图像转化为Reg可是图像\n\n阅读了`bevdet-tensort-cpp-master`文件中的`data.cpp`文件\n此文件主要用于获取数据和是数据处理\n此文件获取数据是从{%span red,yaml%}文件中获取\n\n完成了对`bevdet-tensort-cpp-master`文件主要代码的阅读\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/30 -->\n### 开始阅读BEVDet-Ros-TensorRT-main文件：\n    此文件是基于bevdet-tensort-cpp-master上与ros的结合，所以此文件的src文件与cpp相同，作用也相同\n    所以需要看./test部分\n\n./test/01test.cpp文件中\n    此文件主要为测试单个样例\n    其中值得关注部分为Egobox2Lidarbox函数\n    此函数的目的是\n    1. 将盒子的中心从自车坐标系转换到激光雷达坐标系。\n    2. 使用激光雷达到自车的旋转矩阵和平移向量对盒子进行旋转和平移变换。\n    3. 将变换后的盒子添加到激光雷达坐标系的盒子集合中。\n\n```cpp\nvoid Egobox2Lidarbox(const std::vector<Box>& ego_boxes, \n                     std::vector<Box>& lidar_boxes,\n                     const Eigen::Quaternion<float>& lidar2ego_rot,\n                     const Eigen::Translation3f& lidar2ego_trans){\n    // 遍历所有的自车框 ego_boxes\n    for(size_t i = 0; i < ego_boxes.size(); i++){\n        // 复制当前自车框\n        Box b = ego_boxes[i];\n        // 提取当前框的中心点坐标\n        Eigen::Vector3f center(b.x, b.y, b.z);\n        // 将中心点从自车坐标系转换到激光雷达坐标系\n        center -= lidar2ego_trans.translation();\n        center = lidar2ego_rot.inverse().matrix() * center;\n        // 调整框的旋转角度以匹配激光雷达坐标系\n        b.r -= lidar2ego_rot.matrix().eulerAngles(0, 1, 2).z();\n        // 更新框的位置到激光雷达坐标系\n        b.x = center.x();\n        b.y = center.y();\n        b.z = center.z();\n        // 将转换后的框添加到输出容器 lidar_boxes 中\n        lidar_boxes.push_back(b);\n    }\n}\n```\n`./test/demo_bevdet.cpp`文件\n    此文件是01test的一个demo，可以运行测试一个关键帧\n\n`./test/view.cpp`文件\n    此文件是一个视图文件，和demo没有很大区别\n\n重点：\n    `./test/view.cpp`文件\n        在这个文件中找到了发布订阅消息的部分\n         处理来自多个传感器的数据，执行图像处理和目标检测，并将结果发布到 ROS 话题中。\n             1. 将接收到的点云数据转换为 PCL 中的点云格式。\n             2. 将接收到的图像数据转换为 OpenCV 的图像格式，并存储在一个向量中。\n             3. 将图像数据从 CPU 拷贝到 GPU，并进行通道转换。\n             4. 进行推理，使用深度学习模型对图像数据进行检测，得到一些边界框。\n             5. 将检测到的边界框从车辆坐标系转换到雷达坐标系。\n             6. 发布转换后的边界框消息和点云消息到 ROS。 \n   \n```cpp\nvoid RosNode::callback(const sensor_msgs::PointCloud2ConstPtr& msg_cloud, \n    const sensor_msgs::ImageConstPtr& msg_fl_img,\n    const sensor_msgs::ImageConstPtr& msg_f_img,\n    const sensor_msgs::ImageConstPtr& msg_fr_img,\n    const sensor_msgs::ImageConstPtr& msg_bl_img,\n    const sensor_msgs::ImageConstPtr& msg_b_img,\n    const sensor_msgs::ImageConstPtr& msg_br_img)\n{   \n    // 创建一个指向 PCL 点云的指针\n    pcl::PointCloud<PointT>::Ptr cloud(new pcl::PointCloud<PointT>);\n    \n    // 将 ROS 中的点云消息转换为 PCL 点云格式\n    pcl::fromROSMsg(*msg_cloud, *cloud);\n   \n    // 创建用于存储图像的 OpenCV Mat 对象\n    cv::Mat img_fl, img_f, img_fr, img_bl, img_b, img_br;\n    std::vector<cv::Mat> imgs;\n\n    // 将 ROS 中的图像消息转换为 OpenCV 图像格式\n    img_fl = cv_bridge::toCvShare(msg_fl_img, \"bgr8\")->image;\n    img_f  = cv_bridge::toCvShare(msg_f_img, \"bgr8\")->image;\n    img_fr = cv_bridge::toCvShare(msg_fr_img, \"bgr8\")->image;\n    img_bl = cv_bridge::toCvShare(msg_bl_img, \"bgr8\")->image;\n    img_b  = cv_bridge::toCvShare(msg_b_img, \"bgr8\")->image;\n    img_br = cv_bridge::toCvShare(msg_br_img, \"bgr8\")->image;\n\n    // 将图像存储在一个向量中\n    imgs.emplace_back(img_fl);\n    imgs.emplace_back(img_f);\n    imgs.emplace_back(img_fr);\n    imgs.emplace_back(img_bl);\n    imgs.emplace_back(img_b);\n    imgs.emplace_back(img_br);\n\n    // 将图像数据转换为向量，并存储在 imgs_data 中\n    std::vector<std::vector<char>> imgs_data;\n    cvImgToArr(imgs, imgs_data);\n    \n    // 将图像数据从 CPU 拷贝到 GPU 上，并进行通道转换\n    decode_cpu(imgs_data, imgs_dev_, img_w_, img_h_);\n\n    // 将 GPU 上的图像数据存储在样本数据中\n    sampleData_.imgs_dev = imgs_dev_;\n\n    // 创建一个存储边界框的向量\n    std::vector<Box> ego_boxes;\n    ego_boxes.clear();\n    float time = 0.f;\n    \n    // 使用深度学习模型对图像数据进行推理，得到一些边界框\n    bevdet_->DoInfer(sampleData_, ego_boxes, time);\n    \n    // 创建一个 ROS BoundingBoxArray 消息指针\n    jsk_recognition_msgs::BoundingBoxArrayPtr lidar_boxes(new jsk_recognition_msgs::BoundingBoxArray);\n    \n    // 清空雷达边界框数组\n    lidar_boxes->boxes.clear();\n    \n    // 将车辆坐标系下的边界框转换到雷达坐标系下\n    Egobox2Lidarbox(ego_boxes, lidar_boxes, sampleData_.param.lidar2ego_rot, \n                                            sampleData_.param.lidar2ego_trans);\n\n    // 设置雷达边界框消息的帧 ID 和时间戳\n    lidar_boxes->header.frame_id = \"map\";\n    lidar_boxes->header.stamp = ros::Time::now();\n    \n    // 发布转换后的边界框消息\n    pub_boxes_.publish(*lidar_boxes);\n    \n    // 创建一个新的 ROS 点云消息\n    sensor_msgs::PointCloud2 msg_cloud_new;\n    pcl::toROSMsg(*cloud, msg_cloud_new);\n\n    // 设置点云消息的帧 ID 和时间戳\n    msg_cloud_new.header.frame_id = \"map\";\n    msg_cloud_new.header.stamp = ros::Time::now();\n    \n    // 发布点云消息\n    pub_cloud_.publish(msg_cloud_new);\n}\n\n```\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/5/31 -->\n### 已经阅读完整体项目代码，已经标记好输入输出\n1. 完成新开发板的环境迁移及项目迁移\n2. 配合研究生学长调试摄像头\n3. 目前实现了opencv读取摄像头\n   \n\n#### 还需要解决的问题\n1. 读取的摄像头图片尺寸问题，可以调整摄像头焦距或opencv对图像大小进行处理\n2. 摄像头结点的标定\n   \n\n<!-- endtimeline -->\n\n<!-- timeline 2024/6/3 -->\n### 发现周五摄像头处理的问题，经过改进发现解决不了，选择换一条思路进行\n- 摄像头不是一般的usb摄像头，直接通过`opencv`读取效果不好，经查询得知拉流使用gstreamer进行拉流 \n- 在orin板子上的`camera.sh`脚本也是通过`gstreamer`进行拉流调取的\n- 经过网络搜索，成功找到了`gstreamer`的官方文档，并找到`opencv`相关，正在学习之中\n- 也找到了一个同样使用`opencv+gstreamer`拉流，并能在`jetson`平台使用的项目\n- 同时也找到如何在ROS结点中传输视频流\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/6/4 -->\n### 继续对周五遗留问题的处理，尝试利用多线程\n- 自己写了一个多线程程序进行读取，但是摄像头出现warning报错，得不到图像数据\n- github上找到了其他人写好的项目，还没有来得及尝试\n- 尝试修改`cv::VideoCapture::VideoCapture`的参数，加入gst的指令\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n# 详细开发过程记录\n\n\n## 参考文档\n{% link BEVDet by TensorRT、C++, https://github.com/LCH1238/bevdet-tensorrt-cpp, https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %} \n{% link BEVDet-ROS-TensorRT工程实现, https://github.com/linClubs/BEVDet-ROS-TensorRT, https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %} \n{% link ROS学习与踩坑记录（持续更新版）, https://blog.csdn.net/weixin_43603658/article/details/130236856, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %} \n{% link 全网最全Linux软件包管理apt-get命令, https://blog.csdn.net/qq_57737603/article/details/131117772, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %} \n\n## 环境配置\n### ROS_BEVDet搭建\n#### 拉取源码\n```bash\nmkdir -p bev_ws/src\ncd bev_ws/src\ngit clone https://github.com/linClubs/BEVDet-ROS-TensorRT.git\n```\n\n#### onnx引擎，TensorRT\n```bash\n# 1 创建一个python环境，并安装相关python库\npip install onnx ruamel.yaml==0.17.32\n\n# 2 进入工程目录\ncd BEVDet-ROS-TensorRT\n\n# 3 onnx2engine\npython tools/export_engine.py ./ckpts/lt_d.yaml ./ckpts/img_stage_lt_d.onnx ./ckpts/bev_stage_lt_d.onnx --postfix=_lt_d --fp16 true\n```\n#### ROS功能包\n```bash\n# 更新软件源列表\nsudo apt-get update\n# 根据ROS版本选择对应的指令\n# ubuntu16.04:kinetic\nsudo apt-get install ros-kinetic-jsk-recognition-msgs\nsudo apt-get install ros-kinetic-jsk-rviz-plugins\n# ubuntu18.04:melodic\nsudo apt-get install ros-melodic-jsk-recognition-msgs\nsudo apt-get install ros-melodic-jsk-rviz-plugins\n# ubuntu20.04:noetic\nsudo apt-get install ros-noetic-jsk-recognition-msgs\nsudo apt-get install ros-noetic-jsk-rviz-plugins\n```\n\n#### 编译运行\n```bash\n# 1. 编译\ncd bev_ws \ncatkin make\n\n# 2 工作空间生效\nsource devel/setup.bash\n\n# 3 运行\nroslaunch bevdet bevdet_node.launch\n\n# 4 播放数据集\nrosbag play nus.bag\n\n```\n\n## 摄像头opencv+gstreamer拉流\n\n### 参考文档\n{% link gstreamer opencv文档, https://gstreamer.freedesktop.org/documentation//opencv/index.html?gi-language=c, https://gstreamer.freedesktop.org/documentation//assets/images/gstreamer-logo.svg %} \n{% link opencv+gstreamer拉流, https://blog.csdn.net/hello_dear_you/article/details/129290712, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %} \n{% link ros_rtsp订阅Image类型topic转换为rtsp视频流, https://blog.csdn.net/qq_42257666/article/details/130559000, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %} \n{% link jetson_gmsl_camera_streamer, https://github.com/stanislavkuskov/jetson_gmsl_camera_streamer, https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %} \n{% link gmsl相机的C++驱动，目前支持ros消息发布, https://github.com/CodeColdCook/gmsl_camera_driver, https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg %} \n{% link 读取gmsl接口数据，rosbag录制话题, https://blog.csdn.net/weixin_43492473/article/details/124992400, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %} \n\n\n### gstreamer相关函数说明\n|函数\t\t\t|作用\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| -------------- | ------------------------------ |\n|cameracalibrate\t|通过使用上游/下游相机将相机指向棋盘图案来执行相机校准undistort|\n|cameraundistort\t|该元件执行相机校准。校准程序完成后：包含相机校正参数的事件将发送到上游 和下游被相机消耗不失真元素。settings 属性设置为相机校正参数（如 序列化 OpenCV 对象的不透明字符串）。 此属性的值稍后可用于配置 cameraundistort 元素。该元素变为空闲状态，稍后可以重新启动 [TODO]。|\n|cvdilate\t\t\t|放大图像|\n|cvequalizehist\t|均衡灰度图像的直方图 功能|\n|cverode\t\t\t|侵蚀图像|\n|cvlaplace\t\t|将 cvLaplace OpenCV 函数应用于图像(??)|\n|cvsmooth\t\t|平滑图像|\n|cvtracker\t\t\t|对视频执行对象跟踪，并将其存储在视频缓冲区元数据中|\n|dewarp\t\t\t|畸变图像|\n|disparity\t\t\t|从两个（序列）校正和对齐的立体图像计算立体视差图|\n|edgedetect\t\t|对视频和图像执行精明的边缘检测|\n|faceblur\t\t\t|模糊图像和视频中的人脸|\n|facedetect\t\t|对视频和图像执行人脸检测|\n|grabcut\t\t\t|此元素是 OpenCV grabcut 实现的包装器。|\n|handdetect\t\t|对视频进行手势检测，通过总线消息和导航事件提供检测到的手部位置，并处理手势事件|\n|motioncells\t\t|对视频执行运动检测|\n|opencvtextoverlay\t|OpenCVtextOverlay 在视频帧顶部呈现文本|\n|retinex\t\t\t|用于彩色图像增强的基本和多尺度 retinex|\n|segmentation\t\t|此元素使用多种方法之一创建和更新 fg/bg 模型。|\n|skindetect\t\t\t|视频和图像上的人体皮肤检测|\n|templatematch\t|对视频和图像进行模板匹配，通过总线消息提供检测到的位置。|\n\n\n- GrabCut:\n 是一个 基于图切技术的图像分割方法。它可以看作是 从某些 FG 和 BG“种子”区域对图像进行细粒度分割的方法。这 OpenCV 的实现遵循文章\n- Retinex:\n\t此元素使用多种方法之一创建和更新 fg/bg 模型。 称为“codebook”的是指遵循 opencv 的 codebook 方法 O'Reilly 书 [1] 在 K. Kim 中描述的算法的实现， T. H. Chalidabhongse、D. Harwood 和 L. Davis [2]。背景SubtractorMOG [3]， 或短片的 MOG，指基于高斯混合的背景/前景 分割算法。OpenCV MOG 实现了 [4] 中描述的算法。 背景SubtractorMOG2 [5]，指的是另一个基于高斯混合的 背景/前景分割算法。OpenCV MOG2 实现了 算法在 [6] 和 [7] 中描述。\n\n[1] 学习 OpenCV：使用 OpenCV 库的计算机视觉，作者：Gary Bradski 和 Adrian Kaehler，由 O'Reilly Media 出版，2008 年 10 月 3 日 [2] “使用 Codebook 模型的实时前景-背景分割”， Real-time Imaging，第 11 卷，第 3 期，第 167-256 页，2005 年 6 月。 [3] http://opencv.itseez.com/modules/video/doc/motion_analysis_and_object_tracking.html#backgroundsubtractormog [4] P. KadewTraKuPong 和 R. Bowden，“改进的自适应背景 用于阴影检测实时跟踪的混合模型“，第 2 期 2001年欧洲先进视频监控系统研讨会 [5] http://opencv.itseez.com/modules/video/doc/motion_analysis_and_object_tracking.html#backgroundsubtractormog2 [6] Z.Zivkovic，“改进的背景自适应高斯混合模型 减法“，国际模式识别会议，英国，2004 年 8 月。 [7] Z.Zivkovic，F. van der Heijden，“高效的自适应密度估计 每个图像像素的背景减法任务“，模式识别 《信函》，第27卷，第7期，第773-780页，2006年。\n\n### 尝试利用多线程进行图像数据传输\n尝试多种办法来对摄像头数据进行读取，发现还是不能解决读取连续的问题，搜索后尝试使用多线程来处理这个问题\n```cpp\n#include <ros/ros.h>\n#include <image_transport/image_transport.h>\n#include <opencv2/highgui/highgui.hpp>\n#include <cv_bridge/cv_bridge.h>\n#include <thread> // 引入多线程支持\n\nvoid imagePublisher(int video_source, image_transport::Publisher pub) {\n    cv::VideoCapture cap(video_source);\n    if (!cap.isOpened()) {\n        ROS_ERROR(\"无法打开视频设备\");\n        return;\n    }\n\n    cv::Mat frame;\n    sensor_msgs::ImagePtr msg;\n\n    while (ros::ok()) {\n        cap >> frame;\n        if (!frame.empty()) {\n            msg = cv_bridge::CvImage(std_msgs::Header(), \"bgr8\", frame).toImageMsg();\n            pub.publish(msg);\n            ROS_INFO(\"发布了一帧图像\");\n        } else {\n            ROS_WARN(\"捕获的帧为空\");\n        }\n\n        ros::spinOnce();\n    }\n}\n\nint main(int argc, char** argv) {\n    ros::init(argc, argv, \"image_publisher\");\n    ros::NodeHandle nh;\n    image_transport::ImageTransport it(nh);\n    image_transport::Publisher pub = it.advertise(\"camera/image\", 1);\n\n    int video_source = 2;\n\n    // 创建一个线程来发布图像\n    std::thread image_publish_thread(imagePublisher, video_source, pub);\n\n    ros::spin(); // 主线程继续进行ROS回调处理\n\n    // 等待图像发布线程结束\n    image_publish_thread.join();\n\n    return 0;\n}\n```\n将图像发布的功能封装到了一个名为`imagePublisher`的函数中，并通过`std::thread`在主函数中创建了一个新的线程来运行这个函数。这样，图像的发布和ROS回调处理就可以在不同的线程中并行执行，从而提高发送速度。但是由于摄像头报错，暂未实现得出。\n\n\n\n### 总结：\ngstreamer拉流+opencv大部分是一些关于人体识别的函数，但是一些图像处理的运用是可以使用的。\n\n1. opencv+gstreamer拉流\n来源：https://blog.csdn.net/hello_dear_you/article/details/129290712\n- 此内容主要用在NVIDIA的dGPU和Jetson平台都可以使用。主要是论证硬件解码更好用，但是重点关注代码内容\n- OpenCV的VideoCapture类支持视频文件、图像序列或摄像头作为输入，获取数据。在这小节中，重点介绍如何使用VideoCapture类来拉取RTSP流媒体数据。\n- 通过调用如下的VideoCapure构造函数能实现对RTSP流数据的拉取\n```C++\ncv::VideoCapture::VideoCapture\t(\tconst String & \tfilename,\n\t\t\t\t\t\t\t\t\tint \tapiPreference \t\n)\t\n```\n其中filename的输入可以是：\n1. 视频文件路径；\n2. 图像序列，例如图像序列名为image_00.jpg, image_01.jpg, image_02.jpg, 则可以设置为image_%02d.jpg；\n3. 视频流的URL，例如：rtsp://admin@password:192.168.170.XXX；\n4. streamer的pipeline string，该pipeline可以使用gst-launch-1.0测试可用性；\n5. apiPreference指的是Capture API使用何种后端，包括cv::CAP_FFMPEG or cv::CAP_IMAGES or cv::CAP_DSHOW等。\n\n\n## 问题与解决\n## 参考文档\n{% link 科学的分析和解决ROS运行中产生的undefined symbol类报错的方法, https://blog.csdn.net/qq_44339029/article/details/137341737, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %} \n{% link rosrun Couldn‘t find executable named below, https://zhuanlan.zhihu.com/p/377429776, https://k.sinaimg.cn/n/sinakd20220810s/261/w650h411/20220810/574c-ec748c90d9828e5c452aca3f611d0df6.png/w700d1q75cms.jpg%}\n\n\n\n### 1. ROS功能包（3D边界框）版本依赖\n#### 报错说明：\n```bash\n[ERROR] [1716102452.243813263]: PluginlibFactory: The plugin for class 'jsk_rviz_plugin/BoundingBoxArray' failed to load.  Error: According to the loaded plugin descriptions the cl                ass jsk_rviz_plugin/BoundingBoxArray with base class type rviz::Display does not exist. Declared types are  rviz/AccelStamped rviz/Axes rviz/Camera rviz/DepthCloud rviz/Effort rviz                /FluidPressure rviz/Grid rviz/GridCells rviz/Illuminance rviz/Image rviz/InteractiveMarkers rviz/LaserScan rviz/Map rviz/Marker rviz/MarkerArray rviz/Odometry rviz/Path rviz/PointC                loud rviz/PointCloud2 rviz/PointStamped rviz/Polygon rviz/Pose rviz/PoseArray rviz/PoseWithCovariance rviz/Range rviz/RelativeHumidity rviz/RobotModel rviz/TF rviz/Temperature rviz                /TwistStamped rviz/WrenchStamped rviz_plugin_tutorials/Imu\n```\n##### 解决方法：\n卸载并重新安装`jsk_rviz_plugin/BoundingBoxArray`功能包，但后续遇到：undefined symbol类报错: undefined symbol: _ZN8GMapping 14 sampleGaussianEdm\n该问题一般是缺失或者没有找到该功能包所需的某个.so 动态链接库文件。\n对符号解析：\n```bash\nc++filt _ZN8GMapping14sampleGaussianEdm\n```\n结果是`GMapping::sampleGaussian(double, unsigned long)`\n这表明运行报错的原因是系统在寻找 GMapping::sampleGaussian 函数的定义时，未能成功找到\n估计问题出现在其他依赖版本低，但这个ROS包依赖版本较高，于是使用`sudo apt-get upgrade`更新所有已经安装的依赖包，问题得以解决 \n\n### 2. [rosrun] Couldn‘t find executable named hello_world_cpp below\n#### 报错说明：\ncatkin_make之后source ./devel/setup.bash\nsource之后运行节点的时候,ros找不到可执行文件\n\n#### 解决方法\n1. 检查Cmakelists.txt.\n2. 查看catkin_package()位置.\n3. 要注意的是 This function must be called before declaring any targets with add_library() or add_executable().，也就是说Cmakelists.txt.中，要确保配置是在`catkin_package()`之后，否则编译完运行就会出现这个问题\n\n\n\n#### 摄像头运行报错\n{% note danger flat %}摄像头运行\n(my_publisher:59106): GStreamer-CRITICAL **: 20:44:32.821: \nTrying to dispose element pipeline0, but it is in PAUSED instead of the NULL state.\nYou need to explicitly set elements to the NULL state before\ndropping the final reference, to allow them to clean up.\nThis problem may also be caused by a refcounting bug in the\napplication or some element.\n\n[ WARN:0] global ../modules/videoio/src/cap_gstreamer.cpp (888) open OpenCV | GStreamer warning: unable to start pipeline\n\n(my_publisher:59106): GStreamer-CRITICAL **: 20:44:32.821: \nTrying to dispose element videoconvert0, but it is in PLAYING instead of the NULL state.\nYou need to explicitly set elements to the NULL state before\ndropping the final reference, to allow them to clean up.\nThis problem may also be caused by a refcounting bug in the\napplication or some element.\n\n[ WARN:0] global ../modules/videoio/src/cap_gstreamer.cpp (480) isPipelinePlaying OpenCV | GStreamer warning: GStreamer: pipeline have not been created\n\n(my_publisher:59106): GStreamer-CRITICAL **: 20:44:32.822: \nTrying to dispose element appsink0, but it is in READY instead of the NULL state.\nYou need to explicitly set elements to the NULL state before\ndropping the final reference, to allow them to clean up.\nThis problem may also be caused by a refcounting bug in the\napplication or some element.\n\n[ WARN:0] global ../modules/videoio/src/cap_v4l.cpp (887) open VIDEOIO(V4L2:/dev/video2): can't open camera by index\n[ERROR] [1717505072.826801829]: ????????????????????????\n\n(my_publisher:59106): GStreamer-CRITICAL **: 20:44:32.829: gst_element_post_message: assertion 'GST_IS_ELEMENT (element)' failed\n\n{% endnote %}\n\n#### 解决问题：\n报错原因是因为摄像头打开之后没有关闭，在代码中虽然写了关闭命令，但是没有执行到那一步就直接关闭了，导致的问题，重新启动roscore，rosrun就行\n\n\n\n\n\n\n\n","slug":"ROS-BEVDet开发日记","published":1,"updated":"2024-12-31T11:25:00.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6iny0013mktte55ge7lb","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试.\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"15413954ef4334d167479f8c931a665596653af902d442a7fef1a455d9e82371\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-xray\">\n      <input class=\"hbe hbe-input-field hbe-input-field-xray\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-xray\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-xray\">您好, 这里需要密码.</span>\n      </label>\n      <svg class=\"hbe hbe-graphic hbe-graphic-xray\" width=\"300%\" height=\"100%\" viewBox=\"0 0 1200 60\" preserveAspectRatio=\"none\">\n        <path d=\"M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0\"></path>\n        <path d=\"M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0\"></path>\n      </svg>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"有东西被加密了, 请输入密码查看.","more":"有东西被加密了, 请输入密码查看.","origin":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>开发跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/5/18</p>\n</div></div><div class='timeline-item-content'><p>于jetson orin nano板子上部署好ROS_BVEDet环境，TensorRT部署</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/5/19</p>\n</div></div><div class='timeline-item-content'><p>模型Onnx转换，跑通ROS结点，完成推理</p>\n<p><img src=\"/img/1.gif\" alt=\"结果\"></p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/5/24</p>\n</div></div><div class='timeline-item-content'><p>考试周项目延期</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/5/27</p>\n</div></div><div class='timeline-item-content'><p>BEVDet源码关于图像接口已经阅读完毕，正在进行摄像头的接入工作（修改之前写好的结点），由于项目的依赖关系，需要另外阅读学习，对其中数据包进行深入学习，其中有：</p>\n<div class=\"note info flat\"><p>参考：<a href=\"https://github.com/LCH1238/bevdet-tensorrt-cpp\">BEVDet by TensorRT、C++</a><br>\n项目特色：</p>\n<ul>\n<li>结合了调整大小、裁剪和归一化进行预处理的 CUDA 内核</li>\n<li>预处理 CUDA 内核包括两种插值方法：最近邻插值和双三次插值</li>\n<li>使用 C++ 和 CUDA 内核实现对齐相邻帧 BEV 特征</li>\n</ul>\n</div>\n<div class=\"note info flat\"><p>参考：<a href=\"https://github.com/linClubs/BEVDet-ROS-TensorRT\">BEVDet-ROS-TensorRT工程实现</a><br>\n项目特色：</p>\n<ul>\n<li>使用 CUDA、TensorRT、ROS1 和 C++ 进行 BEVDet 在线实时推理的源代码和模型。</li>\n</ul>\n</div>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/5/28</p>\n</div></div><div class='timeline-item-content'><p>阅读了bevdet-tensort-cpp-master文件中的bevdet.cpp文件<br>\n此文件中主要是各种引擎，参数的初始化以及部分的处理图像<br>\n图像处理主要是再两个函数：<br>\n读取相机数据（从文件中读取？！（待定））以及对齐图片，处理矩阵都是函数InitParams<br>\n预处理、特征提取、BEV特征池化、特征对齐（可选）、BEV阶段网络前向传播以及后处理是DoInfer函数<br>\n[步骤 1] : 预处理图像，包括调整大小、裁剪和归一化</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CHECK_CUDA</span>(<span class=\"built_in\">cudaMemcpy</span>(src_imgs_dev, cam_data.imgs_dev,</span><br><span class=\"line\">    N_img * src_img_h * src_img_w * <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(uchar), cudaMemcpyDeviceToDevice));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">preprocess</span>(src_imgs_dev, (<span class=\"type\">float</span>*)imgstage_buffer[imgbuffer_map[<span class=\"string\">&quot;images&quot;</span>]], N_img, src_img_h, src_img_w,</span><br><span class=\"line\">           input_img_h, input_img_w, resize_radio, resize_radio, crop_h, crop_w, mean, std, pre_sample);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化深度信息</span></span><br><span class=\"line\"><span class=\"built_in\">InitDepth</span>(cam_data.param.cams2ego_rot, cam_data.param.cams2ego_trans, cam_data.param.cams_intrin);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>[步骤 2] : 图像阶段网络前向传递</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">cudaStream_t stream;</span><br><span class=\"line\"><span class=\"built_in\">CHECK_CUDA</span>(<span class=\"built_in\">cudaStreamCreate</span>(&amp;stream));</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!imgstage_context-&gt;<span class=\"built_in\">enqueueV2</span>(imgstage_buffer, stream, <span class=\"literal\">nullptr</span>))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Image stage forward failing!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>[步骤 3] : BEV池化</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bev_pool_v2</span>(bevpool_channel, unique_bev_num, bev_h * bev_w,</span><br><span class=\"line\">            (<span class=\"type\">float</span>*)imgstage_buffer[imgbuffer_map[<span class=\"string\">&quot;depth&quot;</span>]],</span><br><span class=\"line\">            (<span class=\"type\">float</span>*)imgstage_buffer[imgbuffer_map[<span class=\"string\">&quot;images_feat&quot;</span>]],</span><br><span class=\"line\">            ranks_depth_dev, ranks_feat_dev, ranks_bev_dev,</span><br><span class=\"line\">            interval_starts_dev, interval_lengths_dev,</span><br><span class=\"line\">            (<span class=\"type\">float</span>*)bevstage_buffer[bevbuffer_map[<span class=\"string\">&quot;BEV_feat&quot;</span>]]</span><br><span class=\"line\">            );</span><br></pre></td></tr></table></figure>\n<p>[步骤 4] : 对齐 BEV 特征</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(use_adj)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">GetAdjFrameFeature</span>(cam_data.param.scene_token, cam_data.param.ego2global_rot,</span><br><span class=\"line\">                       cam_data.param.ego2global_trans, (<span class=\"type\">float</span>*)bevstage_buffer[bevbuffer_map[<span class=\"string\">&quot;BEV_feat&quot;</span>]]);</span><br><span class=\"line\">    <span class=\"comment\">// 同步 CUDA 设备</span></span><br><span class=\"line\">    <span class=\"built_in\">CHECK_CUDA</span>(<span class=\"built_in\">cudaDeviceSynchronize</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>[步骤 5] : BEV阶段网络前向传递</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!bevstage_context-&gt;<span class=\"built_in\">enqueueV2</span>(bevstage_buffer, stream, <span class=\"literal\">nullptr</span>))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;BEV stage forward failing!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>[步骤 6] : 后处理</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">postprocess_ptr-&gt;<span class=\"built_in\">DoPostprocess</span>(bevstage_buffer, out_detections);</span><br></pre></td></tr></table></figure>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/5/29</p>\n</div></div><div class='timeline-item-content'><p>阅读了<code>bevdet-tensort-cpp-master</code>文件中的<code>nvjpegdecoder.cpp</code>文件<br>\n此文件主要用于图像解码<br>\n对<code>Jpeg</code>图像进行解码</p>\n<p>阅读了<code>bevdet-tensort-cpp-master</code>文件中的<code>cpu_jpegdecoder.cpp</code>文件<br>\n此文件主要用于图像输出<br>\n将<code>Jpeg</code>压缩图像转化为Reg可是图像</p>\n<p>阅读了<code>bevdet-tensort-cpp-master</code>文件中的<code>data.cpp</code>文件<br>\n此文件主要用于获取数据和是数据处理<br>\n此文件获取数据是从<span class='p red'>yaml</span>文件中获取</p>\n<p>完成了对<code>bevdet-tensort-cpp-master</code>文件主要代码的阅读</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/5/30</p>\n</div></div><div class='timeline-item-content'><h3 id=\"开始阅读BEVDet-Ros-TensorRT-main文件：\">开始阅读BEVDet-Ros-TensorRT-main文件：</h3>\n<pre><code>此文件是基于bevdet-tensort-cpp-master上与ros的结合，所以此文件的src文件与cpp相同，作用也相同\n所以需要看./test部分\n</code></pre>\n<p>./test/01test.cpp文件中<br>\n此文件主要为测试单个样例<br>\n其中值得关注部分为Egobox2Lidarbox函数<br>\n此函数的目的是<br>\n1. 将盒子的中心从自车坐标系转换到激光雷达坐标系。<br>\n2. 使用激光雷达到自车的旋转矩阵和平移向量对盒子进行旋转和平移变换。<br>\n3. 将变换后的盒子添加到激光雷达坐标系的盒子集合中。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Egobox2Lidarbox</span><span class=\"params\">(<span class=\"type\">const</span> std::vector&lt;Box&gt;&amp; ego_boxes, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                     std::vector&lt;Box&gt;&amp; lidar_boxes,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                     <span class=\"type\">const</span> Eigen::Quaternion&lt;<span class=\"type\">float</span>&gt;&amp; lidar2ego_rot,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                     <span class=\"type\">const</span> Eigen::Translation3f&amp; lidar2ego_trans)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历所有的自车框 ego_boxes</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; ego_boxes.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 复制当前自车框</span></span><br><span class=\"line\">        Box b = ego_boxes[i];</span><br><span class=\"line\">        <span class=\"comment\">// 提取当前框的中心点坐标</span></span><br><span class=\"line\">        <span class=\"function\">Eigen::Vector3f <span class=\"title\">center</span><span class=\"params\">(b.x, b.y, b.z)</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 将中心点从自车坐标系转换到激光雷达坐标系</span></span><br><span class=\"line\">        center -= lidar2ego_trans.<span class=\"built_in\">translation</span>();</span><br><span class=\"line\">        center = lidar2ego_rot.<span class=\"built_in\">inverse</span>().<span class=\"built_in\">matrix</span>() * center;</span><br><span class=\"line\">        <span class=\"comment\">// 调整框的旋转角度以匹配激光雷达坐标系</span></span><br><span class=\"line\">        b.r -= lidar2ego_rot.<span class=\"built_in\">matrix</span>().<span class=\"built_in\">eulerAngles</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>).<span class=\"built_in\">z</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 更新框的位置到激光雷达坐标系</span></span><br><span class=\"line\">        b.x = center.<span class=\"built_in\">x</span>();</span><br><span class=\"line\">        b.y = center.<span class=\"built_in\">y</span>();</span><br><span class=\"line\">        b.z = center.<span class=\"built_in\">z</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 将转换后的框添加到输出容器 lidar_boxes 中</span></span><br><span class=\"line\">        lidar_boxes.<span class=\"built_in\">push_back</span>(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>./test/demo_bevdet.cpp</code>文件<br>\n此文件是01test的一个demo，可以运行测试一个关键帧</p>\n<p><code>./test/view.cpp</code>文件<br>\n此文件是一个视图文件，和demo没有很大区别</p>\n<p>重点：<br>\n<code>./test/view.cpp</code>文件<br>\n在这个文件中找到了发布订阅消息的部分<br>\n处理来自多个传感器的数据，执行图像处理和目标检测，并将结果发布到 ROS 话题中。<br>\n1. 将接收到的点云数据转换为 PCL 中的点云格式。<br>\n2. 将接收到的图像数据转换为 OpenCV 的图像格式，并存储在一个向量中。<br>\n3. 将图像数据从 CPU 拷贝到 GPU，并进行通道转换。<br>\n4. 进行推理，使用深度学习模型对图像数据进行检测，得到一些边界框。<br>\n5. 将检测到的边界框从车辆坐标系转换到雷达坐标系。<br>\n6. 发布转换后的边界框消息和点云消息到 ROS。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">RosNode::callback</span><span class=\"params\">(<span class=\"type\">const</span> sensor_msgs::PointCloud2ConstPtr&amp; msg_cloud, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">const</span> sensor_msgs::ImageConstPtr&amp; msg_fl_img,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">const</span> sensor_msgs::ImageConstPtr&amp; msg_f_img,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">const</span> sensor_msgs::ImageConstPtr&amp; msg_fr_img,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">const</span> sensor_msgs::ImageConstPtr&amp; msg_bl_img,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">const</span> sensor_msgs::ImageConstPtr&amp; msg_b_img,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">const</span> sensor_msgs::ImageConstPtr&amp; msg_br_img)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;   </span><br><span class=\"line\">    <span class=\"comment\">// 创建一个指向 PCL 点云的指针</span></span><br><span class=\"line\">    pcl::PointCloud&lt;PointT&gt;::<span class=\"function\">Ptr <span class=\"title\">cloud</span><span class=\"params\">(<span class=\"keyword\">new</span> pcl::PointCloud&lt;PointT&gt;)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将 ROS 中的点云消息转换为 PCL 点云格式</span></span><br><span class=\"line\">    pcl::<span class=\"built_in\">fromROSMsg</span>(*msg_cloud, *cloud);</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">// 创建用于存储图像的 OpenCV Mat 对象</span></span><br><span class=\"line\">    cv::Mat img_fl, img_f, img_fr, img_bl, img_b, img_br;</span><br><span class=\"line\">    std::vector&lt;cv::Mat&gt; imgs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 ROS 中的图像消息转换为 OpenCV 图像格式</span></span><br><span class=\"line\">    img_fl = cv_bridge::<span class=\"built_in\">toCvShare</span>(msg_fl_img, <span class=\"string\">&quot;bgr8&quot;</span>)-&gt;image;</span><br><span class=\"line\">    img_f  = cv_bridge::<span class=\"built_in\">toCvShare</span>(msg_f_img, <span class=\"string\">&quot;bgr8&quot;</span>)-&gt;image;</span><br><span class=\"line\">    img_fr = cv_bridge::<span class=\"built_in\">toCvShare</span>(msg_fr_img, <span class=\"string\">&quot;bgr8&quot;</span>)-&gt;image;</span><br><span class=\"line\">    img_bl = cv_bridge::<span class=\"built_in\">toCvShare</span>(msg_bl_img, <span class=\"string\">&quot;bgr8&quot;</span>)-&gt;image;</span><br><span class=\"line\">    img_b  = cv_bridge::<span class=\"built_in\">toCvShare</span>(msg_b_img, <span class=\"string\">&quot;bgr8&quot;</span>)-&gt;image;</span><br><span class=\"line\">    img_br = cv_bridge::<span class=\"built_in\">toCvShare</span>(msg_br_img, <span class=\"string\">&quot;bgr8&quot;</span>)-&gt;image;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将图像存储在一个向量中</span></span><br><span class=\"line\">    imgs.<span class=\"built_in\">emplace_back</span>(img_fl);</span><br><span class=\"line\">    imgs.<span class=\"built_in\">emplace_back</span>(img_f);</span><br><span class=\"line\">    imgs.<span class=\"built_in\">emplace_back</span>(img_fr);</span><br><span class=\"line\">    imgs.<span class=\"built_in\">emplace_back</span>(img_bl);</span><br><span class=\"line\">    imgs.<span class=\"built_in\">emplace_back</span>(img_b);</span><br><span class=\"line\">    imgs.<span class=\"built_in\">emplace_back</span>(img_br);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将图像数据转换为向量，并存储在 imgs_data 中</span></span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">char</span>&gt;&gt; imgs_data;</span><br><span class=\"line\">    <span class=\"built_in\">cvImgToArr</span>(imgs, imgs_data);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将图像数据从 CPU 拷贝到 GPU 上，并进行通道转换</span></span><br><span class=\"line\">    <span class=\"built_in\">decode_cpu</span>(imgs_data, imgs_dev_, img_w_, img_h_);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 GPU 上的图像数据存储在样本数据中</span></span><br><span class=\"line\">    sampleData_.imgs_dev = imgs_dev_;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个存储边界框的向量</span></span><br><span class=\"line\">    std::vector&lt;Box&gt; ego_boxes;</span><br><span class=\"line\">    ego_boxes.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"type\">float</span> time = <span class=\"number\">0.f</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 使用深度学习模型对图像数据进行推理，得到一些边界框</span></span><br><span class=\"line\">    bevdet_-&gt;<span class=\"built_in\">DoInfer</span>(sampleData_, ego_boxes, time);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 ROS BoundingBoxArray 消息指针</span></span><br><span class=\"line\">    <span class=\"function\">jsk_recognition_msgs::BoundingBoxArrayPtr <span class=\"title\">lidar_boxes</span><span class=\"params\">(<span class=\"keyword\">new</span> jsk_recognition_msgs::BoundingBoxArray)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 清空雷达边界框数组</span></span><br><span class=\"line\">    lidar_boxes-&gt;boxes.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将车辆坐标系下的边界框转换到雷达坐标系下</span></span><br><span class=\"line\">    <span class=\"built_in\">Egobox2Lidarbox</span>(ego_boxes, lidar_boxes, sampleData_.param.lidar2ego_rot, </span><br><span class=\"line\">                                            sampleData_.param.lidar2ego_trans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置雷达边界框消息的帧 ID 和时间戳</span></span><br><span class=\"line\">    lidar_boxes-&gt;header.frame_id = <span class=\"string\">&quot;map&quot;</span>;</span><br><span class=\"line\">    lidar_boxes-&gt;header.stamp = ros::Time::<span class=\"built_in\">now</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 发布转换后的边界框消息</span></span><br><span class=\"line\">    pub_boxes_.<span class=\"built_in\">publish</span>(*lidar_boxes);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新的 ROS 点云消息</span></span><br><span class=\"line\">    sensor_msgs::PointCloud2 msg_cloud_new;</span><br><span class=\"line\">    pcl::<span class=\"built_in\">toROSMsg</span>(*cloud, msg_cloud_new);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置点云消息的帧 ID 和时间戳</span></span><br><span class=\"line\">    msg_cloud_new.header.frame_id = <span class=\"string\">&quot;map&quot;</span>;</span><br><span class=\"line\">    msg_cloud_new.header.stamp = ros::Time::<span class=\"built_in\">now</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 发布点云消息</span></span><br><span class=\"line\">    pub_cloud_.<span class=\"built_in\">publish</span>(msg_cloud_new);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/5/31</p>\n</div></div><div class='timeline-item-content'><h3 id=\"已经阅读完整体项目代码，已经标记好输入输出\">已经阅读完整体项目代码，已经标记好输入输出</h3>\n<ol>\n<li>完成新开发板的环境迁移及项目迁移</li>\n<li>配合研究生学长调试摄像头</li>\n<li>目前实现了opencv读取摄像头</li>\n</ol>\n<h4 id=\"还需要解决的问题\">还需要解决的问题</h4>\n<ol>\n<li>读取的摄像头图片尺寸问题，可以调整摄像头焦距或opencv对图像大小进行处理</li>\n<li>摄像头结点的标定</li>\n</ol>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/6/3</p>\n</div></div><div class='timeline-item-content'><h3 id=\"发现周五摄像头处理的问题，经过改进发现解决不了，选择换一条思路进行\">发现周五摄像头处理的问题，经过改进发现解决不了，选择换一条思路进行</h3>\n<ul>\n<li>摄像头不是一般的usb摄像头，直接通过<code>opencv</code>读取效果不好，经查询得知拉流使用gstreamer进行拉流</li>\n<li>在orin板子上的<code>camera.sh</code>脚本也是通过<code>gstreamer</code>进行拉流调取的</li>\n<li>经过网络搜索，成功找到了<code>gstreamer</code>的官方文档，并找到<code>opencv</code>相关，正在学习之中</li>\n<li>也找到了一个同样使用<code>opencv+gstreamer</code>拉流，并能在<code>jetson</code>平台使用的项目</li>\n<li>同时也找到如何在ROS结点中传输视频流</li>\n</ul>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/6/4</p>\n</div></div><div class='timeline-item-content'><h3 id=\"继续对周五遗留问题的处理，尝试利用多线程\">继续对周五遗留问题的处理，尝试利用多线程</h3>\n<ul>\n<li>自己写了一个多线程程序进行读取，但是摄像头出现warning报错，得不到图像数据</li>\n<li>github上找到了其他人写好的项目，还没有来得及尝试</li>\n<li>尝试修改<code>cv::VideoCapture::VideoCapture</code>的参数，加入gst的指令</li>\n</ul>\n</div></div></div>\n<h1>详细开发过程记录</h1>\n<h2 id=\"参考文档\">参考文档</h2>\n<div class=\"tag link\"><a class=\"link-card\" title=\"BEVDet by TensorRT、C++\" href=\"https://github.com/LCH1238/bevdet-tensorrt-cpp\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg\"/></div><div class=\"right\"><p class=\"text\">BEVDet by TensorRT、C++</p><p class=\"url\">https://github.com/LCH1238/bevdet-tensorrt-cpp</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"BEVDet-ROS-TensorRT工程实现\" href=\"https://github.com/linClubs/BEVDet-ROS-TensorRT\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg\"/></div><div class=\"right\"><p class=\"text\">BEVDet-ROS-TensorRT工程实现</p><p class=\"url\">https://github.com/linClubs/BEVDet-ROS-TensorRT</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"ROS学习与踩坑记录（持续更新版）\" href=\"https://blog.csdn.net/weixin_43603658/article/details/130236856\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png\"/></div><div class=\"right\"><p class=\"text\">ROS学习与踩坑记录（持续更新版）</p><p class=\"url\">https://blog.csdn.net/weixin_43603658/article/details/130236856</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"全网最全Linux软件包管理apt-get命令\" href=\"https://blog.csdn.net/qq_57737603/article/details/131117772\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png\"/></div><div class=\"right\"><p class=\"text\">全网最全Linux软件包管理apt-get命令</p><p class=\"url\">https://blog.csdn.net/qq_57737603/article/details/131117772</p></div></a></div> \n<h2 id=\"环境配置\">环境配置</h2>\n<h3 id=\"ROS-BEVDet搭建\">ROS_BEVDet搭建</h3>\n<h4 id=\"拉取源码\">拉取源码</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p bev_ws/src</span><br><span class=\"line\"><span class=\"built_in\">cd</span> bev_ws/src</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/linClubs/BEVDet-ROS-TensorRT.git</span><br></pre></td></tr></table></figure>\n<h4 id=\"onnx引擎，TensorRT\">onnx引擎，TensorRT</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 创建一个python环境，并安装相关python库</span></span><br><span class=\"line\">pip install onnx ruamel.yaml==0.17.32</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 进入工程目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> BEVDet-ROS-TensorRT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 onnx2engine</span></span><br><span class=\"line\">python tools/export_engine.py ./ckpts/lt_d.yaml ./ckpts/img_stage_lt_d.onnx ./ckpts/bev_stage_lt_d.onnx --postfix=_lt_d --fp16 <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"ROS功能包\">ROS功能包</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新软件源列表</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"><span class=\"comment\"># 根据ROS版本选择对应的指令</span></span><br><span class=\"line\"><span class=\"comment\"># ubuntu16.04:kinetic</span></span><br><span class=\"line\">sudo apt-get install ros-kinetic-jsk-recognition-msgs</span><br><span class=\"line\">sudo apt-get install ros-kinetic-jsk-rviz-plugins</span><br><span class=\"line\"><span class=\"comment\"># ubuntu18.04:melodic</span></span><br><span class=\"line\">sudo apt-get install ros-melodic-jsk-recognition-msgs</span><br><span class=\"line\">sudo apt-get install ros-melodic-jsk-rviz-plugins</span><br><span class=\"line\"><span class=\"comment\"># ubuntu20.04:noetic</span></span><br><span class=\"line\">sudo apt-get install ros-noetic-jsk-recognition-msgs</span><br><span class=\"line\">sudo apt-get install ros-noetic-jsk-rviz-plugins</span><br></pre></td></tr></table></figure>\n<h4 id=\"编译运行\">编译运行</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 编译</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> bev_ws </span><br><span class=\"line\">catkin make</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 工作空间生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> devel/setup.bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 运行</span></span><br><span class=\"line\">roslaunch bevdet bevdet_node.launch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4 播放数据集</span></span><br><span class=\"line\">rosbag play nus.bag</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"摄像头opencv-gstreamer拉流\">摄像头opencv+gstreamer拉流</h2>\n<h3 id=\"参考文档-2\">参考文档</h3>\n<div class=\"tag link\"><a class=\"link-card\" title=\"gstreamer opencv文档\" href=\"https://gstreamer.freedesktop.org/documentation//opencv/index.html?gi-language=c\"><div class=\"left\"><img src=\"https://gstreamer.freedesktop.org/documentation//assets/images/gstreamer-logo.svg\"/></div><div class=\"right\"><p class=\"text\">gstreamer opencv文档</p><p class=\"url\">https://gstreamer.freedesktop.org/documentation//opencv/index.html?gi-language=c</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"opencv+gstreamer拉流\" href=\"https://blog.csdn.net/hello_dear_you/article/details/129290712\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png\"/></div><div class=\"right\"><p class=\"text\">opencv+gstreamer拉流</p><p class=\"url\">https://blog.csdn.net/hello_dear_you/article/details/129290712</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"ros_rtsp订阅Image类型topic转换为rtsp视频流\" href=\"https://blog.csdn.net/qq_42257666/article/details/130559000\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png\"/></div><div class=\"right\"><p class=\"text\">ros_rtsp订阅Image类型topic转换为rtsp视频流</p><p class=\"url\">https://blog.csdn.net/qq_42257666/article/details/130559000</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"jetson_gmsl_camera_streamer\" href=\"https://github.com/stanislavkuskov/jetson_gmsl_camera_streamer\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg\"/></div><div class=\"right\"><p class=\"text\">jetson_gmsl_camera_streamer</p><p class=\"url\">https://github.com/stanislavkuskov/jetson_gmsl_camera_streamer</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"gmsl相机的C++驱动，目前支持ros消息发布\" href=\"https://github.com/CodeColdCook/gmsl_camera_driver\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/05/SyojJXzxWFNIYT8.jpg\"/></div><div class=\"right\"><p class=\"text\">gmsl相机的C++驱动，目前支持ros消息发布</p><p class=\"url\">https://github.com/CodeColdCook/gmsl_camera_driver</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"读取gmsl接口数据，rosbag录制话题\" href=\"https://blog.csdn.net/weixin_43492473/article/details/124992400\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png\"/></div><div class=\"right\"><p class=\"text\">读取gmsl接口数据，rosbag录制话题</p><p class=\"url\">https://blog.csdn.net/weixin_43492473/article/details/124992400</p></div></a></div> \n<h3 id=\"gstreamer相关函数说明\">gstreamer相关函数说明</h3>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cameracalibrate</td>\n<td>通过使用上游/下游相机将相机指向棋盘图案来执行相机校准undistort</td>\n</tr>\n<tr>\n<td>cameraundistort</td>\n<td>该元件执行相机校准。校准程序完成后：包含相机校正参数的事件将发送到上游 和下游被相机消耗不失真元素。settings 属性设置为相机校正参数（如 序列化 OpenCV 对象的不透明字符串）。 此属性的值稍后可用于配置 cameraundistort 元素。该元素变为空闲状态，稍后可以重新启动 [TODO]。</td>\n</tr>\n<tr>\n<td>cvdilate</td>\n<td>放大图像</td>\n</tr>\n<tr>\n<td>cvequalizehist</td>\n<td>均衡灰度图像的直方图 功能</td>\n</tr>\n<tr>\n<td>cverode</td>\n<td>侵蚀图像</td>\n</tr>\n<tr>\n<td>cvlaplace</td>\n<td>将 cvLaplace OpenCV 函数应用于图像(??)</td>\n</tr>\n<tr>\n<td>cvsmooth</td>\n<td>平滑图像</td>\n</tr>\n<tr>\n<td>cvtracker</td>\n<td>对视频执行对象跟踪，并将其存储在视频缓冲区元数据中</td>\n</tr>\n<tr>\n<td>dewarp</td>\n<td>畸变图像</td>\n</tr>\n<tr>\n<td>disparity</td>\n<td>从两个（序列）校正和对齐的立体图像计算立体视差图</td>\n</tr>\n<tr>\n<td>edgedetect</td>\n<td>对视频和图像执行精明的边缘检测</td>\n</tr>\n<tr>\n<td>faceblur</td>\n<td>模糊图像和视频中的人脸</td>\n</tr>\n<tr>\n<td>facedetect</td>\n<td>对视频和图像执行人脸检测</td>\n</tr>\n<tr>\n<td>grabcut</td>\n<td>此元素是 OpenCV grabcut 实现的包装器。</td>\n</tr>\n<tr>\n<td>handdetect</td>\n<td>对视频进行手势检测，通过总线消息和导航事件提供检测到的手部位置，并处理手势事件</td>\n</tr>\n<tr>\n<td>motioncells</td>\n<td>对视频执行运动检测</td>\n</tr>\n<tr>\n<td>opencvtextoverlay</td>\n<td>OpenCVtextOverlay 在视频帧顶部呈现文本</td>\n</tr>\n<tr>\n<td>retinex</td>\n<td>用于彩色图像增强的基本和多尺度 retinex</td>\n</tr>\n<tr>\n<td>segmentation</td>\n<td>此元素使用多种方法之一创建和更新 fg/bg 模型。</td>\n</tr>\n<tr>\n<td>skindetect</td>\n<td>视频和图像上的人体皮肤检测</td>\n</tr>\n<tr>\n<td>templatematch</td>\n<td>对视频和图像进行模板匹配，通过总线消息提供检测到的位置。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>GrabCut:<br>\n是一个 基于图切技术的图像分割方法。它可以看作是 从某些 FG 和 BG“种子”区域对图像进行细粒度分割的方法。这 OpenCV 的实现遵循文章</li>\n<li>Retinex:<br>\n此元素使用多种方法之一创建和更新 fg/bg 模型。 称为“codebook”的是指遵循 opencv 的 codebook 方法 O’Reilly 书 [1] 在 K. Kim 中描述的算法的实现， T. H. Chalidabhongse、D. Harwood 和 L. Davis [2]。背景SubtractorMOG [3]， 或短片的 MOG，指基于高斯混合的背景/前景 分割算法。OpenCV MOG 实现了 [4] 中描述的算法。 背景SubtractorMOG2 [5]，指的是另一个基于高斯混合的 背景/前景分割算法。OpenCV MOG2 实现了 算法在 [6] 和 [7] 中描述。</li>\n</ul>\n<p>[1] 学习 OpenCV：使用 OpenCV 库的计算机视觉，作者：Gary Bradski 和 Adrian Kaehler，由 O’Reilly Media 出版，2008 年 10 月 3 日 [2] “使用 Codebook 模型的实时前景-背景分割”， Real-time Imaging，第 11 卷，第 3 期，第 167-256 页，2005 年 6 月。 [3] <a href=\"http://opencv.itseez.com/modules/video/doc/motion_analysis_and_object_tracking.html#backgroundsubtractormog\">http://opencv.itseez.com/modules/video/doc/motion_analysis_and_object_tracking.html#backgroundsubtractormog</a> [4] P. KadewTraKuPong 和 R. Bowden，“改进的自适应背景 用于阴影检测实时跟踪的混合模型“，第 2 期 2001年欧洲先进视频监控系统研讨会 [5] <a href=\"http://opencv.itseez.com/modules/video/doc/motion_analysis_and_object_tracking.html#backgroundsubtractormog2\">http://opencv.itseez.com/modules/video/doc/motion_analysis_and_object_tracking.html#backgroundsubtractormog2</a> [6] Z.Zivkovic，“改进的背景自适应高斯混合模型 减法“，国际模式识别会议，英国，2004 年 8 月。 [7] Z.Zivkovic，F. van der Heijden，“高效的自适应密度估计 每个图像像素的背景减法任务“，模式识别 《信函》，第27卷，第7期，第773-780页，2006年。</p>\n<h3 id=\"尝试利用多线程进行图像数据传输\">尝试利用多线程进行图像数据传输</h3>\n<p>尝试多种办法来对摄像头数据进行读取，发现还是不能解决读取连续的问题，搜索后尝试使用多线程来处理这个问题</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ros/ros.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;image_transport/image_transport.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cv_bridge/cv_bridge.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span> <span class=\"comment\">// 引入多线程支持</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">imagePublisher</span><span class=\"params\">(<span class=\"type\">int</span> video_source, image_transport::Publisher pub)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">cv::VideoCapture <span class=\"title\">cap</span><span class=\"params\">(video_source)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cap.<span class=\"built_in\">isOpened</span>()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">ROS_ERROR</span>(<span class=\"string\">&quot;无法打开视频设备&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cv::Mat frame;</span><br><span class=\"line\">    sensor_msgs::ImagePtr msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ros::<span class=\"built_in\">ok</span>()) &#123;</span><br><span class=\"line\">        cap &gt;&gt; frame;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!frame.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            msg = cv_bridge::<span class=\"built_in\">CvImage</span>(std_msgs::<span class=\"built_in\">Header</span>(), <span class=\"string\">&quot;bgr8&quot;</span>, frame).<span class=\"built_in\">toImageMsg</span>();</span><br><span class=\"line\">            pub.<span class=\"built_in\">publish</span>(msg);</span><br><span class=\"line\">            <span class=\"built_in\">ROS_INFO</span>(<span class=\"string\">&quot;发布了一帧图像&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">ROS_WARN</span>(<span class=\"string\">&quot;捕获的帧为空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ros::<span class=\"built_in\">spinOnce</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    ros::<span class=\"built_in\">init</span>(argc, argv, <span class=\"string\">&quot;image_publisher&quot;</span>);</span><br><span class=\"line\">    ros::NodeHandle nh;</span><br><span class=\"line\">    <span class=\"function\">image_transport::ImageTransport <span class=\"title\">it</span><span class=\"params\">(nh)</span></span>;</span><br><span class=\"line\">    image_transport::Publisher pub = it.<span class=\"built_in\">advertise</span>(<span class=\"string\">&quot;camera/image&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> video_source = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个线程来发布图像</span></span><br><span class=\"line\">    <span class=\"function\">std::thread <span class=\"title\">image_publish_thread</span><span class=\"params\">(imagePublisher, video_source, pub)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ros::<span class=\"built_in\">spin</span>(); <span class=\"comment\">// 主线程继续进行ROS回调处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 等待图像发布线程结束</span></span><br><span class=\"line\">    image_publish_thread.<span class=\"built_in\">join</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将图像发布的功能封装到了一个名为<code>imagePublisher</code>的函数中，并通过<code>std::thread</code>在主函数中创建了一个新的线程来运行这个函数。这样，图像的发布和ROS回调处理就可以在不同的线程中并行执行，从而提高发送速度。但是由于摄像头报错，暂未实现得出。</p>\n<h3 id=\"总结：\">总结：</h3>\n<p>gstreamer拉流+opencv大部分是一些关于人体识别的函数，但是一些图像处理的运用是可以使用的。</p>\n<ol>\n<li>opencv+gstreamer拉流<br>\n来源：<a href=\"https://blog.csdn.net/hello_dear_you/article/details/129290712\">https://blog.csdn.net/hello_dear_you/article/details/129290712</a></li>\n</ol>\n<ul>\n<li>此内容主要用在NVIDIA的dGPU和Jetson平台都可以使用。主要是论证硬件解码更好用，但是重点关注代码内容</li>\n<li>OpenCV的VideoCapture类支持视频文件、图像序列或摄像头作为输入，获取数据。在这小节中，重点介绍如何使用VideoCapture类来拉取RTSP流媒体数据。</li>\n<li>通过调用如下的VideoCapure构造函数能实现对RTSP流数据的拉取</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">cv::VideoCapture::<span class=\"built_in\">VideoCapture</span>\t(\t<span class=\"type\">const</span> String &amp; \tfilename,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"type\">int</span> \tapiPreference \t</span><br><span class=\"line\">)\t</span><br></pre></td></tr></table></figure>\n<p>其中filename的输入可以是：</p>\n<ol>\n<li>视频文件路径；</li>\n<li>图像序列，例如图像序列名为image_00.jpg, image_01.jpg, image_02.jpg, 则可以设置为image_%02d.jpg；</li>\n<li>视频流的URL，例如：rtsp://admin@password:192.168.170.XXX；</li>\n<li>streamer的pipeline string，该pipeline可以使用gst-launch-1.0测试可用性；</li>\n<li>apiPreference指的是Capture API使用何种后端，包括cv::CAP_FFMPEG or cv::CAP_IMAGES or cv::CAP_DSHOW等。</li>\n</ol>\n<h2 id=\"问题与解决\">问题与解决</h2>\n<h2 id=\"参考文档-3\">参考文档</h2>\n<div class=\"tag link\"><a class=\"link-card\" title=\"科学的分析和解决ROS运行中产生的undefined symbol类报错的方法\" href=\"https://blog.csdn.net/qq_44339029/article/details/137341737\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png\"/></div><div class=\"right\"><p class=\"text\">科学的分析和解决ROS运行中产生的undefined symbol类报错的方法</p><p class=\"url\">https://blog.csdn.net/qq_44339029/article/details/137341737</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"rosrun Couldn‘t find executable named below\" href=\"https://zhuanlan.zhihu.com/p/377429776\"><div class=\"left\"><img src=\"https://k.sinaimg.cn/n/sinakd20220810s/261/w650h411/20220810/574c-ec748c90d9828e5c452aca3f611d0df6.png/w700d1q75cms.jpg\"/></div><div class=\"right\"><p class=\"text\">rosrun Couldn‘t find executable named below</p><p class=\"url\">https://zhuanlan.zhihu.com/p/377429776</p></div></a></div>\n<h3 id=\"1-ROS功能包（3D边界框）版本依赖\">1. ROS功能包（3D边界框）版本依赖</h3>\n<h4 id=\"报错说明：\">报错说明：</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ERROR] [1716102452.243813263]: PluginlibFactory: The plugin <span class=\"keyword\">for</span> class <span class=\"string\">&#x27;jsk_rviz_plugin/BoundingBoxArray&#x27;</span> failed to load.  Error: According to the loaded plugin descriptions the cl                ass jsk_rviz_plugin/BoundingBoxArray with base class <span class=\"built_in\">type</span> rviz::Display does not exist. Declared types are  rviz/AccelStamped rviz/Axes rviz/Camera rviz/DepthCloud rviz/Effort rviz                /FluidPressure rviz/Grid rviz/GridCells rviz/Illuminance rviz/Image rviz/InteractiveMarkers rviz/LaserScan rviz/Map rviz/Marker rviz/MarkerArray rviz/Odometry rviz/Path rviz/PointC                loud rviz/PointCloud2 rviz/PointStamped rviz/Polygon rviz/Pose rviz/PoseArray rviz/PoseWithCovariance rviz/Range rviz/RelativeHumidity rviz/RobotModel rviz/TF rviz/Temperature rviz                /TwistStamped rviz/WrenchStamped rviz_plugin_tutorials/Imu</span><br></pre></td></tr></table></figure>\n<h5 id=\"解决方法：\">解决方法：</h5>\n<p>卸载并重新安装<code>jsk_rviz_plugin/BoundingBoxArray</code>功能包，但后续遇到：undefined symbol类报错: undefined symbol: _ZN8GMapping 14 sampleGaussianEdm<br>\n<a href=\"http://xn--4gqvd53lymoqf01ao9pyjaosh90aumcn8c16zuu6apk1a4wcvufsxge59cla1505cy6ewrk.so\">该问题一般是缺失或者没有找到该功能包所需的某个.so</a> 动态链接库文件。<br>\n对符号解析：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">c++filt _ZN8GMapping14sampleGaussianEdm</span><br></pre></td></tr></table></figure>\n<p>结果是<code>GMapping::sampleGaussian(double, unsigned long)</code><br>\n这表明运行报错的原因是系统在寻找 GMapping::sampleGaussian 函数的定义时，未能成功找到<br>\n估计问题出现在其他依赖版本低，但这个ROS包依赖版本较高，于是使用<code>sudo apt-get upgrade</code>更新所有已经安装的依赖包，问题得以解决</p>\n<h3 id=\"2-rosrun-Couldn‘t-find-executable-named-hello-world-cpp-below\">2. [rosrun] Couldn‘t find executable named hello_world_cpp below</h3>\n<h4 id=\"报错说明：-2\">报错说明：</h4>\n<p>catkin_make之后source ./devel/setup.bash<br>\nsource之后运行节点的时候,ros找不到可执行文件</p>\n<h4 id=\"解决方法\">解决方法</h4>\n<ol>\n<li>检查Cmakelists.txt.</li>\n<li>查看catkin_package()位置.</li>\n<li>要注意的是 This function must be called before declaring any targets with add_library() or add_executable().，也就是说Cmakelists.txt.中，要确保配置是在<code>catkin_package()</code>之后，否则编译完运行就会出现这个问题</li>\n</ol>\n<h4 id=\"摄像头运行报错\">摄像头运行报错</h4>\n<div class=\"note danger flat\"><p>摄像头运行<br>\n(my_publisher:59106): GStreamer-CRITICAL **: 20:44:32.821:<br>\nTrying to dispose element pipeline0, but it is in PAUSED instead of the NULL state.<br>\nYou need to explicitly set elements to the NULL state before<br>\ndropping the final reference, to allow them to clean up.<br>\nThis problem may also be caused by a refcounting bug in the<br>\napplication or some element.</p>\n<p>[ WARN:0] global …/modules/videoio/src/cap_gstreamer.cpp (888) open OpenCV | GStreamer warning: unable to start pipeline</p>\n<p>(my_publisher:59106): GStreamer-CRITICAL **: 20:44:32.821:<br>\nTrying to dispose element videoconvert0, but it is in PLAYING instead of the NULL state.<br>\nYou need to explicitly set elements to the NULL state before<br>\ndropping the final reference, to allow them to clean up.<br>\nThis problem may also be caused by a refcounting bug in the<br>\napplication or some element.</p>\n<p>[ WARN:0] global …/modules/videoio/src/cap_gstreamer.cpp (480) isPipelinePlaying OpenCV | GStreamer warning: GStreamer: pipeline have not been created</p>\n<p>(my_publisher:59106): GStreamer-CRITICAL **: 20:44:32.822:<br>\nTrying to dispose element appsink0, but it is in READY instead of the NULL state.<br>\nYou need to explicitly set elements to the NULL state before<br>\ndropping the final reference, to allow them to clean up.<br>\nThis problem may also be caused by a refcounting bug in the<br>\napplication or some element.</p>\n<p>[ WARN:0] global …/modules/videoio/src/cap_v4l.cpp (887) open VIDEOIO(V4L2:/dev/video2): can’t open camera by index<br>\n[ERROR] [1717505072.826801829]: ???</p>\n<p>(my_publisher:59106): GStreamer-CRITICAL **: 20:44:32.829: gst_element_post_message: assertion ‘GST_IS_ELEMENT (element)’ failed</p>\n</div>\n<h4 id=\"解决问题：\">解决问题：</h4>\n<p>报错原因是因为摄像头打开之后没有关闭，在代码中虽然写了关闭命令，但是没有执行到那一步就直接关闭了，导致的问题，重新启动roscore，rosrun就行</p>\n","encrypt":true},{"title":"OpenIPC","abbrlink":13129,"date":"2025-01-01T09:12:31.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2025/01/01/sdqb3c-0.svg","swiper_index":null,"_content":"\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n{% link 参考文章, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %} \n{% link Linux/Ubuntu20 安装 TP-link(RTL8812AU) 无线网卡驱动, https://blog.csdn.net/weixin_46283523/article/details/127072929, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %}    \n{% link 主流视频编码器H264、HEVC、AV1之间的视频质量以及编码速度比较, https://www.bilibili.com/opus/733259258149208084, https://image.aruoshui.fun/i/2025/01/02/snzz37-0.webp %}\n\n# 参考文献\n{% referfrom '[1]','徐瑶.基于H.264的视频压缩技术及其在视频监控系统中的应用[D].安徽大学,2014.' %}\n\n\n# 引言\n\n## 图传系统\n无线图传技术即无线图像传输技术，是指不用布线（线缆）利用无线电波来传输图像数据的技术。\n\n## 工作原理\n无线图传技术主要涉及图像采集、编码、调制、发射、接收、解调、解码和图像显示等环节。\n\n1. 图像采集：通过摄像头或其他图像采集设备获取图像信息。这些设备可以是专业的摄像机、监控摄像头、手机摄像头等。采集到的图像通常是模拟信号或数字信号，具体取决于采集设备的类型。当今常用设备有：\n   1. IMX415-AAQR-C:\n   IMX415-AAQR-C是一个对角线6.4mm（类型1/2.8）CMOS活动像素型固态图像传感器，具有一个正方形像素阵列和8.46 M有效像素。该芯片采用模拟2.9 V、数字1.1 V、接口1.8 V三层电源运行，功耗低。采用R、G、B原色镶嵌滤光片，实现高灵敏度、低暗电流、无涂片。该芯片具有一个具有可变电荷集成时间的电子快门。\n   ![imx415](https://image.aruoshui.fun/i/2025/01/02/slngku-0.webp)\n   \n2. 编码：如果采集到的图像是模拟信号，需要先进行模数转换，将其转换为数字信号。然后，使用图像编码算法对数字图像进行压缩编码，以减少数据量，便于传输。常见的图像编码标准有 H.264、H.265 等。\n   1. H.264/AVC\n   &nbsp;&nbsp;H264视频编码技术，是对序列帧图像进行压缩的技术。压缩之所以可能，是因为存在冗余数据。采用网络友好的结构和语法，有利于对误码和丢包的处理。在编码技术上，通过统一的VLC符号编码，高精度、多模式的位移估计，基于4X4块的整数变换，分层的编码语法等措施，使得H264算法具备很高的编码效率。  \n   &nbsp;&nbsp;视频实时性上，安徽大学在Hi3516SOC平台上实现H.264编码,并设计RTSP服务器用于在网络上传输H.264码流,使用VLC开源软件测试RTSP码流封包的正确性和评估H.264编码的图像效果。结果表明,该系统能够通过网络较为稳定地传输视频画面,而且画面清晰、数据传输快,满足视频监控的实时性需求。{% referto '[1]','' %}\n   2. H.265\n   &nbsp;&nbsp;是为了应对更高分辨率视频（如4K、8K）的需求而开发的。它的主要优势在于其更高的压缩效率，相比H.264，它能够在保持相同视频质量的情况下，将视频数据量减少大约30% - 50%。高效的压缩能力使得 H.265 在高清和超高清视频的存储与传输方面展现出了巨大的优势，特别是在网络带宽资源紧张或者存储空间有限的云桌面应用场景中。\n   3. AV1\n   现在最新的编码标准。\n   AV1编码器开源以及免专利费的优势，已有许多视频平台对其进行了支持，并且最近硬件也开始对AV1编码进行了支持，如英特尔Arc显卡、英伟达RTX40系显卡、以及即将发售的AMD RX7000系列显卡。可以预见的是，AV1编码将成为主流。\n   ![码率分析](https://image.aruoshui.fun/i/2025/01/02/smxx5h-0.webp)\n   \n3. 调制：将编码后的图像数据进行调制，即将数字信号转换为适合在无线信道中传输的信号形式。调制方式有很多种，如调频（FM）、调幅（AM）、调相（PM）等，以及数字调制方式如正交频分复用（OFDM）等。\n4. 发射：通过无线发射设备将调制后的信号发送出去。无线发射设备可以是 Wi-Fi 路由器、蓝牙设备、无线射频模块等。发射的信号通过空气等无线介质传播。\n   对于图传系统，最常用的就是USB网卡，适合需要便捷和灵活连接的用户，广泛用于台式机或无内建无线网卡的设备。\n   常见的有\n   1. rtl8812au\n   **由网卡芯片和USB网络适配器组成**\n   RTL8812AU是一颗高性能的无线局域网(Wi-Fi)芯片，它支持IEEE 802.11ac/a/n无线标准，提供高速无线连接能力。该芯片搭载了2.4GHz/5GHz双频段，能够提供高达867Mbps的数据传输速率。它内置了强大的信号处理单元，包含调制解调器和功率放大器，有效增强了无线信号的接收与发送性能，确保了较好的无线覆盖范围和连接稳定性。此外，RTL8812AU还集成了多输入多输出（MIMO）技术，通过使用多副天线来提高数据传输速率和系统的整体吞吐量。 \n   ![8812AU](https://image.aruoshui.fun/i/2025/01/02/sozr7s-0.webp)\n   USB网络适配器通常由RTL8812AU无线芯片、USB接口芯片、天线系统、以及必要的电源管理电路组成。RTL8812AU芯片作为无线通信的核心部件，负责无线信号的处理和数据包的发送与接收。USB接口芯片则负责与主机的通信，并将RTL8812AU芯片的数据流转换为USB总线上的数据流。天线系统负责无线信号的接收与发送，通常包含两个或多个天线以支持MIMO技术。电源管理电路包括稳压器和滤波电容，确保设备运行稳定并满足USB总线的供电要求。\n   2. IEEE 802.11\n   EEE 802.11标准的物理层技术包括跳频扩频（FHSS）、直接序列扩频（DSSS）、正交频分复用（OFDM）和多输入多输出（MIMO）等多种技术。这些技术各有特点，共同构成了IEEE 802.11标准强大的物理层传输能力。\n   3. USB接口协议\n   详见[Linux内核源码-USB驱动分析](https://blog.csdn.net/H520xcodenodev/article/details/141874401)\n   \n5. 接收：在接收端，使用相应的无线接收设备接收发射端发送过来的信号。接收设备需要与发射设备在相同的频率和调制方式下工作，才能正确接收信号。\n   **与发射是配套的关系，解决好驱动层面就能解决**\n   \n6. 解调：对接收到的信号进行解调，即将无线信号转换回数字信号。解调过程是调制的逆过程，需要根据发射端使用的调制方式进行相应的解调操作。\n   \n7. 解码：对解调后的数字信号进行解码，恢复出原始的图像数据。解码过程是编码的逆过程，需要使用与发射端相同的图像编码算法进行解码。 \n   **同样与编码部分一一对应**\n   \n8. 图像显示：将解码后的图像数据在显示设备上进行显示，如显示器、电视、手机屏幕等。显示设备可以直接连接到接收端设备，也可以通过网络等其他方式接收图像数据进行显示。\n\n## 技术优势\n1. 便捷性：\n摆脱了传统有线连接的束缚，无需铺设大量的电缆，使得设备的安装和部署更加灵活方便。特别是在一些难以布线的场所，如户外、古建筑、临时活动场地等，无线图传技术能够快速搭建图像传输系统，节省时间和成本。\n例如，在户外拍摄电影或举办大型活动时，使用无线图传可以让摄影师和导演在不同位置自由移动，而不受线缆长度的限制，提高工作效率。\n\n2. 灵活性：\n支持多种设备的连接和图像传输，可以与不同类型的图像采集设备（如摄像机、手机、平板电脑等）和显示设备（如监视器、投影仪、电视等）配合使用。同时，无线图传技术可以根据不同的应用需求进行定制和扩展，满足各种复杂场景的图像传输要求。\n例如，在安防监控领域，无线图传可以将不同位置的监控摄像头的图像传输到监控中心，并且可以根据需要随时增加或调整摄像头的位置和数量。\n\n3. 实时性：\n能够实现图像的实时传输，具有较低的延迟。这对于一些对实时性要求较高的应用场景，如直播、视频会议、无人机航拍等非常重要。低延迟的无线图传可以让用户在接收端几乎同步地看到发送端的图像，提高交互性和用户体验。\n例如，在体育赛事直播中，无线图传可以将现场的比赛画面实时传输到电视台或网络直播平台，让观众能够第一时间观看到精彩的比赛。\n\n4. 抗干扰性：\n采用了先进的无线通信技术和信号处理算法，具有较强的抗干扰能力。能够在复杂的电磁环境中稳定工作，不受其他无线设备的干扰，保证图像传输的质量和可靠性。\n例如，在城市环境中，存在大量的无线信号源，如 Wi-Fi、蓝牙、手机信号等，无线图传技术可以通过频率选择、信号加密、纠错编码等方式，提高抗干扰能力，确保图像传输的稳定性。\n\n5. 传输距离：\n根据不同的技术标准和设备性能，无线图传的传输距离可以从几米到几公里甚至更远。一般来说，低功率的无线图传设备适用于短距离传输，如室内、小型活动场地等；而高功率的无线图传设备则可以用于长距离传输，如户外、大型活动现场等。\n例如，在无人机航拍中，需要使用传输距离较远的无线图传设备，以便将无人机拍摄的画面实时传输到地面控制站。而在家庭监控中，短距离的无线图传设备就可以满足需求。\n\n## 应用领域\n无线图传技术广泛应用于多个领域，如影视制作、新闻直播、活动直播、无人机航拍、安防监控、教育、医疗等。具体应用案例可参考上文对无线图传使用场景的描述。\n\n## 当今发展现状\n\n1. 硬件选型与优化：\n   1. 高性能图传模块：选择传输速率高、信号稳定性强的无线图传模块。例如，一些采用先进的 LR-WiFi 技术或其他高性能无线通信技术的模块，能够在保证数据传输速率的同时，提升通信距离和抗干扰能力，为低延迟传输提供基础。\n      1. LR-WiFi： （Long Range WIFI）\n      是在现有的 Wi-Fi 技术（如 Wi-Fi 4 或 Wi-Fi 5）基础上进行优化，专注于低功耗、长距离和低数据速率传输。\n      云望物联研发的 CV5200 无线通信视频传输 WiFi 模块，基于 802.11 无线通信标准，采用了 LR-WiFi 私有协议，具备 ML（最大似然检测），MRC（最大比合并），LDPC（低密度奇偶校验码），MIMO-OFDM（多输入多输出 - 正交频分复用）等高级无线技术。其双路发射输出功率可达 + 29dBm（单路 26dBm），使用 2.5dBi 天线进行地对空实测时，在空旷环境下能达到 6KM 的传输距离，并且支持 2Mbps、1080p 实时传输\n   \n   \n   2. 硬件编解码器：使用硬件编解码器进行视频的编码和解码。硬件编解码相比软件编解码具有更高的效率和更低的延迟，能够快速处理视频数据，减少处理时间，从而降低整体传输延迟。\n      1. [NVIDIA NVENC](https://www.nvidia.cn/geforce/guides/broadcasting-guide/)\n          专门用于加速H.264和H.265/HEVC视频编码，集成在GeForce GTX/RTX、Quadro和Tesla等多个系列显卡中。\n      2. Intel Quick Sync Video\n         内嵌在 Intel 处理器中的硬件加速编解码引擎。它可以利用 CPU 集成显卡的计算能力，将视频编码和解码任务从 CPU 中剥离出来，从而释放 CPU 资源，提升整体系统性能。\n         Quick Sync 支持多种视频处理编解码器的硬件加速，包括 H.264 (AVC)、H.265 (HEVC)、VP8、VP9 和最新的 AV1。\n      3. AMD VCE (Video Codec Engine)\n         AMD显卡和处理器中的硬件视频编码器，类似于NVIDIA的NVENC。它支持高效的视频编码处理，通常用于实时视频流和直播。VCE支持H.264、H.265（HEVC）编码，并且被广泛应用于AMD的Radeon显卡中。\n      4. [jetson视频编码](https://blog.csdn.net/Yan_uuu/article/details/142884384)：\n         nvmpi 是 NVIDIA 提供的多媒体处理接口，jetson-ffmpeg链接\n        \n2. 协议优化：\n   1. 网络频段优化：根据实际使用场景，选择干扰较小、带宽较高的网络频段。例如，对于 2.4GHz 和 5GHz 两个常见的 Wi-Fi 频段，5GHz 频段的带宽更高、干扰更少，但传输距离相对较短；2.4GHz 频段的传输距离较远，但干扰相对较多。在近距离、对带宽要求高的场景下，优先选择 5GHz 频段；在需要远距离传输的场景下，可以根据实际情况综合考虑。\n   2. 优化网络拓扑结构：确保无线图传模块与接收端之间的网络拓扑结构简单、稳定。减少网络中的中间节点和设备，避免数据在传输过程中经过过多的转发和处理，从而降低延迟。同时，合理设置无线接入点的位置和数量，保证信号覆盖范围和强度，提高网络的稳定性和传输效率。\n   3. 网络带宽管理：对网络带宽进行合理的分配和管理，优先保证数据的传输带宽。可以通过设置 QoS（服务质量）策略，对不同类型的网络流量进行分类和优先级设置，确保数据能够及时、快速地传输。\n\n3. 软件优化：\n   1. 优化编解码算法：采用高效的视频编解码算法，如 H.264、H.265 等，并且根据实际情况对编解码参数进行优化。例如，调整编码的帧率、分辨率、码率等参数，在保证视频质量的前提下，降低数据量和编码时间，从而减少延迟。\n   2. 多线程处理：在软件设计中，采用多线程技术，将数据的采集、编码、传输、解码等操作分配到不同的线程中并行处理，提高系统的处理效率，降低延迟。同时，要注意线程之间的同步和数据交互，避免出现数据丢失或错误。\n      1. [编解码再进化：Ali266 与下一代视频技术](https://developer.aliyun.com/article/802808)\n        在 LiveVideoStackCon 2021 北京峰会，阿里云自研的 VVC 编解码器，首先 Ali266 对 VVC 这个最新视频标准提供完整的编解码能力，速度可以达到实时高清，目前我们最快的速度是可以达到 1080p30 帧编码速度。\n        Ali266 压缩性能卓越，在 Slow 档次上达到 50% 的带宽节省，在实时 Fast 档次上达到 40% 的带宽节省，因此 Ali266 从质量优先到速度优先可以覆盖不同业务的需求。同时我们非常高兴的汇报我们正在与优酷进行深度合作，希望通过 Ali266 技术落地优酷，助力优酷降本增质、赋能新业务技术支撑。\n   3. 错误处理和重传机制：建立完善的错误处理和重传机制，当数据传输过程中出现丢包、错误等情况时，能够及时进行检测和处理。对于重要的数据，可以采用重传的方式保证数据的完整性和准确性，但要注意重传的次数和时机，避免因过多的重传导致延迟增加。\n   \n\n## 图传系统\n在当今时代，无人机的应用正变得越来越广泛，无论是在航拍记录绝美风光、农业领域进行植保作业、还是参与救援抢险等诸多场景中，都能看到它活跃的身影。而在无人机发挥作用的过程里，无线图传技术扮演着至关重要的角色，堪称是连接无人机与地面控制的关键 “桥梁”。\n\n通过无线图传技术，无人机在飞行时所获取到的各类数据，比如拍摄的高清画面、探测到的环境信息等，都能够及时传输到地面控制端，让操作员可以实时监控无人机的飞行状态，像其所处的位置、飞行的高度、速度以及方位等重要信息都能一目了然。这也就意味着，操作员能够依据这些实时反馈的信息，迅速制定出合适的方案与策略，去应对飞行过程中随时可能出现的各种突发情况，实现对整个任务的有效掌控。\n\n再者，在无人机执行拍摄以及遥感等应用任务时，无线图传技术更是不可或缺。无人机凭借着高清摄像头、先进的蓝牙数据传输等高科技设备进行数据采集后，借助无线图传，可将数据实时传输到操作中心，操作者由此便能实时获取现场的图像信息。凭借这些传输回来的数据和图像，无人机能够出色地完成对地面环境的摄影、遥感等工作，帮助操作者更细致、全面地了解实际情况，进而为无人机在更多领域的应用提供了强有力的数据支撑。\n\n另外，无人机常常需要在高山峡谷、海洋等特殊区域飞行作业，面临风雨、雾霾等复杂且不稳定的极端天气条件，这些情况对于人类操作者来说，很难提前预见并快速做出准确的处理决策。但无线图传技术使得无人机可以迅速向操作员传输数据，操作员能够及时对现场状况做出反应，采取相应措施，从而更好地保障作业顺利进行，也确保了作业的效率和质量。\n\n总而言之，随着无人机市场需求的日益增长，无线图传技术也越发受到行业的广泛关注与运用。无论是航拍、测绘、搜救，还是农林等各行各业，掌握和运用好无人机无线图传技术，都能从中获得极大的价值\n\n## 图传的核心技术\n（一）基础通信方式\n\n无人机无线图传主要是依靠如 WiFi 等无线通信技术来实现画面传输的。首先，无人机搭载的摄像头会捕捉到相应的画面，随后，设备内的相关模块会运用特定的编码方式，将这些画面转化成数字信号。\n\n以常见的 WiFi 图传为例，就如同我们平时用手机连接 WiFi 上网一样，无人机通过自身的 WiFi 模块与地面控制站或者移动设备（像手机、平板电脑等）建立连接。不过，无人机图传所用的 WiFi 模块往往具备一些更适合远距离、高质量传输的特性。比如，有的会采用功率更大的 WiFi 模块，以此来增强信号强度，保障传输距离。\n\n在传输过程中，为了能让数据更高效地通过无线信号传递，会使用到视频编码与压缩技术，像 H.264 和 H.265 这类编码方式就很常用，它们能够在大幅减少数据量的同时保持较高的视频质量，使得在有限的频段带宽下，依然可以把拍摄到的高清画面稳定地传输到地面端，让操作员可以实时在地面控制站或移动设备上看到无人机拍摄到的画面，清楚掌握无人机所处的位置、周边环境等关键信息，进而实现对无人机飞行状态的有效监控以及各类任务的操作执行。\n\n（二）关键技术支撑\n\n1. LR-WiFi 技术\n\n在众多保障无人机无线图传高效、稳定工作的关键技术里，LR-WiFi 技术（Long Rang WiFi 远距离 WiFi）起到了很重要的作用。传统的 WiFi 技术在面对长距离传输需求时，往往会出现信号衰减、传输不稳定等情况。而 LR-WiFi 技术采用了先进的信号处理算法以及高级调制解调技术，它能够在远距离传输信号时保持较高的信号质量和稳定性。\n\n例如云望物联研发的 CV5200 无线通信视频传输 WiFi 模块，基于 802.11 无线通信标准，采用了 LR-WiFi 私有协议，具备 ML（最大似然检测），MRC（最大比合并），LDPC（低密度奇偶校验码），MIMO-OFDM（多输入多输出 - 正交频分复用）等高级无线技术。其双路发射输出功率可达 + 29dBm（单路 26dBm），使用 2.5dBi 天线进行地对空实测时，在空旷环境下能达到 6KM 的传输距离，并且支持 2Mbps、1080p 实时传输，这就为无人机远距离图传提供了强有力的技术支撑，特别适用于像航拍、测绘等需要无人机在较远距离作业的场景。\n\n2. 先进编码算法\n\n先进的编码算法对于无人机无线图传来说也是不可或缺的。无人机拍摄到的原始视频数据量通常非常庞大，如果直接传输，对带宽要求极高且效率低下，很难实现稳定、流畅的图传效果。\n\n像 H.264 和 H.265 这样的编码算法就能很好地解决这个问题，它们可以对视频数据进行高效压缩和优化处理，在保证画质的前提下，大幅减少需要传输的数据量，实现低延迟、高画质的实时传输。如此一来，即使在有限的带宽条件下，也能让无人机拍摄的画面清晰、流畅地传输到地面接收端，方便操作人员实时查看并做出准确的操控决策。\n\n\n## 图传的发展史\n图传系统的发展史可以分为模拟图传和数字图传两个主要阶段：\n\n### 模拟图传阶段\n模拟图像传送是指对时间（包括空间）和幅度连续变化的模拟图像信号作信源和信道处理，通过模拟信道传输或通过模拟记录装置实现存储的过程。一般用扫描拾取图像信息和压缩频带等信源处理方法得到图像基带信号，再用预均衡、调制等信道处理方法形成图像通带信号。\n\n模拟图传的上限高，下限低。\n1. **早期发展**：无线图传技术早在二十年前就已经出现，当时的无线传输价格昂贵，工作频率只有一些国家授权的频段才能使用，效果一般，主要解决了有无问题。\n2. **技术特点**：模拟图传是一种较为传统的图传方式，其优点是延迟极低，画面传输流畅，常用于对实时性要求极高的应用场景，如FPV飞行竞技。但缺点是画质较差，图像分辨率低，且在复杂电磁环境中信号容易受到干扰。\n\n### 数字图传阶段\n数字图传：指数字化的图像信号经信源编码和信道编码，通过数字信道（电缆、微波、卫星和光纤等）传输，或通过数字存储、记录装置存储的过程。\n1. **技术革新**：大概从2010年开始，Amimon公司研发出了无压缩和免费的5G频段的产品，首次实现可以让大多数的专业影视用户用得起无线传输产品，标志着无线图传产品走向成熟和普及。\n2. **数字图传优势**：数字图传采用数字信号传输，具有更高的分辨率和强大的抗干扰能力，是目前无人机图传的主流选择。数字图传能够传输高清画面，适合对画质有较高要求的航拍和专业应用场景。\n3. **编码技术**：数字图传的编码技术主要包括行程编码(RLE编码)、Huffman编码(熵编码)、离散余弦变换(DCT变换)和离散小波变换(DWT变换)等，这些编码技术在图像质量和传输延迟方面有着不同的影响。\n4. **抗干扰能力**：数字图传采用编码技术，并通过错误纠正和数据重传机制，在一定程度上能够抵御电磁干扰，使图像质量在受干扰时保持清晰稳定。\n5. **最新发展趋势**：数字图传技术的最新发展趋势体现在智能化与自动化、高清远距离传输、自动跳频技术、4G增强图传技术以及图像压缩技术等方面。\n\n图传系统从模拟图传到数字图传的发展，是一个从低分辨率、高延迟、易受干扰的模拟信号向高分辨率、低延迟、强抗干扰能力的数字信号转变的过程。随着技术的进步，数字图传逐渐成为主流，提供更高质量的图像传输体验。\n\n# 流媒体架构\n目前主流的流媒体系统架构主要分为以下几种:\n1. 单服务器架构：\n该架构中，所有的流媒体服务都运行在一台服务器上。这种架构简单、易于部署，但是在流量较大时，可能会导致服务器性能瓶颈，影响系统的稳定性。\n2. 分布式架构：\n该架构中，流媒体服务被分布在多个服务器上，每个服务器都可以独立地处理一部分流量。这种架构具有高可用性和可扩展性的优点，但是需要对系统进行复杂的负载均衡和监控。\n3. CDN架构：\n该架构中，流媒体服务通过CDN(内容分发网络）进行分发，用户可以从离自己最近的CDN节点获取流媒体内容。这种架构具有高速度、高可用性和低延迟的优点，但是需要在全球范围内部署CDN节点，成本较高。\n\n流媒体系统架构的发展历程可以追溯到20世纪90年代初，当时的流媒体技术主要是基于**RTSP**(实时流协议)和**RTP**(实时传输协议）等标准。随着网络带宽的提高和编解码技术的发展，流媒体系统架构也不断发展和创新。\n\n在2000年代初，流媒体系统开始采用基于HTTP的流媒体传输协议，例如，Adobe的Flash Media Server和Microsoff的Windows Media Server等。这种架构可以通过普通的Web服务器进行传输，无需特殊的流媒体服务器。\n\n在2010年代，流媒体系统开始采用基于WebRTC (Web实时通信）的架构，例如，Google的WebRTC和Facebook的WebRTC Live等。这种架构可以在Web浏览器中直接进行流媒体传输，无需安装插件或客户端程序。\n\n类似Gstreamer的流媒体系统架构主要是基于开源的流媒体框架和组件进行构建。Gstreamer是一种基于插件的流媒体框架，可以用于音频和视频的捕获、编码、解码、传输等多个方面。类似的流媒体系统架构还包括FFmpeg、VLC、DirectShow等。这些框架和组件可以通过编写插件或脚本进行自定义，从而满足不同的流媒体应用需求。\n\n## Gstreamer \n![](https://image.aruoshui.fun/i/2025/01/02/sj4ow5-0.webp)\n元件(Element)是GStreamer中最重要的概念。\n\n可以通过创建一系列的元件，并把它们连接起来,从而让数据流在这个被连接的各个元件之间传输。每个元件都有一个特殊的函数接口,对于有些元件的函数接口它们是用于能够读取文件的数据,解码文件数据的。而有些元件的函数接口只是输出相应的数据到具体的设备上(例如：声卡设备)。\n\n可以将若干个元件连接在一起,从而创建一个管道(pipeline)来完成一个特殊的任务,例如,媒体播放或者录音。\n\n对程序员来说， GStreamer中最重要的一个概念就是GstElement对象。元件是构建一个媒体管道的基本块。每一个元件都对应一个GstElement。任何一个解码器编码器、分离器、视频/音频输出部件实际上都是一个GstElement对象。\n\n## FFmpeg\nFFMPEG堪称自由软件中最完备的一套多媒体支持库，它几乎实现了所有当下常见的数据封装格式、多媒体传输协议以及音视频编解码器，堪称多媒体业界的瑞士军刀。\n\nFFMPEG从功能上划分为几个模块，分别为核心工具（libutils）、媒体格式（libavformat）、编解码（libavcodec）、设备（libavdevice）和后处理（libavfilter, libswscale, libpostproc），分别负责提供公用的功能函数、实现多媒体文件的读包和写包、完成音视频的编解码、管理音视频设备的操作以及进行音视频后处理。\n[详解](https://www.cnblogs.com/xcj26/articles/18175921)\n\n[jetson-ffmpeg](https://github.com/jocover/jetson-ffmpeg)\n## VLC\nLinux必装的软件\n\n## HLS 流式传输\nHTTP 实时流（HLS）是一种广泛使用的视频流协议，几乎可在任何服务器上运行，并且受到大多数设备的支持。HLS 通过提高或降低流的质量，使客户端设备无缝适应不断变化的网络条件。\n\nHTTP 实时流（HLS）是使用最广泛的视频流协议之一。尽管它称为 HTTP“实时”流，但它同时适用于点播流和实时流。HLS 将视频文件分解为较小的可下载 HTTP 文件，并使用 HTTP 协议来交付。客户端设备加载这些 HTTP 文件，然后将它们作为视频进行播放。\n\nHLS 的一个优点是，所有连入互联网的设备都支持 HTTP，因而它比需要使用专用服务器的流协议更易于实施。另一个优点是 HLS 流可以根据网络状况提高或降低视频质量，而不会中断播放。这就是在用户观看视频的过程中视频质量可能会变好或变差的原因。这个功能称为“自适应比特率视频传输”或“自适应比特率流式传输”，如果没有它，慢速网络条件可能导致视频播放完全停止。\n\n## RTSP视频流\n![](https://image.aruoshui.fun/i/2025/01/02/sjm9vs-0.webp)\nRTP 是由实时传输协议RTP，实时传输控制协议RTCP组成\n基于多播或单播为用户提供连续媒体数据的实时传输服务，RTCP是控制部分，负责实时监控数据传输质量，为系统提供阻塞控制和流控制\n由包头Header和载荷Payload两部分组成\n\nRTMP：实时消息传输协议，基于tcp，主要用于flash平台和支持RTMP协议的流媒体服务器之间进行音视频和数据通信。（基于FLASH，无法用于IOS）（主流流媒体传输协议）\nHLS：HTTP直播流技术，主要用于PC和Aplple中端，包括m3u8的索引文件，TS媒体分片文件,key加密串文件。\nRTSP：实时流传输协议，基于UDP，用来传输音频、视频的多媒体串流协议，定义了一对多应用程序，如何有效通过IP网络传送多媒体数据。\n\n**1. 抓包分析**\n![抓包](https://image.aruoshui.fun/i/2025/01/02/sjtnzj-0.webp)\n\n## ONVIF\nONVIF协议对设备发现、设备配置、事件、PTZ控制、视频分析、实时流媒体直播功能(RTSP拉流)、搜索、回放、录像录音管理等功能进行了规范。\n![]([image-3.png](https://image.aruoshui.fun/i/2025/01/02/sjykfb-0.webp))\n\n1、Nvidia视频硬解码、渲染、软/硬编码并写入MP4文件。项目地址：https://github.com/BreakingY/Nvidia-Video-Codec\n2、Jetson Jetpack5.x视频编解码。项目地址：https://github.com/BreakingY/jetpack-dec-enc\n3、音视频(H264/H265/AAC)封装、解封装、编解码pipeline，支持NVIDIA、昇腾DVPP硬编解码。项目地址：https://github.com/BreakingY/Media-Codec-Pipeline\n4、simple rtsp server，小而高效的rtsp服务器，支持H264、H265、AAC、PCMA；支持TCP、UDP；支持鉴权。项目地址：https://github.com/BreakingY/simple-rtsp-server\n5、simple rtsp client，rtsp客户端，支持TCP、UDP、H264、H265、AAC、PCMA，支持鉴权。项目地址：https://github.com/BreakingY/simple-rtsp-client\n6、libflv，flv muxer/demuxer，支持H264/H265、AAC。项目地址：https://github.com/BreakingY/libflv\n\n\n# OpenIPC\n基于 Buildroot/OpenWrt 项目的 Linux 操作系统, OpenIPC是IP摄像机的替代固件。其rootfs基于Buildroot，这一部分是开源的，但其中主要的ISP处理程序Majestic还是闭源状态\n\n## ISP\nISP处理程序，即图像信号处理器（Image Signal Processor），是相机系统中用于处理图像信号传感器输出的图像信号的核心组件。它负责将图像传感器捕获的原始数据转换成高质量的图像，以匹配不同厂商的图像传感器。\n\n## 当前实现的部分\n目前已经实现的功能包括但不限于\n\n1. RTSP视频流\n2. HLS HTTP视频流\n3. 静态图像生成\n4. YouTube直播\n4. ONVIF/NETIP/IPEYE等协议\n5. 移动检测并且发送通知到EMAIL/FTP/Telegram/Yandex Disk/HTTP API/MQTT broker\n6. 内置ZeroTier/WireGuard/Socks5等协议支持\n\n\n**1. Buildroot**\nBuildroot 是 Linux 平台上一个开源的嵌入式 Linux 系统自动构建框架。整个Buildroot是由 Makefile 脚本和 Kconfig 配置文件构成的。你可以和编译Linux内核一样，通过 buildroot 配置，menuconfig 修改，编译出一个完整的可以直接烧写到机器上运行的Linux系统软件(包含boot、kernel、rootfs以及rootfs中的各种库和应用程序)。\n\n**2. OpenWrt**\nOpenWrt 是一个基于 Linux 的、针对嵌入式网络设备的开源操作系统。\n\n## IP摄像头\n### OpenIPC 的革命\nOpenHD 项目（和其他类似项目）中的经典设置包括连接到 Raspberry Pi 的 MIPI 或 USB 摄像头，它们充当机载系统的视频编码器和路由器，然后通过 USB 连接到 WiFi 适配器和通过 UART 连接到飞行控制器。地面站通常由相同的 WiFi 适配器、第二个 Raspberry Pi 或 x86 linux 笔记本电脑以及高对比度显示器或护目镜组成。\n\n有时，MIPI 或 USB 摄像头会被 IP 摄像头换成 IP 摄像头，后者功能更强大（有自己的硬件编码器），价格更便宜，具有类似的特性。大多数现代摄像机都是典型的板载 Linux 设备（但与 Raspberry Pi 相比，RAM 和闪存大小要适中得多），这允许您在其上重新编译和运行几乎任何便携式软件。\n\n在使用这项技术时，出现了简化飞行系统并将所有必要的软件直接移植到 IP 摄像机的想法。从技术上讲，OpenIPC 项目的 FPV 固件是一个特殊的组件，具有两种类型的流行 WiFi 适配器驱动程序，Majestic streamer（在发射器系统上的经典方案中扮演 GStreamer 的角色）和 WFB-ng。\n\n1. 好处\n降低系统成本（H.265 IP 摄像机与配备 Raspberry Pi 的 H.264 MIPI 摄像机）\n通过简化电路来降低总功耗并提高系统可靠性\n减少视频延迟：在我们的 Glass-to-Glass 测试中，1080p@60延迟约为 80 毫秒（在中等预算的摄像机上），720p@60 的延迟约为 60 毫秒，1080p@30的延迟约为 100 毫秒（对于最预算的摄像机）。\n可以调整硬件编码器，例如，更频繁地形成 I 帧（具体情况取决于 IP 摄像机的供应商）\n社区在维修 IP 摄像机方面积累了大量经验，这使得进一步降低系统的运营成本成为可能。\n2. 弊\n由于资源有限（已安装的 RAM 和永久内存），相机将不支持大多数流行的编程语言（如 Java、Python、NodeJS）。如果你喜欢用这些语言编写（或者想把这些语言写的软件移植到相机上），你需要额外使用一台NanoPi，把OpenIPC相机当作普通的网络摄像机连接在NanoPi（https://www.aliexpress.com/item/1005004679805441.html）上。 \n\n在大多数系统中，Linux 内核版本受到 IP 摄像机供应商的限制，因为某些模块以二进制形式提供。为新的 WiFi 适配器或特定外围设备开发内核驱动程序可能非常耗时。\n\n在预算相机（主要为其开发 FPV 固件）上，资源非常有限，因此在撰写本文时无法运行神经网络。这种情况在不久的将来应该会发生变化。\n\n## 配置一图\n    ![](https://image.aruoshui.fun/i/2025/01/02/sgy7e1-0.webp)\n\n## openipc系统架构\n1. openioc fpv-视频传输-单向数传方案的系统架构\n    ![](https://image.aruoshui.fun/i/2025/01/02/sf653e-0.webp)\n2. openipc fpv-双向数传方案的系统架构\n   ![](https://image.aruoshui.fun/i/2025/01/02/sf6b0r-0.webp)\n\n\n## Openipc的发展过程\n### wifibroadcast\n1. **为什么普通wifi不行**\n   1. 需要匹配认证，如果一台设备失去关联(例如由于信号强度太弱)，视频传输会立即停止\n   2. 无差错传输:Wifi 要么传输正确的数据，要么不传输数据。在 FPV 场景中，这意味着即使收到的数据只有很小的错误，也会被完全拒绝。尽管您已收到有用的数据，但这可能会导致视频停顿。\n   3. 速率控制:如果信号强度太弱，普通 WiFi连接会自动切换到较低的传输速率。因此，(自动)选择的速率可能太低而无法传输视频数据。这样，数据就会排队并引入长达几秒的不可预测的延迟。\n   4. 一对一传输:除使用广播或类似技术，否则普通的 WiFi 数据流是一对一连接。使用传统 WiFi 很难实现旁观者的场景。\n2. 为什么WIfiBroadcast就行\n   1. Wifiroadcast 将 wifi 卡置于监控模式。该模式允许发送和接收任意数据包而无需认证匹配。此外，还能接收到错误的帧(校验和不匹配)。这样就建立了真正的单向连接，模仿了模拟链路的有利特性。\n   2. 发送端发送数据不用管它的接收端状态。因此，不存在由于认证丢失而导致视频突然停顿的风险\n   3. 只要视频在发射器的范围内，接收器就会接收视频。如果它慢慢超出范围，视频质量会下降，但不会停止。即使帧有错误，它们也会被显示而不是被拒绝。\n   4. 传统模拟图传方案“单个广播器-多个接收器”也适用于Wifibroadcast。如果旁观者想用他们的设备观看视频流，他们只需“切换到正确的频道”\n   5. Wifiroadcast 允许并行使用多个低成本接收器组合它们的数据以增加接收数据的准确性。(比如一个接收端具有覆盖 360°的全向天线和多个平板的远距离定向天线)\n   6. Wifiroadcast 使用前向纠错来满足低带宽要求下实现高可靠性。它能够在接收器处修复丢失或损坏的数据包\n### EZ-WIfiBroadcast\n\n### OpenHD\n项目通过一般的无线网卡作为无线电的发射与接受，通过载体树莓派实现高清图像的实时传输，同时集成了OSD功能、热点功能、支持HDMI显示器、手机、电脑作为终端、支持MAVlink、BF、INAV，支持发送和接受遥测、音频和各种控制数据，还配备有齐全的软件app。\n\n\n\n\n\n\n\n","source":"_posts/OpenIPC.md","raw":"---\ntitle: OpenIPC\nabbrlink: 13129\ndate: 2025-01-01 17:12:31\ntags:\n - 数字图传\n - 无线链路传输\ndescription:\ncategories: 嵌入式项目\ncover: https://image.aruoshui.fun/i/2025/01/01/sdqb3c-0.svg\nswiper_index:\n---\n\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n{% link 参考文章, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %} \n{% link Linux/Ubuntu20 安装 TP-link(RTL8812AU) 无线网卡驱动, https://blog.csdn.net/weixin_46283523/article/details/127072929, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %}    \n{% link 主流视频编码器H264、HEVC、AV1之间的视频质量以及编码速度比较, https://www.bilibili.com/opus/733259258149208084, https://image.aruoshui.fun/i/2025/01/02/snzz37-0.webp %}\n\n# 参考文献\n{% referfrom '[1]','徐瑶.基于H.264的视频压缩技术及其在视频监控系统中的应用[D].安徽大学,2014.' %}\n\n\n# 引言\n\n## 图传系统\n无线图传技术即无线图像传输技术，是指不用布线（线缆）利用无线电波来传输图像数据的技术。\n\n## 工作原理\n无线图传技术主要涉及图像采集、编码、调制、发射、接收、解调、解码和图像显示等环节。\n\n1. 图像采集：通过摄像头或其他图像采集设备获取图像信息。这些设备可以是专业的摄像机、监控摄像头、手机摄像头等。采集到的图像通常是模拟信号或数字信号，具体取决于采集设备的类型。当今常用设备有：\n   1. IMX415-AAQR-C:\n   IMX415-AAQR-C是一个对角线6.4mm（类型1/2.8）CMOS活动像素型固态图像传感器，具有一个正方形像素阵列和8.46 M有效像素。该芯片采用模拟2.9 V、数字1.1 V、接口1.8 V三层电源运行，功耗低。采用R、G、B原色镶嵌滤光片，实现高灵敏度、低暗电流、无涂片。该芯片具有一个具有可变电荷集成时间的电子快门。\n   ![imx415](https://image.aruoshui.fun/i/2025/01/02/slngku-0.webp)\n   \n2. 编码：如果采集到的图像是模拟信号，需要先进行模数转换，将其转换为数字信号。然后，使用图像编码算法对数字图像进行压缩编码，以减少数据量，便于传输。常见的图像编码标准有 H.264、H.265 等。\n   1. H.264/AVC\n   &nbsp;&nbsp;H264视频编码技术，是对序列帧图像进行压缩的技术。压缩之所以可能，是因为存在冗余数据。采用网络友好的结构和语法，有利于对误码和丢包的处理。在编码技术上，通过统一的VLC符号编码，高精度、多模式的位移估计，基于4X4块的整数变换，分层的编码语法等措施，使得H264算法具备很高的编码效率。  \n   &nbsp;&nbsp;视频实时性上，安徽大学在Hi3516SOC平台上实现H.264编码,并设计RTSP服务器用于在网络上传输H.264码流,使用VLC开源软件测试RTSP码流封包的正确性和评估H.264编码的图像效果。结果表明,该系统能够通过网络较为稳定地传输视频画面,而且画面清晰、数据传输快,满足视频监控的实时性需求。{% referto '[1]','' %}\n   2. H.265\n   &nbsp;&nbsp;是为了应对更高分辨率视频（如4K、8K）的需求而开发的。它的主要优势在于其更高的压缩效率，相比H.264，它能够在保持相同视频质量的情况下，将视频数据量减少大约30% - 50%。高效的压缩能力使得 H.265 在高清和超高清视频的存储与传输方面展现出了巨大的优势，特别是在网络带宽资源紧张或者存储空间有限的云桌面应用场景中。\n   3. AV1\n   现在最新的编码标准。\n   AV1编码器开源以及免专利费的优势，已有许多视频平台对其进行了支持，并且最近硬件也开始对AV1编码进行了支持，如英特尔Arc显卡、英伟达RTX40系显卡、以及即将发售的AMD RX7000系列显卡。可以预见的是，AV1编码将成为主流。\n   ![码率分析](https://image.aruoshui.fun/i/2025/01/02/smxx5h-0.webp)\n   \n3. 调制：将编码后的图像数据进行调制，即将数字信号转换为适合在无线信道中传输的信号形式。调制方式有很多种，如调频（FM）、调幅（AM）、调相（PM）等，以及数字调制方式如正交频分复用（OFDM）等。\n4. 发射：通过无线发射设备将调制后的信号发送出去。无线发射设备可以是 Wi-Fi 路由器、蓝牙设备、无线射频模块等。发射的信号通过空气等无线介质传播。\n   对于图传系统，最常用的就是USB网卡，适合需要便捷和灵活连接的用户，广泛用于台式机或无内建无线网卡的设备。\n   常见的有\n   1. rtl8812au\n   **由网卡芯片和USB网络适配器组成**\n   RTL8812AU是一颗高性能的无线局域网(Wi-Fi)芯片，它支持IEEE 802.11ac/a/n无线标准，提供高速无线连接能力。该芯片搭载了2.4GHz/5GHz双频段，能够提供高达867Mbps的数据传输速率。它内置了强大的信号处理单元，包含调制解调器和功率放大器，有效增强了无线信号的接收与发送性能，确保了较好的无线覆盖范围和连接稳定性。此外，RTL8812AU还集成了多输入多输出（MIMO）技术，通过使用多副天线来提高数据传输速率和系统的整体吞吐量。 \n   ![8812AU](https://image.aruoshui.fun/i/2025/01/02/sozr7s-0.webp)\n   USB网络适配器通常由RTL8812AU无线芯片、USB接口芯片、天线系统、以及必要的电源管理电路组成。RTL8812AU芯片作为无线通信的核心部件，负责无线信号的处理和数据包的发送与接收。USB接口芯片则负责与主机的通信，并将RTL8812AU芯片的数据流转换为USB总线上的数据流。天线系统负责无线信号的接收与发送，通常包含两个或多个天线以支持MIMO技术。电源管理电路包括稳压器和滤波电容，确保设备运行稳定并满足USB总线的供电要求。\n   2. IEEE 802.11\n   EEE 802.11标准的物理层技术包括跳频扩频（FHSS）、直接序列扩频（DSSS）、正交频分复用（OFDM）和多输入多输出（MIMO）等多种技术。这些技术各有特点，共同构成了IEEE 802.11标准强大的物理层传输能力。\n   3. USB接口协议\n   详见[Linux内核源码-USB驱动分析](https://blog.csdn.net/H520xcodenodev/article/details/141874401)\n   \n5. 接收：在接收端，使用相应的无线接收设备接收发射端发送过来的信号。接收设备需要与发射设备在相同的频率和调制方式下工作，才能正确接收信号。\n   **与发射是配套的关系，解决好驱动层面就能解决**\n   \n6. 解调：对接收到的信号进行解调，即将无线信号转换回数字信号。解调过程是调制的逆过程，需要根据发射端使用的调制方式进行相应的解调操作。\n   \n7. 解码：对解调后的数字信号进行解码，恢复出原始的图像数据。解码过程是编码的逆过程，需要使用与发射端相同的图像编码算法进行解码。 \n   **同样与编码部分一一对应**\n   \n8. 图像显示：将解码后的图像数据在显示设备上进行显示，如显示器、电视、手机屏幕等。显示设备可以直接连接到接收端设备，也可以通过网络等其他方式接收图像数据进行显示。\n\n## 技术优势\n1. 便捷性：\n摆脱了传统有线连接的束缚，无需铺设大量的电缆，使得设备的安装和部署更加灵活方便。特别是在一些难以布线的场所，如户外、古建筑、临时活动场地等，无线图传技术能够快速搭建图像传输系统，节省时间和成本。\n例如，在户外拍摄电影或举办大型活动时，使用无线图传可以让摄影师和导演在不同位置自由移动，而不受线缆长度的限制，提高工作效率。\n\n2. 灵活性：\n支持多种设备的连接和图像传输，可以与不同类型的图像采集设备（如摄像机、手机、平板电脑等）和显示设备（如监视器、投影仪、电视等）配合使用。同时，无线图传技术可以根据不同的应用需求进行定制和扩展，满足各种复杂场景的图像传输要求。\n例如，在安防监控领域，无线图传可以将不同位置的监控摄像头的图像传输到监控中心，并且可以根据需要随时增加或调整摄像头的位置和数量。\n\n3. 实时性：\n能够实现图像的实时传输，具有较低的延迟。这对于一些对实时性要求较高的应用场景，如直播、视频会议、无人机航拍等非常重要。低延迟的无线图传可以让用户在接收端几乎同步地看到发送端的图像，提高交互性和用户体验。\n例如，在体育赛事直播中，无线图传可以将现场的比赛画面实时传输到电视台或网络直播平台，让观众能够第一时间观看到精彩的比赛。\n\n4. 抗干扰性：\n采用了先进的无线通信技术和信号处理算法，具有较强的抗干扰能力。能够在复杂的电磁环境中稳定工作，不受其他无线设备的干扰，保证图像传输的质量和可靠性。\n例如，在城市环境中，存在大量的无线信号源，如 Wi-Fi、蓝牙、手机信号等，无线图传技术可以通过频率选择、信号加密、纠错编码等方式，提高抗干扰能力，确保图像传输的稳定性。\n\n5. 传输距离：\n根据不同的技术标准和设备性能，无线图传的传输距离可以从几米到几公里甚至更远。一般来说，低功率的无线图传设备适用于短距离传输，如室内、小型活动场地等；而高功率的无线图传设备则可以用于长距离传输，如户外、大型活动现场等。\n例如，在无人机航拍中，需要使用传输距离较远的无线图传设备，以便将无人机拍摄的画面实时传输到地面控制站。而在家庭监控中，短距离的无线图传设备就可以满足需求。\n\n## 应用领域\n无线图传技术广泛应用于多个领域，如影视制作、新闻直播、活动直播、无人机航拍、安防监控、教育、医疗等。具体应用案例可参考上文对无线图传使用场景的描述。\n\n## 当今发展现状\n\n1. 硬件选型与优化：\n   1. 高性能图传模块：选择传输速率高、信号稳定性强的无线图传模块。例如，一些采用先进的 LR-WiFi 技术或其他高性能无线通信技术的模块，能够在保证数据传输速率的同时，提升通信距离和抗干扰能力，为低延迟传输提供基础。\n      1. LR-WiFi： （Long Range WIFI）\n      是在现有的 Wi-Fi 技术（如 Wi-Fi 4 或 Wi-Fi 5）基础上进行优化，专注于低功耗、长距离和低数据速率传输。\n      云望物联研发的 CV5200 无线通信视频传输 WiFi 模块，基于 802.11 无线通信标准，采用了 LR-WiFi 私有协议，具备 ML（最大似然检测），MRC（最大比合并），LDPC（低密度奇偶校验码），MIMO-OFDM（多输入多输出 - 正交频分复用）等高级无线技术。其双路发射输出功率可达 + 29dBm（单路 26dBm），使用 2.5dBi 天线进行地对空实测时，在空旷环境下能达到 6KM 的传输距离，并且支持 2Mbps、1080p 实时传输\n   \n   \n   2. 硬件编解码器：使用硬件编解码器进行视频的编码和解码。硬件编解码相比软件编解码具有更高的效率和更低的延迟，能够快速处理视频数据，减少处理时间，从而降低整体传输延迟。\n      1. [NVIDIA NVENC](https://www.nvidia.cn/geforce/guides/broadcasting-guide/)\n          专门用于加速H.264和H.265/HEVC视频编码，集成在GeForce GTX/RTX、Quadro和Tesla等多个系列显卡中。\n      2. Intel Quick Sync Video\n         内嵌在 Intel 处理器中的硬件加速编解码引擎。它可以利用 CPU 集成显卡的计算能力，将视频编码和解码任务从 CPU 中剥离出来，从而释放 CPU 资源，提升整体系统性能。\n         Quick Sync 支持多种视频处理编解码器的硬件加速，包括 H.264 (AVC)、H.265 (HEVC)、VP8、VP9 和最新的 AV1。\n      3. AMD VCE (Video Codec Engine)\n         AMD显卡和处理器中的硬件视频编码器，类似于NVIDIA的NVENC。它支持高效的视频编码处理，通常用于实时视频流和直播。VCE支持H.264、H.265（HEVC）编码，并且被广泛应用于AMD的Radeon显卡中。\n      4. [jetson视频编码](https://blog.csdn.net/Yan_uuu/article/details/142884384)：\n         nvmpi 是 NVIDIA 提供的多媒体处理接口，jetson-ffmpeg链接\n        \n2. 协议优化：\n   1. 网络频段优化：根据实际使用场景，选择干扰较小、带宽较高的网络频段。例如，对于 2.4GHz 和 5GHz 两个常见的 Wi-Fi 频段，5GHz 频段的带宽更高、干扰更少，但传输距离相对较短；2.4GHz 频段的传输距离较远，但干扰相对较多。在近距离、对带宽要求高的场景下，优先选择 5GHz 频段；在需要远距离传输的场景下，可以根据实际情况综合考虑。\n   2. 优化网络拓扑结构：确保无线图传模块与接收端之间的网络拓扑结构简单、稳定。减少网络中的中间节点和设备，避免数据在传输过程中经过过多的转发和处理，从而降低延迟。同时，合理设置无线接入点的位置和数量，保证信号覆盖范围和强度，提高网络的稳定性和传输效率。\n   3. 网络带宽管理：对网络带宽进行合理的分配和管理，优先保证数据的传输带宽。可以通过设置 QoS（服务质量）策略，对不同类型的网络流量进行分类和优先级设置，确保数据能够及时、快速地传输。\n\n3. 软件优化：\n   1. 优化编解码算法：采用高效的视频编解码算法，如 H.264、H.265 等，并且根据实际情况对编解码参数进行优化。例如，调整编码的帧率、分辨率、码率等参数，在保证视频质量的前提下，降低数据量和编码时间，从而减少延迟。\n   2. 多线程处理：在软件设计中，采用多线程技术，将数据的采集、编码、传输、解码等操作分配到不同的线程中并行处理，提高系统的处理效率，降低延迟。同时，要注意线程之间的同步和数据交互，避免出现数据丢失或错误。\n      1. [编解码再进化：Ali266 与下一代视频技术](https://developer.aliyun.com/article/802808)\n        在 LiveVideoStackCon 2021 北京峰会，阿里云自研的 VVC 编解码器，首先 Ali266 对 VVC 这个最新视频标准提供完整的编解码能力，速度可以达到实时高清，目前我们最快的速度是可以达到 1080p30 帧编码速度。\n        Ali266 压缩性能卓越，在 Slow 档次上达到 50% 的带宽节省，在实时 Fast 档次上达到 40% 的带宽节省，因此 Ali266 从质量优先到速度优先可以覆盖不同业务的需求。同时我们非常高兴的汇报我们正在与优酷进行深度合作，希望通过 Ali266 技术落地优酷，助力优酷降本增质、赋能新业务技术支撑。\n   3. 错误处理和重传机制：建立完善的错误处理和重传机制，当数据传输过程中出现丢包、错误等情况时，能够及时进行检测和处理。对于重要的数据，可以采用重传的方式保证数据的完整性和准确性，但要注意重传的次数和时机，避免因过多的重传导致延迟增加。\n   \n\n## 图传系统\n在当今时代，无人机的应用正变得越来越广泛，无论是在航拍记录绝美风光、农业领域进行植保作业、还是参与救援抢险等诸多场景中，都能看到它活跃的身影。而在无人机发挥作用的过程里，无线图传技术扮演着至关重要的角色，堪称是连接无人机与地面控制的关键 “桥梁”。\n\n通过无线图传技术，无人机在飞行时所获取到的各类数据，比如拍摄的高清画面、探测到的环境信息等，都能够及时传输到地面控制端，让操作员可以实时监控无人机的飞行状态，像其所处的位置、飞行的高度、速度以及方位等重要信息都能一目了然。这也就意味着，操作员能够依据这些实时反馈的信息，迅速制定出合适的方案与策略，去应对飞行过程中随时可能出现的各种突发情况，实现对整个任务的有效掌控。\n\n再者，在无人机执行拍摄以及遥感等应用任务时，无线图传技术更是不可或缺。无人机凭借着高清摄像头、先进的蓝牙数据传输等高科技设备进行数据采集后，借助无线图传，可将数据实时传输到操作中心，操作者由此便能实时获取现场的图像信息。凭借这些传输回来的数据和图像，无人机能够出色地完成对地面环境的摄影、遥感等工作，帮助操作者更细致、全面地了解实际情况，进而为无人机在更多领域的应用提供了强有力的数据支撑。\n\n另外，无人机常常需要在高山峡谷、海洋等特殊区域飞行作业，面临风雨、雾霾等复杂且不稳定的极端天气条件，这些情况对于人类操作者来说，很难提前预见并快速做出准确的处理决策。但无线图传技术使得无人机可以迅速向操作员传输数据，操作员能够及时对现场状况做出反应，采取相应措施，从而更好地保障作业顺利进行，也确保了作业的效率和质量。\n\n总而言之，随着无人机市场需求的日益增长，无线图传技术也越发受到行业的广泛关注与运用。无论是航拍、测绘、搜救，还是农林等各行各业，掌握和运用好无人机无线图传技术，都能从中获得极大的价值\n\n## 图传的核心技术\n（一）基础通信方式\n\n无人机无线图传主要是依靠如 WiFi 等无线通信技术来实现画面传输的。首先，无人机搭载的摄像头会捕捉到相应的画面，随后，设备内的相关模块会运用特定的编码方式，将这些画面转化成数字信号。\n\n以常见的 WiFi 图传为例，就如同我们平时用手机连接 WiFi 上网一样，无人机通过自身的 WiFi 模块与地面控制站或者移动设备（像手机、平板电脑等）建立连接。不过，无人机图传所用的 WiFi 模块往往具备一些更适合远距离、高质量传输的特性。比如，有的会采用功率更大的 WiFi 模块，以此来增强信号强度，保障传输距离。\n\n在传输过程中，为了能让数据更高效地通过无线信号传递，会使用到视频编码与压缩技术，像 H.264 和 H.265 这类编码方式就很常用，它们能够在大幅减少数据量的同时保持较高的视频质量，使得在有限的频段带宽下，依然可以把拍摄到的高清画面稳定地传输到地面端，让操作员可以实时在地面控制站或移动设备上看到无人机拍摄到的画面，清楚掌握无人机所处的位置、周边环境等关键信息，进而实现对无人机飞行状态的有效监控以及各类任务的操作执行。\n\n（二）关键技术支撑\n\n1. LR-WiFi 技术\n\n在众多保障无人机无线图传高效、稳定工作的关键技术里，LR-WiFi 技术（Long Rang WiFi 远距离 WiFi）起到了很重要的作用。传统的 WiFi 技术在面对长距离传输需求时，往往会出现信号衰减、传输不稳定等情况。而 LR-WiFi 技术采用了先进的信号处理算法以及高级调制解调技术，它能够在远距离传输信号时保持较高的信号质量和稳定性。\n\n例如云望物联研发的 CV5200 无线通信视频传输 WiFi 模块，基于 802.11 无线通信标准，采用了 LR-WiFi 私有协议，具备 ML（最大似然检测），MRC（最大比合并），LDPC（低密度奇偶校验码），MIMO-OFDM（多输入多输出 - 正交频分复用）等高级无线技术。其双路发射输出功率可达 + 29dBm（单路 26dBm），使用 2.5dBi 天线进行地对空实测时，在空旷环境下能达到 6KM 的传输距离，并且支持 2Mbps、1080p 实时传输，这就为无人机远距离图传提供了强有力的技术支撑，特别适用于像航拍、测绘等需要无人机在较远距离作业的场景。\n\n2. 先进编码算法\n\n先进的编码算法对于无人机无线图传来说也是不可或缺的。无人机拍摄到的原始视频数据量通常非常庞大，如果直接传输，对带宽要求极高且效率低下，很难实现稳定、流畅的图传效果。\n\n像 H.264 和 H.265 这样的编码算法就能很好地解决这个问题，它们可以对视频数据进行高效压缩和优化处理，在保证画质的前提下，大幅减少需要传输的数据量，实现低延迟、高画质的实时传输。如此一来，即使在有限的带宽条件下，也能让无人机拍摄的画面清晰、流畅地传输到地面接收端，方便操作人员实时查看并做出准确的操控决策。\n\n\n## 图传的发展史\n图传系统的发展史可以分为模拟图传和数字图传两个主要阶段：\n\n### 模拟图传阶段\n模拟图像传送是指对时间（包括空间）和幅度连续变化的模拟图像信号作信源和信道处理，通过模拟信道传输或通过模拟记录装置实现存储的过程。一般用扫描拾取图像信息和压缩频带等信源处理方法得到图像基带信号，再用预均衡、调制等信道处理方法形成图像通带信号。\n\n模拟图传的上限高，下限低。\n1. **早期发展**：无线图传技术早在二十年前就已经出现，当时的无线传输价格昂贵，工作频率只有一些国家授权的频段才能使用，效果一般，主要解决了有无问题。\n2. **技术特点**：模拟图传是一种较为传统的图传方式，其优点是延迟极低，画面传输流畅，常用于对实时性要求极高的应用场景，如FPV飞行竞技。但缺点是画质较差，图像分辨率低，且在复杂电磁环境中信号容易受到干扰。\n\n### 数字图传阶段\n数字图传：指数字化的图像信号经信源编码和信道编码，通过数字信道（电缆、微波、卫星和光纤等）传输，或通过数字存储、记录装置存储的过程。\n1. **技术革新**：大概从2010年开始，Amimon公司研发出了无压缩和免费的5G频段的产品，首次实现可以让大多数的专业影视用户用得起无线传输产品，标志着无线图传产品走向成熟和普及。\n2. **数字图传优势**：数字图传采用数字信号传输，具有更高的分辨率和强大的抗干扰能力，是目前无人机图传的主流选择。数字图传能够传输高清画面，适合对画质有较高要求的航拍和专业应用场景。\n3. **编码技术**：数字图传的编码技术主要包括行程编码(RLE编码)、Huffman编码(熵编码)、离散余弦变换(DCT变换)和离散小波变换(DWT变换)等，这些编码技术在图像质量和传输延迟方面有着不同的影响。\n4. **抗干扰能力**：数字图传采用编码技术，并通过错误纠正和数据重传机制，在一定程度上能够抵御电磁干扰，使图像质量在受干扰时保持清晰稳定。\n5. **最新发展趋势**：数字图传技术的最新发展趋势体现在智能化与自动化、高清远距离传输、自动跳频技术、4G增强图传技术以及图像压缩技术等方面。\n\n图传系统从模拟图传到数字图传的发展，是一个从低分辨率、高延迟、易受干扰的模拟信号向高分辨率、低延迟、强抗干扰能力的数字信号转变的过程。随着技术的进步，数字图传逐渐成为主流，提供更高质量的图像传输体验。\n\n# 流媒体架构\n目前主流的流媒体系统架构主要分为以下几种:\n1. 单服务器架构：\n该架构中，所有的流媒体服务都运行在一台服务器上。这种架构简单、易于部署，但是在流量较大时，可能会导致服务器性能瓶颈，影响系统的稳定性。\n2. 分布式架构：\n该架构中，流媒体服务被分布在多个服务器上，每个服务器都可以独立地处理一部分流量。这种架构具有高可用性和可扩展性的优点，但是需要对系统进行复杂的负载均衡和监控。\n3. CDN架构：\n该架构中，流媒体服务通过CDN(内容分发网络）进行分发，用户可以从离自己最近的CDN节点获取流媒体内容。这种架构具有高速度、高可用性和低延迟的优点，但是需要在全球范围内部署CDN节点，成本较高。\n\n流媒体系统架构的发展历程可以追溯到20世纪90年代初，当时的流媒体技术主要是基于**RTSP**(实时流协议)和**RTP**(实时传输协议）等标准。随着网络带宽的提高和编解码技术的发展，流媒体系统架构也不断发展和创新。\n\n在2000年代初，流媒体系统开始采用基于HTTP的流媒体传输协议，例如，Adobe的Flash Media Server和Microsoff的Windows Media Server等。这种架构可以通过普通的Web服务器进行传输，无需特殊的流媒体服务器。\n\n在2010年代，流媒体系统开始采用基于WebRTC (Web实时通信）的架构，例如，Google的WebRTC和Facebook的WebRTC Live等。这种架构可以在Web浏览器中直接进行流媒体传输，无需安装插件或客户端程序。\n\n类似Gstreamer的流媒体系统架构主要是基于开源的流媒体框架和组件进行构建。Gstreamer是一种基于插件的流媒体框架，可以用于音频和视频的捕获、编码、解码、传输等多个方面。类似的流媒体系统架构还包括FFmpeg、VLC、DirectShow等。这些框架和组件可以通过编写插件或脚本进行自定义，从而满足不同的流媒体应用需求。\n\n## Gstreamer \n![](https://image.aruoshui.fun/i/2025/01/02/sj4ow5-0.webp)\n元件(Element)是GStreamer中最重要的概念。\n\n可以通过创建一系列的元件，并把它们连接起来,从而让数据流在这个被连接的各个元件之间传输。每个元件都有一个特殊的函数接口,对于有些元件的函数接口它们是用于能够读取文件的数据,解码文件数据的。而有些元件的函数接口只是输出相应的数据到具体的设备上(例如：声卡设备)。\n\n可以将若干个元件连接在一起,从而创建一个管道(pipeline)来完成一个特殊的任务,例如,媒体播放或者录音。\n\n对程序员来说， GStreamer中最重要的一个概念就是GstElement对象。元件是构建一个媒体管道的基本块。每一个元件都对应一个GstElement。任何一个解码器编码器、分离器、视频/音频输出部件实际上都是一个GstElement对象。\n\n## FFmpeg\nFFMPEG堪称自由软件中最完备的一套多媒体支持库，它几乎实现了所有当下常见的数据封装格式、多媒体传输协议以及音视频编解码器，堪称多媒体业界的瑞士军刀。\n\nFFMPEG从功能上划分为几个模块，分别为核心工具（libutils）、媒体格式（libavformat）、编解码（libavcodec）、设备（libavdevice）和后处理（libavfilter, libswscale, libpostproc），分别负责提供公用的功能函数、实现多媒体文件的读包和写包、完成音视频的编解码、管理音视频设备的操作以及进行音视频后处理。\n[详解](https://www.cnblogs.com/xcj26/articles/18175921)\n\n[jetson-ffmpeg](https://github.com/jocover/jetson-ffmpeg)\n## VLC\nLinux必装的软件\n\n## HLS 流式传输\nHTTP 实时流（HLS）是一种广泛使用的视频流协议，几乎可在任何服务器上运行，并且受到大多数设备的支持。HLS 通过提高或降低流的质量，使客户端设备无缝适应不断变化的网络条件。\n\nHTTP 实时流（HLS）是使用最广泛的视频流协议之一。尽管它称为 HTTP“实时”流，但它同时适用于点播流和实时流。HLS 将视频文件分解为较小的可下载 HTTP 文件，并使用 HTTP 协议来交付。客户端设备加载这些 HTTP 文件，然后将它们作为视频进行播放。\n\nHLS 的一个优点是，所有连入互联网的设备都支持 HTTP，因而它比需要使用专用服务器的流协议更易于实施。另一个优点是 HLS 流可以根据网络状况提高或降低视频质量，而不会中断播放。这就是在用户观看视频的过程中视频质量可能会变好或变差的原因。这个功能称为“自适应比特率视频传输”或“自适应比特率流式传输”，如果没有它，慢速网络条件可能导致视频播放完全停止。\n\n## RTSP视频流\n![](https://image.aruoshui.fun/i/2025/01/02/sjm9vs-0.webp)\nRTP 是由实时传输协议RTP，实时传输控制协议RTCP组成\n基于多播或单播为用户提供连续媒体数据的实时传输服务，RTCP是控制部分，负责实时监控数据传输质量，为系统提供阻塞控制和流控制\n由包头Header和载荷Payload两部分组成\n\nRTMP：实时消息传输协议，基于tcp，主要用于flash平台和支持RTMP协议的流媒体服务器之间进行音视频和数据通信。（基于FLASH，无法用于IOS）（主流流媒体传输协议）\nHLS：HTTP直播流技术，主要用于PC和Aplple中端，包括m3u8的索引文件，TS媒体分片文件,key加密串文件。\nRTSP：实时流传输协议，基于UDP，用来传输音频、视频的多媒体串流协议，定义了一对多应用程序，如何有效通过IP网络传送多媒体数据。\n\n**1. 抓包分析**\n![抓包](https://image.aruoshui.fun/i/2025/01/02/sjtnzj-0.webp)\n\n## ONVIF\nONVIF协议对设备发现、设备配置、事件、PTZ控制、视频分析、实时流媒体直播功能(RTSP拉流)、搜索、回放、录像录音管理等功能进行了规范。\n![]([image-3.png](https://image.aruoshui.fun/i/2025/01/02/sjykfb-0.webp))\n\n1、Nvidia视频硬解码、渲染、软/硬编码并写入MP4文件。项目地址：https://github.com/BreakingY/Nvidia-Video-Codec\n2、Jetson Jetpack5.x视频编解码。项目地址：https://github.com/BreakingY/jetpack-dec-enc\n3、音视频(H264/H265/AAC)封装、解封装、编解码pipeline，支持NVIDIA、昇腾DVPP硬编解码。项目地址：https://github.com/BreakingY/Media-Codec-Pipeline\n4、simple rtsp server，小而高效的rtsp服务器，支持H264、H265、AAC、PCMA；支持TCP、UDP；支持鉴权。项目地址：https://github.com/BreakingY/simple-rtsp-server\n5、simple rtsp client，rtsp客户端，支持TCP、UDP、H264、H265、AAC、PCMA，支持鉴权。项目地址：https://github.com/BreakingY/simple-rtsp-client\n6、libflv，flv muxer/demuxer，支持H264/H265、AAC。项目地址：https://github.com/BreakingY/libflv\n\n\n# OpenIPC\n基于 Buildroot/OpenWrt 项目的 Linux 操作系统, OpenIPC是IP摄像机的替代固件。其rootfs基于Buildroot，这一部分是开源的，但其中主要的ISP处理程序Majestic还是闭源状态\n\n## ISP\nISP处理程序，即图像信号处理器（Image Signal Processor），是相机系统中用于处理图像信号传感器输出的图像信号的核心组件。它负责将图像传感器捕获的原始数据转换成高质量的图像，以匹配不同厂商的图像传感器。\n\n## 当前实现的部分\n目前已经实现的功能包括但不限于\n\n1. RTSP视频流\n2. HLS HTTP视频流\n3. 静态图像生成\n4. YouTube直播\n4. ONVIF/NETIP/IPEYE等协议\n5. 移动检测并且发送通知到EMAIL/FTP/Telegram/Yandex Disk/HTTP API/MQTT broker\n6. 内置ZeroTier/WireGuard/Socks5等协议支持\n\n\n**1. Buildroot**\nBuildroot 是 Linux 平台上一个开源的嵌入式 Linux 系统自动构建框架。整个Buildroot是由 Makefile 脚本和 Kconfig 配置文件构成的。你可以和编译Linux内核一样，通过 buildroot 配置，menuconfig 修改，编译出一个完整的可以直接烧写到机器上运行的Linux系统软件(包含boot、kernel、rootfs以及rootfs中的各种库和应用程序)。\n\n**2. OpenWrt**\nOpenWrt 是一个基于 Linux 的、针对嵌入式网络设备的开源操作系统。\n\n## IP摄像头\n### OpenIPC 的革命\nOpenHD 项目（和其他类似项目）中的经典设置包括连接到 Raspberry Pi 的 MIPI 或 USB 摄像头，它们充当机载系统的视频编码器和路由器，然后通过 USB 连接到 WiFi 适配器和通过 UART 连接到飞行控制器。地面站通常由相同的 WiFi 适配器、第二个 Raspberry Pi 或 x86 linux 笔记本电脑以及高对比度显示器或护目镜组成。\n\n有时，MIPI 或 USB 摄像头会被 IP 摄像头换成 IP 摄像头，后者功能更强大（有自己的硬件编码器），价格更便宜，具有类似的特性。大多数现代摄像机都是典型的板载 Linux 设备（但与 Raspberry Pi 相比，RAM 和闪存大小要适中得多），这允许您在其上重新编译和运行几乎任何便携式软件。\n\n在使用这项技术时，出现了简化飞行系统并将所有必要的软件直接移植到 IP 摄像机的想法。从技术上讲，OpenIPC 项目的 FPV 固件是一个特殊的组件，具有两种类型的流行 WiFi 适配器驱动程序，Majestic streamer（在发射器系统上的经典方案中扮演 GStreamer 的角色）和 WFB-ng。\n\n1. 好处\n降低系统成本（H.265 IP 摄像机与配备 Raspberry Pi 的 H.264 MIPI 摄像机）\n通过简化电路来降低总功耗并提高系统可靠性\n减少视频延迟：在我们的 Glass-to-Glass 测试中，1080p@60延迟约为 80 毫秒（在中等预算的摄像机上），720p@60 的延迟约为 60 毫秒，1080p@30的延迟约为 100 毫秒（对于最预算的摄像机）。\n可以调整硬件编码器，例如，更频繁地形成 I 帧（具体情况取决于 IP 摄像机的供应商）\n社区在维修 IP 摄像机方面积累了大量经验，这使得进一步降低系统的运营成本成为可能。\n2. 弊\n由于资源有限（已安装的 RAM 和永久内存），相机将不支持大多数流行的编程语言（如 Java、Python、NodeJS）。如果你喜欢用这些语言编写（或者想把这些语言写的软件移植到相机上），你需要额外使用一台NanoPi，把OpenIPC相机当作普通的网络摄像机连接在NanoPi（https://www.aliexpress.com/item/1005004679805441.html）上。 \n\n在大多数系统中，Linux 内核版本受到 IP 摄像机供应商的限制，因为某些模块以二进制形式提供。为新的 WiFi 适配器或特定外围设备开发内核驱动程序可能非常耗时。\n\n在预算相机（主要为其开发 FPV 固件）上，资源非常有限，因此在撰写本文时无法运行神经网络。这种情况在不久的将来应该会发生变化。\n\n## 配置一图\n    ![](https://image.aruoshui.fun/i/2025/01/02/sgy7e1-0.webp)\n\n## openipc系统架构\n1. openioc fpv-视频传输-单向数传方案的系统架构\n    ![](https://image.aruoshui.fun/i/2025/01/02/sf653e-0.webp)\n2. openipc fpv-双向数传方案的系统架构\n   ![](https://image.aruoshui.fun/i/2025/01/02/sf6b0r-0.webp)\n\n\n## Openipc的发展过程\n### wifibroadcast\n1. **为什么普通wifi不行**\n   1. 需要匹配认证，如果一台设备失去关联(例如由于信号强度太弱)，视频传输会立即停止\n   2. 无差错传输:Wifi 要么传输正确的数据，要么不传输数据。在 FPV 场景中，这意味着即使收到的数据只有很小的错误，也会被完全拒绝。尽管您已收到有用的数据，但这可能会导致视频停顿。\n   3. 速率控制:如果信号强度太弱，普通 WiFi连接会自动切换到较低的传输速率。因此，(自动)选择的速率可能太低而无法传输视频数据。这样，数据就会排队并引入长达几秒的不可预测的延迟。\n   4. 一对一传输:除使用广播或类似技术，否则普通的 WiFi 数据流是一对一连接。使用传统 WiFi 很难实现旁观者的场景。\n2. 为什么WIfiBroadcast就行\n   1. Wifiroadcast 将 wifi 卡置于监控模式。该模式允许发送和接收任意数据包而无需认证匹配。此外，还能接收到错误的帧(校验和不匹配)。这样就建立了真正的单向连接，模仿了模拟链路的有利特性。\n   2. 发送端发送数据不用管它的接收端状态。因此，不存在由于认证丢失而导致视频突然停顿的风险\n   3. 只要视频在发射器的范围内，接收器就会接收视频。如果它慢慢超出范围，视频质量会下降，但不会停止。即使帧有错误，它们也会被显示而不是被拒绝。\n   4. 传统模拟图传方案“单个广播器-多个接收器”也适用于Wifibroadcast。如果旁观者想用他们的设备观看视频流，他们只需“切换到正确的频道”\n   5. Wifiroadcast 允许并行使用多个低成本接收器组合它们的数据以增加接收数据的准确性。(比如一个接收端具有覆盖 360°的全向天线和多个平板的远距离定向天线)\n   6. Wifiroadcast 使用前向纠错来满足低带宽要求下实现高可靠性。它能够在接收器处修复丢失或损坏的数据包\n### EZ-WIfiBroadcast\n\n### OpenHD\n项目通过一般的无线网卡作为无线电的发射与接受，通过载体树莓派实现高清图像的实时传输，同时集成了OSD功能、热点功能、支持HDMI显示器、手机、电脑作为终端、支持MAVlink、BF、INAV，支持发送和接受遥测、音频和各种控制数据，还配备有齐全的软件app。\n\n\n\n\n\n\n\n","slug":"OpenIPC","published":1,"updated":"2025-06-10T03:39:25.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6inz0015mkttejueb7oc","content":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"Linux/Ubuntu20 安装 TP-link(RTL8812AU) 无线网卡驱动\" href=\"https://blog.csdn.net/weixin_46283523/article/details/127072929\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">Linux/Ubuntu20 安装 TP-link(RTL8812AU) 无线网卡驱动</p><p class=\"url\">https://blog.csdn.net/weixin_46283523/article/details/127072929</p></div></a></div>    \n<div class=\"tag link\"><a class=\"link-card\" title=\"主流视频编码器H264、HEVC、AV1之间的视频质量以及编码速度比较\" href=\"https://www.bilibili.com/opus/733259258149208084\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/snzz37-0.webp\"/></div><div class=\"right\"><p class=\"text\">主流视频编码器H264、HEVC、AV1之间的视频质量以及编码速度比较</p><p class=\"url\">https://www.bilibili.com/opus/733259258149208084</p></div></a></div>\n<h1>参考文献</h1>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[1]\"></span><a class=\"reference-anchor\" href=\"#referto_[1]\">[1]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"/2014.\">徐瑶.基于H.264的视频压缩技术及其在视频监控系统中的应用[D].安徽大学</a></div>\n<h1>引言</h1>\n<h2 id=\"图传系统\">图传系统</h2>\n<p>无线图传技术即无线图像传输技术，是指不用布线（线缆）利用无线电波来传输图像数据的技术。</p>\n<h2 id=\"工作原理\">工作原理</h2>\n<p>无线图传技术主要涉及图像采集、编码、调制、发射、接收、解调、解码和图像显示等环节。</p>\n<ol>\n<li>\n<p>图像采集：通过摄像头或其他图像采集设备获取图像信息。这些设备可以是专业的摄像机、监控摄像头、手机摄像头等。采集到的图像通常是模拟信号或数字信号，具体取决于采集设备的类型。当今常用设备有：</p>\n<ol>\n<li>IMX415-AAQR-C:<br>\nIMX415-AAQR-C是一个对角线6.4mm（类型1/2.8）CMOS活动像素型固态图像传感器，具有一个正方形像素阵列和8.46 M有效像素。该芯片采用模拟2.9 V、数字1.1 V、接口1.8 V三层电源运行，功耗低。采用R、G、B原色镶嵌滤光片，实现高灵敏度、低暗电流、无涂片。该芯片具有一个具有可变电荷集成时间的电子快门。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/slngku-0.webp\" alt=\"imx415\"></li>\n</ol>\n</li>\n<li>\n<p>编码：如果采集到的图像是模拟信号，需要先进行模数转换，将其转换为数字信号。然后，使用图像编码算法对数字图像进行压缩编码，以减少数据量，便于传输。常见的图像编码标准有 H.264、H.265 等。</p>\n<ol>\n<li>H.264/AVC<br>\n  H264视频编码技术，是对序列帧图像进行压缩的技术。压缩之所以可能，是因为存在冗余数据。采用网络友好的结构和语法，有利于对误码和丢包的处理。在编码技术上，通过统一的VLC符号编码，高精度、多模式的位移估计，基于4X4块的整数变换，分层的编码语法等措施，使得H264算法具备很高的编码效率。<br>\n  视频实时性上，安徽大学在Hi3516SOC平台上实现H.264编码,并设计RTSP服务器用于在网络上传输H.264码流,使用VLC开源软件测试RTSP码流封包的正确性和评估H.264编码的图像效果。结果表明,该系统能够通过网络较为稳定地传输视频画面,而且画面清晰、数据传输快,满足视频监控的实时性需求。<span class=\"hidden-anchor\" id=\"referto_[1]\"></span><sup class=\"reference\"><a href=\"#referfrom_[1]\">[1]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\"></span><span class=\"reference-title\">参考资料</span></span></span></li>\n<li>H.265<br>\n  是为了应对更高分辨率视频（如4K、8K）的需求而开发的。它的主要优势在于其更高的压缩效率，相比H.264，它能够在保持相同视频质量的情况下，将视频数据量减少大约30% - 50%。高效的压缩能力使得 H.265 在高清和超高清视频的存储与传输方面展现出了巨大的优势，特别是在网络带宽资源紧张或者存储空间有限的云桌面应用场景中。</li>\n<li>AV1<br>\n现在最新的编码标准。<br>\nAV1编码器开源以及免专利费的优势，已有许多视频平台对其进行了支持，并且最近硬件也开始对AV1编码进行了支持，如英特尔Arc显卡、英伟达RTX40系显卡、以及即将发售的AMD RX7000系列显卡。可以预见的是，AV1编码将成为主流。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/smxx5h-0.webp\" alt=\"码率分析\"></li>\n</ol>\n</li>\n<li>\n<p>调制：将编码后的图像数据进行调制，即将数字信号转换为适合在无线信道中传输的信号形式。调制方式有很多种，如调频（FM）、调幅（AM）、调相（PM）等，以及数字调制方式如正交频分复用（OFDM）等。</p>\n</li>\n<li>\n<p>发射：通过无线发射设备将调制后的信号发送出去。无线发射设备可以是 Wi-Fi 路由器、蓝牙设备、无线射频模块等。发射的信号通过空气等无线介质传播。<br>\n对于图传系统，最常用的就是USB网卡，适合需要便捷和灵活连接的用户，广泛用于台式机或无内建无线网卡的设备。<br>\n常见的有</p>\n<ol>\n<li>rtl8812au<br>\n<strong>由网卡芯片和USB网络适配器组成</strong><br>\nRTL8812AU是一颗高性能的无线局域网(Wi-Fi)芯片，它支持IEEE 802.11ac/a/n无线标准，提供高速无线连接能力。该芯片搭载了2.4GHz/5GHz双频段，能够提供高达867Mbps的数据传输速率。它内置了强大的信号处理单元，包含调制解调器和功率放大器，有效增强了无线信号的接收与发送性能，确保了较好的无线覆盖范围和连接稳定性。此外，RTL8812AU还集成了多输入多输出（MIMO）技术，通过使用多副天线来提高数据传输速率和系统的整体吞吐量。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/sozr7s-0.webp\" alt=\"8812AU\"><br>\nUSB网络适配器通常由RTL8812AU无线芯片、USB接口芯片、天线系统、以及必要的电源管理电路组成。RTL8812AU芯片作为无线通信的核心部件，负责无线信号的处理和数据包的发送与接收。USB接口芯片则负责与主机的通信，并将RTL8812AU芯片的数据流转换为USB总线上的数据流。天线系统负责无线信号的接收与发送，通常包含两个或多个天线以支持MIMO技术。电源管理电路包括稳压器和滤波电容，确保设备运行稳定并满足USB总线的供电要求。</li>\n<li>IEEE 802.11<br>\nEEE 802.11标准的物理层技术包括跳频扩频（FHSS）、直接序列扩频（DSSS）、正交频分复用（OFDM）和多输入多输出（MIMO）等多种技术。这些技术各有特点，共同构成了IEEE 802.11标准强大的物理层传输能力。</li>\n<li>USB接口协议<br>\n详见<a href=\"https://blog.csdn.net/H520xcodenodev/article/details/141874401\">Linux内核源码-USB驱动分析</a></li>\n</ol>\n</li>\n<li>\n<p>接收：在接收端，使用相应的无线接收设备接收发射端发送过来的信号。接收设备需要与发射设备在相同的频率和调制方式下工作，才能正确接收信号。<br>\n<strong>与发射是配套的关系，解决好驱动层面就能解决</strong></p>\n</li>\n<li>\n<p>解调：对接收到的信号进行解调，即将无线信号转换回数字信号。解调过程是调制的逆过程，需要根据发射端使用的调制方式进行相应的解调操作。</p>\n</li>\n<li>\n<p>解码：对解调后的数字信号进行解码，恢复出原始的图像数据。解码过程是编码的逆过程，需要使用与发射端相同的图像编码算法进行解码。<br>\n<strong>同样与编码部分一一对应</strong></p>\n</li>\n<li>\n<p>图像显示：将解码后的图像数据在显示设备上进行显示，如显示器、电视、手机屏幕等。显示设备可以直接连接到接收端设备，也可以通过网络等其他方式接收图像数据进行显示。</p>\n</li>\n</ol>\n<h2 id=\"技术优势\">技术优势</h2>\n<ol>\n<li>\n<p>便捷性：<br>\n摆脱了传统有线连接的束缚，无需铺设大量的电缆，使得设备的安装和部署更加灵活方便。特别是在一些难以布线的场所，如户外、古建筑、临时活动场地等，无线图传技术能够快速搭建图像传输系统，节省时间和成本。<br>\n例如，在户外拍摄电影或举办大型活动时，使用无线图传可以让摄影师和导演在不同位置自由移动，而不受线缆长度的限制，提高工作效率。</p>\n</li>\n<li>\n<p>灵活性：<br>\n支持多种设备的连接和图像传输，可以与不同类型的图像采集设备（如摄像机、手机、平板电脑等）和显示设备（如监视器、投影仪、电视等）配合使用。同时，无线图传技术可以根据不同的应用需求进行定制和扩展，满足各种复杂场景的图像传输要求。<br>\n例如，在安防监控领域，无线图传可以将不同位置的监控摄像头的图像传输到监控中心，并且可以根据需要随时增加或调整摄像头的位置和数量。</p>\n</li>\n<li>\n<p>实时性：<br>\n能够实现图像的实时传输，具有较低的延迟。这对于一些对实时性要求较高的应用场景，如直播、视频会议、无人机航拍等非常重要。低延迟的无线图传可以让用户在接收端几乎同步地看到发送端的图像，提高交互性和用户体验。<br>\n例如，在体育赛事直播中，无线图传可以将现场的比赛画面实时传输到电视台或网络直播平台，让观众能够第一时间观看到精彩的比赛。</p>\n</li>\n<li>\n<p>抗干扰性：<br>\n采用了先进的无线通信技术和信号处理算法，具有较强的抗干扰能力。能够在复杂的电磁环境中稳定工作，不受其他无线设备的干扰，保证图像传输的质量和可靠性。<br>\n例如，在城市环境中，存在大量的无线信号源，如 Wi-Fi、蓝牙、手机信号等，无线图传技术可以通过频率选择、信号加密、纠错编码等方式，提高抗干扰能力，确保图像传输的稳定性。</p>\n</li>\n<li>\n<p>传输距离：<br>\n根据不同的技术标准和设备性能，无线图传的传输距离可以从几米到几公里甚至更远。一般来说，低功率的无线图传设备适用于短距离传输，如室内、小型活动场地等；而高功率的无线图传设备则可以用于长距离传输，如户外、大型活动现场等。<br>\n例如，在无人机航拍中，需要使用传输距离较远的无线图传设备，以便将无人机拍摄的画面实时传输到地面控制站。而在家庭监控中，短距离的无线图传设备就可以满足需求。</p>\n</li>\n</ol>\n<h2 id=\"应用领域\">应用领域</h2>\n<p>无线图传技术广泛应用于多个领域，如影视制作、新闻直播、活动直播、无人机航拍、安防监控、教育、医疗等。具体应用案例可参考上文对无线图传使用场景的描述。</p>\n<h2 id=\"当今发展现状\">当今发展现状</h2>\n<ol>\n<li>\n<p>硬件选型与优化：</p>\n<ol>\n<li>\n<p>高性能图传模块：选择传输速率高、信号稳定性强的无线图传模块。例如，一些采用先进的 LR-WiFi 技术或其他高性能无线通信技术的模块，能够在保证数据传输速率的同时，提升通信距离和抗干扰能力，为低延迟传输提供基础。</p>\n<ol>\n<li>LR-WiFi： （Long Range WIFI）<br>\n是在现有的 Wi-Fi 技术（如 Wi-Fi 4 或 Wi-Fi 5）基础上进行优化，专注于低功耗、长距离和低数据速率传输。<br>\n云望物联研发的 CV5200 无线通信视频传输 WiFi 模块，基于 802.11 无线通信标准，采用了 LR-WiFi 私有协议，具备 ML（最大似然检测），MRC（最大比合并），LDPC（低密度奇偶校验码），MIMO-OFDM（多输入多输出 - 正交频分复用）等高级无线技术。其双路发射输出功率可达 + 29dBm（单路 26dBm），使用 2.5dBi 天线进行地对空实测时，在空旷环境下能达到 6KM 的传输距离，并且支持 2Mbps、1080p 实时传输</li>\n</ol>\n</li>\n<li>\n<p>硬件编解码器：使用硬件编解码器进行视频的编码和解码。硬件编解码相比软件编解码具有更高的效率和更低的延迟，能够快速处理视频数据，减少处理时间，从而降低整体传输延迟。</p>\n<ol>\n<li><a href=\"https://www.nvidia.cn/geforce/guides/broadcasting-guide/\">NVIDIA NVENC</a><br>\n专门用于加速H.264和H.265/HEVC视频编码，集成在GeForce GTX/RTX、Quadro和Tesla等多个系列显卡中。</li>\n<li>Intel Quick Sync Video<br>\n内嵌在 Intel 处理器中的硬件加速编解码引擎。它可以利用 CPU 集成显卡的计算能力，将视频编码和解码任务从 CPU 中剥离出来，从而释放 CPU 资源，提升整体系统性能。<br>\nQuick Sync 支持多种视频处理编解码器的硬件加速，包括 H.264 (AVC)、H.265 (HEVC)、VP8、VP9 和最新的 AV1。</li>\n<li>AMD VCE (Video Codec Engine)<br>\nAMD显卡和处理器中的硬件视频编码器，类似于NVIDIA的NVENC。它支持高效的视频编码处理，通常用于实时视频流和直播。VCE支持H.264、H.265（HEVC）编码，并且被广泛应用于AMD的Radeon显卡中。</li>\n<li><a href=\"https://blog.csdn.net/Yan_uuu/article/details/142884384\">jetson视频编码</a>：<br>\nnvmpi 是 NVIDIA 提供的多媒体处理接口，jetson-ffmpeg链接</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>协议优化：</p>\n<ol>\n<li>网络频段优化：根据实际使用场景，选择干扰较小、带宽较高的网络频段。例如，对于 2.4GHz 和 5GHz 两个常见的 Wi-Fi 频段，5GHz 频段的带宽更高、干扰更少，但传输距离相对较短；2.4GHz 频段的传输距离较远，但干扰相对较多。在近距离、对带宽要求高的场景下，优先选择 5GHz 频段；在需要远距离传输的场景下，可以根据实际情况综合考虑。</li>\n<li>优化网络拓扑结构：确保无线图传模块与接收端之间的网络拓扑结构简单、稳定。减少网络中的中间节点和设备，避免数据在传输过程中经过过多的转发和处理，从而降低延迟。同时，合理设置无线接入点的位置和数量，保证信号覆盖范围和强度，提高网络的稳定性和传输效率。</li>\n<li>网络带宽管理：对网络带宽进行合理的分配和管理，优先保证数据的传输带宽。可以通过设置 QoS（服务质量）策略，对不同类型的网络流量进行分类和优先级设置，确保数据能够及时、快速地传输。</li>\n</ol>\n</li>\n<li>\n<p>软件优化：</p>\n<ol>\n<li>优化编解码算法：采用高效的视频编解码算法，如 H.264、H.265 等，并且根据实际情况对编解码参数进行优化。例如，调整编码的帧率、分辨率、码率等参数，在保证视频质量的前提下，降低数据量和编码时间，从而减少延迟。</li>\n<li>多线程处理：在软件设计中，采用多线程技术，将数据的采集、编码、传输、解码等操作分配到不同的线程中并行处理，提高系统的处理效率，降低延迟。同时，要注意线程之间的同步和数据交互，避免出现数据丢失或错误。\n<ol>\n<li><a href=\"https://developer.aliyun.com/article/802808\">编解码再进化：Ali266 与下一代视频技术</a><br>\n在 LiveVideoStackCon 2021 北京峰会，阿里云自研的 VVC 编解码器，首先 Ali266 对 VVC 这个最新视频标准提供完整的编解码能力，速度可以达到实时高清，目前我们最快的速度是可以达到 1080p30 帧编码速度。<br>\nAli266 压缩性能卓越，在 Slow 档次上达到 50% 的带宽节省，在实时 Fast 档次上达到 40% 的带宽节省，因此 Ali266 从质量优先到速度优先可以覆盖不同业务的需求。同时我们非常高兴的汇报我们正在与优酷进行深度合作，希望通过 Ali266 技术落地优酷，助力优酷降本增质、赋能新业务技术支撑。</li>\n</ol>\n</li>\n<li>错误处理和重传机制：建立完善的错误处理和重传机制，当数据传输过程中出现丢包、错误等情况时，能够及时进行检测和处理。对于重要的数据，可以采用重传的方式保证数据的完整性和准确性，但要注意重传的次数和时机，避免因过多的重传导致延迟增加。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"图传系统-2\">图传系统</h2>\n<p>在当今时代，无人机的应用正变得越来越广泛，无论是在航拍记录绝美风光、农业领域进行植保作业、还是参与救援抢险等诸多场景中，都能看到它活跃的身影。而在无人机发挥作用的过程里，无线图传技术扮演着至关重要的角色，堪称是连接无人机与地面控制的关键 “桥梁”。</p>\n<p>通过无线图传技术，无人机在飞行时所获取到的各类数据，比如拍摄的高清画面、探测到的环境信息等，都能够及时传输到地面控制端，让操作员可以实时监控无人机的飞行状态，像其所处的位置、飞行的高度、速度以及方位等重要信息都能一目了然。这也就意味着，操作员能够依据这些实时反馈的信息，迅速制定出合适的方案与策略，去应对飞行过程中随时可能出现的各种突发情况，实现对整个任务的有效掌控。</p>\n<p>再者，在无人机执行拍摄以及遥感等应用任务时，无线图传技术更是不可或缺。无人机凭借着高清摄像头、先进的蓝牙数据传输等高科技设备进行数据采集后，借助无线图传，可将数据实时传输到操作中心，操作者由此便能实时获取现场的图像信息。凭借这些传输回来的数据和图像，无人机能够出色地完成对地面环境的摄影、遥感等工作，帮助操作者更细致、全面地了解实际情况，进而为无人机在更多领域的应用提供了强有力的数据支撑。</p>\n<p>另外，无人机常常需要在高山峡谷、海洋等特殊区域飞行作业，面临风雨、雾霾等复杂且不稳定的极端天气条件，这些情况对于人类操作者来说，很难提前预见并快速做出准确的处理决策。但无线图传技术使得无人机可以迅速向操作员传输数据，操作员能够及时对现场状况做出反应，采取相应措施，从而更好地保障作业顺利进行，也确保了作业的效率和质量。</p>\n<p>总而言之，随着无人机市场需求的日益增长，无线图传技术也越发受到行业的广泛关注与运用。无论是航拍、测绘、搜救，还是农林等各行各业，掌握和运用好无人机无线图传技术，都能从中获得极大的价值</p>\n<h2 id=\"图传的核心技术\">图传的核心技术</h2>\n<p>（一）基础通信方式</p>\n<p>无人机无线图传主要是依靠如 WiFi 等无线通信技术来实现画面传输的。首先，无人机搭载的摄像头会捕捉到相应的画面，随后，设备内的相关模块会运用特定的编码方式，将这些画面转化成数字信号。</p>\n<p>以常见的 WiFi 图传为例，就如同我们平时用手机连接 WiFi 上网一样，无人机通过自身的 WiFi 模块与地面控制站或者移动设备（像手机、平板电脑等）建立连接。不过，无人机图传所用的 WiFi 模块往往具备一些更适合远距离、高质量传输的特性。比如，有的会采用功率更大的 WiFi 模块，以此来增强信号强度，保障传输距离。</p>\n<p>在传输过程中，为了能让数据更高效地通过无线信号传递，会使用到视频编码与压缩技术，像 H.264 和 H.265 这类编码方式就很常用，它们能够在大幅减少数据量的同时保持较高的视频质量，使得在有限的频段带宽下，依然可以把拍摄到的高清画面稳定地传输到地面端，让操作员可以实时在地面控制站或移动设备上看到无人机拍摄到的画面，清楚掌握无人机所处的位置、周边环境等关键信息，进而实现对无人机飞行状态的有效监控以及各类任务的操作执行。</p>\n<p>（二）关键技术支撑</p>\n<ol>\n<li>LR-WiFi 技术</li>\n</ol>\n<p>在众多保障无人机无线图传高效、稳定工作的关键技术里，LR-WiFi 技术（Long Rang WiFi 远距离 WiFi）起到了很重要的作用。传统的 WiFi 技术在面对长距离传输需求时，往往会出现信号衰减、传输不稳定等情况。而 LR-WiFi 技术采用了先进的信号处理算法以及高级调制解调技术，它能够在远距离传输信号时保持较高的信号质量和稳定性。</p>\n<p>例如云望物联研发的 CV5200 无线通信视频传输 WiFi 模块，基于 802.11 无线通信标准，采用了 LR-WiFi 私有协议，具备 ML（最大似然检测），MRC（最大比合并），LDPC（低密度奇偶校验码），MIMO-OFDM（多输入多输出 - 正交频分复用）等高级无线技术。其双路发射输出功率可达 + 29dBm（单路 26dBm），使用 2.5dBi 天线进行地对空实测时，在空旷环境下能达到 6KM 的传输距离，并且支持 2Mbps、1080p 实时传输，这就为无人机远距离图传提供了强有力的技术支撑，特别适用于像航拍、测绘等需要无人机在较远距离作业的场景。</p>\n<ol start=\"2\">\n<li>先进编码算法</li>\n</ol>\n<p>先进的编码算法对于无人机无线图传来说也是不可或缺的。无人机拍摄到的原始视频数据量通常非常庞大，如果直接传输，对带宽要求极高且效率低下，很难实现稳定、流畅的图传效果。</p>\n<p>像 H.264 和 H.265 这样的编码算法就能很好地解决这个问题，它们可以对视频数据进行高效压缩和优化处理，在保证画质的前提下，大幅减少需要传输的数据量，实现低延迟、高画质的实时传输。如此一来，即使在有限的带宽条件下，也能让无人机拍摄的画面清晰、流畅地传输到地面接收端，方便操作人员实时查看并做出准确的操控决策。</p>\n<h2 id=\"图传的发展史\">图传的发展史</h2>\n<p>图传系统的发展史可以分为模拟图传和数字图传两个主要阶段：</p>\n<h3 id=\"模拟图传阶段\">模拟图传阶段</h3>\n<p>模拟图像传送是指对时间（包括空间）和幅度连续变化的模拟图像信号作信源和信道处理，通过模拟信道传输或通过模拟记录装置实现存储的过程。一般用扫描拾取图像信息和压缩频带等信源处理方法得到图像基带信号，再用预均衡、调制等信道处理方法形成图像通带信号。</p>\n<p>模拟图传的上限高，下限低。</p>\n<ol>\n<li><strong>早期发展</strong>：无线图传技术早在二十年前就已经出现，当时的无线传输价格昂贵，工作频率只有一些国家授权的频段才能使用，效果一般，主要解决了有无问题。</li>\n<li><strong>技术特点</strong>：模拟图传是一种较为传统的图传方式，其优点是延迟极低，画面传输流畅，常用于对实时性要求极高的应用场景，如FPV飞行竞技。但缺点是画质较差，图像分辨率低，且在复杂电磁环境中信号容易受到干扰。</li>\n</ol>\n<h3 id=\"数字图传阶段\">数字图传阶段</h3>\n<p>数字图传：指数字化的图像信号经信源编码和信道编码，通过数字信道（电缆、微波、卫星和光纤等）传输，或通过数字存储、记录装置存储的过程。</p>\n<ol>\n<li><strong>技术革新</strong>：大概从2010年开始，Amimon公司研发出了无压缩和免费的5G频段的产品，首次实现可以让大多数的专业影视用户用得起无线传输产品，标志着无线图传产品走向成熟和普及。</li>\n<li><strong>数字图传优势</strong>：数字图传采用数字信号传输，具有更高的分辨率和强大的抗干扰能力，是目前无人机图传的主流选择。数字图传能够传输高清画面，适合对画质有较高要求的航拍和专业应用场景。</li>\n<li><strong>编码技术</strong>：数字图传的编码技术主要包括行程编码(RLE编码)、Huffman编码(熵编码)、离散余弦变换(DCT变换)和离散小波变换(DWT变换)等，这些编码技术在图像质量和传输延迟方面有着不同的影响。</li>\n<li><strong>抗干扰能力</strong>：数字图传采用编码技术，并通过错误纠正和数据重传机制，在一定程度上能够抵御电磁干扰，使图像质量在受干扰时保持清晰稳定。</li>\n<li><strong>最新发展趋势</strong>：数字图传技术的最新发展趋势体现在智能化与自动化、高清远距离传输、自动跳频技术、4G增强图传技术以及图像压缩技术等方面。</li>\n</ol>\n<p>图传系统从模拟图传到数字图传的发展，是一个从低分辨率、高延迟、易受干扰的模拟信号向高分辨率、低延迟、强抗干扰能力的数字信号转变的过程。随着技术的进步，数字图传逐渐成为主流，提供更高质量的图像传输体验。</p>\n<h1>流媒体架构</h1>\n<p>目前主流的流媒体系统架构主要分为以下几种:</p>\n<ol>\n<li>单服务器架构：<br>\n该架构中，所有的流媒体服务都运行在一台服务器上。这种架构简单、易于部署，但是在流量较大时，可能会导致服务器性能瓶颈，影响系统的稳定性。</li>\n<li>分布式架构：<br>\n该架构中，流媒体服务被分布在多个服务器上，每个服务器都可以独立地处理一部分流量。这种架构具有高可用性和可扩展性的优点，但是需要对系统进行复杂的负载均衡和监控。</li>\n<li>CDN架构：<br>\n该架构中，流媒体服务通过CDN(内容分发网络）进行分发，用户可以从离自己最近的CDN节点获取流媒体内容。这种架构具有高速度、高可用性和低延迟的优点，但是需要在全球范围内部署CDN节点，成本较高。</li>\n</ol>\n<p>流媒体系统架构的发展历程可以追溯到20世纪90年代初，当时的流媒体技术主要是基于<strong>RTSP</strong>(实时流协议)和<strong>RTP</strong>(实时传输协议）等标准。随着网络带宽的提高和编解码技术的发展，流媒体系统架构也不断发展和创新。</p>\n<p>在2000年代初，流媒体系统开始采用基于HTTP的流媒体传输协议，例如，Adobe的Flash Media Server和Microsoff的Windows Media Server等。这种架构可以通过普通的Web服务器进行传输，无需特殊的流媒体服务器。</p>\n<p>在2010年代，流媒体系统开始采用基于WebRTC (Web实时通信）的架构，例如，Google的WebRTC和Facebook的WebRTC Live等。这种架构可以在Web浏览器中直接进行流媒体传输，无需安装插件或客户端程序。</p>\n<p>类似Gstreamer的流媒体系统架构主要是基于开源的流媒体框架和组件进行构建。Gstreamer是一种基于插件的流媒体框架，可以用于音频和视频的捕获、编码、解码、传输等多个方面。类似的流媒体系统架构还包括FFmpeg、VLC、DirectShow等。这些框架和组件可以通过编写插件或脚本进行自定义，从而满足不同的流媒体应用需求。</p>\n<h2 id=\"Gstreamer\">Gstreamer</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/01/02/sj4ow5-0.webp\" alt=\"\"><br>\n元件(Element)是GStreamer中最重要的概念。</p>\n<p>可以通过创建一系列的元件，并把它们连接起来,从而让数据流在这个被连接的各个元件之间传输。每个元件都有一个特殊的函数接口,对于有些元件的函数接口它们是用于能够读取文件的数据,解码文件数据的。而有些元件的函数接口只是输出相应的数据到具体的设备上(例如：声卡设备)。</p>\n<p>可以将若干个元件连接在一起,从而创建一个管道(pipeline)来完成一个特殊的任务,例如,媒体播放或者录音。</p>\n<p>对程序员来说， GStreamer中最重要的一个概念就是GstElement对象。元件是构建一个媒体管道的基本块。每一个元件都对应一个GstElement。任何一个解码器编码器、分离器、视频/音频输出部件实际上都是一个GstElement对象。</p>\n<h2 id=\"FFmpeg\">FFmpeg</h2>\n<p>FFMPEG堪称自由软件中最完备的一套多媒体支持库，它几乎实现了所有当下常见的数据封装格式、多媒体传输协议以及音视频编解码器，堪称多媒体业界的瑞士军刀。</p>\n<p>FFMPEG从功能上划分为几个模块，分别为核心工具（libutils）、媒体格式（libavformat）、编解码（libavcodec）、设备（libavdevice）和后处理（libavfilter, libswscale, libpostproc），分别负责提供公用的功能函数、实现多媒体文件的读包和写包、完成音视频的编解码、管理音视频设备的操作以及进行音视频后处理。<br>\n<a href=\"https://www.cnblogs.com/xcj26/articles/18175921\">详解</a></p>\n<p><a href=\"https://github.com/jocover/jetson-ffmpeg\">jetson-ffmpeg</a></p>\n<h2 id=\"VLC\">VLC</h2>\n<p>Linux必装的软件</p>\n<h2 id=\"HLS-流式传输\">HLS 流式传输</h2>\n<p>HTTP 实时流（HLS）是一种广泛使用的视频流协议，几乎可在任何服务器上运行，并且受到大多数设备的支持。HLS 通过提高或降低流的质量，使客户端设备无缝适应不断变化的网络条件。</p>\n<p>HTTP 实时流（HLS）是使用最广泛的视频流协议之一。尽管它称为 HTTP“实时”流，但它同时适用于点播流和实时流。HLS 将视频文件分解为较小的可下载 HTTP 文件，并使用 HTTP 协议来交付。客户端设备加载这些 HTTP 文件，然后将它们作为视频进行播放。</p>\n<p>HLS 的一个优点是，所有连入互联网的设备都支持 HTTP，因而它比需要使用专用服务器的流协议更易于实施。另一个优点是 HLS 流可以根据网络状况提高或降低视频质量，而不会中断播放。这就是在用户观看视频的过程中视频质量可能会变好或变差的原因。这个功能称为“自适应比特率视频传输”或“自适应比特率流式传输”，如果没有它，慢速网络条件可能导致视频播放完全停止。</p>\n<h2 id=\"RTSP视频流\">RTSP视频流</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/01/02/sjm9vs-0.webp\" alt=\"\"><br>\nRTP 是由实时传输协议RTP，实时传输控制协议RTCP组成<br>\n基于多播或单播为用户提供连续媒体数据的实时传输服务，RTCP是控制部分，负责实时监控数据传输质量，为系统提供阻塞控制和流控制<br>\n由包头Header和载荷Payload两部分组成</p>\n<p>RTMP：实时消息传输协议，基于tcp，主要用于flash平台和支持RTMP协议的流媒体服务器之间进行音视频和数据通信。（基于FLASH，无法用于IOS）（主流流媒体传输协议）<br>\nHLS：HTTP直播流技术，主要用于PC和Aplple中端，包括m3u8的索引文件，TS媒体分片文件,key加密串文件。<br>\nRTSP：实时流传输协议，基于UDP，用来传输音频、视频的多媒体串流协议，定义了一对多应用程序，如何有效通过IP网络传送多媒体数据。</p>\n<p><strong>1. 抓包分析</strong><br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/sjtnzj-0.webp\" alt=\"抓包\"></p>\n<h2 id=\"ONVIF\">ONVIF</h2>\n<p>ONVIF协议对设备发现、设备配置、事件、PTZ控制、视频分析、实时流媒体直播功能(RTSP拉流)、搜索、回放、录像录音管理等功能进行了规范。<br>\n<img src=\"%5Bimage-3.png%5D(https://image.aruoshui.fun/i/2025/01/02/sjykfb-0.webp)\" alt=\"\"></p>\n<p>1、Nvidia视频硬解码、渲染、软/硬编码并写入MP4文件。项目地址：<a href=\"https://github.com/BreakingY/Nvidia-Video-Codec\">https://github.com/BreakingY/Nvidia-Video-Codec</a><br>\n2、Jetson Jetpack5.x视频编解码。项目地址：<a href=\"https://github.com/BreakingY/jetpack-dec-enc\">https://github.com/BreakingY/jetpack-dec-enc</a><br>\n3、音视频(H264/H265/AAC)封装、解封装、编解码pipeline，支持NVIDIA、昇腾DVPP硬编解码。项目地址：<a href=\"https://github.com/BreakingY/Media-Codec-Pipeline\">https://github.com/BreakingY/Media-Codec-Pipeline</a><br>\n4、simple rtsp server，小而高效的rtsp服务器，支持H264、H265、AAC、PCMA；支持TCP、UDP；支持鉴权。项目地址：<a href=\"https://github.com/BreakingY/simple-rtsp-server\">https://github.com/BreakingY/simple-rtsp-server</a><br>\n5、simple rtsp client，rtsp客户端，支持TCP、UDP、H264、H265、AAC、PCMA，支持鉴权。项目地址：<a href=\"https://github.com/BreakingY/simple-rtsp-client\">https://github.com/BreakingY/simple-rtsp-client</a><br>\n6、libflv，flv muxer/demuxer，支持H264/H265、AAC。项目地址：<a href=\"https://github.com/BreakingY/libflv\">https://github.com/BreakingY/libflv</a></p>\n<h1>OpenIPC</h1>\n<p>基于 Buildroot/OpenWrt 项目的 Linux 操作系统, OpenIPC是IP摄像机的替代固件。其rootfs基于Buildroot，这一部分是开源的，但其中主要的ISP处理程序Majestic还是闭源状态</p>\n<h2 id=\"ISP\">ISP</h2>\n<p>ISP处理程序，即图像信号处理器（Image Signal Processor），是相机系统中用于处理图像信号传感器输出的图像信号的核心组件。它负责将图像传感器捕获的原始数据转换成高质量的图像，以匹配不同厂商的图像传感器。</p>\n<h2 id=\"当前实现的部分\">当前实现的部分</h2>\n<p>目前已经实现的功能包括但不限于</p>\n<ol>\n<li>RTSP视频流</li>\n<li>HLS HTTP视频流</li>\n<li>静态图像生成</li>\n<li>YouTube直播</li>\n<li>ONVIF/NETIP/IPEYE等协议</li>\n<li>移动检测并且发送通知到EMAIL/FTP/Telegram/Yandex Disk/HTTP API/MQTT broker</li>\n<li>内置ZeroTier/WireGuard/Socks5等协议支持</li>\n</ol>\n<p><strong>1. Buildroot</strong><br>\nBuildroot 是 Linux 平台上一个开源的嵌入式 Linux 系统自动构建框架。整个Buildroot是由 Makefile 脚本和 Kconfig 配置文件构成的。你可以和编译Linux内核一样，通过 buildroot 配置，menuconfig 修改，编译出一个完整的可以直接烧写到机器上运行的Linux系统软件(包含boot、kernel、rootfs以及rootfs中的各种库和应用程序)。</p>\n<p><strong>2. OpenWrt</strong><br>\nOpenWrt 是一个基于 Linux 的、针对嵌入式网络设备的开源操作系统。</p>\n<h2 id=\"IP摄像头\">IP摄像头</h2>\n<h3 id=\"OpenIPC-的革命\">OpenIPC 的革命</h3>\n<p>OpenHD 项目（和其他类似项目）中的经典设置包括连接到 Raspberry Pi 的 MIPI 或 USB 摄像头，它们充当机载系统的视频编码器和路由器，然后通过 USB 连接到 WiFi 适配器和通过 UART 连接到飞行控制器。地面站通常由相同的 WiFi 适配器、第二个 Raspberry Pi 或 x86 linux 笔记本电脑以及高对比度显示器或护目镜组成。</p>\n<p>有时，MIPI 或 USB 摄像头会被 IP 摄像头换成 IP 摄像头，后者功能更强大（有自己的硬件编码器），价格更便宜，具有类似的特性。大多数现代摄像机都是典型的板载 Linux 设备（但与 Raspberry Pi 相比，RAM 和闪存大小要适中得多），这允许您在其上重新编译和运行几乎任何便携式软件。</p>\n<p>在使用这项技术时，出现了简化飞行系统并将所有必要的软件直接移植到 IP 摄像机的想法。从技术上讲，OpenIPC 项目的 FPV 固件是一个特殊的组件，具有两种类型的流行 WiFi 适配器驱动程序，Majestic streamer（在发射器系统上的经典方案中扮演 GStreamer 的角色）和 WFB-ng。</p>\n<ol>\n<li>好处<br>\n降低系统成本（H.265 IP 摄像机与配备 Raspberry Pi 的 H.264 MIPI 摄像机）<br>\n通过简化电路来降低总功耗并提高系统可靠性<br>\n减少视频延迟：在我们的 Glass-to-Glass 测试中，1080p@60延迟约为 80 毫秒（在中等预算的摄像机上），720p@60 的延迟约为 60 毫秒，1080p@30的延迟约为 100 毫秒（对于最预算的摄像机）。<br>\n可以调整硬件编码器，例如，更频繁地形成 I 帧（具体情况取决于 IP 摄像机的供应商）<br>\n社区在维修 IP 摄像机方面积累了大量经验，这使得进一步降低系统的运营成本成为可能。</li>\n<li>弊<br>\n由于资源有限（已安装的 RAM 和永久内存），相机将不支持大多数流行的编程语言（如 Java、Python、NodeJS）。如果你喜欢用这些语言编写（或者想把这些语言写的软件移植到相机上），你需要额外使用一台NanoPi，把OpenIPC相机当作普通的网络摄像机连接在NanoPi（<a href=\"https://www.aliexpress.com/item/1005004679805441.html%EF%BC%89%E4%B8%8A%E3%80%82\">https://www.aliexpress.com/item/1005004679805441.html）上。</a></li>\n</ol>\n<p>在大多数系统中，Linux 内核版本受到 IP 摄像机供应商的限制，因为某些模块以二进制形式提供。为新的 WiFi 适配器或特定外围设备开发内核驱动程序可能非常耗时。</p>\n<p>在预算相机（主要为其开发 FPV 固件）上，资源非常有限，因此在撰写本文时无法运行神经网络。这种情况在不久的将来应该会发生变化。</p>\n<h2 id=\"配置一图\">配置一图</h2>\n<pre><code>![](https://image.aruoshui.fun/i/2025/01/02/sgy7e1-0.webp)\n</code></pre>\n<h2 id=\"openipc系统架构\">openipc系统架构</h2>\n<ol>\n<li>openioc fpv-视频传输-单向数传方案的系统架构<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/sf653e-0.webp\" alt=\"\"></li>\n<li>openipc fpv-双向数传方案的系统架构<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/sf6b0r-0.webp\" alt=\"\"></li>\n</ol>\n<h2 id=\"Openipc的发展过程\">Openipc的发展过程</h2>\n<h3 id=\"wifibroadcast\">wifibroadcast</h3>\n<ol>\n<li><strong>为什么普通wifi不行</strong>\n<ol>\n<li>需要匹配认证，如果一台设备失去关联(例如由于信号强度太弱)，视频传输会立即停止</li>\n<li>无差错传输:Wifi 要么传输正确的数据，要么不传输数据。在 FPV 场景中，这意味着即使收到的数据只有很小的错误，也会被完全拒绝。尽管您已收到有用的数据，但这可能会导致视频停顿。</li>\n<li>速率控制:如果信号强度太弱，普通 WiFi连接会自动切换到较低的传输速率。因此，(自动)选择的速率可能太低而无法传输视频数据。这样，数据就会排队并引入长达几秒的不可预测的延迟。</li>\n<li>一对一传输:除使用广播或类似技术，否则普通的 WiFi 数据流是一对一连接。使用传统 WiFi 很难实现旁观者的场景。</li>\n</ol>\n</li>\n<li>为什么WIfiBroadcast就行\n<ol>\n<li>Wifiroadcast 将 wifi 卡置于监控模式。该模式允许发送和接收任意数据包而无需认证匹配。此外，还能接收到错误的帧(校验和不匹配)。这样就建立了真正的单向连接，模仿了模拟链路的有利特性。</li>\n<li>发送端发送数据不用管它的接收端状态。因此，不存在由于认证丢失而导致视频突然停顿的风险</li>\n<li>只要视频在发射器的范围内，接收器就会接收视频。如果它慢慢超出范围，视频质量会下降，但不会停止。即使帧有错误，它们也会被显示而不是被拒绝。</li>\n<li>传统模拟图传方案“单个广播器-多个接收器”也适用于Wifibroadcast。如果旁观者想用他们的设备观看视频流，他们只需“切换到正确的频道”</li>\n<li>Wifiroadcast 允许并行使用多个低成本接收器组合它们的数据以增加接收数据的准确性。(比如一个接收端具有覆盖 360°的全向天线和多个平板的远距离定向天线)</li>\n<li>Wifiroadcast 使用前向纠错来满足低带宽要求下实现高可靠性。它能够在接收器处修复丢失或损坏的数据包</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"EZ-WIfiBroadcast\">EZ-WIfiBroadcast</h3>\n<h3 id=\"OpenHD\">OpenHD</h3>\n<p>项目通过一般的无线网卡作为无线电的发射与接受，通过载体树莓派实现高清图像的实时传输，同时集成了OSD功能、热点功能、支持HDMI显示器、手机、电脑作为终端、支持MAVlink、BF、INAV，支持发送和接受遥测、音频和各种控制数据，还配备有齐全的软件app。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"Linux/Ubuntu20 安装 TP-link(RTL8812AU) 无线网卡驱动\" href=\"https://blog.csdn.net/weixin_46283523/article/details/127072929\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">Linux/Ubuntu20 安装 TP-link(RTL8812AU) 无线网卡驱动</p><p class=\"url\">https://blog.csdn.net/weixin_46283523/article/details/127072929</p></div></a></div>    \n<div class=\"tag link\"><a class=\"link-card\" title=\"主流视频编码器H264、HEVC、AV1之间的视频质量以及编码速度比较\" href=\"https://www.bilibili.com/opus/733259258149208084\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/snzz37-0.webp\"/></div><div class=\"right\"><p class=\"text\">主流视频编码器H264、HEVC、AV1之间的视频质量以及编码速度比较</p><p class=\"url\">https://www.bilibili.com/opus/733259258149208084</p></div></a></div>\n<h1>参考文献</h1>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[1]\"></span><a class=\"reference-anchor\" href=\"#referto_[1]\">[1]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"/2014.\">徐瑶.基于H.264的视频压缩技术及其在视频监控系统中的应用[D].安徽大学</a></div>\n<h1>引言</h1>\n<h2 id=\"图传系统\">图传系统</h2>\n<p>无线图传技术即无线图像传输技术，是指不用布线（线缆）利用无线电波来传输图像数据的技术。</p>\n<h2 id=\"工作原理\">工作原理</h2>\n<p>无线图传技术主要涉及图像采集、编码、调制、发射、接收、解调、解码和图像显示等环节。</p>\n<ol>\n<li>\n<p>图像采集：通过摄像头或其他图像采集设备获取图像信息。这些设备可以是专业的摄像机、监控摄像头、手机摄像头等。采集到的图像通常是模拟信号或数字信号，具体取决于采集设备的类型。当今常用设备有：</p>\n<ol>\n<li>IMX415-AAQR-C:<br>\nIMX415-AAQR-C是一个对角线6.4mm（类型1/2.8）CMOS活动像素型固态图像传感器，具有一个正方形像素阵列和8.46 M有效像素。该芯片采用模拟2.9 V、数字1.1 V、接口1.8 V三层电源运行，功耗低。采用R、G、B原色镶嵌滤光片，实现高灵敏度、低暗电流、无涂片。该芯片具有一个具有可变电荷集成时间的电子快门。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/slngku-0.webp\" alt=\"imx415\"></li>\n</ol>\n</li>\n<li>\n<p>编码：如果采集到的图像是模拟信号，需要先进行模数转换，将其转换为数字信号。然后，使用图像编码算法对数字图像进行压缩编码，以减少数据量，便于传输。常见的图像编码标准有 H.264、H.265 等。</p>\n<ol>\n<li>H.264/AVC<br>\n  H264视频编码技术，是对序列帧图像进行压缩的技术。压缩之所以可能，是因为存在冗余数据。采用网络友好的结构和语法，有利于对误码和丢包的处理。在编码技术上，通过统一的VLC符号编码，高精度、多模式的位移估计，基于4X4块的整数变换，分层的编码语法等措施，使得H264算法具备很高的编码效率。<br>\n  视频实时性上，安徽大学在Hi3516SOC平台上实现H.264编码,并设计RTSP服务器用于在网络上传输H.264码流,使用VLC开源软件测试RTSP码流封包的正确性和评估H.264编码的图像效果。结果表明,该系统能够通过网络较为稳定地传输视频画面,而且画面清晰、数据传输快,满足视频监控的实时性需求。<span class=\"hidden-anchor\" id=\"referto_[1]\"></span><sup class=\"reference\"><a href=\"#referfrom_[1]\">[1]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\"></span><span class=\"reference-title\">参考资料</span></span></span></li>\n<li>H.265<br>\n  是为了应对更高分辨率视频（如4K、8K）的需求而开发的。它的主要优势在于其更高的压缩效率，相比H.264，它能够在保持相同视频质量的情况下，将视频数据量减少大约30% - 50%。高效的压缩能力使得 H.265 在高清和超高清视频的存储与传输方面展现出了巨大的优势，特别是在网络带宽资源紧张或者存储空间有限的云桌面应用场景中。</li>\n<li>AV1<br>\n现在最新的编码标准。<br>\nAV1编码器开源以及免专利费的优势，已有许多视频平台对其进行了支持，并且最近硬件也开始对AV1编码进行了支持，如英特尔Arc显卡、英伟达RTX40系显卡、以及即将发售的AMD RX7000系列显卡。可以预见的是，AV1编码将成为主流。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/smxx5h-0.webp\" alt=\"码率分析\"></li>\n</ol>\n</li>\n<li>\n<p>调制：将编码后的图像数据进行调制，即将数字信号转换为适合在无线信道中传输的信号形式。调制方式有很多种，如调频（FM）、调幅（AM）、调相（PM）等，以及数字调制方式如正交频分复用（OFDM）等。</p>\n</li>\n<li>\n<p>发射：通过无线发射设备将调制后的信号发送出去。无线发射设备可以是 Wi-Fi 路由器、蓝牙设备、无线射频模块等。发射的信号通过空气等无线介质传播。<br>\n对于图传系统，最常用的就是USB网卡，适合需要便捷和灵活连接的用户，广泛用于台式机或无内建无线网卡的设备。<br>\n常见的有</p>\n<ol>\n<li>rtl8812au<br>\n<strong>由网卡芯片和USB网络适配器组成</strong><br>\nRTL8812AU是一颗高性能的无线局域网(Wi-Fi)芯片，它支持IEEE 802.11ac/a/n无线标准，提供高速无线连接能力。该芯片搭载了2.4GHz/5GHz双频段，能够提供高达867Mbps的数据传输速率。它内置了强大的信号处理单元，包含调制解调器和功率放大器，有效增强了无线信号的接收与发送性能，确保了较好的无线覆盖范围和连接稳定性。此外，RTL8812AU还集成了多输入多输出（MIMO）技术，通过使用多副天线来提高数据传输速率和系统的整体吞吐量。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/sozr7s-0.webp\" alt=\"8812AU\"><br>\nUSB网络适配器通常由RTL8812AU无线芯片、USB接口芯片、天线系统、以及必要的电源管理电路组成。RTL8812AU芯片作为无线通信的核心部件，负责无线信号的处理和数据包的发送与接收。USB接口芯片则负责与主机的通信，并将RTL8812AU芯片的数据流转换为USB总线上的数据流。天线系统负责无线信号的接收与发送，通常包含两个或多个天线以支持MIMO技术。电源管理电路包括稳压器和滤波电容，确保设备运行稳定并满足USB总线的供电要求。</li>\n<li>IEEE 802.11<br>\nEEE 802.11标准的物理层技术包括跳频扩频（FHSS）、直接序列扩频（DSSS）、正交频分复用（OFDM）和多输入多输出（MIMO）等多种技术。这些技术各有特点，共同构成了IEEE 802.11标准强大的物理层传输能力。</li>\n<li>USB接口协议<br>\n详见<a href=\"https://blog.csdn.net/H520xcodenodev/article/details/141874401\">Linux内核源码-USB驱动分析</a></li>\n</ol>\n</li>\n<li>\n<p>接收：在接收端，使用相应的无线接收设备接收发射端发送过来的信号。接收设备需要与发射设备在相同的频率和调制方式下工作，才能正确接收信号。<br>\n<strong>与发射是配套的关系，解决好驱动层面就能解决</strong></p>\n</li>\n<li>\n<p>解调：对接收到的信号进行解调，即将无线信号转换回数字信号。解调过程是调制的逆过程，需要根据发射端使用的调制方式进行相应的解调操作。</p>\n</li>\n<li>\n<p>解码：对解调后的数字信号进行解码，恢复出原始的图像数据。解码过程是编码的逆过程，需要使用与发射端相同的图像编码算法进行解码。<br>\n<strong>同样与编码部分一一对应</strong></p>\n</li>\n<li>\n<p>图像显示：将解码后的图像数据在显示设备上进行显示，如显示器、电视、手机屏幕等。显示设备可以直接连接到接收端设备，也可以通过网络等其他方式接收图像数据进行显示。</p>\n</li>\n</ol>\n<h2 id=\"技术优势\">技术优势</h2>\n<ol>\n<li>\n<p>便捷性：<br>\n摆脱了传统有线连接的束缚，无需铺设大量的电缆，使得设备的安装和部署更加灵活方便。特别是在一些难以布线的场所，如户外、古建筑、临时活动场地等，无线图传技术能够快速搭建图像传输系统，节省时间和成本。<br>\n例如，在户外拍摄电影或举办大型活动时，使用无线图传可以让摄影师和导演在不同位置自由移动，而不受线缆长度的限制，提高工作效率。</p>\n</li>\n<li>\n<p>灵活性：<br>\n支持多种设备的连接和图像传输，可以与不同类型的图像采集设备（如摄像机、手机、平板电脑等）和显示设备（如监视器、投影仪、电视等）配合使用。同时，无线图传技术可以根据不同的应用需求进行定制和扩展，满足各种复杂场景的图像传输要求。<br>\n例如，在安防监控领域，无线图传可以将不同位置的监控摄像头的图像传输到监控中心，并且可以根据需要随时增加或调整摄像头的位置和数量。</p>\n</li>\n<li>\n<p>实时性：<br>\n能够实现图像的实时传输，具有较低的延迟。这对于一些对实时性要求较高的应用场景，如直播、视频会议、无人机航拍等非常重要。低延迟的无线图传可以让用户在接收端几乎同步地看到发送端的图像，提高交互性和用户体验。<br>\n例如，在体育赛事直播中，无线图传可以将现场的比赛画面实时传输到电视台或网络直播平台，让观众能够第一时间观看到精彩的比赛。</p>\n</li>\n<li>\n<p>抗干扰性：<br>\n采用了先进的无线通信技术和信号处理算法，具有较强的抗干扰能力。能够在复杂的电磁环境中稳定工作，不受其他无线设备的干扰，保证图像传输的质量和可靠性。<br>\n例如，在城市环境中，存在大量的无线信号源，如 Wi-Fi、蓝牙、手机信号等，无线图传技术可以通过频率选择、信号加密、纠错编码等方式，提高抗干扰能力，确保图像传输的稳定性。</p>\n</li>\n<li>\n<p>传输距离：<br>\n根据不同的技术标准和设备性能，无线图传的传输距离可以从几米到几公里甚至更远。一般来说，低功率的无线图传设备适用于短距离传输，如室内、小型活动场地等；而高功率的无线图传设备则可以用于长距离传输，如户外、大型活动现场等。<br>\n例如，在无人机航拍中，需要使用传输距离较远的无线图传设备，以便将无人机拍摄的画面实时传输到地面控制站。而在家庭监控中，短距离的无线图传设备就可以满足需求。</p>\n</li>\n</ol>\n<h2 id=\"应用领域\">应用领域</h2>\n<p>无线图传技术广泛应用于多个领域，如影视制作、新闻直播、活动直播、无人机航拍、安防监控、教育、医疗等。具体应用案例可参考上文对无线图传使用场景的描述。</p>\n<h2 id=\"当今发展现状\">当今发展现状</h2>\n<ol>\n<li>\n<p>硬件选型与优化：</p>\n<ol>\n<li>\n<p>高性能图传模块：选择传输速率高、信号稳定性强的无线图传模块。例如，一些采用先进的 LR-WiFi 技术或其他高性能无线通信技术的模块，能够在保证数据传输速率的同时，提升通信距离和抗干扰能力，为低延迟传输提供基础。</p>\n<ol>\n<li>LR-WiFi： （Long Range WIFI）<br>\n是在现有的 Wi-Fi 技术（如 Wi-Fi 4 或 Wi-Fi 5）基础上进行优化，专注于低功耗、长距离和低数据速率传输。<br>\n云望物联研发的 CV5200 无线通信视频传输 WiFi 模块，基于 802.11 无线通信标准，采用了 LR-WiFi 私有协议，具备 ML（最大似然检测），MRC（最大比合并），LDPC（低密度奇偶校验码），MIMO-OFDM（多输入多输出 - 正交频分复用）等高级无线技术。其双路发射输出功率可达 + 29dBm（单路 26dBm），使用 2.5dBi 天线进行地对空实测时，在空旷环境下能达到 6KM 的传输距离，并且支持 2Mbps、1080p 实时传输</li>\n</ol>\n</li>\n<li>\n<p>硬件编解码器：使用硬件编解码器进行视频的编码和解码。硬件编解码相比软件编解码具有更高的效率和更低的延迟，能够快速处理视频数据，减少处理时间，从而降低整体传输延迟。</p>\n<ol>\n<li><a href=\"https://www.nvidia.cn/geforce/guides/broadcasting-guide/\">NVIDIA NVENC</a><br>\n专门用于加速H.264和H.265/HEVC视频编码，集成在GeForce GTX/RTX、Quadro和Tesla等多个系列显卡中。</li>\n<li>Intel Quick Sync Video<br>\n内嵌在 Intel 处理器中的硬件加速编解码引擎。它可以利用 CPU 集成显卡的计算能力，将视频编码和解码任务从 CPU 中剥离出来，从而释放 CPU 资源，提升整体系统性能。<br>\nQuick Sync 支持多种视频处理编解码器的硬件加速，包括 H.264 (AVC)、H.265 (HEVC)、VP8、VP9 和最新的 AV1。</li>\n<li>AMD VCE (Video Codec Engine)<br>\nAMD显卡和处理器中的硬件视频编码器，类似于NVIDIA的NVENC。它支持高效的视频编码处理，通常用于实时视频流和直播。VCE支持H.264、H.265（HEVC）编码，并且被广泛应用于AMD的Radeon显卡中。</li>\n<li><a href=\"https://blog.csdn.net/Yan_uuu/article/details/142884384\">jetson视频编码</a>：<br>\nnvmpi 是 NVIDIA 提供的多媒体处理接口，jetson-ffmpeg链接</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>协议优化：</p>\n<ol>\n<li>网络频段优化：根据实际使用场景，选择干扰较小、带宽较高的网络频段。例如，对于 2.4GHz 和 5GHz 两个常见的 Wi-Fi 频段，5GHz 频段的带宽更高、干扰更少，但传输距离相对较短；2.4GHz 频段的传输距离较远，但干扰相对较多。在近距离、对带宽要求高的场景下，优先选择 5GHz 频段；在需要远距离传输的场景下，可以根据实际情况综合考虑。</li>\n<li>优化网络拓扑结构：确保无线图传模块与接收端之间的网络拓扑结构简单、稳定。减少网络中的中间节点和设备，避免数据在传输过程中经过过多的转发和处理，从而降低延迟。同时，合理设置无线接入点的位置和数量，保证信号覆盖范围和强度，提高网络的稳定性和传输效率。</li>\n<li>网络带宽管理：对网络带宽进行合理的分配和管理，优先保证数据的传输带宽。可以通过设置 QoS（服务质量）策略，对不同类型的网络流量进行分类和优先级设置，确保数据能够及时、快速地传输。</li>\n</ol>\n</li>\n<li>\n<p>软件优化：</p>\n<ol>\n<li>优化编解码算法：采用高效的视频编解码算法，如 H.264、H.265 等，并且根据实际情况对编解码参数进行优化。例如，调整编码的帧率、分辨率、码率等参数，在保证视频质量的前提下，降低数据量和编码时间，从而减少延迟。</li>\n<li>多线程处理：在软件设计中，采用多线程技术，将数据的采集、编码、传输、解码等操作分配到不同的线程中并行处理，提高系统的处理效率，降低延迟。同时，要注意线程之间的同步和数据交互，避免出现数据丢失或错误。\n<ol>\n<li><a href=\"https://developer.aliyun.com/article/802808\">编解码再进化：Ali266 与下一代视频技术</a><br>\n在 LiveVideoStackCon 2021 北京峰会，阿里云自研的 VVC 编解码器，首先 Ali266 对 VVC 这个最新视频标准提供完整的编解码能力，速度可以达到实时高清，目前我们最快的速度是可以达到 1080p30 帧编码速度。<br>\nAli266 压缩性能卓越，在 Slow 档次上达到 50% 的带宽节省，在实时 Fast 档次上达到 40% 的带宽节省，因此 Ali266 从质量优先到速度优先可以覆盖不同业务的需求。同时我们非常高兴的汇报我们正在与优酷进行深度合作，希望通过 Ali266 技术落地优酷，助力优酷降本增质、赋能新业务技术支撑。</li>\n</ol>\n</li>\n<li>错误处理和重传机制：建立完善的错误处理和重传机制，当数据传输过程中出现丢包、错误等情况时，能够及时进行检测和处理。对于重要的数据，可以采用重传的方式保证数据的完整性和准确性，但要注意重传的次数和时机，避免因过多的重传导致延迟增加。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"图传系统-2\">图传系统</h2>\n<p>在当今时代，无人机的应用正变得越来越广泛，无论是在航拍记录绝美风光、农业领域进行植保作业、还是参与救援抢险等诸多场景中，都能看到它活跃的身影。而在无人机发挥作用的过程里，无线图传技术扮演着至关重要的角色，堪称是连接无人机与地面控制的关键 “桥梁”。</p>\n<p>通过无线图传技术，无人机在飞行时所获取到的各类数据，比如拍摄的高清画面、探测到的环境信息等，都能够及时传输到地面控制端，让操作员可以实时监控无人机的飞行状态，像其所处的位置、飞行的高度、速度以及方位等重要信息都能一目了然。这也就意味着，操作员能够依据这些实时反馈的信息，迅速制定出合适的方案与策略，去应对飞行过程中随时可能出现的各种突发情况，实现对整个任务的有效掌控。</p>\n<p>再者，在无人机执行拍摄以及遥感等应用任务时，无线图传技术更是不可或缺。无人机凭借着高清摄像头、先进的蓝牙数据传输等高科技设备进行数据采集后，借助无线图传，可将数据实时传输到操作中心，操作者由此便能实时获取现场的图像信息。凭借这些传输回来的数据和图像，无人机能够出色地完成对地面环境的摄影、遥感等工作，帮助操作者更细致、全面地了解实际情况，进而为无人机在更多领域的应用提供了强有力的数据支撑。</p>\n<p>另外，无人机常常需要在高山峡谷、海洋等特殊区域飞行作业，面临风雨、雾霾等复杂且不稳定的极端天气条件，这些情况对于人类操作者来说，很难提前预见并快速做出准确的处理决策。但无线图传技术使得无人机可以迅速向操作员传输数据，操作员能够及时对现场状况做出反应，采取相应措施，从而更好地保障作业顺利进行，也确保了作业的效率和质量。</p>\n<p>总而言之，随着无人机市场需求的日益增长，无线图传技术也越发受到行业的广泛关注与运用。无论是航拍、测绘、搜救，还是农林等各行各业，掌握和运用好无人机无线图传技术，都能从中获得极大的价值</p>\n<h2 id=\"图传的核心技术\">图传的核心技术</h2>\n<p>（一）基础通信方式</p>\n<p>无人机无线图传主要是依靠如 WiFi 等无线通信技术来实现画面传输的。首先，无人机搭载的摄像头会捕捉到相应的画面，随后，设备内的相关模块会运用特定的编码方式，将这些画面转化成数字信号。</p>\n<p>以常见的 WiFi 图传为例，就如同我们平时用手机连接 WiFi 上网一样，无人机通过自身的 WiFi 模块与地面控制站或者移动设备（像手机、平板电脑等）建立连接。不过，无人机图传所用的 WiFi 模块往往具备一些更适合远距离、高质量传输的特性。比如，有的会采用功率更大的 WiFi 模块，以此来增强信号强度，保障传输距离。</p>\n<p>在传输过程中，为了能让数据更高效地通过无线信号传递，会使用到视频编码与压缩技术，像 H.264 和 H.265 这类编码方式就很常用，它们能够在大幅减少数据量的同时保持较高的视频质量，使得在有限的频段带宽下，依然可以把拍摄到的高清画面稳定地传输到地面端，让操作员可以实时在地面控制站或移动设备上看到无人机拍摄到的画面，清楚掌握无人机所处的位置、周边环境等关键信息，进而实现对无人机飞行状态的有效监控以及各类任务的操作执行。</p>\n<p>（二）关键技术支撑</p>\n<ol>\n<li>LR-WiFi 技术</li>\n</ol>\n<p>在众多保障无人机无线图传高效、稳定工作的关键技术里，LR-WiFi 技术（Long Rang WiFi 远距离 WiFi）起到了很重要的作用。传统的 WiFi 技术在面对长距离传输需求时，往往会出现信号衰减、传输不稳定等情况。而 LR-WiFi 技术采用了先进的信号处理算法以及高级调制解调技术，它能够在远距离传输信号时保持较高的信号质量和稳定性。</p>\n<p>例如云望物联研发的 CV5200 无线通信视频传输 WiFi 模块，基于 802.11 无线通信标准，采用了 LR-WiFi 私有协议，具备 ML（最大似然检测），MRC（最大比合并），LDPC（低密度奇偶校验码），MIMO-OFDM（多输入多输出 - 正交频分复用）等高级无线技术。其双路发射输出功率可达 + 29dBm（单路 26dBm），使用 2.5dBi 天线进行地对空实测时，在空旷环境下能达到 6KM 的传输距离，并且支持 2Mbps、1080p 实时传输，这就为无人机远距离图传提供了强有力的技术支撑，特别适用于像航拍、测绘等需要无人机在较远距离作业的场景。</p>\n<ol start=\"2\">\n<li>先进编码算法</li>\n</ol>\n<p>先进的编码算法对于无人机无线图传来说也是不可或缺的。无人机拍摄到的原始视频数据量通常非常庞大，如果直接传输，对带宽要求极高且效率低下，很难实现稳定、流畅的图传效果。</p>\n<p>像 H.264 和 H.265 这样的编码算法就能很好地解决这个问题，它们可以对视频数据进行高效压缩和优化处理，在保证画质的前提下，大幅减少需要传输的数据量，实现低延迟、高画质的实时传输。如此一来，即使在有限的带宽条件下，也能让无人机拍摄的画面清晰、流畅地传输到地面接收端，方便操作人员实时查看并做出准确的操控决策。</p>\n<h2 id=\"图传的发展史\">图传的发展史</h2>\n<p>图传系统的发展史可以分为模拟图传和数字图传两个主要阶段：</p>\n<h3 id=\"模拟图传阶段\">模拟图传阶段</h3>\n<p>模拟图像传送是指对时间（包括空间）和幅度连续变化的模拟图像信号作信源和信道处理，通过模拟信道传输或通过模拟记录装置实现存储的过程。一般用扫描拾取图像信息和压缩频带等信源处理方法得到图像基带信号，再用预均衡、调制等信道处理方法形成图像通带信号。</p>\n<p>模拟图传的上限高，下限低。</p>\n<ol>\n<li><strong>早期发展</strong>：无线图传技术早在二十年前就已经出现，当时的无线传输价格昂贵，工作频率只有一些国家授权的频段才能使用，效果一般，主要解决了有无问题。</li>\n<li><strong>技术特点</strong>：模拟图传是一种较为传统的图传方式，其优点是延迟极低，画面传输流畅，常用于对实时性要求极高的应用场景，如FPV飞行竞技。但缺点是画质较差，图像分辨率低，且在复杂电磁环境中信号容易受到干扰。</li>\n</ol>\n<h3 id=\"数字图传阶段\">数字图传阶段</h3>\n<p>数字图传：指数字化的图像信号经信源编码和信道编码，通过数字信道（电缆、微波、卫星和光纤等）传输，或通过数字存储、记录装置存储的过程。</p>\n<ol>\n<li><strong>技术革新</strong>：大概从2010年开始，Amimon公司研发出了无压缩和免费的5G频段的产品，首次实现可以让大多数的专业影视用户用得起无线传输产品，标志着无线图传产品走向成熟和普及。</li>\n<li><strong>数字图传优势</strong>：数字图传采用数字信号传输，具有更高的分辨率和强大的抗干扰能力，是目前无人机图传的主流选择。数字图传能够传输高清画面，适合对画质有较高要求的航拍和专业应用场景。</li>\n<li><strong>编码技术</strong>：数字图传的编码技术主要包括行程编码(RLE编码)、Huffman编码(熵编码)、离散余弦变换(DCT变换)和离散小波变换(DWT变换)等，这些编码技术在图像质量和传输延迟方面有着不同的影响。</li>\n<li><strong>抗干扰能力</strong>：数字图传采用编码技术，并通过错误纠正和数据重传机制，在一定程度上能够抵御电磁干扰，使图像质量在受干扰时保持清晰稳定。</li>\n<li><strong>最新发展趋势</strong>：数字图传技术的最新发展趋势体现在智能化与自动化、高清远距离传输、自动跳频技术、4G增强图传技术以及图像压缩技术等方面。</li>\n</ol>\n<p>图传系统从模拟图传到数字图传的发展，是一个从低分辨率、高延迟、易受干扰的模拟信号向高分辨率、低延迟、强抗干扰能力的数字信号转变的过程。随着技术的进步，数字图传逐渐成为主流，提供更高质量的图像传输体验。</p>\n<h1>流媒体架构</h1>\n<p>目前主流的流媒体系统架构主要分为以下几种:</p>\n<ol>\n<li>单服务器架构：<br>\n该架构中，所有的流媒体服务都运行在一台服务器上。这种架构简单、易于部署，但是在流量较大时，可能会导致服务器性能瓶颈，影响系统的稳定性。</li>\n<li>分布式架构：<br>\n该架构中，流媒体服务被分布在多个服务器上，每个服务器都可以独立地处理一部分流量。这种架构具有高可用性和可扩展性的优点，但是需要对系统进行复杂的负载均衡和监控。</li>\n<li>CDN架构：<br>\n该架构中，流媒体服务通过CDN(内容分发网络）进行分发，用户可以从离自己最近的CDN节点获取流媒体内容。这种架构具有高速度、高可用性和低延迟的优点，但是需要在全球范围内部署CDN节点，成本较高。</li>\n</ol>\n<p>流媒体系统架构的发展历程可以追溯到20世纪90年代初，当时的流媒体技术主要是基于<strong>RTSP</strong>(实时流协议)和<strong>RTP</strong>(实时传输协议）等标准。随着网络带宽的提高和编解码技术的发展，流媒体系统架构也不断发展和创新。</p>\n<p>在2000年代初，流媒体系统开始采用基于HTTP的流媒体传输协议，例如，Adobe的Flash Media Server和Microsoff的Windows Media Server等。这种架构可以通过普通的Web服务器进行传输，无需特殊的流媒体服务器。</p>\n<p>在2010年代，流媒体系统开始采用基于WebRTC (Web实时通信）的架构，例如，Google的WebRTC和Facebook的WebRTC Live等。这种架构可以在Web浏览器中直接进行流媒体传输，无需安装插件或客户端程序。</p>\n<p>类似Gstreamer的流媒体系统架构主要是基于开源的流媒体框架和组件进行构建。Gstreamer是一种基于插件的流媒体框架，可以用于音频和视频的捕获、编码、解码、传输等多个方面。类似的流媒体系统架构还包括FFmpeg、VLC、DirectShow等。这些框架和组件可以通过编写插件或脚本进行自定义，从而满足不同的流媒体应用需求。</p>\n<h2 id=\"Gstreamer\">Gstreamer</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/01/02/sj4ow5-0.webp\" alt=\"\"><br>\n元件(Element)是GStreamer中最重要的概念。</p>\n<p>可以通过创建一系列的元件，并把它们连接起来,从而让数据流在这个被连接的各个元件之间传输。每个元件都有一个特殊的函数接口,对于有些元件的函数接口它们是用于能够读取文件的数据,解码文件数据的。而有些元件的函数接口只是输出相应的数据到具体的设备上(例如：声卡设备)。</p>\n<p>可以将若干个元件连接在一起,从而创建一个管道(pipeline)来完成一个特殊的任务,例如,媒体播放或者录音。</p>\n<p>对程序员来说， GStreamer中最重要的一个概念就是GstElement对象。元件是构建一个媒体管道的基本块。每一个元件都对应一个GstElement。任何一个解码器编码器、分离器、视频/音频输出部件实际上都是一个GstElement对象。</p>\n<h2 id=\"FFmpeg\">FFmpeg</h2>\n<p>FFMPEG堪称自由软件中最完备的一套多媒体支持库，它几乎实现了所有当下常见的数据封装格式、多媒体传输协议以及音视频编解码器，堪称多媒体业界的瑞士军刀。</p>\n<p>FFMPEG从功能上划分为几个模块，分别为核心工具（libutils）、媒体格式（libavformat）、编解码（libavcodec）、设备（libavdevice）和后处理（libavfilter, libswscale, libpostproc），分别负责提供公用的功能函数、实现多媒体文件的读包和写包、完成音视频的编解码、管理音视频设备的操作以及进行音视频后处理。<br>\n<a href=\"https://www.cnblogs.com/xcj26/articles/18175921\">详解</a></p>\n<p><a href=\"https://github.com/jocover/jetson-ffmpeg\">jetson-ffmpeg</a></p>\n<h2 id=\"VLC\">VLC</h2>\n<p>Linux必装的软件</p>\n<h2 id=\"HLS-流式传输\">HLS 流式传输</h2>\n<p>HTTP 实时流（HLS）是一种广泛使用的视频流协议，几乎可在任何服务器上运行，并且受到大多数设备的支持。HLS 通过提高或降低流的质量，使客户端设备无缝适应不断变化的网络条件。</p>\n<p>HTTP 实时流（HLS）是使用最广泛的视频流协议之一。尽管它称为 HTTP“实时”流，但它同时适用于点播流和实时流。HLS 将视频文件分解为较小的可下载 HTTP 文件，并使用 HTTP 协议来交付。客户端设备加载这些 HTTP 文件，然后将它们作为视频进行播放。</p>\n<p>HLS 的一个优点是，所有连入互联网的设备都支持 HTTP，因而它比需要使用专用服务器的流协议更易于实施。另一个优点是 HLS 流可以根据网络状况提高或降低视频质量，而不会中断播放。这就是在用户观看视频的过程中视频质量可能会变好或变差的原因。这个功能称为“自适应比特率视频传输”或“自适应比特率流式传输”，如果没有它，慢速网络条件可能导致视频播放完全停止。</p>\n<h2 id=\"RTSP视频流\">RTSP视频流</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/01/02/sjm9vs-0.webp\" alt=\"\"><br>\nRTP 是由实时传输协议RTP，实时传输控制协议RTCP组成<br>\n基于多播或单播为用户提供连续媒体数据的实时传输服务，RTCP是控制部分，负责实时监控数据传输质量，为系统提供阻塞控制和流控制<br>\n由包头Header和载荷Payload两部分组成</p>\n<p>RTMP：实时消息传输协议，基于tcp，主要用于flash平台和支持RTMP协议的流媒体服务器之间进行音视频和数据通信。（基于FLASH，无法用于IOS）（主流流媒体传输协议）<br>\nHLS：HTTP直播流技术，主要用于PC和Aplple中端，包括m3u8的索引文件，TS媒体分片文件,key加密串文件。<br>\nRTSP：实时流传输协议，基于UDP，用来传输音频、视频的多媒体串流协议，定义了一对多应用程序，如何有效通过IP网络传送多媒体数据。</p>\n<p><strong>1. 抓包分析</strong><br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/sjtnzj-0.webp\" alt=\"抓包\"></p>\n<h2 id=\"ONVIF\">ONVIF</h2>\n<p>ONVIF协议对设备发现、设备配置、事件、PTZ控制、视频分析、实时流媒体直播功能(RTSP拉流)、搜索、回放、录像录音管理等功能进行了规范。<br>\n<img src=\"%5Bimage-3.png%5D(https://image.aruoshui.fun/i/2025/01/02/sjykfb-0.webp)\" alt=\"\"></p>\n<p>1、Nvidia视频硬解码、渲染、软/硬编码并写入MP4文件。项目地址：<a href=\"https://github.com/BreakingY/Nvidia-Video-Codec\">https://github.com/BreakingY/Nvidia-Video-Codec</a><br>\n2、Jetson Jetpack5.x视频编解码。项目地址：<a href=\"https://github.com/BreakingY/jetpack-dec-enc\">https://github.com/BreakingY/jetpack-dec-enc</a><br>\n3、音视频(H264/H265/AAC)封装、解封装、编解码pipeline，支持NVIDIA、昇腾DVPP硬编解码。项目地址：<a href=\"https://github.com/BreakingY/Media-Codec-Pipeline\">https://github.com/BreakingY/Media-Codec-Pipeline</a><br>\n4、simple rtsp server，小而高效的rtsp服务器，支持H264、H265、AAC、PCMA；支持TCP、UDP；支持鉴权。项目地址：<a href=\"https://github.com/BreakingY/simple-rtsp-server\">https://github.com/BreakingY/simple-rtsp-server</a><br>\n5、simple rtsp client，rtsp客户端，支持TCP、UDP、H264、H265、AAC、PCMA，支持鉴权。项目地址：<a href=\"https://github.com/BreakingY/simple-rtsp-client\">https://github.com/BreakingY/simple-rtsp-client</a><br>\n6、libflv，flv muxer/demuxer，支持H264/H265、AAC。项目地址：<a href=\"https://github.com/BreakingY/libflv\">https://github.com/BreakingY/libflv</a></p>\n<h1>OpenIPC</h1>\n<p>基于 Buildroot/OpenWrt 项目的 Linux 操作系统, OpenIPC是IP摄像机的替代固件。其rootfs基于Buildroot，这一部分是开源的，但其中主要的ISP处理程序Majestic还是闭源状态</p>\n<h2 id=\"ISP\">ISP</h2>\n<p>ISP处理程序，即图像信号处理器（Image Signal Processor），是相机系统中用于处理图像信号传感器输出的图像信号的核心组件。它负责将图像传感器捕获的原始数据转换成高质量的图像，以匹配不同厂商的图像传感器。</p>\n<h2 id=\"当前实现的部分\">当前实现的部分</h2>\n<p>目前已经实现的功能包括但不限于</p>\n<ol>\n<li>RTSP视频流</li>\n<li>HLS HTTP视频流</li>\n<li>静态图像生成</li>\n<li>YouTube直播</li>\n<li>ONVIF/NETIP/IPEYE等协议</li>\n<li>移动检测并且发送通知到EMAIL/FTP/Telegram/Yandex Disk/HTTP API/MQTT broker</li>\n<li>内置ZeroTier/WireGuard/Socks5等协议支持</li>\n</ol>\n<p><strong>1. Buildroot</strong><br>\nBuildroot 是 Linux 平台上一个开源的嵌入式 Linux 系统自动构建框架。整个Buildroot是由 Makefile 脚本和 Kconfig 配置文件构成的。你可以和编译Linux内核一样，通过 buildroot 配置，menuconfig 修改，编译出一个完整的可以直接烧写到机器上运行的Linux系统软件(包含boot、kernel、rootfs以及rootfs中的各种库和应用程序)。</p>\n<p><strong>2. OpenWrt</strong><br>\nOpenWrt 是一个基于 Linux 的、针对嵌入式网络设备的开源操作系统。</p>\n<h2 id=\"IP摄像头\">IP摄像头</h2>\n<h3 id=\"OpenIPC-的革命\">OpenIPC 的革命</h3>\n<p>OpenHD 项目（和其他类似项目）中的经典设置包括连接到 Raspberry Pi 的 MIPI 或 USB 摄像头，它们充当机载系统的视频编码器和路由器，然后通过 USB 连接到 WiFi 适配器和通过 UART 连接到飞行控制器。地面站通常由相同的 WiFi 适配器、第二个 Raspberry Pi 或 x86 linux 笔记本电脑以及高对比度显示器或护目镜组成。</p>\n<p>有时，MIPI 或 USB 摄像头会被 IP 摄像头换成 IP 摄像头，后者功能更强大（有自己的硬件编码器），价格更便宜，具有类似的特性。大多数现代摄像机都是典型的板载 Linux 设备（但与 Raspberry Pi 相比，RAM 和闪存大小要适中得多），这允许您在其上重新编译和运行几乎任何便携式软件。</p>\n<p>在使用这项技术时，出现了简化飞行系统并将所有必要的软件直接移植到 IP 摄像机的想法。从技术上讲，OpenIPC 项目的 FPV 固件是一个特殊的组件，具有两种类型的流行 WiFi 适配器驱动程序，Majestic streamer（在发射器系统上的经典方案中扮演 GStreamer 的角色）和 WFB-ng。</p>\n<ol>\n<li>好处<br>\n降低系统成本（H.265 IP 摄像机与配备 Raspberry Pi 的 H.264 MIPI 摄像机）<br>\n通过简化电路来降低总功耗并提高系统可靠性<br>\n减少视频延迟：在我们的 Glass-to-Glass 测试中，1080p@60延迟约为 80 毫秒（在中等预算的摄像机上），720p@60 的延迟约为 60 毫秒，1080p@30的延迟约为 100 毫秒（对于最预算的摄像机）。<br>\n可以调整硬件编码器，例如，更频繁地形成 I 帧（具体情况取决于 IP 摄像机的供应商）<br>\n社区在维修 IP 摄像机方面积累了大量经验，这使得进一步降低系统的运营成本成为可能。</li>\n<li>弊<br>\n由于资源有限（已安装的 RAM 和永久内存），相机将不支持大多数流行的编程语言（如 Java、Python、NodeJS）。如果你喜欢用这些语言编写（或者想把这些语言写的软件移植到相机上），你需要额外使用一台NanoPi，把OpenIPC相机当作普通的网络摄像机连接在NanoPi（<a href=\"https://www.aliexpress.com/item/1005004679805441.html%EF%BC%89%E4%B8%8A%E3%80%82\">https://www.aliexpress.com/item/1005004679805441.html）上。</a></li>\n</ol>\n<p>在大多数系统中，Linux 内核版本受到 IP 摄像机供应商的限制，因为某些模块以二进制形式提供。为新的 WiFi 适配器或特定外围设备开发内核驱动程序可能非常耗时。</p>\n<p>在预算相机（主要为其开发 FPV 固件）上，资源非常有限，因此在撰写本文时无法运行神经网络。这种情况在不久的将来应该会发生变化。</p>\n<h2 id=\"配置一图\">配置一图</h2>\n<pre><code>![](https://image.aruoshui.fun/i/2025/01/02/sgy7e1-0.webp)\n</code></pre>\n<h2 id=\"openipc系统架构\">openipc系统架构</h2>\n<ol>\n<li>openioc fpv-视频传输-单向数传方案的系统架构<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/sf653e-0.webp\" alt=\"\"></li>\n<li>openipc fpv-双向数传方案的系统架构<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/sf6b0r-0.webp\" alt=\"\"></li>\n</ol>\n<h2 id=\"Openipc的发展过程\">Openipc的发展过程</h2>\n<h3 id=\"wifibroadcast\">wifibroadcast</h3>\n<ol>\n<li><strong>为什么普通wifi不行</strong>\n<ol>\n<li>需要匹配认证，如果一台设备失去关联(例如由于信号强度太弱)，视频传输会立即停止</li>\n<li>无差错传输:Wifi 要么传输正确的数据，要么不传输数据。在 FPV 场景中，这意味着即使收到的数据只有很小的错误，也会被完全拒绝。尽管您已收到有用的数据，但这可能会导致视频停顿。</li>\n<li>速率控制:如果信号强度太弱，普通 WiFi连接会自动切换到较低的传输速率。因此，(自动)选择的速率可能太低而无法传输视频数据。这样，数据就会排队并引入长达几秒的不可预测的延迟。</li>\n<li>一对一传输:除使用广播或类似技术，否则普通的 WiFi 数据流是一对一连接。使用传统 WiFi 很难实现旁观者的场景。</li>\n</ol>\n</li>\n<li>为什么WIfiBroadcast就行\n<ol>\n<li>Wifiroadcast 将 wifi 卡置于监控模式。该模式允许发送和接收任意数据包而无需认证匹配。此外，还能接收到错误的帧(校验和不匹配)。这样就建立了真正的单向连接，模仿了模拟链路的有利特性。</li>\n<li>发送端发送数据不用管它的接收端状态。因此，不存在由于认证丢失而导致视频突然停顿的风险</li>\n<li>只要视频在发射器的范围内，接收器就会接收视频。如果它慢慢超出范围，视频质量会下降，但不会停止。即使帧有错误，它们也会被显示而不是被拒绝。</li>\n<li>传统模拟图传方案“单个广播器-多个接收器”也适用于Wifibroadcast。如果旁观者想用他们的设备观看视频流，他们只需“切换到正确的频道”</li>\n<li>Wifiroadcast 允许并行使用多个低成本接收器组合它们的数据以增加接收数据的准确性。(比如一个接收端具有覆盖 360°的全向天线和多个平板的远距离定向天线)</li>\n<li>Wifiroadcast 使用前向纠错来满足低带宽要求下实现高可靠性。它能够在接收器处修复丢失或损坏的数据包</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"EZ-WIfiBroadcast\">EZ-WIfiBroadcast</h3>\n<h3 id=\"OpenHD\">OpenHD</h3>\n<p>项目通过一般的无线网卡作为无线电的发射与接受，通过载体树莓派实现高清图像的实时传输，同时集成了OSD功能、热点功能、支持HDMI显示器、手机、电脑作为终端、支持MAVlink、BF、INAV，支持发送和接受遥测、音频和各种控制数据，还配备有齐全的软件app。</p>\n"},{"title":"bevdet-tensorrt-cpp-master","abbrlink":45126,"date":"2024-10-21T14:35:56.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqu1jr-0.webp","swiper_index":null,"_content":"\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n{% link 参考文章, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %} \n\n_Zh1218_Zh\n1111","source":"_posts/bevdet-tensorrt-cpp-master.md","raw":"---\ntitle: bevdet-tensorrt-cpp-master\nabbrlink: 45126\ndate: 2024-10-21 22:35:56\ntags:\ndescription:\ncategories:\ncover:\nswiper_index:\n---\n\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n{% link 参考文章, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %} \n\n_Zh1218_Zh\n1111","slug":"bevdet-tensorrt-cpp-master","published":1,"updated":"2024-10-21T14:38:32.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6inz0019mktt73tt0r04","content":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<p>_Zh1218_Zh<br>\n1111</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<p>_Zh1218_Zh<br>\n1111</p>\n"},{"title":"docker学习记录","abbrlink":2661,"date":"2024-04-23T12:59:08.000Z","_content":"\n# 参考文章\n{% link docker中文网教程, https://www.dockerdocs.cn/get-started/index.html, https://www.dockerdocs.cn/Application/Home/View/Public/img/docker-docs-logo.svg %}\n\n\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=1455043459&bvid=BV1ai421S7zj&cid=1560314901&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n","source":"_posts/docker学习记录.md","raw":"---\ntitle: docker学习记录\nabbrlink: 2661\ndate: 2024-04-23 20:59:08\ntags:\n  - 容器\ncategories:\n  - 必学开发技能 \n\n---\n\n# 参考文章\n{% link docker中文网教程, https://www.dockerdocs.cn/get-started/index.html, https://www.dockerdocs.cn/Application/Home/View/Public/img/docker-docs-logo.svg %}\n\n\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=1455043459&bvid=BV1ai421S7zj&cid=1560314901&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n","slug":"docker学习记录","published":1,"updated":"2024-12-30T07:52:32.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io0001cmktt94ba8eyf","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"docker中文网教程\" href=\"https://www.dockerdocs.cn/get-started/index.html\"><div class=\"left\"><img src=\"https://www.dockerdocs.cn/Application/Home/View/Public/img/docker-docs-logo.svg\"/></div><div class=\"right\"><p class=\"text\">docker中文网教程</p><p class=\"url\">https://www.dockerdocs.cn/get-started/index.html</p></div></a></div>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=1455043459&bvid=BV1ai421S7zj&cid=1560314901&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqt6nt-0.webp","cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"docker中文网教程\" href=\"https://www.dockerdocs.cn/get-started/index.html\"><div class=\"left\"><img src=\"https://www.dockerdocs.cn/Application/Home/View/Public/img/docker-docs-logo.svg\"/></div><div class=\"right\"><p class=\"text\">docker中文网教程</p><p class=\"url\">https://www.dockerdocs.cn/get-started/index.html</p></div></a></div>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=1455043459&bvid=BV1ai421S7zj&cid=1560314901&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n"},{"title":"bootloader嵌入式芯片启动过程全解析","abbrlink":50266,"date":"2024-12-25T12:46:37.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqtxn1-0.webp","swiper_index":null,"_content":"\n# 参考文章\n{% link bootloader的全面解析, https://blog.csdn.net/qq_51004011/article/details/138376644, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n{% link GD32F450数据手册 %}\n{% link STM32 开发必备-内存地址（*****）, https://zhuanlan.zhihu.com/p/648904738, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n{% link STM32、GD32固件升级IAP, https://blog.csdn.net/RMDYBW/article/details/140552321, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n\n\n# 什么是Bootloader\n在嵌入式操作系统中，BootLoader是在操作系统内核运行之前运行。可以初始化硬件设备、建立内存空间映射图，从而将系统的软硬件环境带到一个合适状态，以便为最终调用操作系统内核准备好正确的环境。 \n在嵌入式系统中，通常并没有像BIOS那样的固件程序（注，有的嵌入式CPU也会内嵌一段短小的启动程序），因此整个系统的加载启动任务就完全由BootLoader来完成。\n**BootLoader 起到了桥梁的作用，连接了硬件启动与高级软件运行之间的环节，确保系统能够从一个初始、裸机的状态过渡到一个完整的、可操作的运行环境。**  \n \n \n## 两种Bootloader\n**MCU的Bootloader和嵌入式linux或pc有所不同，与不同芯片才用的存储架构有关**\n1. MCU\nMCU一般为单核或多核同构，主频小于1GHZ，也没有MMU内存管理单元，最多只能运行像FreeRTOS等的实时操作系统\nMCU下程序运行的主要介质是NOR_FLASH(传统存储器单元，支持随机访问)，与RAM一样有分离的地址线和数据线，以字节长度精确寻址。\n\n2. linux SOC\n嵌入式linux的SOC一般将他的操作系统、文件系统和应用程序存放在nand flash（NAND Flash的内部结构更适合大容量、顺序读写的应用场景。它采用页和块的结构，通常需要使用控制器来管理读写操作。）  \n在处理器运行代码时，先从nand中到sram内存中，比MCU的多了一步。 \n\n本文以GD32单片机进行BootLoader的配置，后边会逐渐补上 \n\n# Bootloader的作用\n1. MCU中\n   1. 关闭看门狗，初始化中断和trap向量表，进行时钟和外设初始化，让芯片正常运行起来。\n   2. 提供CAN、UART、ETH等用于通讯功能的驱动，能够接收外部数据传输请求\n   3. 提供FLASH的读写与擦除驱动，设计服务来对通讯端口接收到的更新代码进行校验、存储，以及跳转操作系统或后续应用程序代码。\n   4. 如有必要，还会开发一些基础诊断服务，串口交互程序等等。\n2. SoC\n   1. 硬件初始化\n   2. 内存管理\n   3. 引导加载操作系统\n      1. 从非易失性存储器（如Flash、EEPROM、NAND/NOR Flash等）中读取并验证操作系统的内核映像。\n      2. 将内核映像加载到RAM中指定的位置，并按照内核所需的特定格式设置启动参数和环境变量。\n   4. 固件升级\n   5. 系统诊断与恢复\n   6. 多重引导支持\n      在某些系统中，BootLoader 可能支持选择加载不同的操作系统版本或应用程序，提供多启动选项，增强系统的灵活性和可定制性。\n\n# 单片机的程序（指令）生成\n交叉编译会将我们的c代码编译成二进制指令，然后编译器会将这些二进制指令烧录到单片机的程序存储区，cpu会去一条条的读取指令执行。\n\n# 指令存放的位置\n下面就是我在梁山派gd32F470用户手册里找的一张图片，因为我们将程序（指令）写到单片机中，必须是烧录到固定的位置里面。这样的话单片机才能去找到这些指令并执行以完成我们需要的功能。\n![gd32的闪存基地址和构成](https://image.aruoshui.fun/i/2025/01/13/zdibfu-0.webp)\n\n{% note info flat %}烧录进单片机的程序是有固定位置的，并且程序存储区是有固定的大小，所以当生成的程序合适时，程序存储区就可以同时存放几段程序代码。\n\n在理论上来说，只需要确定好boot程序和app程序的大小，给他们在ROM内分配合适的区块。在需要进行代码跳转的时候，做好中断向量表重定向。就可以在一个单片机中存放多块不同的程序段。\n\n{% endnote %}\n\n# GD32的启动模式 \n**启动模式只决定程序烧录的位置**，加载完程序之后会有一个重映射(映射到0x00000000地址位置)；真正产生复位信号的时候，CPU还是从开始位置执行。 \n\n{% note success flat %}\n1. 初始化堆栈指针 SP=_initial_sp，初始化 PC 指针=Reset_Handler\n2. 初始化中断向量表\n3. 配置系统时钟\n4. 调用 C 库函数_main 初始化用户堆栈，然后进入 main 函数。\n{% endnote %}  \n\n1. GD32的三种启动方式  \n\n\n1)主闪存存储器(Main Flash)启动：从GD32内置的Flash启动(0x0800 0000-0x0807 FFFF)，**一般我们使用JTAG或者SWD模式下载程序时，就是下载到这个里面，重启后也直接从这启动程序。**以0x08000000 对应的内存为例，则该块内存既可以通过0x00000000 操作也可以通过0x08000000 操作，且都是操作的同一块内存。\n\n2)系统存储器(System Memory)启动：从系统存储器启动(0x1FFFF000 - 0x1FFF F7FF)，这种模式启动的程序功能是由厂家设置的。一般来说，我们选用这种启动模式时，是为了从串口下载程序，因为在厂家提供的ISP程序中，提供了串口下载程序的固件，可以通过这个ISP程序将用户程序下载到系统的Flash中。以0x1FFFFFF0对应的内存为例，则该块内存既可以通过0x00000000 操作也可以通过0x1FFFFFF0操作，且都是操作的同一块内存。\n\n3)片上SRAM启动：从内置SRAM启动(0x2000 0000-0x3FFFFFFF)，既然是SRAM，自然也就没有程序存储的能力了，这个模式一般用于程序调试。SRAM 只能通过0x20000000进行操作，与上述两者不同。从SRAM 启动时，需要在应用程序初始化代码中重新设置向量表的位置。\n\n\n用户可以通过设置BOOT0和BOOT1的引脚电平状态，来选择复位后的启动模式。如下图所示：\n![启动模式](https://image.aruoshui.fun/i/2025/01/13/12mvsjd-0.webp)\n\nGD32上电复位以后，代码区都是从0x00000000开始的，三种启动模式只是将各自存储空间的地址映射到0x00000000中。\n\n![总结](https://image.aruoshui.fun/i/2025/01/14/bm83e-0.webp)\n\n## 启动文件分析\n### 栈定义 \n栈的作用是用于局部变量，函数调用，函数形参等的开销，栈的大小不能超过内部SRAM 的大小。当程序较大时，需要修改栈的大小，不然可能会出现的HardFault的错误。\n```armasm\nStack_Size      EQU     0x00000400    \n;开辟的栈大小1kb，equ为伪指令\n                AREA    STACK, NOINIT, READWRITE, ALIGN=3 \n;开辟一段可读可写数据空间，ARER 伪指令表示下面将开始定义一个代码段或者数据段。此处是定义数据段。 \n;ARER 后面的关键字表示这个段的属性。段名为STACK，可以任意命名；\n;NOINIT 表示不初始化；READWRITE 表示可读可写，ALIGN=3，表示按照 8 字节对齐。\nStack_Mem       SPACE   Stack_Size\n;SPACE 用于分配大小等于 Stack_Size连续内存空间，单位为字节。\n__initial_sp\n;__initial_sp表示栈顶地址。栈是由高向低生长的。\n```\n### 堆的定义\n堆主要用来动态内存的分配，像 malloc()函数申请的内存就在堆中。\n```armasm\nHeap_Size       EQU     0x00000400\n;开辟堆的大小为 0X00000200（512 字节）\n                AREA    HEAP, NOINIT, READWRITE, ALIGN=3\n;堆的名字为 HEAP，NOINIT 即不初始化，可读可写，8字节对齐。\n__heap_base\n;__heap_base 表示对的起始地址\nHeap_Mem        SPACE   Heap_Size\n__heap_limit\n;__heap_limit 表示堆的结束地址。\n```\n\n### 向量表\n向量表是一个WORD（ 32 位整数）数组，每个下标对应一种异常，该下标元素的值则是该 ESR 的入口地址。向量表在地址空间中的位置是可以设置的，通过 NVIC 中的一个重定位寄存器来指出向量表的地址。在复位后，该寄存器的值为 0。因此，在地址 0 （即 FLASH 地址 0）处必须包含一张向量表，用于初始时的异常分配。\n```armasm\n                AREA    RESET, DATA, READONLY\n;定义一块代码段，段名字是RESET，READONLY 表示只读。\n                EXPORT  __Vectors\n                EXPORT  __Vectors_End\n                EXPORT  __Vectors_Size\n;使用EXPORT将3个标识符申明为可被外部引用，声明 __Vectors、__Vectors_End 和__Vectors_Size 具有全局属性。\n\n__Vectors       DCD     __initial_sp                      ; Top of Stack\n;__Vectors 表示向量表起始地址，DCD 表示分配 1 个 4 字节的空间。\n;每行 DCD 都会生成一个 4 字节的二进制代码，中断向量表 存放的实际上是中断服务程序的入口地址。\n;当异常（也即是中断事件）发生时，CPU 的中断系统会将相应的入口地址赋值给 PC 程序计数器，之后就开始执行中断服务程序。\n                DCD     Reset_Handler                     ; Reset Handler\n                DCD     NMI_Handler                       ; NMI Handler\n                DCD     HardFault_Handler                 ; Hard Fault Handler\n                DCD     MemManage_Handler                 ; MPU Fault Handler\n                DCD     BusFault_Handler                  ; Bus Fault Handler\n                DCD     UsageFault_Handler                ; Usage Fault Handler\n                ·\n                ·\n                ·\n                ·\n__Vectors_End\n;__Vectors_End 为向量表结束地址。\n\n__Vectors_Size  EQU     __Vectors_End - __Vectors\n\n                AREA    |.text|, CODE, READONLY\n; __Vectors_Size则是向量表的大小，向量表的大小是通过__Vectors 和__Vectors_End 相减得到的。\n```\n\n### 复位程序\n复位程序是系统上电后执行的第一个程序，复位程序也是中断程序 \n```armasm\nReset_Handler   PROC\n;定义了一个服务程序，PROC表示程序的开始。\n                EXPORT  Reset_Handler                     [WEAK]\n;使用EXPORT将Reset_Handler申明为可被外部引用，后面WEAK表示弱定义，如果外部文件定义了该标号则首先引用该标号，如果外部文件没有声明也不会出错。这里表示复位程序可以由用户在其他文件重新实现。\n                IMPORT  SystemInit\n                IMPORT  __main\n;表示该标号来自外部文件，SystemInit()是一个库函数，在system_gd32f10x.c中定义的\n;__main 是一个标准的 C 库函数，主要作用是初始化用户堆栈，这个是由编译器完成的\n;该函数最终会调用我们自己写的main函数，从而进入C世界中。\n                LDR     R0, =SystemInit\n;从存储器中加载SystemInit到一个寄存器R0的地址中。\n;R0~R3 寄存器通常用于函数入参出参或子程序调用。\n                BLX     R0\n;跳转到寄存器R0的地址，并根据寄存器的 LSE 确定处理器的状态，还要把跳转前的下条指令地址保存到 LR。\n                LDR     R0, =__main\n                BX      R0\n;跳转到至指定寄存器的地址后，不会返回\n                ENDP\n;和PROC是对应的，表示程序的结束。\n```\n这里的__main和C语言中的main()不是一样东西，__main是C lib中的函数，也就是在Keil中自带的；而main()函数是C的入口，main()会被__main调用。\n\n\n### 中断服务程序\n我们平时要使用哪个中断，就需要编写相应的中断服务程序，只是启动文件把这些函数留出来了，但是内容都是空的，真正的中断复服务程序需要我们在外部的 C 文件里面重新实现，这里只是提前占了一个位置罢了。\n```armasm\nNMI_Handler     PROC\n                EXPORT  NMI_Handler                       [WEAK]\n                B       .\n;B表示跳转，这里跳转到一个‘.’，即表示无线循环。\n                ENDP\nHardFault_Handler\\\n                PROC\n                EXPORT  HardFault_Handler                 [WEAK]\n                B       .\n                ENDP\nMemManage_Handler\\\n                PROC\n                EXPORT  MemManage_Handler                 [WEAK]\n                B       .\n                ENDP\n```\n\n## GD32的启动流程分析\n{% note success flat %}\n与前面分析的一致\n1. 初始化SP、PC、向量表\n2. 设置系统时钟，接下来就会进入SystemInit函数中。\n3. 初始化堆栈并进入main \n\n{% endnote %} \n\nMCU上电后从0x0800 0000处读取栈顶地址并保存，然后从0x0800 0004读取中断向量表的起始地址，这就是复位程序的入口地址，接着跳转到复位程序入口处，初始向量表，然后设置时钟，设置堆栈，最后跳转到C空间的main函数，即进入用户程序。\n![总结](https://image.aruoshui.fun/i/2025/01/14/ndr0q-0.webp)\n\n\n# BootLoader和APP的关系 \n\n上面讲了MCU的整个启动的流程，无论是BootLoader还是APP都必须要按照上面的流程进行启动，只是APP的运行需要在BootLoader中进行跳转（**其实这种跳转就是走楼梯一级一级上**），即在BootLoader对MSP和PC进行重新赋值成APP.bin文件中的参数。\n![关系](https://image.aruoshui.fun/i/2025/01/14/r1k86-0.webp)\n1. BootLoader：验证下载新固件完整性，从固件备份区拷贝新固件数据到APP区，跳转到APP中；\n2. APP：业务应用程序设计，下载新固件到备份区（APP_back）并复位。 \n\n![flash分区](https://image.aruoshui.fun/i/2025/01/14/rzmpd-0.webp)\n程序的启动，在bootloader引导程序中，我们会启用标志位，每个app对应一个标志位，如果判断成功就跳转到相应的地址去启动相应的程序。","source":"_posts/bootloader嵌入式芯片启动过程全解析.md","raw":"---\ntitle: bootloader嵌入式芯片启动过程全解析\nabbrlink: 50266\ndate: 2024-12-25 20:46:37\ntags:\n - Bootloader\ndescription:\ncategories: 嵌入式开发\ncover:\nswiper_index:\n---\n\n# 参考文章\n{% link bootloader的全面解析, https://blog.csdn.net/qq_51004011/article/details/138376644, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n{% link GD32F450数据手册 %}\n{% link STM32 开发必备-内存地址（*****）, https://zhuanlan.zhihu.com/p/648904738, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n{% link STM32、GD32固件升级IAP, https://blog.csdn.net/RMDYBW/article/details/140552321, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n\n\n# 什么是Bootloader\n在嵌入式操作系统中，BootLoader是在操作系统内核运行之前运行。可以初始化硬件设备、建立内存空间映射图，从而将系统的软硬件环境带到一个合适状态，以便为最终调用操作系统内核准备好正确的环境。 \n在嵌入式系统中，通常并没有像BIOS那样的固件程序（注，有的嵌入式CPU也会内嵌一段短小的启动程序），因此整个系统的加载启动任务就完全由BootLoader来完成。\n**BootLoader 起到了桥梁的作用，连接了硬件启动与高级软件运行之间的环节，确保系统能够从一个初始、裸机的状态过渡到一个完整的、可操作的运行环境。**  \n \n \n## 两种Bootloader\n**MCU的Bootloader和嵌入式linux或pc有所不同，与不同芯片才用的存储架构有关**\n1. MCU\nMCU一般为单核或多核同构，主频小于1GHZ，也没有MMU内存管理单元，最多只能运行像FreeRTOS等的实时操作系统\nMCU下程序运行的主要介质是NOR_FLASH(传统存储器单元，支持随机访问)，与RAM一样有分离的地址线和数据线，以字节长度精确寻址。\n\n2. linux SOC\n嵌入式linux的SOC一般将他的操作系统、文件系统和应用程序存放在nand flash（NAND Flash的内部结构更适合大容量、顺序读写的应用场景。它采用页和块的结构，通常需要使用控制器来管理读写操作。）  \n在处理器运行代码时，先从nand中到sram内存中，比MCU的多了一步。 \n\n本文以GD32单片机进行BootLoader的配置，后边会逐渐补上 \n\n# Bootloader的作用\n1. MCU中\n   1. 关闭看门狗，初始化中断和trap向量表，进行时钟和外设初始化，让芯片正常运行起来。\n   2. 提供CAN、UART、ETH等用于通讯功能的驱动，能够接收外部数据传输请求\n   3. 提供FLASH的读写与擦除驱动，设计服务来对通讯端口接收到的更新代码进行校验、存储，以及跳转操作系统或后续应用程序代码。\n   4. 如有必要，还会开发一些基础诊断服务，串口交互程序等等。\n2. SoC\n   1. 硬件初始化\n   2. 内存管理\n   3. 引导加载操作系统\n      1. 从非易失性存储器（如Flash、EEPROM、NAND/NOR Flash等）中读取并验证操作系统的内核映像。\n      2. 将内核映像加载到RAM中指定的位置，并按照内核所需的特定格式设置启动参数和环境变量。\n   4. 固件升级\n   5. 系统诊断与恢复\n   6. 多重引导支持\n      在某些系统中，BootLoader 可能支持选择加载不同的操作系统版本或应用程序，提供多启动选项，增强系统的灵活性和可定制性。\n\n# 单片机的程序（指令）生成\n交叉编译会将我们的c代码编译成二进制指令，然后编译器会将这些二进制指令烧录到单片机的程序存储区，cpu会去一条条的读取指令执行。\n\n# 指令存放的位置\n下面就是我在梁山派gd32F470用户手册里找的一张图片，因为我们将程序（指令）写到单片机中，必须是烧录到固定的位置里面。这样的话单片机才能去找到这些指令并执行以完成我们需要的功能。\n![gd32的闪存基地址和构成](https://image.aruoshui.fun/i/2025/01/13/zdibfu-0.webp)\n\n{% note info flat %}烧录进单片机的程序是有固定位置的，并且程序存储区是有固定的大小，所以当生成的程序合适时，程序存储区就可以同时存放几段程序代码。\n\n在理论上来说，只需要确定好boot程序和app程序的大小，给他们在ROM内分配合适的区块。在需要进行代码跳转的时候，做好中断向量表重定向。就可以在一个单片机中存放多块不同的程序段。\n\n{% endnote %}\n\n# GD32的启动模式 \n**启动模式只决定程序烧录的位置**，加载完程序之后会有一个重映射(映射到0x00000000地址位置)；真正产生复位信号的时候，CPU还是从开始位置执行。 \n\n{% note success flat %}\n1. 初始化堆栈指针 SP=_initial_sp，初始化 PC 指针=Reset_Handler\n2. 初始化中断向量表\n3. 配置系统时钟\n4. 调用 C 库函数_main 初始化用户堆栈，然后进入 main 函数。\n{% endnote %}  \n\n1. GD32的三种启动方式  \n\n\n1)主闪存存储器(Main Flash)启动：从GD32内置的Flash启动(0x0800 0000-0x0807 FFFF)，**一般我们使用JTAG或者SWD模式下载程序时，就是下载到这个里面，重启后也直接从这启动程序。**以0x08000000 对应的内存为例，则该块内存既可以通过0x00000000 操作也可以通过0x08000000 操作，且都是操作的同一块内存。\n\n2)系统存储器(System Memory)启动：从系统存储器启动(0x1FFFF000 - 0x1FFF F7FF)，这种模式启动的程序功能是由厂家设置的。一般来说，我们选用这种启动模式时，是为了从串口下载程序，因为在厂家提供的ISP程序中，提供了串口下载程序的固件，可以通过这个ISP程序将用户程序下载到系统的Flash中。以0x1FFFFFF0对应的内存为例，则该块内存既可以通过0x00000000 操作也可以通过0x1FFFFFF0操作，且都是操作的同一块内存。\n\n3)片上SRAM启动：从内置SRAM启动(0x2000 0000-0x3FFFFFFF)，既然是SRAM，自然也就没有程序存储的能力了，这个模式一般用于程序调试。SRAM 只能通过0x20000000进行操作，与上述两者不同。从SRAM 启动时，需要在应用程序初始化代码中重新设置向量表的位置。\n\n\n用户可以通过设置BOOT0和BOOT1的引脚电平状态，来选择复位后的启动模式。如下图所示：\n![启动模式](https://image.aruoshui.fun/i/2025/01/13/12mvsjd-0.webp)\n\nGD32上电复位以后，代码区都是从0x00000000开始的，三种启动模式只是将各自存储空间的地址映射到0x00000000中。\n\n![总结](https://image.aruoshui.fun/i/2025/01/14/bm83e-0.webp)\n\n## 启动文件分析\n### 栈定义 \n栈的作用是用于局部变量，函数调用，函数形参等的开销，栈的大小不能超过内部SRAM 的大小。当程序较大时，需要修改栈的大小，不然可能会出现的HardFault的错误。\n```armasm\nStack_Size      EQU     0x00000400    \n;开辟的栈大小1kb，equ为伪指令\n                AREA    STACK, NOINIT, READWRITE, ALIGN=3 \n;开辟一段可读可写数据空间，ARER 伪指令表示下面将开始定义一个代码段或者数据段。此处是定义数据段。 \n;ARER 后面的关键字表示这个段的属性。段名为STACK，可以任意命名；\n;NOINIT 表示不初始化；READWRITE 表示可读可写，ALIGN=3，表示按照 8 字节对齐。\nStack_Mem       SPACE   Stack_Size\n;SPACE 用于分配大小等于 Stack_Size连续内存空间，单位为字节。\n__initial_sp\n;__initial_sp表示栈顶地址。栈是由高向低生长的。\n```\n### 堆的定义\n堆主要用来动态内存的分配，像 malloc()函数申请的内存就在堆中。\n```armasm\nHeap_Size       EQU     0x00000400\n;开辟堆的大小为 0X00000200（512 字节）\n                AREA    HEAP, NOINIT, READWRITE, ALIGN=3\n;堆的名字为 HEAP，NOINIT 即不初始化，可读可写，8字节对齐。\n__heap_base\n;__heap_base 表示对的起始地址\nHeap_Mem        SPACE   Heap_Size\n__heap_limit\n;__heap_limit 表示堆的结束地址。\n```\n\n### 向量表\n向量表是一个WORD（ 32 位整数）数组，每个下标对应一种异常，该下标元素的值则是该 ESR 的入口地址。向量表在地址空间中的位置是可以设置的，通过 NVIC 中的一个重定位寄存器来指出向量表的地址。在复位后，该寄存器的值为 0。因此，在地址 0 （即 FLASH 地址 0）处必须包含一张向量表，用于初始时的异常分配。\n```armasm\n                AREA    RESET, DATA, READONLY\n;定义一块代码段，段名字是RESET，READONLY 表示只读。\n                EXPORT  __Vectors\n                EXPORT  __Vectors_End\n                EXPORT  __Vectors_Size\n;使用EXPORT将3个标识符申明为可被外部引用，声明 __Vectors、__Vectors_End 和__Vectors_Size 具有全局属性。\n\n__Vectors       DCD     __initial_sp                      ; Top of Stack\n;__Vectors 表示向量表起始地址，DCD 表示分配 1 个 4 字节的空间。\n;每行 DCD 都会生成一个 4 字节的二进制代码，中断向量表 存放的实际上是中断服务程序的入口地址。\n;当异常（也即是中断事件）发生时，CPU 的中断系统会将相应的入口地址赋值给 PC 程序计数器，之后就开始执行中断服务程序。\n                DCD     Reset_Handler                     ; Reset Handler\n                DCD     NMI_Handler                       ; NMI Handler\n                DCD     HardFault_Handler                 ; Hard Fault Handler\n                DCD     MemManage_Handler                 ; MPU Fault Handler\n                DCD     BusFault_Handler                  ; Bus Fault Handler\n                DCD     UsageFault_Handler                ; Usage Fault Handler\n                ·\n                ·\n                ·\n                ·\n__Vectors_End\n;__Vectors_End 为向量表结束地址。\n\n__Vectors_Size  EQU     __Vectors_End - __Vectors\n\n                AREA    |.text|, CODE, READONLY\n; __Vectors_Size则是向量表的大小，向量表的大小是通过__Vectors 和__Vectors_End 相减得到的。\n```\n\n### 复位程序\n复位程序是系统上电后执行的第一个程序，复位程序也是中断程序 \n```armasm\nReset_Handler   PROC\n;定义了一个服务程序，PROC表示程序的开始。\n                EXPORT  Reset_Handler                     [WEAK]\n;使用EXPORT将Reset_Handler申明为可被外部引用，后面WEAK表示弱定义，如果外部文件定义了该标号则首先引用该标号，如果外部文件没有声明也不会出错。这里表示复位程序可以由用户在其他文件重新实现。\n                IMPORT  SystemInit\n                IMPORT  __main\n;表示该标号来自外部文件，SystemInit()是一个库函数，在system_gd32f10x.c中定义的\n;__main 是一个标准的 C 库函数，主要作用是初始化用户堆栈，这个是由编译器完成的\n;该函数最终会调用我们自己写的main函数，从而进入C世界中。\n                LDR     R0, =SystemInit\n;从存储器中加载SystemInit到一个寄存器R0的地址中。\n;R0~R3 寄存器通常用于函数入参出参或子程序调用。\n                BLX     R0\n;跳转到寄存器R0的地址，并根据寄存器的 LSE 确定处理器的状态，还要把跳转前的下条指令地址保存到 LR。\n                LDR     R0, =__main\n                BX      R0\n;跳转到至指定寄存器的地址后，不会返回\n                ENDP\n;和PROC是对应的，表示程序的结束。\n```\n这里的__main和C语言中的main()不是一样东西，__main是C lib中的函数，也就是在Keil中自带的；而main()函数是C的入口，main()会被__main调用。\n\n\n### 中断服务程序\n我们平时要使用哪个中断，就需要编写相应的中断服务程序，只是启动文件把这些函数留出来了，但是内容都是空的，真正的中断复服务程序需要我们在外部的 C 文件里面重新实现，这里只是提前占了一个位置罢了。\n```armasm\nNMI_Handler     PROC\n                EXPORT  NMI_Handler                       [WEAK]\n                B       .\n;B表示跳转，这里跳转到一个‘.’，即表示无线循环。\n                ENDP\nHardFault_Handler\\\n                PROC\n                EXPORT  HardFault_Handler                 [WEAK]\n                B       .\n                ENDP\nMemManage_Handler\\\n                PROC\n                EXPORT  MemManage_Handler                 [WEAK]\n                B       .\n                ENDP\n```\n\n## GD32的启动流程分析\n{% note success flat %}\n与前面分析的一致\n1. 初始化SP、PC、向量表\n2. 设置系统时钟，接下来就会进入SystemInit函数中。\n3. 初始化堆栈并进入main \n\n{% endnote %} \n\nMCU上电后从0x0800 0000处读取栈顶地址并保存，然后从0x0800 0004读取中断向量表的起始地址，这就是复位程序的入口地址，接着跳转到复位程序入口处，初始向量表，然后设置时钟，设置堆栈，最后跳转到C空间的main函数，即进入用户程序。\n![总结](https://image.aruoshui.fun/i/2025/01/14/ndr0q-0.webp)\n\n\n# BootLoader和APP的关系 \n\n上面讲了MCU的整个启动的流程，无论是BootLoader还是APP都必须要按照上面的流程进行启动，只是APP的运行需要在BootLoader中进行跳转（**其实这种跳转就是走楼梯一级一级上**），即在BootLoader对MSP和PC进行重新赋值成APP.bin文件中的参数。\n![关系](https://image.aruoshui.fun/i/2025/01/14/r1k86-0.webp)\n1. BootLoader：验证下载新固件完整性，从固件备份区拷贝新固件数据到APP区，跳转到APP中；\n2. APP：业务应用程序设计，下载新固件到备份区（APP_back）并复位。 \n\n![flash分区](https://image.aruoshui.fun/i/2025/01/14/rzmpd-0.webp)\n程序的启动，在bootloader引导程序中，我们会启用标志位，每个app对应一个标志位，如果判断成功就跳转到相应的地址去启动相应的程序。","slug":"bootloader嵌入式芯片启动过程全解析","published":1,"updated":"2025-02-14T10:22:44.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io0001emkttf2vfg7zq","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"bootloader的全面解析\" href=\"https://blog.csdn.net/qq_51004011/article/details/138376644\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">bootloader的全面解析</p><p class=\"url\">https://blog.csdn.net/qq_51004011/article/details/138376644</p></div></a></div> \n\n<div class=\"tag link\"><a class=\"link-card\" title=\"STM32 开发必备-内存地址（*****）\" href=\"https://zhuanlan.zhihu.com/p/648904738\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">STM32 开发必备-内存地址（*****）</p><p class=\"url\">https://zhuanlan.zhihu.com/p/648904738</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"STM32、GD32固件升级IAP\" href=\"https://blog.csdn.net/RMDYBW/article/details/140552321\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">STM32、GD32固件升级IAP</p><p class=\"url\">https://blog.csdn.net/RMDYBW/article/details/140552321</p></div></a></div> \n<h1>什么是Bootloader</h1>\n<p>在嵌入式操作系统中，BootLoader是在操作系统内核运行之前运行。可以初始化硬件设备、建立内存空间映射图，从而将系统的软硬件环境带到一个合适状态，以便为最终调用操作系统内核准备好正确的环境。<br>\n在嵌入式系统中，通常并没有像BIOS那样的固件程序（注，有的嵌入式CPU也会内嵌一段短小的启动程序），因此整个系统的加载启动任务就完全由BootLoader来完成。<br>\n<strong>BootLoader 起到了桥梁的作用，连接了硬件启动与高级软件运行之间的环节，确保系统能够从一个初始、裸机的状态过渡到一个完整的、可操作的运行环境。</strong></p>\n<h2 id=\"两种Bootloader\">两种Bootloader</h2>\n<p><strong>MCU的Bootloader和嵌入式linux或pc有所不同，与不同芯片才用的存储架构有关</strong></p>\n<ol>\n<li>\n<p>MCU<br>\nMCU一般为单核或多核同构，主频小于1GHZ，也没有MMU内存管理单元，最多只能运行像FreeRTOS等的实时操作系统<br>\nMCU下程序运行的主要介质是NOR_FLASH(传统存储器单元，支持随机访问)，与RAM一样有分离的地址线和数据线，以字节长度精确寻址。</p>\n</li>\n<li>\n<p>linux SOC<br>\n嵌入式linux的SOC一般将他的操作系统、文件系统和应用程序存放在nand flash（NAND Flash的内部结构更适合大容量、顺序读写的应用场景。它采用页和块的结构，通常需要使用控制器来管理读写操作。）<br>\n在处理器运行代码时，先从nand中到sram内存中，比MCU的多了一步。</p>\n</li>\n</ol>\n<p>本文以GD32单片机进行BootLoader的配置，后边会逐渐补上</p>\n<h1>Bootloader的作用</h1>\n<ol>\n<li>MCU中\n<ol>\n<li>关闭看门狗，初始化中断和trap向量表，进行时钟和外设初始化，让芯片正常运行起来。</li>\n<li>提供CAN、UART、ETH等用于通讯功能的驱动，能够接收外部数据传输请求</li>\n<li>提供FLASH的读写与擦除驱动，设计服务来对通讯端口接收到的更新代码进行校验、存储，以及跳转操作系统或后续应用程序代码。</li>\n<li>如有必要，还会开发一些基础诊断服务，串口交互程序等等。</li>\n</ol>\n</li>\n<li>SoC\n<ol>\n<li>硬件初始化</li>\n<li>内存管理</li>\n<li>引导加载操作系统\n<ol>\n<li>从非易失性存储器（如Flash、EEPROM、NAND/NOR Flash等）中读取并验证操作系统的内核映像。</li>\n<li>将内核映像加载到RAM中指定的位置，并按照内核所需的特定格式设置启动参数和环境变量。</li>\n</ol>\n</li>\n<li>固件升级</li>\n<li>系统诊断与恢复</li>\n<li>多重引导支持<br>\n在某些系统中，BootLoader 可能支持选择加载不同的操作系统版本或应用程序，提供多启动选项，增强系统的灵活性和可定制性。</li>\n</ol>\n</li>\n</ol>\n<h1>单片机的程序（指令）生成</h1>\n<p>交叉编译会将我们的c代码编译成二进制指令，然后编译器会将这些二进制指令烧录到单片机的程序存储区，cpu会去一条条的读取指令执行。</p>\n<h1>指令存放的位置</h1>\n<p>下面就是我在梁山派gd32F470用户手册里找的一张图片，因为我们将程序（指令）写到单片机中，必须是烧录到固定的位置里面。这样的话单片机才能去找到这些指令并执行以完成我们需要的功能。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/13/zdibfu-0.webp\" alt=\"gd32的闪存基地址和构成\"></p>\n<div class=\"note info flat\"><p>烧录进单片机的程序是有固定位置的，并且程序存储区是有固定的大小，所以当生成的程序合适时，程序存储区就可以同时存放几段程序代码。</p>\n<p>在理论上来说，只需要确定好boot程序和app程序的大小，给他们在ROM内分配合适的区块。在需要进行代码跳转的时候，做好中断向量表重定向。就可以在一个单片机中存放多块不同的程序段。</p>\n</div>\n<h1>GD32的启动模式</h1>\n<p><strong>启动模式只决定程序烧录的位置</strong>，加载完程序之后会有一个重映射(映射到0x00000000地址位置)；真正产生复位信号的时候，CPU还是从开始位置执行。</p>\n<div class=\"note success flat\"><ol>\n<li>初始化堆栈指针 SP=_initial_sp，初始化 PC 指针=Reset_Handler</li>\n<li>初始化中断向量表</li>\n<li>配置系统时钟</li>\n<li>调用 C 库函数_main 初始化用户堆栈，然后进入 main 函数。</li>\n</ol>\n</div>  \n<ol>\n<li>GD32的三种启动方式</li>\n</ol>\n<p>1)主闪存存储器(Main Flash)启动：从GD32内置的Flash启动(0x0800 0000-0x0807 FFFF)，**一般我们使用JTAG或者SWD模式下载程序时，就是下载到这个里面，重启后也直接从这启动程序。**以0x08000000 对应的内存为例，则该块内存既可以通过0x00000000 操作也可以通过0x08000000 操作，且都是操作的同一块内存。</p>\n<p>2)系统存储器(System Memory)启动：从系统存储器启动(0x1FFFF000 - 0x1FFF F7FF)，这种模式启动的程序功能是由厂家设置的。一般来说，我们选用这种启动模式时，是为了从串口下载程序，因为在厂家提供的ISP程序中，提供了串口下载程序的固件，可以通过这个ISP程序将用户程序下载到系统的Flash中。以0x1FFFFFF0对应的内存为例，则该块内存既可以通过0x00000000 操作也可以通过0x1FFFFFF0操作，且都是操作的同一块内存。</p>\n<p>3)片上SRAM启动：从内置SRAM启动(0x2000 0000-0x3FFFFFFF)，既然是SRAM，自然也就没有程序存储的能力了，这个模式一般用于程序调试。SRAM 只能通过0x20000000进行操作，与上述两者不同。从SRAM 启动时，需要在应用程序初始化代码中重新设置向量表的位置。</p>\n<p>用户可以通过设置BOOT0和BOOT1的引脚电平状态，来选择复位后的启动模式。如下图所示：<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/13/12mvsjd-0.webp\" alt=\"启动模式\"></p>\n<p>GD32上电复位以后，代码区都是从0x00000000开始的，三种启动模式只是将各自存储空间的地址映射到0x00000000中。</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/01/14/bm83e-0.webp\" alt=\"总结\"></p>\n<h2 id=\"启动文件分析\">启动文件分析</h2>\n<h3 id=\"栈定义\">栈定义</h3>\n<p>栈的作用是用于局部变量，函数调用，函数形参等的开销，栈的大小不能超过内部SRAM 的大小。当程序较大时，需要修改栈的大小，不然可能会出现的HardFault的错误。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Stack_Size</span>      <span class=\"meta\">EQU</span>     <span class=\"number\">0x00000400</span>    </span><br><span class=\"line\"><span class=\"comment\">;开辟的栈大小1kb，equ为伪指令</span></span><br><span class=\"line\">                <span class=\"meta\">AREA</span>    STACK, NOINIT, READWRITE, <span class=\"meta\">ALIGN</span><span class=\"number\">=3</span> </span><br><span class=\"line\"><span class=\"comment\">;开辟一段可读可写数据空间，ARER 伪指令表示下面将开始定义一个代码段或者数据段。此处是定义数据段。 </span></span><br><span class=\"line\"><span class=\"comment\">;ARER 后面的关键字表示这个段的属性。段名为STACK，可以任意命名；</span></span><br><span class=\"line\"><span class=\"comment\">;NOINIT 表示不初始化；READWRITE 表示可读可写，ALIGN=3，表示按照 8 字节对齐。</span></span><br><span class=\"line\"><span class=\"symbol\">Stack_Mem</span>       <span class=\"meta\">SPACE</span>   Stack_Size</span><br><span class=\"line\"><span class=\"comment\">;SPACE 用于分配大小等于 Stack_Size连续内存空间，单位为字节。</span></span><br><span class=\"line\"><span class=\"symbol\">__initial_sp</span></span><br><span class=\"line\"><span class=\"comment\">;__initial_sp表示栈顶地址。栈是由高向低生长的。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"堆的定义\">堆的定义</h3>\n<p>堆主要用来动态内存的分配，像 malloc()函数申请的内存就在堆中。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Heap_Size</span>       <span class=\"meta\">EQU</span>     <span class=\"number\">0x00000400</span></span><br><span class=\"line\"><span class=\"comment\">;开辟堆的大小为 0X00000200（512 字节）</span></span><br><span class=\"line\">                <span class=\"meta\">AREA</span>    HEAP, NOINIT, READWRITE, <span class=\"meta\">ALIGN</span><span class=\"number\">=3</span></span><br><span class=\"line\"><span class=\"comment\">;堆的名字为 HEAP，NOINIT 即不初始化，可读可写，8字节对齐。</span></span><br><span class=\"line\"><span class=\"symbol\">__heap_base</span></span><br><span class=\"line\"><span class=\"comment\">;__heap_base 表示对的起始地址</span></span><br><span class=\"line\"><span class=\"symbol\">Heap_Mem</span>        <span class=\"meta\">SPACE</span>   Heap_Size</span><br><span class=\"line\"><span class=\"symbol\">__heap_limit</span></span><br><span class=\"line\"><span class=\"comment\">;__heap_limit 表示堆的结束地址。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"向量表\">向量表</h3>\n<p>向量表是一个WORD（ 32 位整数）数组，每个下标对应一种异常，该下标元素的值则是该 ESR 的入口地址。向量表在地址空间中的位置是可以设置的，通过 NVIC 中的一个重定位寄存器来指出向量表的地址。在复位后，该寄存器的值为 0。因此，在地址 0 （即 FLASH 地址 0）处必须包含一张向量表，用于初始时的异常分配。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">                <span class=\"meta\">AREA</span>    RESET, <span class=\"meta\">DATA</span>, <span class=\"meta\">READONLY</span></span><br><span class=\"line\"><span class=\"comment\">;定义一块代码段，段名字是RESET，READONLY 表示只读。</span></span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  __Vectors</span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  __Vectors_End</span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  __Vectors_Size</span><br><span class=\"line\"><span class=\"comment\">;使用EXPORT将3个标识符申明为可被外部引用，声明 __Vectors、__Vectors_End 和__Vectors_Size 具有全局属性。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">__Vectors</span>       <span class=\"meta\">DCD</span>     __initial_sp                      <span class=\"comment\">; Top of Stack</span></span><br><span class=\"line\"><span class=\"comment\">;__Vectors 表示向量表起始地址，DCD 表示分配 1 个 4 字节的空间。</span></span><br><span class=\"line\"><span class=\"comment\">;每行 DCD 都会生成一个 4 字节的二进制代码，中断向量表 存放的实际上是中断服务程序的入口地址。</span></span><br><span class=\"line\"><span class=\"comment\">;当异常（也即是中断事件）发生时，CPU 的中断系统会将相应的入口地址赋值给 PC 程序计数器，之后就开始执行中断服务程序。</span></span><br><span class=\"line\">                <span class=\"meta\">DCD</span>     Reset_Handler                     <span class=\"comment\">; Reset Handler</span></span><br><span class=\"line\">                <span class=\"meta\">DCD</span>     NMI_Handler                       <span class=\"comment\">; NMI Handler</span></span><br><span class=\"line\">                <span class=\"meta\">DCD</span>     HardFault_Handler                 <span class=\"comment\">; Hard Fault Handler</span></span><br><span class=\"line\">                <span class=\"meta\">DCD</span>     MemManage_Handler                 <span class=\"comment\">; MPU Fault Handler</span></span><br><span class=\"line\">                <span class=\"meta\">DCD</span>     BusFault_Handler                  <span class=\"comment\">; Bus Fault Handler</span></span><br><span class=\"line\">                <span class=\"meta\">DCD</span>     UsageFault_Handler                <span class=\"comment\">; Usage Fault Handler</span></span><br><span class=\"line\">                ·</span><br><span class=\"line\">                ·</span><br><span class=\"line\">                ·</span><br><span class=\"line\">                ·</span><br><span class=\"line\"><span class=\"symbol\">__Vectors_End</span></span><br><span class=\"line\"><span class=\"comment\">;__Vectors_End 为向量表结束地址。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">__Vectors_Size</span>  <span class=\"meta\">EQU</span>     __Vectors_End - __Vectors</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">AREA</span>    <span class=\"title\">|.text|</span>, <span class=\"meta\">CODE</span>, <span class=\"meta\">READONLY</span></span><br><span class=\"line\"><span class=\"comment\">; __Vectors_Size则是向量表的大小，向量表的大小是通过__Vectors 和__Vectors_End 相减得到的。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"复位程序\">复位程序</h3>\n<p>复位程序是系统上电后执行的第一个程序，复位程序也是中断程序</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Reset_Handler</span>   <span class=\"meta\">PROC</span></span><br><span class=\"line\"><span class=\"comment\">;定义了一个服务程序，PROC表示程序的开始。</span></span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  Reset_Handler                     [WEAK]</span><br><span class=\"line\"><span class=\"comment\">;使用EXPORT将Reset_Handler申明为可被外部引用，后面WEAK表示弱定义，如果外部文件定义了该标号则首先引用该标号，如果外部文件没有声明也不会出错。这里表示复位程序可以由用户在其他文件重新实现。</span></span><br><span class=\"line\">                <span class=\"meta\">IMPORT</span>  SystemInit</span><br><span class=\"line\">                <span class=\"meta\">IMPORT</span>  __main</span><br><span class=\"line\"><span class=\"comment\">;表示该标号来自外部文件，SystemInit()是一个库函数，在system_gd32f10x.c中定义的</span></span><br><span class=\"line\"><span class=\"comment\">;__main 是一个标准的 C 库函数，主要作用是初始化用户堆栈，这个是由编译器完成的</span></span><br><span class=\"line\"><span class=\"comment\">;该函数最终会调用我们自己写的main函数，从而进入C世界中。</span></span><br><span class=\"line\">                <span class=\"keyword\">LDR</span>     <span class=\"built_in\">R0</span>, <span class=\"symbol\">=SystemInit</span></span><br><span class=\"line\"><span class=\"comment\">;从存储器中加载SystemInit到一个寄存器R0的地址中。</span></span><br><span class=\"line\"><span class=\"comment\">;R0~R3 寄存器通常用于函数入参出参或子程序调用。</span></span><br><span class=\"line\">                <span class=\"keyword\">BLX</span>     <span class=\"built_in\">R0</span></span><br><span class=\"line\"><span class=\"comment\">;跳转到寄存器R0的地址，并根据寄存器的 LSE 确定处理器的状态，还要把跳转前的下条指令地址保存到 LR。</span></span><br><span class=\"line\">                <span class=\"keyword\">LDR</span>     <span class=\"built_in\">R0</span>, <span class=\"symbol\">=__main</span></span><br><span class=\"line\">                <span class=\"keyword\">BX</span>      <span class=\"built_in\">R0</span></span><br><span class=\"line\"><span class=\"comment\">;跳转到至指定寄存器的地址后，不会返回</span></span><br><span class=\"line\">                <span class=\"meta\">ENDP</span></span><br><span class=\"line\"><span class=\"comment\">;和PROC是对应的，表示程序的结束。</span></span><br></pre></td></tr></table></figure>\n<p>这里的__main和C语言中的main()不是一样东西，__main是C lib中的函数，也就是在Keil中自带的；而main()函数是C的入口，main()会被__main调用。</p>\n<h3 id=\"中断服务程序\">中断服务程序</h3>\n<p>我们平时要使用哪个中断，就需要编写相应的中断服务程序，只是启动文件把这些函数留出来了，但是内容都是空的，真正的中断复服务程序需要我们在外部的 C 文件里面重新实现，这里只是提前占了一个位置罢了。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">NMI_Handler</span>     <span class=\"meta\">PROC</span></span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  NMI_Handler                       [WEAK]</span><br><span class=\"line\">                <span class=\"keyword\">B</span>       .</span><br><span class=\"line\"><span class=\"comment\">;B表示跳转，这里跳转到一个‘.’，即表示无线循环。</span></span><br><span class=\"line\">                <span class=\"meta\">ENDP</span></span><br><span class=\"line\"><span class=\"symbol\">HardFault_Handler</span>\\</span><br><span class=\"line\">                <span class=\"meta\">PROC</span></span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  HardFault_Handler                 [WEAK]</span><br><span class=\"line\">                <span class=\"keyword\">B</span>       .</span><br><span class=\"line\">                <span class=\"meta\">ENDP</span></span><br><span class=\"line\"><span class=\"symbol\">MemManage_Handler</span>\\</span><br><span class=\"line\">                <span class=\"meta\">PROC</span></span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  MemManage_Handler                 [WEAK]</span><br><span class=\"line\">                <span class=\"keyword\">B</span>       .</span><br><span class=\"line\">                <span class=\"meta\">ENDP</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"GD32的启动流程分析\">GD32的启动流程分析</h2>\n<div class=\"note success flat\"><p>与前面分析的一致</p>\n<ol>\n<li>初始化SP、PC、向量表</li>\n<li>设置系统时钟，接下来就会进入SystemInit函数中。</li>\n<li>初始化堆栈并进入main</li>\n</ol>\n</div> \n<p>MCU上电后从0x0800 0000处读取栈顶地址并保存，然后从0x0800 0004读取中断向量表的起始地址，这就是复位程序的入口地址，接着跳转到复位程序入口处，初始向量表，然后设置时钟，设置堆栈，最后跳转到C空间的main函数，即进入用户程序。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/14/ndr0q-0.webp\" alt=\"总结\"></p>\n<h1>BootLoader和APP的关系</h1>\n<p>上面讲了MCU的整个启动的流程，无论是BootLoader还是APP都必须要按照上面的流程进行启动，只是APP的运行需要在BootLoader中进行跳转（<strong>其实这种跳转就是走楼梯一级一级上</strong>），即在BootLoader对MSP和PC进行重新赋值成APP.bin文件中的参数。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/14/r1k86-0.webp\" alt=\"关系\"></p>\n<ol>\n<li>BootLoader：验证下载新固件完整性，从固件备份区拷贝新固件数据到APP区，跳转到APP中；</li>\n<li>APP：业务应用程序设计，下载新固件到备份区（APP_back）并复位。</li>\n</ol>\n<p><img src=\"https://image.aruoshui.fun/i/2025/01/14/rzmpd-0.webp\" alt=\"flash分区\"><br>\n程序的启动，在bootloader引导程序中，我们会启用标志位，每个app对应一个标志位，如果判断成功就跳转到相应的地址去启动相应的程序。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"bootloader的全面解析\" href=\"https://blog.csdn.net/qq_51004011/article/details/138376644\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">bootloader的全面解析</p><p class=\"url\">https://blog.csdn.net/qq_51004011/article/details/138376644</p></div></a></div> \n\n<div class=\"tag link\"><a class=\"link-card\" title=\"STM32 开发必备-内存地址（*****）\" href=\"https://zhuanlan.zhihu.com/p/648904738\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">STM32 开发必备-内存地址（*****）</p><p class=\"url\">https://zhuanlan.zhihu.com/p/648904738</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"STM32、GD32固件升级IAP\" href=\"https://blog.csdn.net/RMDYBW/article/details/140552321\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">STM32、GD32固件升级IAP</p><p class=\"url\">https://blog.csdn.net/RMDYBW/article/details/140552321</p></div></a></div> \n<h1>什么是Bootloader</h1>\n<p>在嵌入式操作系统中，BootLoader是在操作系统内核运行之前运行。可以初始化硬件设备、建立内存空间映射图，从而将系统的软硬件环境带到一个合适状态，以便为最终调用操作系统内核准备好正确的环境。<br>\n在嵌入式系统中，通常并没有像BIOS那样的固件程序（注，有的嵌入式CPU也会内嵌一段短小的启动程序），因此整个系统的加载启动任务就完全由BootLoader来完成。<br>\n<strong>BootLoader 起到了桥梁的作用，连接了硬件启动与高级软件运行之间的环节，确保系统能够从一个初始、裸机的状态过渡到一个完整的、可操作的运行环境。</strong></p>\n<h2 id=\"两种Bootloader\">两种Bootloader</h2>\n<p><strong>MCU的Bootloader和嵌入式linux或pc有所不同，与不同芯片才用的存储架构有关</strong></p>\n<ol>\n<li>\n<p>MCU<br>\nMCU一般为单核或多核同构，主频小于1GHZ，也没有MMU内存管理单元，最多只能运行像FreeRTOS等的实时操作系统<br>\nMCU下程序运行的主要介质是NOR_FLASH(传统存储器单元，支持随机访问)，与RAM一样有分离的地址线和数据线，以字节长度精确寻址。</p>\n</li>\n<li>\n<p>linux SOC<br>\n嵌入式linux的SOC一般将他的操作系统、文件系统和应用程序存放在nand flash（NAND Flash的内部结构更适合大容量、顺序读写的应用场景。它采用页和块的结构，通常需要使用控制器来管理读写操作。）<br>\n在处理器运行代码时，先从nand中到sram内存中，比MCU的多了一步。</p>\n</li>\n</ol>\n<p>本文以GD32单片机进行BootLoader的配置，后边会逐渐补上</p>\n<h1>Bootloader的作用</h1>\n<ol>\n<li>MCU中\n<ol>\n<li>关闭看门狗，初始化中断和trap向量表，进行时钟和外设初始化，让芯片正常运行起来。</li>\n<li>提供CAN、UART、ETH等用于通讯功能的驱动，能够接收外部数据传输请求</li>\n<li>提供FLASH的读写与擦除驱动，设计服务来对通讯端口接收到的更新代码进行校验、存储，以及跳转操作系统或后续应用程序代码。</li>\n<li>如有必要，还会开发一些基础诊断服务，串口交互程序等等。</li>\n</ol>\n</li>\n<li>SoC\n<ol>\n<li>硬件初始化</li>\n<li>内存管理</li>\n<li>引导加载操作系统\n<ol>\n<li>从非易失性存储器（如Flash、EEPROM、NAND/NOR Flash等）中读取并验证操作系统的内核映像。</li>\n<li>将内核映像加载到RAM中指定的位置，并按照内核所需的特定格式设置启动参数和环境变量。</li>\n</ol>\n</li>\n<li>固件升级</li>\n<li>系统诊断与恢复</li>\n<li>多重引导支持<br>\n在某些系统中，BootLoader 可能支持选择加载不同的操作系统版本或应用程序，提供多启动选项，增强系统的灵活性和可定制性。</li>\n</ol>\n</li>\n</ol>\n<h1>单片机的程序（指令）生成</h1>\n<p>交叉编译会将我们的c代码编译成二进制指令，然后编译器会将这些二进制指令烧录到单片机的程序存储区，cpu会去一条条的读取指令执行。</p>\n<h1>指令存放的位置</h1>\n<p>下面就是我在梁山派gd32F470用户手册里找的一张图片，因为我们将程序（指令）写到单片机中，必须是烧录到固定的位置里面。这样的话单片机才能去找到这些指令并执行以完成我们需要的功能。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/13/zdibfu-0.webp\" alt=\"gd32的闪存基地址和构成\"></p>\n<div class=\"note info flat\"><p>烧录进单片机的程序是有固定位置的，并且程序存储区是有固定的大小，所以当生成的程序合适时，程序存储区就可以同时存放几段程序代码。</p>\n<p>在理论上来说，只需要确定好boot程序和app程序的大小，给他们在ROM内分配合适的区块。在需要进行代码跳转的时候，做好中断向量表重定向。就可以在一个单片机中存放多块不同的程序段。</p>\n</div>\n<h1>GD32的启动模式</h1>\n<p><strong>启动模式只决定程序烧录的位置</strong>，加载完程序之后会有一个重映射(映射到0x00000000地址位置)；真正产生复位信号的时候，CPU还是从开始位置执行。</p>\n<div class=\"note success flat\"><ol>\n<li>初始化堆栈指针 SP=_initial_sp，初始化 PC 指针=Reset_Handler</li>\n<li>初始化中断向量表</li>\n<li>配置系统时钟</li>\n<li>调用 C 库函数_main 初始化用户堆栈，然后进入 main 函数。</li>\n</ol>\n</div>  \n<ol>\n<li>GD32的三种启动方式</li>\n</ol>\n<p>1)主闪存存储器(Main Flash)启动：从GD32内置的Flash启动(0x0800 0000-0x0807 FFFF)，**一般我们使用JTAG或者SWD模式下载程序时，就是下载到这个里面，重启后也直接从这启动程序。**以0x08000000 对应的内存为例，则该块内存既可以通过0x00000000 操作也可以通过0x08000000 操作，且都是操作的同一块内存。</p>\n<p>2)系统存储器(System Memory)启动：从系统存储器启动(0x1FFFF000 - 0x1FFF F7FF)，这种模式启动的程序功能是由厂家设置的。一般来说，我们选用这种启动模式时，是为了从串口下载程序，因为在厂家提供的ISP程序中，提供了串口下载程序的固件，可以通过这个ISP程序将用户程序下载到系统的Flash中。以0x1FFFFFF0对应的内存为例，则该块内存既可以通过0x00000000 操作也可以通过0x1FFFFFF0操作，且都是操作的同一块内存。</p>\n<p>3)片上SRAM启动：从内置SRAM启动(0x2000 0000-0x3FFFFFFF)，既然是SRAM，自然也就没有程序存储的能力了，这个模式一般用于程序调试。SRAM 只能通过0x20000000进行操作，与上述两者不同。从SRAM 启动时，需要在应用程序初始化代码中重新设置向量表的位置。</p>\n<p>用户可以通过设置BOOT0和BOOT1的引脚电平状态，来选择复位后的启动模式。如下图所示：<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/13/12mvsjd-0.webp\" alt=\"启动模式\"></p>\n<p>GD32上电复位以后，代码区都是从0x00000000开始的，三种启动模式只是将各自存储空间的地址映射到0x00000000中。</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/01/14/bm83e-0.webp\" alt=\"总结\"></p>\n<h2 id=\"启动文件分析\">启动文件分析</h2>\n<h3 id=\"栈定义\">栈定义</h3>\n<p>栈的作用是用于局部变量，函数调用，函数形参等的开销，栈的大小不能超过内部SRAM 的大小。当程序较大时，需要修改栈的大小，不然可能会出现的HardFault的错误。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Stack_Size</span>      <span class=\"meta\">EQU</span>     <span class=\"number\">0x00000400</span>    </span><br><span class=\"line\"><span class=\"comment\">;开辟的栈大小1kb，equ为伪指令</span></span><br><span class=\"line\">                <span class=\"meta\">AREA</span>    STACK, NOINIT, READWRITE, <span class=\"meta\">ALIGN</span><span class=\"number\">=3</span> </span><br><span class=\"line\"><span class=\"comment\">;开辟一段可读可写数据空间，ARER 伪指令表示下面将开始定义一个代码段或者数据段。此处是定义数据段。 </span></span><br><span class=\"line\"><span class=\"comment\">;ARER 后面的关键字表示这个段的属性。段名为STACK，可以任意命名；</span></span><br><span class=\"line\"><span class=\"comment\">;NOINIT 表示不初始化；READWRITE 表示可读可写，ALIGN=3，表示按照 8 字节对齐。</span></span><br><span class=\"line\"><span class=\"symbol\">Stack_Mem</span>       <span class=\"meta\">SPACE</span>   Stack_Size</span><br><span class=\"line\"><span class=\"comment\">;SPACE 用于分配大小等于 Stack_Size连续内存空间，单位为字节。</span></span><br><span class=\"line\"><span class=\"symbol\">__initial_sp</span></span><br><span class=\"line\"><span class=\"comment\">;__initial_sp表示栈顶地址。栈是由高向低生长的。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"堆的定义\">堆的定义</h3>\n<p>堆主要用来动态内存的分配，像 malloc()函数申请的内存就在堆中。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Heap_Size</span>       <span class=\"meta\">EQU</span>     <span class=\"number\">0x00000400</span></span><br><span class=\"line\"><span class=\"comment\">;开辟堆的大小为 0X00000200（512 字节）</span></span><br><span class=\"line\">                <span class=\"meta\">AREA</span>    HEAP, NOINIT, READWRITE, <span class=\"meta\">ALIGN</span><span class=\"number\">=3</span></span><br><span class=\"line\"><span class=\"comment\">;堆的名字为 HEAP，NOINIT 即不初始化，可读可写，8字节对齐。</span></span><br><span class=\"line\"><span class=\"symbol\">__heap_base</span></span><br><span class=\"line\"><span class=\"comment\">;__heap_base 表示对的起始地址</span></span><br><span class=\"line\"><span class=\"symbol\">Heap_Mem</span>        <span class=\"meta\">SPACE</span>   Heap_Size</span><br><span class=\"line\"><span class=\"symbol\">__heap_limit</span></span><br><span class=\"line\"><span class=\"comment\">;__heap_limit 表示堆的结束地址。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"向量表\">向量表</h3>\n<p>向量表是一个WORD（ 32 位整数）数组，每个下标对应一种异常，该下标元素的值则是该 ESR 的入口地址。向量表在地址空间中的位置是可以设置的，通过 NVIC 中的一个重定位寄存器来指出向量表的地址。在复位后，该寄存器的值为 0。因此，在地址 0 （即 FLASH 地址 0）处必须包含一张向量表，用于初始时的异常分配。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">                <span class=\"meta\">AREA</span>    RESET, <span class=\"meta\">DATA</span>, <span class=\"meta\">READONLY</span></span><br><span class=\"line\"><span class=\"comment\">;定义一块代码段，段名字是RESET，READONLY 表示只读。</span></span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  __Vectors</span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  __Vectors_End</span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  __Vectors_Size</span><br><span class=\"line\"><span class=\"comment\">;使用EXPORT将3个标识符申明为可被外部引用，声明 __Vectors、__Vectors_End 和__Vectors_Size 具有全局属性。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">__Vectors</span>       <span class=\"meta\">DCD</span>     __initial_sp                      <span class=\"comment\">; Top of Stack</span></span><br><span class=\"line\"><span class=\"comment\">;__Vectors 表示向量表起始地址，DCD 表示分配 1 个 4 字节的空间。</span></span><br><span class=\"line\"><span class=\"comment\">;每行 DCD 都会生成一个 4 字节的二进制代码，中断向量表 存放的实际上是中断服务程序的入口地址。</span></span><br><span class=\"line\"><span class=\"comment\">;当异常（也即是中断事件）发生时，CPU 的中断系统会将相应的入口地址赋值给 PC 程序计数器，之后就开始执行中断服务程序。</span></span><br><span class=\"line\">                <span class=\"meta\">DCD</span>     Reset_Handler                     <span class=\"comment\">; Reset Handler</span></span><br><span class=\"line\">                <span class=\"meta\">DCD</span>     NMI_Handler                       <span class=\"comment\">; NMI Handler</span></span><br><span class=\"line\">                <span class=\"meta\">DCD</span>     HardFault_Handler                 <span class=\"comment\">; Hard Fault Handler</span></span><br><span class=\"line\">                <span class=\"meta\">DCD</span>     MemManage_Handler                 <span class=\"comment\">; MPU Fault Handler</span></span><br><span class=\"line\">                <span class=\"meta\">DCD</span>     BusFault_Handler                  <span class=\"comment\">; Bus Fault Handler</span></span><br><span class=\"line\">                <span class=\"meta\">DCD</span>     UsageFault_Handler                <span class=\"comment\">; Usage Fault Handler</span></span><br><span class=\"line\">                ·</span><br><span class=\"line\">                ·</span><br><span class=\"line\">                ·</span><br><span class=\"line\">                ·</span><br><span class=\"line\"><span class=\"symbol\">__Vectors_End</span></span><br><span class=\"line\"><span class=\"comment\">;__Vectors_End 为向量表结束地址。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">__Vectors_Size</span>  <span class=\"meta\">EQU</span>     __Vectors_End - __Vectors</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">AREA</span>    <span class=\"title\">|.text|</span>, <span class=\"meta\">CODE</span>, <span class=\"meta\">READONLY</span></span><br><span class=\"line\"><span class=\"comment\">; __Vectors_Size则是向量表的大小，向量表的大小是通过__Vectors 和__Vectors_End 相减得到的。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"复位程序\">复位程序</h3>\n<p>复位程序是系统上电后执行的第一个程序，复位程序也是中断程序</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Reset_Handler</span>   <span class=\"meta\">PROC</span></span><br><span class=\"line\"><span class=\"comment\">;定义了一个服务程序，PROC表示程序的开始。</span></span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  Reset_Handler                     [WEAK]</span><br><span class=\"line\"><span class=\"comment\">;使用EXPORT将Reset_Handler申明为可被外部引用，后面WEAK表示弱定义，如果外部文件定义了该标号则首先引用该标号，如果外部文件没有声明也不会出错。这里表示复位程序可以由用户在其他文件重新实现。</span></span><br><span class=\"line\">                <span class=\"meta\">IMPORT</span>  SystemInit</span><br><span class=\"line\">                <span class=\"meta\">IMPORT</span>  __main</span><br><span class=\"line\"><span class=\"comment\">;表示该标号来自外部文件，SystemInit()是一个库函数，在system_gd32f10x.c中定义的</span></span><br><span class=\"line\"><span class=\"comment\">;__main 是一个标准的 C 库函数，主要作用是初始化用户堆栈，这个是由编译器完成的</span></span><br><span class=\"line\"><span class=\"comment\">;该函数最终会调用我们自己写的main函数，从而进入C世界中。</span></span><br><span class=\"line\">                <span class=\"keyword\">LDR</span>     <span class=\"built_in\">R0</span>, <span class=\"symbol\">=SystemInit</span></span><br><span class=\"line\"><span class=\"comment\">;从存储器中加载SystemInit到一个寄存器R0的地址中。</span></span><br><span class=\"line\"><span class=\"comment\">;R0~R3 寄存器通常用于函数入参出参或子程序调用。</span></span><br><span class=\"line\">                <span class=\"keyword\">BLX</span>     <span class=\"built_in\">R0</span></span><br><span class=\"line\"><span class=\"comment\">;跳转到寄存器R0的地址，并根据寄存器的 LSE 确定处理器的状态，还要把跳转前的下条指令地址保存到 LR。</span></span><br><span class=\"line\">                <span class=\"keyword\">LDR</span>     <span class=\"built_in\">R0</span>, <span class=\"symbol\">=__main</span></span><br><span class=\"line\">                <span class=\"keyword\">BX</span>      <span class=\"built_in\">R0</span></span><br><span class=\"line\"><span class=\"comment\">;跳转到至指定寄存器的地址后，不会返回</span></span><br><span class=\"line\">                <span class=\"meta\">ENDP</span></span><br><span class=\"line\"><span class=\"comment\">;和PROC是对应的，表示程序的结束。</span></span><br></pre></td></tr></table></figure>\n<p>这里的__main和C语言中的main()不是一样东西，__main是C lib中的函数，也就是在Keil中自带的；而main()函数是C的入口，main()会被__main调用。</p>\n<h3 id=\"中断服务程序\">中断服务程序</h3>\n<p>我们平时要使用哪个中断，就需要编写相应的中断服务程序，只是启动文件把这些函数留出来了，但是内容都是空的，真正的中断复服务程序需要我们在外部的 C 文件里面重新实现，这里只是提前占了一个位置罢了。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">NMI_Handler</span>     <span class=\"meta\">PROC</span></span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  NMI_Handler                       [WEAK]</span><br><span class=\"line\">                <span class=\"keyword\">B</span>       .</span><br><span class=\"line\"><span class=\"comment\">;B表示跳转，这里跳转到一个‘.’，即表示无线循环。</span></span><br><span class=\"line\">                <span class=\"meta\">ENDP</span></span><br><span class=\"line\"><span class=\"symbol\">HardFault_Handler</span>\\</span><br><span class=\"line\">                <span class=\"meta\">PROC</span></span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  HardFault_Handler                 [WEAK]</span><br><span class=\"line\">                <span class=\"keyword\">B</span>       .</span><br><span class=\"line\">                <span class=\"meta\">ENDP</span></span><br><span class=\"line\"><span class=\"symbol\">MemManage_Handler</span>\\</span><br><span class=\"line\">                <span class=\"meta\">PROC</span></span><br><span class=\"line\">                <span class=\"meta\">EXPORT</span>  MemManage_Handler                 [WEAK]</span><br><span class=\"line\">                <span class=\"keyword\">B</span>       .</span><br><span class=\"line\">                <span class=\"meta\">ENDP</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"GD32的启动流程分析\">GD32的启动流程分析</h2>\n<div class=\"note success flat\"><p>与前面分析的一致</p>\n<ol>\n<li>初始化SP、PC、向量表</li>\n<li>设置系统时钟，接下来就会进入SystemInit函数中。</li>\n<li>初始化堆栈并进入main</li>\n</ol>\n</div> \n<p>MCU上电后从0x0800 0000处读取栈顶地址并保存，然后从0x0800 0004读取中断向量表的起始地址，这就是复位程序的入口地址，接着跳转到复位程序入口处，初始向量表，然后设置时钟，设置堆栈，最后跳转到C空间的main函数，即进入用户程序。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/14/ndr0q-0.webp\" alt=\"总结\"></p>\n<h1>BootLoader和APP的关系</h1>\n<p>上面讲了MCU的整个启动的流程，无论是BootLoader还是APP都必须要按照上面的流程进行启动，只是APP的运行需要在BootLoader中进行跳转（<strong>其实这种跳转就是走楼梯一级一级上</strong>），即在BootLoader对MSP和PC进行重新赋值成APP.bin文件中的参数。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/14/r1k86-0.webp\" alt=\"关系\"></p>\n<ol>\n<li>BootLoader：验证下载新固件完整性，从固件备份区拷贝新固件数据到APP区，跳转到APP中；</li>\n<li>APP：业务应用程序设计，下载新固件到备份区（APP_back）并复位。</li>\n</ol>\n<p><img src=\"https://image.aruoshui.fun/i/2025/01/14/rzmpd-0.webp\" alt=\"flash分区\"><br>\n程序的启动，在bootloader引导程序中，我们会启用标志位，每个app对应一个标志位，如果判断成功就跳转到相应的地址去启动相应的程序。</p>\n"},{"title":"linxu内核学习笔记","abbrlink":6793,"date":"2025-02-25T11:52:45.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqtlg9-0.webp","swiper_index":null,"_content":"\n# 参考文章\n{% link 知乎, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n{% link CSDN, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n\n{% link github, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp%} \n\n# 软件分层思想\n1. BSP：嵌入式底层系统开发，调试程序，让特定的系统跑在特定的板子上，具体的工作包括调Bootloader程序，加载操作系统内核，文件系统的加载，外设驱动程序的开发。\n2. 驱动开发：驱动与底层硬件直接打交道，充当了硬件与应用软件中间的桥梁。\n3. 应用层：网络服务层、文件系统、虚拟化\n4. 基础服务：进程、内存管理、VFS、中断、任务调度\n\n# 模块化设计\n1. 更细粒度的模块划分、模块依赖\n2. 功能、模块、子系统、框架\n3. Linux内核中的OOP思想\n   1. 结构体\n   2. 函数指针\n\n\n# 宏内核与微内核\n1. 宏内核：宏内核将操作系统的所有核心功能集中到一个大的内核空间中，所有服务（如设备驱动、文件系统、内存管理等）都运行在内核态，紧密集成在一起。这种设计简化了模块间的交互，提高了性能，但增加了复杂性和维护难度。‌\n2. 微内核：微内核只保留最基本的系统功能，如进程管理、内存管理和消息传递等，其他高级功能如设备驱动、文件系统和网络协议等在用户空间以服务的形式运行。这种设计提高了系统的模块化和可扩展性，但可能会降低性能。‌\n\n#### 内核的加载\n{% link 向Linux内核添加新功能的静态加载与动态加载, https://blog.csdn.net/qq_45143522/article/details/138073674,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n1. 静态加载：将新功能的源码与内核其它代码一起编译进uImage内核镜像文件内。\n2. 动态加载：新功能源码与内核其它源码不一起编译，而是独立编译成内核的插件(被称为内核模块）文件.ko\n\n# 内核模块\n","source":"_posts/linxu内核学习_模块机制.md","raw":"---\ntitle: linxu内核学习笔记\nabbrlink: 6793\ndate: 2025-02-25 19:52:45\ntags:\ndescription:\ncategories:\ncover:\nswiper_index:\n---\n\n# 参考文章\n{% link 知乎, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n{% link CSDN, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n\n{% link github, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp%} \n\n# 软件分层思想\n1. BSP：嵌入式底层系统开发，调试程序，让特定的系统跑在特定的板子上，具体的工作包括调Bootloader程序，加载操作系统内核，文件系统的加载，外设驱动程序的开发。\n2. 驱动开发：驱动与底层硬件直接打交道，充当了硬件与应用软件中间的桥梁。\n3. 应用层：网络服务层、文件系统、虚拟化\n4. 基础服务：进程、内存管理、VFS、中断、任务调度\n\n# 模块化设计\n1. 更细粒度的模块划分、模块依赖\n2. 功能、模块、子系统、框架\n3. Linux内核中的OOP思想\n   1. 结构体\n   2. 函数指针\n\n\n# 宏内核与微内核\n1. 宏内核：宏内核将操作系统的所有核心功能集中到一个大的内核空间中，所有服务（如设备驱动、文件系统、内存管理等）都运行在内核态，紧密集成在一起。这种设计简化了模块间的交互，提高了性能，但增加了复杂性和维护难度。‌\n2. 微内核：微内核只保留最基本的系统功能，如进程管理、内存管理和消息传递等，其他高级功能如设备驱动、文件系统和网络协议等在用户空间以服务的形式运行。这种设计提高了系统的模块化和可扩展性，但可能会降低性能。‌\n\n#### 内核的加载\n{% link 向Linux内核添加新功能的静态加载与动态加载, https://blog.csdn.net/qq_45143522/article/details/138073674,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n1. 静态加载：将新功能的源码与内核其它代码一起编译进uImage内核镜像文件内。\n2. 动态加载：新功能源码与内核其它源码不一起编译，而是独立编译成内核的插件(被称为内核模块）文件.ko\n\n# 内核模块\n","slug":"linxu内核学习_模块机制","published":1,"updated":"2025-07-09T12:29:43.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io1001imktt2g75dmos","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"知乎\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">知乎</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"CSDN\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">CSDN</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"github\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp\"/></div><div class=\"right\"><p class=\"text\">github</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<h1>软件分层思想</h1>\n<ol>\n<li>BSP：嵌入式底层系统开发，调试程序，让特定的系统跑在特定的板子上，具体的工作包括调Bootloader程序，加载操作系统内核，文件系统的加载，外设驱动程序的开发。</li>\n<li>驱动开发：驱动与底层硬件直接打交道，充当了硬件与应用软件中间的桥梁。</li>\n<li>应用层：网络服务层、文件系统、虚拟化</li>\n<li>基础服务：进程、内存管理、VFS、中断、任务调度</li>\n</ol>\n<h1>模块化设计</h1>\n<ol>\n<li>更细粒度的模块划分、模块依赖</li>\n<li>功能、模块、子系统、框架</li>\n<li>Linux内核中的OOP思想\n<ol>\n<li>结构体</li>\n<li>函数指针</li>\n</ol>\n</li>\n</ol>\n<h1>宏内核与微内核</h1>\n<ol>\n<li>宏内核：宏内核将操作系统的所有核心功能集中到一个大的内核空间中，所有服务（如设备驱动、文件系统、内存管理等）都运行在内核态，紧密集成在一起。这种设计简化了模块间的交互，提高了性能，但增加了复杂性和维护难度。‌</li>\n<li>微内核：微内核只保留最基本的系统功能，如进程管理、内存管理和消息传递等，其他高级功能如设备驱动、文件系统和网络协议等在用户空间以服务的形式运行。这种设计提高了系统的模块化和可扩展性，但可能会降低性能。‌</li>\n</ol>\n<h4 id=\"内核的加载\">内核的加载</h4>\n<div class=\"tag link\"><a class=\"link-card\" title=\"向Linux内核添加新功能的静态加载与动态加载\" href=\"https://blog.csdn.net/qq_45143522/article/details/138073674\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">向Linux内核添加新功能的静态加载与动态加载</p><p class=\"url\">https://blog.csdn.net/qq_45143522/article/details/138073674</p></div></a></div> \n<ol>\n<li>静态加载：将新功能的源码与内核其它代码一起编译进uImage内核镜像文件内。</li>\n<li>动态加载：新功能源码与内核其它源码不一起编译，而是独立编译成内核的插件(被称为内核模块）文件.ko</li>\n</ol>\n<h1>内核模块</h1>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"知乎\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">知乎</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"CSDN\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">CSDN</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"github\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp\"/></div><div class=\"right\"><p class=\"text\">github</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<h1>软件分层思想</h1>\n<ol>\n<li>BSP：嵌入式底层系统开发，调试程序，让特定的系统跑在特定的板子上，具体的工作包括调Bootloader程序，加载操作系统内核，文件系统的加载，外设驱动程序的开发。</li>\n<li>驱动开发：驱动与底层硬件直接打交道，充当了硬件与应用软件中间的桥梁。</li>\n<li>应用层：网络服务层、文件系统、虚拟化</li>\n<li>基础服务：进程、内存管理、VFS、中断、任务调度</li>\n</ol>\n<h1>模块化设计</h1>\n<ol>\n<li>更细粒度的模块划分、模块依赖</li>\n<li>功能、模块、子系统、框架</li>\n<li>Linux内核中的OOP思想\n<ol>\n<li>结构体</li>\n<li>函数指针</li>\n</ol>\n</li>\n</ol>\n<h1>宏内核与微内核</h1>\n<ol>\n<li>宏内核：宏内核将操作系统的所有核心功能集中到一个大的内核空间中，所有服务（如设备驱动、文件系统、内存管理等）都运行在内核态，紧密集成在一起。这种设计简化了模块间的交互，提高了性能，但增加了复杂性和维护难度。‌</li>\n<li>微内核：微内核只保留最基本的系统功能，如进程管理、内存管理和消息传递等，其他高级功能如设备驱动、文件系统和网络协议等在用户空间以服务的形式运行。这种设计提高了系统的模块化和可扩展性，但可能会降低性能。‌</li>\n</ol>\n<h4 id=\"内核的加载\">内核的加载</h4>\n<div class=\"tag link\"><a class=\"link-card\" title=\"向Linux内核添加新功能的静态加载与动态加载\" href=\"https://blog.csdn.net/qq_45143522/article/details/138073674\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">向Linux内核添加新功能的静态加载与动态加载</p><p class=\"url\">https://blog.csdn.net/qq_45143522/article/details/138073674</p></div></a></div> \n<ol>\n<li>静态加载：将新功能的源码与内核其它代码一起编译进uImage内核镜像文件内。</li>\n<li>动态加载：新功能源码与内核其它源码不一起编译，而是独立编译成内核的插件(被称为内核模块）文件.ko</li>\n</ol>\n<h1>内核模块</h1>\n"},{"title":"linxu-kernel-syscall","abbrlink":54939,"date":"2025-04-09T04:28:20.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqvet7-0.webp","swiper_index":null,"_content":"\n\n\n\n# 参考文章\n\n{% link 『 Linux 』“ 一切皆文件 “, https://blog.csdn.net/2202_75303754/article/details/138967355,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n\n \n\n# 系统调用的基本概念\n在linux中，操作系统负责硬件资源的封装，任务的创建、调度、读写磁盘\n- μc/os中，采用OSinit-OSTaskCreate-创建一个任务\n- Linux中，拥有权限管理来保证安全，划分内核态和用户态。通过系统调用，让APP某些运行陷入到内核态，以此来访问硬件设备\n\n# 软中断\n## 权限管理\n- 程序的用户态、内核态\n- 操作系统+ CPU软中断：swi/svc\n- CPU的运行级别：普通权限(普通运行)、特权（陷入到内核态）\n  - ARM32：\n    - 普通模式：User\n    - 特权模式：FIQ、IRQ、SVC、ABT、UND\n  - ARM64：EL0、EL1、EL2、EL3\n  - X86：ring0 ~ ring\n\n## 系统调用号\n- ARM：swi、svc\n- ARM : swi、svc\n  - 系统调用接口：read、write、printf\n  - 内核中的实现：sys_read、sys_write\n  - 系统调用号：\n    -  32位ARM：3、4\n    -  64位ARM：0、1\n  \n\n## 数据传递\n- 软中断指令：– X86 int 80H – ARM swisvc\n- 用户函数的参数传递\n     - ARM：R0、R1、R2、R3、R4、R5、R6\n     - ARM64：X1、X2、X3、X4、X5\n- 系统调用号– ARM：R7 – ARM64：X8\n- 内核函数的返回值– ARM：R0– ARM64：X\n\n```powershell\n      Arch/ABI    Instruction           System  Ret  Ret  Error    Notes\n\n                                         call #  val  val2\n       ───────────────────────────────────────────────────────────────────\n       alpha       callsys               v0      v0   a4   a3       1, 6\n       arc         trap0                 r8      r0   -    -\n       arm/OABI    swi NR                -       a1   -    -        2\n       arm/EABI    swi 0x0               r7      r0   r1   -\n       arm64       svc #0                x8      x0   x1   -\n       blackfin    excpt 0x0             P0      R0   -    -\n       i386        int $0x80             eax     eax  edx  -\n       ia64        break 0x100000        r15     r8   r9   r10      1, 6\n       m68k        trap #0               d0      d0   -    -\n       microblaze  brki r14,8            r12     r3   -    -\n       mips        syscall               v0      v0   v1   a3       1, 6\n       nios2       trap                  r2      r2   -    r7\n       parisc      ble 0x100(%sr2, %r0)  r20     r28  -    -\n       powerpc     sc                    r0      r3   -    r0       1\n       powerpc64   sc                    r0      r3   -    cr0.SO   1\n       riscv       ecall                 a7      a0   a1   -\n       s390        svc 0                 r1      r2   r3   -        3\n       s390x       svc 0                 r1      r2   r3   -        3\n       superh      trap #0x17            r3      r0   r1   -        4, 6\n       sparc/32    t 0x10                g1      o0   o1   psr/csr  1, 6\n       sparc/64    t 0x6d                g1      o0   o1   psr/csr  1, 6\n       tile        swint1                R10     R00  -    R01      1\n       x86-64      syscall               rax     rax  rdx  -        5\n       x32         syscall               rax     rax  rdx  -        5\n       xtensa      syscall               a2      a2   -    -\n```\n\n\nARM汇编系统调用：\n```armasm\n.text\n.global _start\n\n_start:\n    mov r0, #1              /* stdout*/\n    add r1, pc, #16         /* address of the string*/\n    mov r2, #12            /* string length*/\n    mov r7, #4             /*syscall for 'write'*/\n    swi #0                  /* software interrupt*/  软中断调用sys_write来实现字符串的打印\n\n_exit:\n    mov r7, #1             /* syscall for 'exit'*/\n    swi #0                 /* software interrupt*/\n\n_string:\n.asciz \"Hello world\\n\"          @ our string, NULL terminated\n```\n\n\n## 系统调用接口的封装\n写这些汇编非常麻烦，好在：\n- C标准库包含一系列系统调用接口的封装– read、write、fork、open…\n\n### syscall系统调用接口的封装\n对于在C标准库中没有封装的系统调用\n- syscall是一个库函数：`long syscall(long number, ...);`，如果想使用syscall来实现write系统调用，直接`syscall(1, 1, \"helloworld\\n\", 12)`就行\n- 封装了系统调用的汇编接口– 系统调用前保存CPU寄存器– 从系统调用返回后，恢复寄存器\n\nsyscall的汇编实现：\n```armasm\n000dad70 <syscall@@GLIBC_2.4>:\n   dad70:\te1a0c00d \tmov\tip, sp\n   dad74:\te92d00f0 \tpush\t{r4, r5, r6, r7}\n   dad78:\te1a07000 \tmov\tr7, r0\n   dad7c:\te1a00001 \tmov\tr0, r1\n   dad80:\te1a01002 \tmov\tr1, r2\n   dad84:\te1a02003 \tmov\tr2, r3\n   dad88:\te89c0078 \tldm\tip, {r3, r4, r5, r6}\n   dad8c:\tef000000 \tsvc\t0x00000000\n   dad90:\te8bd00f0 \tpop\t{r4, r5, r6, r7}\n   dad94:\te3700a01 \tcmn\tr0, #4096\t; 0x1000\n   dad98:\t312fff1e \tbxcc\tlr\n   dad9c:\teafcf2c3 \tb\t178b0 <__libc_start_main@@GLIBC_2.4+0x278>\n```\n\n# 系统调用流程分析\n以kill这个系统调用来分析： \n\n1. 接口封装: /usr/arm-linux-gnueabi/lib/libc.a\n2. 系统调用号: arch/arm/include/generated/calls-eabi.S 这里定义了一个系统调用表，将系统调用号和指针对应起来，用户使用系统调用就能根据此表找到函数指针，从而跳转过去运行\n3. 内核实现: kernel/signal.c 不同系统调用实现分布在不同的内核部分\n4. 中断处理: arch/arm/kernel/entry-common.S  软中断\n\n**实现过程就是根据系统调用号，从系统调用表中找到对应的入口函数指针，跳转执行，中间包含各种软中断的管理操作**\n## 系统调用号：\n```c\narch/arm/include/generated/uapi/asm/unistd-common.h\n #define __NR_kill (__NR_SYSCALL_BASE + 37)\n```\n\n## x系统调用实现：\n```c\n kernel/signal.c :\n SYSCALL_DEFINE2(kill, pid_t, pid, int, sig)\n {\n    struct kernel_siginfo info;\n    prepare_kill_siginfo(sig, &info);\n    return kill_something_info(sig, &info, pid);\n }\n展开后相当于：\nasmlinkage long sys_kill(pid_t pid, int sig)\n```\n\n## 系统调用函数实现：\n```c\n include/linux/syscalls.h\n asmlinkage:GCC扩展，表示读取的参数来自栈中，而非寄存器\n/* kernel/signal.c */\n asmlinkage long sys_restart_syscall(void);\n asmlinkage long sys_kill(pid_t pid, int sig);\n asmlinkage long sys_tkill(pid_t pid, int sig);\n```\n## 获取系统调用号\n```armasm\n arch/arm/kernel/entry-common.S :  保护现场，获取系统调用号\nENTRY(vector_swi)\n addne scno, r7, #__NR_SYSCALL_BASE\t@ put OS number in\n ldr tbl, sys_call_table\n ...\n invoke_syscall tbl, scno, r10, __ret_fast_syscall\n   add  r1, sp, #S_OFF\n 2: cmp  scno, #(__ARM_NR_BASE - \t__NR_SYSCALL_BASE)\n   eor  r0, scno, #__NR_SYSCALL_BASE @ put OS number back\n   bcs  arm_syscall\n   mov  why, #0\t\t @ no longer a real syscall\n   b   sys_ni_syscall\t\t @ not private func\n ...\n 9001:\n  sub lr, saved_pc, #4\n  str lr, [sp, #S_PC]\n  get_thread_info tsk\n  b ret_fast_syscall   回到用户态kill，继续执行用户态代码\nENDPROC(vector_swi)\n\n syscall_table_start sys_call_table\n  #define COMPAT(nr, native, compat) syscall nr, native\n  #ifdef CONFIG_AEABI\n    #include <calls-eabi.S>\n  #else\n    #include <calls-oabi.S>\n  #endif\n  #undef COMPAT\n syscall_table_end sys_call_table\n\n #define NATIVE(nr, func) syscall nr, func\n```\n\n## 系统调用表\n```armasm\narch/arm/include/generated/calls-eabi.S :\n NATIVE(0, sys_restart_syscall)\n NATIVE(1, sys_exit)\n NATIVE(2, sys_fork)\n NATIVE(3, sys_read)\n NATIVE(4, sys_write)\n NATIVE(5, sys_open)\n NATIVE(6, sys_close)\n NATIVE(8, sys_creat)\n NATIVE(9, sys_link)\n NATIVE(10, sys_unlink)\n NATIVE(11, sys_execve)\n NATIVE(12, sys_chdir)\n NATIVE(14, sys_mknod)\n NATIVE(15, sys_chmod)\n NATIVE(16, sys_lchown16)\n NATIVE(19, sys_lseek)\n NATIVE(20, sys_getpid)\n NATIVE(21, sys_mount)\n NATIVE(23, sys_setuid16)\n NATIVE(24, sys_getuid16)\n NATIVE(26, sys_ptrace)\n NATIVE(29, sys_pause)\n NATIVE(33, sys_access)\n NATIVE(34, sys_nice)\n NATIVE(36, sys_sync)\n NATIVE(37, sys_kill)\n NATIVE(38, sys_rename)\n NATIVE(39, sys_mkdir)\n其实就是定义一个函数入口指针  .long sys_kill\n```\n\n\n# 添加一个系统调用\n## 增加内核对应的实现函数\n```powershell\ndiff --git a/arch/arm/kernel/signal.c b/arch/arm/kernel/signal.c\nindex 585edbfcc..544c92bcb 100644\n--- a/arch/arm/kernel/signal.c\n+++ b/arch/arm/kernel/signal.c\n@@ -723,3 +723,17 @@ asmlinkage void do_rseq_syscall(struct pt_regs *regs)\n \trseq_syscall(regs);\n }\n #endif\n+/* add by wit */\n+asmlinkage  void sys_hello(const char __user *buf, size_t count)\n+{\n+    char kernel_buf[100] = {0};\n+    if(buf)\n+    {\n+        copy_from_user(kernel_buf, buf, (count < 100) ? count:100);\n+        printk(\"sys_hello: %s\\n\", kernel_buf);\n+    }\n+}\n+\n+\n+\n```\n\n## 在系统调用表中增加一个系统调用号及入口\n\n```powershell\ndiff --git a/include/linux/syscalls.h b/include/linux/syscalls.h\nindex 37bea07c1..a43e2e0c6 100644\n--- a/include/linux/syscalls.h\n+++ b/include/linux/syscalls.h\n@@ -674,6 +674,9 @@ asmlinkage long sys_sched_rr_get_interval(pid_t pid,\n asmlinkage long sys_sched_rr_get_interval_time32(pid_t pid,\n \t\t\t\t\t\t struct old_timespec32 __user *interval);\n \n+/* add by wit: add a system call: hello */\n+asmlinkage void sys_hello(const char __user *buf, size_t count);\n+\n /* kernel/signal.c */\n asmlinkage long sys_restart_syscall(void);\n asmlinkage long sys_kill(pid_t pid, int sig);\n\n--- a/arch/arm/include/generated/calls-eabi.S\n+++ b/arch/arm/include/generated/calls-eabi.S\n\n+ NATIVE(441, sys_hello)\n```\n\n# 系统调用的开销\n## 主要的开销\n- 中断，软中断也是中断，变态是有代价的，每次切换需刷新 CPU 流水线、TLB 和缓存，现代 CPU 需约 100-1000 时钟周期。\n- 上下文保存与恢复，CPU 需保存用户态寄存器状态（如 PC、SP、EFLAGS）到内核栈，返回时再恢复。容易造成额外的内存访问\n- 抢占系统、任务调度\n- 同步，内核全局资源（如文件系统）可能需加锁，引发争用。\n- IO等待，频繁拷贝（尤其是大块数据）会显著降低性能。\n\n## 解决思路\n- 快速系统调用指令：\nx86 的 syscall（比 int 0x80 快 2-3 倍）。\n\n- 虚拟系统调用：\n  - vdso (Virtual Dynamic Shared Object)：\n    将部分调用（如 gettimeofday()）映射到用户态，无需切换。\n  - vsyscall（Virtual System Call）\n    内核将部分系统调用的代码映射到固定的用户空间地址（如 0xffffffffff600000）。用户程序直接跳转到该地址执行，无需切换特权级。\n\n\n### vsyscall\n```powershell\n$ cat /proc/self/maps\n5611f7bb1000-5611f7bb3000 r--p 00000000 08:05 1704088                    /usr/bin/cat\n5611f7bb3000-5611f7bb8000 r-xp 00002000 08:05 1704088                    /usr/bin/cat\n5611f7bb8000-5611f7bbb000 r--p 00007000 08:05 1704088                    /usr/bin/cat\n5611f7bbb000-5611f7bbc000 r--p 00009000 08:05 1704088                    /usr/bin/cat\n5611f7bbc000-5611f7bbd000 rw-p 0000a000 08:05 1704088                    /usr/bin/cat\n56123188b000-5612318ac000 rw-p 00000000 00:00 0                          [heap]\n7f7dec15b000-7f7dec17d000 rw-p 00000000 00:00 0 \n7f7dec17d000-7f7dec9ee000 r--p 00000000 08:05 1704009                    /usr/lib/locale/locale-archive\n7f7dec9ee000-7f7deca10000 r--p 00000000 08:05 1706133                    /usr/lib/x86_64-linux-gnu/libc-2.31.so\n7f7deca10000-7f7decb88000 r-xp 00022000 08:05 1706133                    /usr/lib/x86_64-linux-gnu/libc-2.31.so\n7f7decb88000-7f7decbd6000 r--p 0019a000 08:05 1706133                    /usr/lib/x86_64-linux-gnu/libc-2.31.so\n7f7decbd6000-7f7decbda000 r--p 001e7000 08:05 1706133                    /usr/lib/x86_64-linux-gnu/libc-2.31.so\n7f7decbda000-7f7decbdc000 rw-p 001eb000 08:05 1706133                    /usr/lib/x86_64-linux-gnu/libc-2.31.so\n7f7decbdc000-7f7decbe2000 rw-p 00000000 00:00 0 \n7f7decbf5000-7f7decbf6000 r--p 00000000 08:05 1706106                    /usr/lib/x86_64-linux-gnu/ld-2.31.so\n7f7decbf6000-7f7decc19000 r-xp 00001000 08:05 1706106                    /usr/lib/x86_64-linux-gnu/ld-2.31.so\n7f7decc19000-7f7decc21000 r--p 00024000 08:05 1706106                    /usr/lib/x86_64-linux-gnu/ld-2.31.so\n7f7decc22000-7f7decc23000 r--p 0002c000 08:05 1706106                    /usr/lib/x86_64-linux-gnu/ld-2.31.so\n7f7decc23000-7f7decc24000 rw-p 0002d000 08:05 1706106                    /usr/lib/x86_64-linux-gnu/ld-2.31.so\n7f7decc24000-7f7decc25000 rw-p 00000000 00:00 0 \n7ffc30544000-7ffc30565000 rw-p 00000000 00:00 0                          [stack]\n7ffc305d7000-7ffc305db000 r--p 00000000 00:00 0                          [vvar]\n7ffc305db000-7ffc305dd000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]\n\n```\n可以看到程序段映射中有vsyscall段，这里保存了一些固定的系统调用。\n\n**尽管 vsyscall 机制已被弃用，但 Linux 内核仍然在内存映射中保留**\nffffffffff600000-ffffffffff601000 这个区域（标记为 [vsyscall]）\n\n### VDSO\n\n---\n\n## **3. 对比 `vsyscall` 和 `vDSO`**\n| **特性**         | **`vsyscall`**                | **`vDSO`**                     |\n|------------------|-------------------------------|--------------------------------|\n| **地址分配**     | 固定 (`0xffffffffff600000`)   | 动态加载（ASLR 支持）          |\n| **安全性**       | 低（固定地址易受攻击）        | 高（随机化地址）               |\n| **内核支持**     | 旧版机制，已废弃              | 现代默认机制                   |\n| **性能**         | 模拟执行（较慢）              | 直接用户态执行（最快）         |\n| **调用方式**     | 硬编码地址                    | 通过 `glibc` 或 `dlopen` 调用  |\n\n---\n\n在内存映射中，可以看道vdso这个段，这个地址是随机的\n\n源码在内核中实现\n- arch/arm/kernel/vdso.c\n- 关键函数:vdso_mremap、install_vvar\n  - 速度最快\n  - 开销最小,基本等价于函数调用开销\n\n\n# 一切皆文件的哲学\n**“一切皆文件”是 Linux 对系统资源的高度抽象，通过文件接口屏蔽底层差异，提供了简洁、一致的操作方式。**、\n这种设计降低了系统复杂性，使得工具、脚本和应用程序能够以统一模式处理多样化资源，是 Linux 强大灵活性的重要基石。\n\n简单来说，在Linux操作系统中，所有的资源（包括普通文件（文本、二进制文件等）、目录、设备（如磁盘、键盘）、进程信息、网络套接字、管道等）都被抽象为了文件。\n\n在用户层面上，我们可以通过对对应的文件进行操作，进而完成对这些资源的操作。\n\n这样做最明显的好处是，开发者仅需要使用一套 API 和开发工具，即可调取 Linux 系统中绝大部分的资源。\n\n举个简单的例子，Linux 中几乎所有读（读文件，读系统状态，读PIPE）的操作都可以用read 函数来进行；几乎所有更改（更改文件，更改系统参数，写 PIPE）的操作都可以用 write 函数来进行。\n\n每一种设备都有用于描述自身的读写方法与属性等(在对应的数据结构中)，将这些方法的地址赋值给对应的函数，将属性抽象成文件的内容，就可以用访问文件的方式来访问这些资源。\n\n虽然在访问这些设备时所调用的函数都是文件的 read 和 write 等，但实际上调用的却是对应设备的读写函数。\n\n按照面向对象语言的视角来理解就是：struct file 是一个抽象类，而各种设备继承自 struct file 并各自实现了读写等方法。在较高的层次就可以将这些设备都看作文件来处理。\n\n\n![一切皆文件](https://image.aruoshui.fun/i/2025/04/15/vpxf4e-0.webp)\n\n\n## 硬件识别机制\n在Linux当中的`/dev`目录下可以看到存在许多文件;\n```powershell\n$ ls /dev\nAliSecGuard      initctl           \nautofs           input              \nblock            kmsg               \nbtrfs-control    log                \nbus              loop-control       \nchar             mapper              \nconsole          mcelog              \n\n```\n\n而这些文件被称为设备文件;\n同时这些设备文件代表着系统当中的各种硬件设备,它们将为用户的程序提供一个接口;\n用户可以通过这些口从而间接的调用硬件;\n\n**驱动程序等后续会说到**\n\n- 驱动程序负责管理和控制硬件,而驱动程序本身也是被OS进行管理的;\n- 设备文件本身也是为用户提供一个与用户与驱动交互的接口;\n- 而驱动程序则为为设备文件提供的一个与硬件交互的一个接口;\n- 这些抽象的接口本身对于OS来说是不知情的;\n- OS只知道在调用对应的硬件时只需要去调用对应的设备文件即可;这样就把硬件设备抽象成执行文件了\n","source":"_posts/linxu-kernel-syscall.md","raw":"---\ntitle: linxu-kernel-syscall\nabbrlink: 54939\ndate: 2025-04-09 12:28:20\ntags:\ndescription:\ncategories:\ncover:\nswiper_index:\n---\n\n\n\n\n# 参考文章\n\n{% link 『 Linux 』“ 一切皆文件 “, https://blog.csdn.net/2202_75303754/article/details/138967355,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n\n \n\n# 系统调用的基本概念\n在linux中，操作系统负责硬件资源的封装，任务的创建、调度、读写磁盘\n- μc/os中，采用OSinit-OSTaskCreate-创建一个任务\n- Linux中，拥有权限管理来保证安全，划分内核态和用户态。通过系统调用，让APP某些运行陷入到内核态，以此来访问硬件设备\n\n# 软中断\n## 权限管理\n- 程序的用户态、内核态\n- 操作系统+ CPU软中断：swi/svc\n- CPU的运行级别：普通权限(普通运行)、特权（陷入到内核态）\n  - ARM32：\n    - 普通模式：User\n    - 特权模式：FIQ、IRQ、SVC、ABT、UND\n  - ARM64：EL0、EL1、EL2、EL3\n  - X86：ring0 ~ ring\n\n## 系统调用号\n- ARM：swi、svc\n- ARM : swi、svc\n  - 系统调用接口：read、write、printf\n  - 内核中的实现：sys_read、sys_write\n  - 系统调用号：\n    -  32位ARM：3、4\n    -  64位ARM：0、1\n  \n\n## 数据传递\n- 软中断指令：– X86 int 80H – ARM swisvc\n- 用户函数的参数传递\n     - ARM：R0、R1、R2、R3、R4、R5、R6\n     - ARM64：X1、X2、X3、X4、X5\n- 系统调用号– ARM：R7 – ARM64：X8\n- 内核函数的返回值– ARM：R0– ARM64：X\n\n```powershell\n      Arch/ABI    Instruction           System  Ret  Ret  Error    Notes\n\n                                         call #  val  val2\n       ───────────────────────────────────────────────────────────────────\n       alpha       callsys               v0      v0   a4   a3       1, 6\n       arc         trap0                 r8      r0   -    -\n       arm/OABI    swi NR                -       a1   -    -        2\n       arm/EABI    swi 0x0               r7      r0   r1   -\n       arm64       svc #0                x8      x0   x1   -\n       blackfin    excpt 0x0             P0      R0   -    -\n       i386        int $0x80             eax     eax  edx  -\n       ia64        break 0x100000        r15     r8   r9   r10      1, 6\n       m68k        trap #0               d0      d0   -    -\n       microblaze  brki r14,8            r12     r3   -    -\n       mips        syscall               v0      v0   v1   a3       1, 6\n       nios2       trap                  r2      r2   -    r7\n       parisc      ble 0x100(%sr2, %r0)  r20     r28  -    -\n       powerpc     sc                    r0      r3   -    r0       1\n       powerpc64   sc                    r0      r3   -    cr0.SO   1\n       riscv       ecall                 a7      a0   a1   -\n       s390        svc 0                 r1      r2   r3   -        3\n       s390x       svc 0                 r1      r2   r3   -        3\n       superh      trap #0x17            r3      r0   r1   -        4, 6\n       sparc/32    t 0x10                g1      o0   o1   psr/csr  1, 6\n       sparc/64    t 0x6d                g1      o0   o1   psr/csr  1, 6\n       tile        swint1                R10     R00  -    R01      1\n       x86-64      syscall               rax     rax  rdx  -        5\n       x32         syscall               rax     rax  rdx  -        5\n       xtensa      syscall               a2      a2   -    -\n```\n\n\nARM汇编系统调用：\n```armasm\n.text\n.global _start\n\n_start:\n    mov r0, #1              /* stdout*/\n    add r1, pc, #16         /* address of the string*/\n    mov r2, #12            /* string length*/\n    mov r7, #4             /*syscall for 'write'*/\n    swi #0                  /* software interrupt*/  软中断调用sys_write来实现字符串的打印\n\n_exit:\n    mov r7, #1             /* syscall for 'exit'*/\n    swi #0                 /* software interrupt*/\n\n_string:\n.asciz \"Hello world\\n\"          @ our string, NULL terminated\n```\n\n\n## 系统调用接口的封装\n写这些汇编非常麻烦，好在：\n- C标准库包含一系列系统调用接口的封装– read、write、fork、open…\n\n### syscall系统调用接口的封装\n对于在C标准库中没有封装的系统调用\n- syscall是一个库函数：`long syscall(long number, ...);`，如果想使用syscall来实现write系统调用，直接`syscall(1, 1, \"helloworld\\n\", 12)`就行\n- 封装了系统调用的汇编接口– 系统调用前保存CPU寄存器– 从系统调用返回后，恢复寄存器\n\nsyscall的汇编实现：\n```armasm\n000dad70 <syscall@@GLIBC_2.4>:\n   dad70:\te1a0c00d \tmov\tip, sp\n   dad74:\te92d00f0 \tpush\t{r4, r5, r6, r7}\n   dad78:\te1a07000 \tmov\tr7, r0\n   dad7c:\te1a00001 \tmov\tr0, r1\n   dad80:\te1a01002 \tmov\tr1, r2\n   dad84:\te1a02003 \tmov\tr2, r3\n   dad88:\te89c0078 \tldm\tip, {r3, r4, r5, r6}\n   dad8c:\tef000000 \tsvc\t0x00000000\n   dad90:\te8bd00f0 \tpop\t{r4, r5, r6, r7}\n   dad94:\te3700a01 \tcmn\tr0, #4096\t; 0x1000\n   dad98:\t312fff1e \tbxcc\tlr\n   dad9c:\teafcf2c3 \tb\t178b0 <__libc_start_main@@GLIBC_2.4+0x278>\n```\n\n# 系统调用流程分析\n以kill这个系统调用来分析： \n\n1. 接口封装: /usr/arm-linux-gnueabi/lib/libc.a\n2. 系统调用号: arch/arm/include/generated/calls-eabi.S 这里定义了一个系统调用表，将系统调用号和指针对应起来，用户使用系统调用就能根据此表找到函数指针，从而跳转过去运行\n3. 内核实现: kernel/signal.c 不同系统调用实现分布在不同的内核部分\n4. 中断处理: arch/arm/kernel/entry-common.S  软中断\n\n**实现过程就是根据系统调用号，从系统调用表中找到对应的入口函数指针，跳转执行，中间包含各种软中断的管理操作**\n## 系统调用号：\n```c\narch/arm/include/generated/uapi/asm/unistd-common.h\n #define __NR_kill (__NR_SYSCALL_BASE + 37)\n```\n\n## x系统调用实现：\n```c\n kernel/signal.c :\n SYSCALL_DEFINE2(kill, pid_t, pid, int, sig)\n {\n    struct kernel_siginfo info;\n    prepare_kill_siginfo(sig, &info);\n    return kill_something_info(sig, &info, pid);\n }\n展开后相当于：\nasmlinkage long sys_kill(pid_t pid, int sig)\n```\n\n## 系统调用函数实现：\n```c\n include/linux/syscalls.h\n asmlinkage:GCC扩展，表示读取的参数来自栈中，而非寄存器\n/* kernel/signal.c */\n asmlinkage long sys_restart_syscall(void);\n asmlinkage long sys_kill(pid_t pid, int sig);\n asmlinkage long sys_tkill(pid_t pid, int sig);\n```\n## 获取系统调用号\n```armasm\n arch/arm/kernel/entry-common.S :  保护现场，获取系统调用号\nENTRY(vector_swi)\n addne scno, r7, #__NR_SYSCALL_BASE\t@ put OS number in\n ldr tbl, sys_call_table\n ...\n invoke_syscall tbl, scno, r10, __ret_fast_syscall\n   add  r1, sp, #S_OFF\n 2: cmp  scno, #(__ARM_NR_BASE - \t__NR_SYSCALL_BASE)\n   eor  r0, scno, #__NR_SYSCALL_BASE @ put OS number back\n   bcs  arm_syscall\n   mov  why, #0\t\t @ no longer a real syscall\n   b   sys_ni_syscall\t\t @ not private func\n ...\n 9001:\n  sub lr, saved_pc, #4\n  str lr, [sp, #S_PC]\n  get_thread_info tsk\n  b ret_fast_syscall   回到用户态kill，继续执行用户态代码\nENDPROC(vector_swi)\n\n syscall_table_start sys_call_table\n  #define COMPAT(nr, native, compat) syscall nr, native\n  #ifdef CONFIG_AEABI\n    #include <calls-eabi.S>\n  #else\n    #include <calls-oabi.S>\n  #endif\n  #undef COMPAT\n syscall_table_end sys_call_table\n\n #define NATIVE(nr, func) syscall nr, func\n```\n\n## 系统调用表\n```armasm\narch/arm/include/generated/calls-eabi.S :\n NATIVE(0, sys_restart_syscall)\n NATIVE(1, sys_exit)\n NATIVE(2, sys_fork)\n NATIVE(3, sys_read)\n NATIVE(4, sys_write)\n NATIVE(5, sys_open)\n NATIVE(6, sys_close)\n NATIVE(8, sys_creat)\n NATIVE(9, sys_link)\n NATIVE(10, sys_unlink)\n NATIVE(11, sys_execve)\n NATIVE(12, sys_chdir)\n NATIVE(14, sys_mknod)\n NATIVE(15, sys_chmod)\n NATIVE(16, sys_lchown16)\n NATIVE(19, sys_lseek)\n NATIVE(20, sys_getpid)\n NATIVE(21, sys_mount)\n NATIVE(23, sys_setuid16)\n NATIVE(24, sys_getuid16)\n NATIVE(26, sys_ptrace)\n NATIVE(29, sys_pause)\n NATIVE(33, sys_access)\n NATIVE(34, sys_nice)\n NATIVE(36, sys_sync)\n NATIVE(37, sys_kill)\n NATIVE(38, sys_rename)\n NATIVE(39, sys_mkdir)\n其实就是定义一个函数入口指针  .long sys_kill\n```\n\n\n# 添加一个系统调用\n## 增加内核对应的实现函数\n```powershell\ndiff --git a/arch/arm/kernel/signal.c b/arch/arm/kernel/signal.c\nindex 585edbfcc..544c92bcb 100644\n--- a/arch/arm/kernel/signal.c\n+++ b/arch/arm/kernel/signal.c\n@@ -723,3 +723,17 @@ asmlinkage void do_rseq_syscall(struct pt_regs *regs)\n \trseq_syscall(regs);\n }\n #endif\n+/* add by wit */\n+asmlinkage  void sys_hello(const char __user *buf, size_t count)\n+{\n+    char kernel_buf[100] = {0};\n+    if(buf)\n+    {\n+        copy_from_user(kernel_buf, buf, (count < 100) ? count:100);\n+        printk(\"sys_hello: %s\\n\", kernel_buf);\n+    }\n+}\n+\n+\n+\n```\n\n## 在系统调用表中增加一个系统调用号及入口\n\n```powershell\ndiff --git a/include/linux/syscalls.h b/include/linux/syscalls.h\nindex 37bea07c1..a43e2e0c6 100644\n--- a/include/linux/syscalls.h\n+++ b/include/linux/syscalls.h\n@@ -674,6 +674,9 @@ asmlinkage long sys_sched_rr_get_interval(pid_t pid,\n asmlinkage long sys_sched_rr_get_interval_time32(pid_t pid,\n \t\t\t\t\t\t struct old_timespec32 __user *interval);\n \n+/* add by wit: add a system call: hello */\n+asmlinkage void sys_hello(const char __user *buf, size_t count);\n+\n /* kernel/signal.c */\n asmlinkage long sys_restart_syscall(void);\n asmlinkage long sys_kill(pid_t pid, int sig);\n\n--- a/arch/arm/include/generated/calls-eabi.S\n+++ b/arch/arm/include/generated/calls-eabi.S\n\n+ NATIVE(441, sys_hello)\n```\n\n# 系统调用的开销\n## 主要的开销\n- 中断，软中断也是中断，变态是有代价的，每次切换需刷新 CPU 流水线、TLB 和缓存，现代 CPU 需约 100-1000 时钟周期。\n- 上下文保存与恢复，CPU 需保存用户态寄存器状态（如 PC、SP、EFLAGS）到内核栈，返回时再恢复。容易造成额外的内存访问\n- 抢占系统、任务调度\n- 同步，内核全局资源（如文件系统）可能需加锁，引发争用。\n- IO等待，频繁拷贝（尤其是大块数据）会显著降低性能。\n\n## 解决思路\n- 快速系统调用指令：\nx86 的 syscall（比 int 0x80 快 2-3 倍）。\n\n- 虚拟系统调用：\n  - vdso (Virtual Dynamic Shared Object)：\n    将部分调用（如 gettimeofday()）映射到用户态，无需切换。\n  - vsyscall（Virtual System Call）\n    内核将部分系统调用的代码映射到固定的用户空间地址（如 0xffffffffff600000）。用户程序直接跳转到该地址执行，无需切换特权级。\n\n\n### vsyscall\n```powershell\n$ cat /proc/self/maps\n5611f7bb1000-5611f7bb3000 r--p 00000000 08:05 1704088                    /usr/bin/cat\n5611f7bb3000-5611f7bb8000 r-xp 00002000 08:05 1704088                    /usr/bin/cat\n5611f7bb8000-5611f7bbb000 r--p 00007000 08:05 1704088                    /usr/bin/cat\n5611f7bbb000-5611f7bbc000 r--p 00009000 08:05 1704088                    /usr/bin/cat\n5611f7bbc000-5611f7bbd000 rw-p 0000a000 08:05 1704088                    /usr/bin/cat\n56123188b000-5612318ac000 rw-p 00000000 00:00 0                          [heap]\n7f7dec15b000-7f7dec17d000 rw-p 00000000 00:00 0 \n7f7dec17d000-7f7dec9ee000 r--p 00000000 08:05 1704009                    /usr/lib/locale/locale-archive\n7f7dec9ee000-7f7deca10000 r--p 00000000 08:05 1706133                    /usr/lib/x86_64-linux-gnu/libc-2.31.so\n7f7deca10000-7f7decb88000 r-xp 00022000 08:05 1706133                    /usr/lib/x86_64-linux-gnu/libc-2.31.so\n7f7decb88000-7f7decbd6000 r--p 0019a000 08:05 1706133                    /usr/lib/x86_64-linux-gnu/libc-2.31.so\n7f7decbd6000-7f7decbda000 r--p 001e7000 08:05 1706133                    /usr/lib/x86_64-linux-gnu/libc-2.31.so\n7f7decbda000-7f7decbdc000 rw-p 001eb000 08:05 1706133                    /usr/lib/x86_64-linux-gnu/libc-2.31.so\n7f7decbdc000-7f7decbe2000 rw-p 00000000 00:00 0 \n7f7decbf5000-7f7decbf6000 r--p 00000000 08:05 1706106                    /usr/lib/x86_64-linux-gnu/ld-2.31.so\n7f7decbf6000-7f7decc19000 r-xp 00001000 08:05 1706106                    /usr/lib/x86_64-linux-gnu/ld-2.31.so\n7f7decc19000-7f7decc21000 r--p 00024000 08:05 1706106                    /usr/lib/x86_64-linux-gnu/ld-2.31.so\n7f7decc22000-7f7decc23000 r--p 0002c000 08:05 1706106                    /usr/lib/x86_64-linux-gnu/ld-2.31.so\n7f7decc23000-7f7decc24000 rw-p 0002d000 08:05 1706106                    /usr/lib/x86_64-linux-gnu/ld-2.31.so\n7f7decc24000-7f7decc25000 rw-p 00000000 00:00 0 \n7ffc30544000-7ffc30565000 rw-p 00000000 00:00 0                          [stack]\n7ffc305d7000-7ffc305db000 r--p 00000000 00:00 0                          [vvar]\n7ffc305db000-7ffc305dd000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]\n\n```\n可以看到程序段映射中有vsyscall段，这里保存了一些固定的系统调用。\n\n**尽管 vsyscall 机制已被弃用，但 Linux 内核仍然在内存映射中保留**\nffffffffff600000-ffffffffff601000 这个区域（标记为 [vsyscall]）\n\n### VDSO\n\n---\n\n## **3. 对比 `vsyscall` 和 `vDSO`**\n| **特性**         | **`vsyscall`**                | **`vDSO`**                     |\n|------------------|-------------------------------|--------------------------------|\n| **地址分配**     | 固定 (`0xffffffffff600000`)   | 动态加载（ASLR 支持）          |\n| **安全性**       | 低（固定地址易受攻击）        | 高（随机化地址）               |\n| **内核支持**     | 旧版机制，已废弃              | 现代默认机制                   |\n| **性能**         | 模拟执行（较慢）              | 直接用户态执行（最快）         |\n| **调用方式**     | 硬编码地址                    | 通过 `glibc` 或 `dlopen` 调用  |\n\n---\n\n在内存映射中，可以看道vdso这个段，这个地址是随机的\n\n源码在内核中实现\n- arch/arm/kernel/vdso.c\n- 关键函数:vdso_mremap、install_vvar\n  - 速度最快\n  - 开销最小,基本等价于函数调用开销\n\n\n# 一切皆文件的哲学\n**“一切皆文件”是 Linux 对系统资源的高度抽象，通过文件接口屏蔽底层差异，提供了简洁、一致的操作方式。**、\n这种设计降低了系统复杂性，使得工具、脚本和应用程序能够以统一模式处理多样化资源，是 Linux 强大灵活性的重要基石。\n\n简单来说，在Linux操作系统中，所有的资源（包括普通文件（文本、二进制文件等）、目录、设备（如磁盘、键盘）、进程信息、网络套接字、管道等）都被抽象为了文件。\n\n在用户层面上，我们可以通过对对应的文件进行操作，进而完成对这些资源的操作。\n\n这样做最明显的好处是，开发者仅需要使用一套 API 和开发工具，即可调取 Linux 系统中绝大部分的资源。\n\n举个简单的例子，Linux 中几乎所有读（读文件，读系统状态，读PIPE）的操作都可以用read 函数来进行；几乎所有更改（更改文件，更改系统参数，写 PIPE）的操作都可以用 write 函数来进行。\n\n每一种设备都有用于描述自身的读写方法与属性等(在对应的数据结构中)，将这些方法的地址赋值给对应的函数，将属性抽象成文件的内容，就可以用访问文件的方式来访问这些资源。\n\n虽然在访问这些设备时所调用的函数都是文件的 read 和 write 等，但实际上调用的却是对应设备的读写函数。\n\n按照面向对象语言的视角来理解就是：struct file 是一个抽象类，而各种设备继承自 struct file 并各自实现了读写等方法。在较高的层次就可以将这些设备都看作文件来处理。\n\n\n![一切皆文件](https://image.aruoshui.fun/i/2025/04/15/vpxf4e-0.webp)\n\n\n## 硬件识别机制\n在Linux当中的`/dev`目录下可以看到存在许多文件;\n```powershell\n$ ls /dev\nAliSecGuard      initctl           \nautofs           input              \nblock            kmsg               \nbtrfs-control    log                \nbus              loop-control       \nchar             mapper              \nconsole          mcelog              \n\n```\n\n而这些文件被称为设备文件;\n同时这些设备文件代表着系统当中的各种硬件设备,它们将为用户的程序提供一个接口;\n用户可以通过这些口从而间接的调用硬件;\n\n**驱动程序等后续会说到**\n\n- 驱动程序负责管理和控制硬件,而驱动程序本身也是被OS进行管理的;\n- 设备文件本身也是为用户提供一个与用户与驱动交互的接口;\n- 而驱动程序则为为设备文件提供的一个与硬件交互的一个接口;\n- 这些抽象的接口本身对于OS来说是不知情的;\n- OS只知道在调用对应的硬件时只需要去调用对应的设备文件即可;这样就把硬件设备抽象成执行文件了\n","slug":"linxu-kernel-syscall","published":1,"updated":"2025-04-15T11:31:59.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io1001kmkttcjn87pld","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"『 Linux 』“ 一切皆文件 “\" href=\"https://blog.csdn.net/2202_75303754/article/details/138967355\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">『 Linux 』“ 一切皆文件 “</p><p class=\"url\">https://blog.csdn.net/2202_75303754/article/details/138967355</p></div></a></div> \n<h1>系统调用的基本概念</h1>\n<p>在linux中，操作系统负责硬件资源的封装，任务的创建、调度、读写磁盘</p>\n<ul>\n<li>μc/os中，采用OSinit-OSTaskCreate-创建一个任务</li>\n<li>Linux中，拥有权限管理来保证安全，划分内核态和用户态。通过系统调用，让APP某些运行陷入到内核态，以此来访问硬件设备</li>\n</ul>\n<h1>软中断</h1>\n<h2 id=\"权限管理\">权限管理</h2>\n<ul>\n<li>程序的用户态、内核态</li>\n<li>操作系统+ CPU软中断：swi/svc</li>\n<li>CPU的运行级别：普通权限(普通运行)、特权（陷入到内核态）\n<ul>\n<li>ARM32：\n<ul>\n<li>普通模式：User</li>\n<li>特权模式：FIQ、IRQ、SVC、ABT、UND</li>\n</ul>\n</li>\n<li>ARM64：EL0、EL1、EL2、EL3</li>\n<li>X86：ring0 ~ ring</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"系统调用号\">系统调用号</h2>\n<ul>\n<li>ARM：swi、svc</li>\n<li>ARM : swi、svc\n<ul>\n<li>系统调用接口：read、write、printf</li>\n<li>内核中的实现：sys_read、sys_write</li>\n<li>系统调用号：\n<ul>\n<li>32位ARM：3、4</li>\n<li>64位ARM：0、1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据传递\">数据传递</h2>\n<ul>\n<li>软中断指令：– X86 int 80H – ARM swisvc</li>\n<li>用户函数的参数传递\n<ul>\n<li>ARM：R0、R1、R2、R3、R4、R5、R6</li>\n<li>ARM64：X1、X2、X3、X4、X5</li>\n</ul>\n</li>\n<li>系统调用号– ARM：R7 – ARM64：X8</li>\n<li>内核函数的返回值– ARM：R0– ARM64：X</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Arch/ABI    Instruction           System  Ret  Ret  Error    Notes</span><br><span class=\"line\"></span><br><span class=\"line\">                                   call <span class=\"comment\">#  val  val2</span></span><br><span class=\"line\"> ───────────────────────────────────────────────────────────────────</span><br><span class=\"line\"> alpha       callsys               v0      v0   a4   a3       <span class=\"number\">1</span>, <span class=\"number\">6</span></span><br><span class=\"line\"> arc         trap0                 r8      r0   -    -</span><br><span class=\"line\"> arm/OABI    swi NR                -       a1   -    -        <span class=\"number\">2</span></span><br><span class=\"line\"> arm/EABI    swi <span class=\"number\">0</span>x0               r7      r0   r1   -</span><br><span class=\"line\"> arm64       svc <span class=\"comment\">#0                x8      x0   x1   -</span></span><br><span class=\"line\"> blackfin    excpt <span class=\"number\">0</span>x0             P0      R0   -    -</span><br><span class=\"line\"> i386        int <span class=\"variable\">$0x80</span>             eax     eax  edx  -</span><br><span class=\"line\"> ia64        <span class=\"keyword\">break</span> <span class=\"number\">0</span>x100000        r15     r8   r9   r10      <span class=\"number\">1</span>, <span class=\"number\">6</span></span><br><span class=\"line\"> m68k        <span class=\"keyword\">trap</span> <span class=\"comment\">#0               d0      d0   -    -</span></span><br><span class=\"line\"> microblaze  brki r14,<span class=\"number\">8</span>            r12     r3   -    -</span><br><span class=\"line\"> mips        syscall               v0      v0   v1   a3       <span class=\"number\">1</span>, <span class=\"number\">6</span></span><br><span class=\"line\"> nios2       <span class=\"keyword\">trap</span>                  r2      r2   -    r7</span><br><span class=\"line\"> parisc      ble <span class=\"number\">0</span>x100(%sr2, %r0)  r20     r28  -    -</span><br><span class=\"line\"> powerpc     <span class=\"built_in\">sc</span>                    r0      r3   -    r0       <span class=\"number\">1</span></span><br><span class=\"line\"> powerpc64   <span class=\"built_in\">sc</span>                    r0      r3   -    cr0.SO   <span class=\"number\">1</span></span><br><span class=\"line\"> riscv       ecall                 a7      a0   a1   -</span><br><span class=\"line\"> s390        svc <span class=\"number\">0</span>                 r1      r2   r3   -        <span class=\"number\">3</span></span><br><span class=\"line\"> s390x       svc <span class=\"number\">0</span>                 r1      r2   r3   -        <span class=\"number\">3</span></span><br><span class=\"line\"> superh      <span class=\"keyword\">trap</span> <span class=\"comment\">#0x17            r3      r0   r1   -        4, 6</span></span><br><span class=\"line\"> sparc/<span class=\"number\">32</span>    t <span class=\"number\">0</span>x10                g1      o0   o1   psr/csr  <span class=\"number\">1</span>, <span class=\"number\">6</span></span><br><span class=\"line\"> sparc/<span class=\"number\">64</span>    t <span class=\"number\">0</span>x6d                g1      o0   o1   psr/csr  <span class=\"number\">1</span>, <span class=\"number\">6</span></span><br><span class=\"line\"> tile        swint1                R10     R00  -    R01      <span class=\"number\">1</span></span><br><span class=\"line\"> x86<span class=\"literal\">-64</span>      syscall               rax     rax  rdx  -        <span class=\"number\">5</span></span><br><span class=\"line\"> x32         syscall               rax     rax  rdx  -        <span class=\"number\">5</span></span><br><span class=\"line\"> xtensa      syscall               a2      a2   -    -</span><br></pre></td></tr></table></figure>\n<p>ARM汇编系统调用：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"symbol\">.global</span> _start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">_start:</span></span><br><span class=\"line\">    <span class=\"keyword\">mov</span> <span class=\"built_in\">r0</span>, <span class=\"number\">#1</span>              <span class=\"comment\">/* stdout*/</span></span><br><span class=\"line\">    <span class=\"keyword\">add</span> <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span>, <span class=\"number\">#16</span>         <span class=\"comment\">/* address of the string*/</span></span><br><span class=\"line\">    <span class=\"keyword\">mov</span> <span class=\"built_in\">r2</span>, <span class=\"number\">#12</span>            <span class=\"comment\">/* string length*/</span></span><br><span class=\"line\">    <span class=\"keyword\">mov</span> <span class=\"built_in\">r7</span>, <span class=\"number\">#4</span>             <span class=\"comment\">/*syscall for &#x27;write&#x27;*/</span></span><br><span class=\"line\">    <span class=\"keyword\">swi</span> <span class=\"number\">#0</span>                  <span class=\"comment\">/* software interrupt*/</span>  软中断调用sys_write来实现字符串的打印</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">_exit:</span></span><br><span class=\"line\">    <span class=\"keyword\">mov</span> <span class=\"built_in\">r7</span>, <span class=\"number\">#1</span>             <span class=\"comment\">/* syscall for &#x27;exit&#x27;*/</span></span><br><span class=\"line\">    <span class=\"keyword\">swi</span> <span class=\"number\">#0</span>                 <span class=\"comment\">/* software interrupt*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">_string:</span></span><br><span class=\"line\"><span class=\"symbol\">.asciz</span> <span class=\"string\">&quot;Hello world\\n&quot;</span>          <span class=\"comment\">@ our string, NULL terminated</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"系统调用接口的封装\">系统调用接口的封装</h2>\n<p>写这些汇编非常麻烦，好在：</p>\n<ul>\n<li>C标准库包含一系列系统调用接口的封装– read、write、fork、open…</li>\n</ul>\n<h3 id=\"syscall系统调用接口的封装\">syscall系统调用接口的封装</h3>\n<p>对于在C标准库中没有封装的系统调用</p>\n<ul>\n<li>syscall是一个库函数：<code>long syscall(long number, ...);</code>，如果想使用syscall来实现write系统调用，直接<code>syscall(1, 1, &quot;helloworld\\n&quot;, 12)</code>就行</li>\n<li>封装了系统调用的汇编接口– 系统调用前保存CPU寄存器– 从系统调用返回后，恢复寄存器</li>\n</ul>\n<p>syscall的汇编实现：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">000</span>dad70 &lt;syscall<span class=\"comment\">@@GLIBC_2.4&gt;:</span></span><br><span class=\"line\"><span class=\"symbol\">   dad70:</span>\te1a0c00d \t<span class=\"keyword\">mov</span>\t<span class=\"built_in\">ip</span>, <span class=\"built_in\">sp</span></span><br><span class=\"line\"><span class=\"symbol\">   dad74:</span>\te92d00f0 \t<span class=\"keyword\">push</span>\t&#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r6</span>, <span class=\"built_in\">r7</span>&#125;</span><br><span class=\"line\"><span class=\"symbol\">   dad78:</span>\te1a07000 \t<span class=\"keyword\">mov</span>\t<span class=\"built_in\">r7</span>, <span class=\"built_in\">r0</span></span><br><span class=\"line\"><span class=\"symbol\">   dad7c:</span>\te1a00001 \t<span class=\"keyword\">mov</span>\t<span class=\"built_in\">r0</span>, <span class=\"built_in\">r1</span></span><br><span class=\"line\"><span class=\"symbol\">   dad80:</span>\te1a01002 \t<span class=\"keyword\">mov</span>\t<span class=\"built_in\">r1</span>, <span class=\"built_in\">r2</span></span><br><span class=\"line\"><span class=\"symbol\">   dad84:</span>\te1a02003 \t<span class=\"keyword\">mov</span>\t<span class=\"built_in\">r2</span>, <span class=\"built_in\">r3</span></span><br><span class=\"line\"><span class=\"symbol\">   dad88:</span>\te89c0078 \t<span class=\"keyword\">ldm</span>\t<span class=\"built_in\">ip</span>, &#123;<span class=\"built_in\">r3</span>, <span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r6</span>&#125;</span><br><span class=\"line\"><span class=\"symbol\">   dad8c:</span>\tef000000 \t<span class=\"keyword\">svc</span>\t<span class=\"number\">0x00000000</span></span><br><span class=\"line\"><span class=\"symbol\">   dad90:</span>\te8bd00f0 \t<span class=\"keyword\">pop</span>\t&#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r6</span>, <span class=\"built_in\">r7</span>&#125;</span><br><span class=\"line\"><span class=\"symbol\">   dad94:</span>\te3700a01 \t<span class=\"keyword\">cmn</span>\t<span class=\"built_in\">r0</span>, <span class=\"number\">#4096</span>\t<span class=\"comment\">; 0x1000</span></span><br><span class=\"line\"><span class=\"symbol\">   dad98:</span>\t<span class=\"number\">312</span>fff1e \t<span class=\"keyword\">bxcc</span>\t<span class=\"built_in\">lr</span></span><br><span class=\"line\"><span class=\"symbol\">   dad9c:</span>\teafcf2c3 \t<span class=\"keyword\">b</span>\t<span class=\"number\">178</span>b0 &lt;__libc_start_main<span class=\"comment\">@@GLIBC_2.4+0x278&gt;</span></span><br></pre></td></tr></table></figure>\n<h1>系统调用流程分析</h1>\n<p>以kill这个系统调用来分析：</p>\n<ol>\n<li>接口封装: /usr/arm-linux-gnueabi/lib/libc.a</li>\n<li>系统调用号: arch/arm/include/generated/calls-eabi.S 这里定义了一个系统调用表，将系统调用号和指针对应起来，用户使用系统调用就能根据此表找到函数指针，从而跳转过去运行</li>\n<li>内核实现: kernel/signal.c 不同系统调用实现分布在不同的内核部分</li>\n<li>中断处理: arch/arm/kernel/entry-common.S  软中断</li>\n</ol>\n<p><strong>实现过程就是根据系统调用号，从系统调用表中找到对应的入口函数指针，跳转执行，中间包含各种软中断的管理操作</strong></p>\n<h2 id=\"系统调用号：\">系统调用号：</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">arch/arm/include/generated/uapi/<span class=\"keyword\">asm</span>/unistd-common.h</span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"keyword\">define</span> __NR_kill (__NR_SYSCALL_BASE + 37)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"x系统调用实现：\">x系统调用实现：</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"> kernel/signal.c :</span><br><span class=\"line\"> SYSCALL_DEFINE2(kill, <span class=\"type\">pid_t</span>, pid, <span class=\"type\">int</span>, sig)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kernel_siginfo</span> <span class=\"title\">info</span>;</span></span><br><span class=\"line\">    prepare_kill_siginfo(sig, &amp;info);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kill_something_info(sig, &amp;info, pid);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">展开后相当于：</span><br><span class=\"line\">asmlinkage <span class=\"type\">long</span> <span class=\"title function_\">sys_kill</span><span class=\"params\">(<span class=\"type\">pid_t</span> pid, <span class=\"type\">int</span> sig)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"系统调用函数实现：\">系统调用函数实现：</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"> include/linux/syscalls.h</span><br><span class=\"line\"> asmlinkage:GCC扩展，表示读取的参数来自栈中，而非寄存器</span><br><span class=\"line\"><span class=\"comment\">/* kernel/signal.c */</span></span><br><span class=\"line\"> asmlinkage <span class=\"type\">long</span> <span class=\"title function_\">sys_restart_syscall</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"> asmlinkage <span class=\"type\">long</span> <span class=\"title function_\">sys_kill</span><span class=\"params\">(<span class=\"type\">pid_t</span> pid, <span class=\"type\">int</span> sig)</span>;</span><br><span class=\"line\"> asmlinkage <span class=\"type\">long</span> <span class=\"title function_\">sys_tkill</span><span class=\"params\">(<span class=\"type\">pid_t</span> pid, <span class=\"type\">int</span> sig)</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取系统调用号\">获取系统调用号</h2>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"> arch/<span class=\"meta\">arm</span>/kernel/<span class=\"meta\">entry</span>-<span class=\"meta\">common</span>.S :  保护现场，获取系统调用号</span><br><span class=\"line\"><span class=\"symbol\">ENTRY</span>(vector_swi)</span><br><span class=\"line\"> <span class=\"keyword\">addne</span> scno, <span class=\"built_in\">r7</span>, <span class=\"symbol\">#__NR_SYSCALL_BASE</span>\t<span class=\"comment\">@ put OS number in</span></span><br><span class=\"line\"> <span class=\"keyword\">ldr</span> tbl, sys_call_table</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> invoke_syscall tbl, scno, <span class=\"built_in\">r10</span>, __ret_fast_syscall</span><br><span class=\"line\">   <span class=\"keyword\">add</span>  <span class=\"built_in\">r1</span>, <span class=\"built_in\">sp</span>, <span class=\"symbol\">#S_OFF</span></span><br><span class=\"line\"> <span class=\"number\">2</span>: <span class=\"keyword\">cmp</span>  scno, #(__ARM_NR_BASE - \t__NR_SYSCALL_BASE)</span><br><span class=\"line\">   <span class=\"keyword\">eor</span>  <span class=\"built_in\">r0</span>, scno, <span class=\"symbol\">#__NR_SYSCALL_BASE</span> <span class=\"comment\">@ put OS number back</span></span><br><span class=\"line\">   <span class=\"keyword\">bcs</span>  arm_syscall</span><br><span class=\"line\">   <span class=\"keyword\">mov</span>  why, <span class=\"number\">#0</span>\t\t <span class=\"comment\">@ no longer a real syscall</span></span><br><span class=\"line\">   <span class=\"keyword\">b</span>   sys_ni_syscall\t\t <span class=\"comment\">@ not private func</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\"> <span class=\"number\">9001</span>:</span><br><span class=\"line\">  <span class=\"keyword\">sub</span> <span class=\"built_in\">lr</span>, saved_pc, <span class=\"number\">#4</span></span><br><span class=\"line\">  <span class=\"keyword\">str</span> <span class=\"built_in\">lr</span>, [<span class=\"built_in\">sp</span>, <span class=\"symbol\">#S_PC</span>]</span><br><span class=\"line\">  get_thread_info tsk</span><br><span class=\"line\">  <span class=\"keyword\">b</span> ret_fast_syscall   回到用户态kill，继续执行用户态代码</span><br><span class=\"line\"><span class=\"symbol\">ENDPROC</span>(vector_swi)</span><br><span class=\"line\"></span><br><span class=\"line\"> syscall_table_start sys_call_table</span><br><span class=\"line\">  <span class=\"comment\">#define COMPAT(nr, native, compat) syscall nr, native</span></span><br><span class=\"line\">  <span class=\"comment\">#ifdef CONFIG_AEABI</span></span><br><span class=\"line\">    <span class=\"comment\">#include &lt;calls-eabi.S&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">#else</span></span><br><span class=\"line\">    <span class=\"comment\">#include &lt;calls-oabi.S&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">#endif</span></span><br><span class=\"line\">  <span class=\"comment\">#undef COMPAT</span></span><br><span class=\"line\"> syscall_table_end sys_call_table</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#define NATIVE(nr, func) syscall nr, func</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"系统调用表\">系统调用表</h2>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">arch</span>/<span class=\"meta\">arm</span>/<span class=\"meta\">include</span>/generated/calls-eabi.S :</span><br><span class=\"line\"> NATIVE(<span class=\"number\">0</span>, sys_restart_syscall)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">1</span>, sys_exit)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">2</span>, sys_fork)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">3</span>, sys_read)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">4</span>, sys_write)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">5</span>, sys_open)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">6</span>, sys_close)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">8</span>, sys_creat)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">9</span>, sys_link)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">10</span>, sys_unlink)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">11</span>, sys_execve)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">12</span>, sys_chdir)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">14</span>, sys_mknod)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">15</span>, sys_chmod)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">16</span>, sys_lchown16)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">19</span>, sys_lseek)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">20</span>, sys_getpid)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">21</span>, sys_mount)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">23</span>, sys_setuid16)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">24</span>, sys_getuid16)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">26</span>, sys_ptrace)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">29</span>, sys_pause)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">33</span>, sys_access)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">34</span>, sys_nice)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">36</span>, sys_sync)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">37</span>, sys_kill)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">38</span>, sys_rename)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">39</span>, sys_mkdir)</span><br><span class=\"line\">其实就是定义一个函数入口指针  <span class=\"meta\">.long</span> sys_kill</span><br></pre></td></tr></table></figure>\n<h1>添加一个系统调用</h1>\n<h2 id=\"增加内核对应的实现函数\">增加内核对应的实现函数</h2>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">diff</span> <span class=\"literal\">--git</span> a/arch/arm/kernel/signal.c b/arch/arm/kernel/signal.c</span><br><span class=\"line\">index <span class=\"number\">585</span>edbfcc..<span class=\"number\">544</span>c92bcb <span class=\"number\">100644</span></span><br><span class=\"line\"><span class=\"literal\">---</span> a/arch/arm/kernel/signal.c</span><br><span class=\"line\">+++ b/arch/arm/kernel/signal.c</span><br><span class=\"line\"><span class=\"selector-tag\">@</span><span class=\"selector-tag\">@</span> <span class=\"literal\">-723</span>,<span class=\"number\">3</span> +<span class=\"number\">723</span>,<span class=\"number\">17</span> <span class=\"selector-tag\">@</span><span class=\"selector-tag\">@</span> asmlinkage void do_rseq_syscall(struct pt_regs *regs)</span><br><span class=\"line\"> \trseq_syscall(regs);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">#endif</span></span><br><span class=\"line\">+/* add by wit */</span><br><span class=\"line\">+asmlinkage  void sys_hello(const char __user *buf, size_t count)</span><br><span class=\"line\">+&#123;</span><br><span class=\"line\">+    char kernel_buf[<span class=\"number\">100</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span>(buf)</span><br><span class=\"line\">+    &#123;</span><br><span class=\"line\">+        copy_from_user(kernel_buf, buf, (count &lt; <span class=\"number\">100</span>) ? count:<span class=\"number\">100</span>);</span><br><span class=\"line\">+        printk(<span class=\"string\">&quot;sys_hello: %s\\n&quot;</span>, kernel_buf);</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+</span><br><span class=\"line\">+</span><br></pre></td></tr></table></figure>\n<h2 id=\"在系统调用表中增加一个系统调用号及入口\">在系统调用表中增加一个系统调用号及入口</h2>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">diff</span> <span class=\"literal\">--git</span> a/include/linux/syscalls.h b/include/linux/syscalls.h</span><br><span class=\"line\">index <span class=\"number\">37</span>bea07c1..a43e2e0c6 <span class=\"number\">100644</span></span><br><span class=\"line\"><span class=\"literal\">---</span> a/include/linux/syscalls.h</span><br><span class=\"line\">+++ b/include/linux/syscalls.h</span><br><span class=\"line\"><span class=\"selector-tag\">@</span><span class=\"selector-tag\">@</span> <span class=\"literal\">-674</span>,<span class=\"number\">6</span> +<span class=\"number\">674</span>,<span class=\"number\">9</span> <span class=\"selector-tag\">@</span><span class=\"selector-tag\">@</span> asmlinkage long sys_sched_rr_get_interval(pid_t pid,</span><br><span class=\"line\"> asmlinkage long sys_sched_rr_get_interval_time32(pid_t pid,</span><br><span class=\"line\"> \t\t\t\t\t\t struct old_timespec32 __user *interval);</span><br><span class=\"line\"> </span><br><span class=\"line\">+/* add by wit: add a system call: hello */</span><br><span class=\"line\">+asmlinkage void sys_hello(const char __user *buf, size_t count);</span><br><span class=\"line\">+</span><br><span class=\"line\"> /* kernel/signal.c */</span><br><span class=\"line\"> asmlinkage long sys_restart_syscall(void);</span><br><span class=\"line\"> asmlinkage long sys_kill(pid_t pid, int sig);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">---</span> a/arch/arm/include/generated/calls<span class=\"literal\">-eabi</span>.S</span><br><span class=\"line\">+++ b/arch/arm/include/generated/calls<span class=\"literal\">-eabi</span>.S</span><br><span class=\"line\"></span><br><span class=\"line\">+ NATIVE(<span class=\"number\">441</span>, sys_hello)</span><br></pre></td></tr></table></figure>\n<h1>系统调用的开销</h1>\n<h2 id=\"主要的开销\">主要的开销</h2>\n<ul>\n<li>中断，软中断也是中断，变态是有代价的，每次切换需刷新 CPU 流水线、TLB 和缓存，现代 CPU 需约 100-1000 时钟周期。</li>\n<li>上下文保存与恢复，CPU 需保存用户态寄存器状态（如 PC、SP、EFLAGS）到内核栈，返回时再恢复。容易造成额外的内存访问</li>\n<li>抢占系统、任务调度</li>\n<li>同步，内核全局资源（如文件系统）可能需加锁，引发争用。</li>\n<li>IO等待，频繁拷贝（尤其是大块数据）会显著降低性能。</li>\n</ul>\n<h2 id=\"解决思路\">解决思路</h2>\n<ul>\n<li>\n<p>快速系统调用指令：<br>\nx86 的 syscall（比 int 0x80 快 2-3 倍）。</p>\n</li>\n<li>\n<p>虚拟系统调用：</p>\n<ul>\n<li>vdso (Virtual Dynamic Shared Object)：<br>\n将部分调用（如 gettimeofday()）映射到用户态，无需切换。</li>\n<li>vsyscall（Virtual System Call）<br>\n内核将部分系统调用的代码映射到固定的用户空间地址（如 0xffffffffff600000）。用户程序直接跳转到该地址执行，无需切换特权级。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vsyscall\">vsyscall</h3>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">cat</span> /proc/self/maps</span><br><span class=\"line\"><span class=\"number\">5611</span>f7bb1000<span class=\"literal\">-5611f7bb3000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00000000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1704088</span>                    /usr/bin/<span class=\"built_in\">cat</span></span><br><span class=\"line\"><span class=\"number\">5611</span>f7bb3000<span class=\"literal\">-5611f7bb8000</span> <span class=\"built_in\">r</span><span class=\"literal\">-xp</span> <span class=\"number\">00002000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1704088</span>                    /usr/bin/<span class=\"built_in\">cat</span></span><br><span class=\"line\"><span class=\"number\">5611</span>f7bb8000<span class=\"literal\">-5611f7bbb000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00007000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1704088</span>                    /usr/bin/<span class=\"built_in\">cat</span></span><br><span class=\"line\"><span class=\"number\">5611</span>f7bbb000<span class=\"literal\">-5611f7bbc000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00009000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1704088</span>                    /usr/bin/<span class=\"built_in\">cat</span></span><br><span class=\"line\"><span class=\"number\">5611</span>f7bbc000<span class=\"literal\">-5611f7bbd000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">0000</span>a000 <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1704088</span>                    /usr/bin/<span class=\"built_in\">cat</span></span><br><span class=\"line\"><span class=\"number\">56123188</span>b000<span class=\"literal\">-5612318ac000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span>                          [<span class=\"type\">heap</span>]</span><br><span class=\"line\"><span class=\"number\">7</span>f7dec15b000<span class=\"literal\">-7f7dec17d000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"number\">7</span>f7dec17d000<span class=\"literal\">-7f7dec9ee000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00000000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1704009</span>                    /usr/lib/locale/locale<span class=\"literal\">-archive</span></span><br><span class=\"line\"><span class=\"number\">7</span>f7dec9ee000<span class=\"literal\">-7f7deca10000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00000000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706133</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/libc<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7deca10000<span class=\"literal\">-7f7decb88000</span> <span class=\"built_in\">r</span><span class=\"literal\">-xp</span> <span class=\"number\">00022000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706133</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/libc<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decb88000<span class=\"literal\">-7f7decbd6000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">0019</span>a000 <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706133</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/libc<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decbd6000<span class=\"literal\">-7f7decbda000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">001</span>e7000 <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706133</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/libc<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decbda000<span class=\"literal\">-7f7decbdc000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">001</span>eb000 <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706133</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/libc<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decbdc000<span class=\"literal\">-7f7decbe2000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"number\">7</span>f7decbf5000<span class=\"literal\">-7f7decbf6000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00000000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706106</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/ld<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decbf6000<span class=\"literal\">-7f7decc19000</span> <span class=\"built_in\">r</span><span class=\"literal\">-xp</span> <span class=\"number\">00001000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706106</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/ld<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decc19000<span class=\"literal\">-7f7decc21000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00024000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706106</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/ld<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decc22000<span class=\"literal\">-7f7decc23000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">0002</span>c000 <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706106</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/ld<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decc23000<span class=\"literal\">-7f7decc24000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">0002</span>d000 <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706106</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/ld<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decc24000<span class=\"literal\">-7f7decc25000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"number\">7</span>ffc30544000<span class=\"literal\">-7ffc30565000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span>                          [<span class=\"type\">stack</span>]</span><br><span class=\"line\"><span class=\"number\">7</span>ffc305d7000<span class=\"literal\">-7ffc305db000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span>                          [<span class=\"type\">vvar</span>]</span><br><span class=\"line\"><span class=\"number\">7</span>ffc305db000<span class=\"literal\">-7ffc305dd000</span> <span class=\"built_in\">r</span><span class=\"literal\">-xp</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span>                          [<span class=\"type\">vdso</span>]</span><br><span class=\"line\">ffffffffff600000<span class=\"literal\">-ffffffffff601000</span> <span class=\"literal\">--xp</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span>                  [<span class=\"type\">vsyscall</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可以看到程序段映射中有vsyscall段，这里保存了一些固定的系统调用。</p>\n<p><strong>尽管 vsyscall 机制已被弃用，但 Linux 内核仍然在内存映射中保留</strong><br>\nffffffffff600000-ffffffffff601000 这个区域（标记为 [vsyscall]）</p>\n<h3 id=\"VDSO\">VDSO</h3>\n<hr>\n<h2 id=\"3-对比-vsyscall-和-vDSO\"><strong>3. 对比 <code>vsyscall</code> 和 <code>vDSO</code></strong></h2>\n<table>\n<thead>\n<tr>\n<th><strong>特性</strong></th>\n<th><strong><code>vsyscall</code></strong></th>\n<th><strong><code>vDSO</code></strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>地址分配</strong></td>\n<td>固定 (<code>0xffffffffff600000</code>)</td>\n<td>动态加载（ASLR 支持）</td>\n</tr>\n<tr>\n<td><strong>安全性</strong></td>\n<td>低（固定地址易受攻击）</td>\n<td>高（随机化地址）</td>\n</tr>\n<tr>\n<td><strong>内核支持</strong></td>\n<td>旧版机制，已废弃</td>\n<td>现代默认机制</td>\n</tr>\n<tr>\n<td><strong>性能</strong></td>\n<td>模拟执行（较慢）</td>\n<td>直接用户态执行（最快）</td>\n</tr>\n<tr>\n<td><strong>调用方式</strong></td>\n<td>硬编码地址</td>\n<td>通过 <code>glibc</code> 或 <code>dlopen</code> 调用</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>在内存映射中，可以看道vdso这个段，这个地址是随机的</p>\n<p>源码在内核中实现</p>\n<ul>\n<li>arch/arm/kernel/vdso.c</li>\n<li>关键函数:vdso_mremap、install_vvar\n<ul>\n<li>速度最快</li>\n<li>开销最小,基本等价于函数调用开销</li>\n</ul>\n</li>\n</ul>\n<h1>一切皆文件的哲学</h1>\n<p><strong>“一切皆文件”是 Linux 对系统资源的高度抽象，通过文件接口屏蔽底层差异，提供了简洁、一致的操作方式。</strong>、<br>\n这种设计降低了系统复杂性，使得工具、脚本和应用程序能够以统一模式处理多样化资源，是 Linux 强大灵活性的重要基石。</p>\n<p>简单来说，在Linux操作系统中，所有的资源（包括普通文件（文本、二进制文件等）、目录、设备（如磁盘、键盘）、进程信息、网络套接字、管道等）都被抽象为了文件。</p>\n<p>在用户层面上，我们可以通过对对应的文件进行操作，进而完成对这些资源的操作。</p>\n<p>这样做最明显的好处是，开发者仅需要使用一套 API 和开发工具，即可调取 Linux 系统中绝大部分的资源。</p>\n<p>举个简单的例子，Linux 中几乎所有读（读文件，读系统状态，读PIPE）的操作都可以用read 函数来进行；几乎所有更改（更改文件，更改系统参数，写 PIPE）的操作都可以用 write 函数来进行。</p>\n<p>每一种设备都有用于描述自身的读写方法与属性等(在对应的数据结构中)，将这些方法的地址赋值给对应的函数，将属性抽象成文件的内容，就可以用访问文件的方式来访问这些资源。</p>\n<p>虽然在访问这些设备时所调用的函数都是文件的 read 和 write 等，但实际上调用的却是对应设备的读写函数。</p>\n<p>按照面向对象语言的视角来理解就是：struct file 是一个抽象类，而各种设备继承自 struct file 并各自实现了读写等方法。在较高的层次就可以将这些设备都看作文件来处理。</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/04/15/vpxf4e-0.webp\" alt=\"一切皆文件\"></p>\n<h2 id=\"硬件识别机制\">硬件识别机制</h2>\n<p>在Linux当中的<code>/dev</code>目录下可以看到存在许多文件;</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">ls</span> /dev</span><br><span class=\"line\">AliSecGuard      initctl           </span><br><span class=\"line\">autofs           input              </span><br><span class=\"line\">block            kmsg               </span><br><span class=\"line\">btrfs<span class=\"literal\">-control</span>    log                </span><br><span class=\"line\">bus              loop<span class=\"literal\">-control</span>       </span><br><span class=\"line\">char             mapper              </span><br><span class=\"line\">console          mcelog              </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>而这些文件被称为设备文件;<br>\n同时这些设备文件代表着系统当中的各种硬件设备,它们将为用户的程序提供一个接口;<br>\n用户可以通过这些口从而间接的调用硬件;</p>\n<p><strong>驱动程序等后续会说到</strong></p>\n<ul>\n<li>驱动程序负责管理和控制硬件,而驱动程序本身也是被OS进行管理的;</li>\n<li>设备文件本身也是为用户提供一个与用户与驱动交互的接口;</li>\n<li>而驱动程序则为为设备文件提供的一个与硬件交互的一个接口;</li>\n<li>这些抽象的接口本身对于OS来说是不知情的;</li>\n<li>OS只知道在调用对应的硬件时只需要去调用对应的设备文件即可;这样就把硬件设备抽象成执行文件了</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"『 Linux 』“ 一切皆文件 “\" href=\"https://blog.csdn.net/2202_75303754/article/details/138967355\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">『 Linux 』“ 一切皆文件 “</p><p class=\"url\">https://blog.csdn.net/2202_75303754/article/details/138967355</p></div></a></div> \n<h1>系统调用的基本概念</h1>\n<p>在linux中，操作系统负责硬件资源的封装，任务的创建、调度、读写磁盘</p>\n<ul>\n<li>μc/os中，采用OSinit-OSTaskCreate-创建一个任务</li>\n<li>Linux中，拥有权限管理来保证安全，划分内核态和用户态。通过系统调用，让APP某些运行陷入到内核态，以此来访问硬件设备</li>\n</ul>\n<h1>软中断</h1>\n<h2 id=\"权限管理\">权限管理</h2>\n<ul>\n<li>程序的用户态、内核态</li>\n<li>操作系统+ CPU软中断：swi/svc</li>\n<li>CPU的运行级别：普通权限(普通运行)、特权（陷入到内核态）\n<ul>\n<li>ARM32：\n<ul>\n<li>普通模式：User</li>\n<li>特权模式：FIQ、IRQ、SVC、ABT、UND</li>\n</ul>\n</li>\n<li>ARM64：EL0、EL1、EL2、EL3</li>\n<li>X86：ring0 ~ ring</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"系统调用号\">系统调用号</h2>\n<ul>\n<li>ARM：swi、svc</li>\n<li>ARM : swi、svc\n<ul>\n<li>系统调用接口：read、write、printf</li>\n<li>内核中的实现：sys_read、sys_write</li>\n<li>系统调用号：\n<ul>\n<li>32位ARM：3、4</li>\n<li>64位ARM：0、1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据传递\">数据传递</h2>\n<ul>\n<li>软中断指令：– X86 int 80H – ARM swisvc</li>\n<li>用户函数的参数传递\n<ul>\n<li>ARM：R0、R1、R2、R3、R4、R5、R6</li>\n<li>ARM64：X1、X2、X3、X4、X5</li>\n</ul>\n</li>\n<li>系统调用号– ARM：R7 – ARM64：X8</li>\n<li>内核函数的返回值– ARM：R0– ARM64：X</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Arch/ABI    Instruction           System  Ret  Ret  Error    Notes</span><br><span class=\"line\"></span><br><span class=\"line\">                                   call <span class=\"comment\">#  val  val2</span></span><br><span class=\"line\"> ───────────────────────────────────────────────────────────────────</span><br><span class=\"line\"> alpha       callsys               v0      v0   a4   a3       <span class=\"number\">1</span>, <span class=\"number\">6</span></span><br><span class=\"line\"> arc         trap0                 r8      r0   -    -</span><br><span class=\"line\"> arm/OABI    swi NR                -       a1   -    -        <span class=\"number\">2</span></span><br><span class=\"line\"> arm/EABI    swi <span class=\"number\">0</span>x0               r7      r0   r1   -</span><br><span class=\"line\"> arm64       svc <span class=\"comment\">#0                x8      x0   x1   -</span></span><br><span class=\"line\"> blackfin    excpt <span class=\"number\">0</span>x0             P0      R0   -    -</span><br><span class=\"line\"> i386        int <span class=\"variable\">$0x80</span>             eax     eax  edx  -</span><br><span class=\"line\"> ia64        <span class=\"keyword\">break</span> <span class=\"number\">0</span>x100000        r15     r8   r9   r10      <span class=\"number\">1</span>, <span class=\"number\">6</span></span><br><span class=\"line\"> m68k        <span class=\"keyword\">trap</span> <span class=\"comment\">#0               d0      d0   -    -</span></span><br><span class=\"line\"> microblaze  brki r14,<span class=\"number\">8</span>            r12     r3   -    -</span><br><span class=\"line\"> mips        syscall               v0      v0   v1   a3       <span class=\"number\">1</span>, <span class=\"number\">6</span></span><br><span class=\"line\"> nios2       <span class=\"keyword\">trap</span>                  r2      r2   -    r7</span><br><span class=\"line\"> parisc      ble <span class=\"number\">0</span>x100(%sr2, %r0)  r20     r28  -    -</span><br><span class=\"line\"> powerpc     <span class=\"built_in\">sc</span>                    r0      r3   -    r0       <span class=\"number\">1</span></span><br><span class=\"line\"> powerpc64   <span class=\"built_in\">sc</span>                    r0      r3   -    cr0.SO   <span class=\"number\">1</span></span><br><span class=\"line\"> riscv       ecall                 a7      a0   a1   -</span><br><span class=\"line\"> s390        svc <span class=\"number\">0</span>                 r1      r2   r3   -        <span class=\"number\">3</span></span><br><span class=\"line\"> s390x       svc <span class=\"number\">0</span>                 r1      r2   r3   -        <span class=\"number\">3</span></span><br><span class=\"line\"> superh      <span class=\"keyword\">trap</span> <span class=\"comment\">#0x17            r3      r0   r1   -        4, 6</span></span><br><span class=\"line\"> sparc/<span class=\"number\">32</span>    t <span class=\"number\">0</span>x10                g1      o0   o1   psr/csr  <span class=\"number\">1</span>, <span class=\"number\">6</span></span><br><span class=\"line\"> sparc/<span class=\"number\">64</span>    t <span class=\"number\">0</span>x6d                g1      o0   o1   psr/csr  <span class=\"number\">1</span>, <span class=\"number\">6</span></span><br><span class=\"line\"> tile        swint1                R10     R00  -    R01      <span class=\"number\">1</span></span><br><span class=\"line\"> x86<span class=\"literal\">-64</span>      syscall               rax     rax  rdx  -        <span class=\"number\">5</span></span><br><span class=\"line\"> x32         syscall               rax     rax  rdx  -        <span class=\"number\">5</span></span><br><span class=\"line\"> xtensa      syscall               a2      a2   -    -</span><br></pre></td></tr></table></figure>\n<p>ARM汇编系统调用：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"symbol\">.global</span> _start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">_start:</span></span><br><span class=\"line\">    <span class=\"keyword\">mov</span> <span class=\"built_in\">r0</span>, <span class=\"number\">#1</span>              <span class=\"comment\">/* stdout*/</span></span><br><span class=\"line\">    <span class=\"keyword\">add</span> <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span>, <span class=\"number\">#16</span>         <span class=\"comment\">/* address of the string*/</span></span><br><span class=\"line\">    <span class=\"keyword\">mov</span> <span class=\"built_in\">r2</span>, <span class=\"number\">#12</span>            <span class=\"comment\">/* string length*/</span></span><br><span class=\"line\">    <span class=\"keyword\">mov</span> <span class=\"built_in\">r7</span>, <span class=\"number\">#4</span>             <span class=\"comment\">/*syscall for &#x27;write&#x27;*/</span></span><br><span class=\"line\">    <span class=\"keyword\">swi</span> <span class=\"number\">#0</span>                  <span class=\"comment\">/* software interrupt*/</span>  软中断调用sys_write来实现字符串的打印</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">_exit:</span></span><br><span class=\"line\">    <span class=\"keyword\">mov</span> <span class=\"built_in\">r7</span>, <span class=\"number\">#1</span>             <span class=\"comment\">/* syscall for &#x27;exit&#x27;*/</span></span><br><span class=\"line\">    <span class=\"keyword\">swi</span> <span class=\"number\">#0</span>                 <span class=\"comment\">/* software interrupt*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">_string:</span></span><br><span class=\"line\"><span class=\"symbol\">.asciz</span> <span class=\"string\">&quot;Hello world\\n&quot;</span>          <span class=\"comment\">@ our string, NULL terminated</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"系统调用接口的封装\">系统调用接口的封装</h2>\n<p>写这些汇编非常麻烦，好在：</p>\n<ul>\n<li>C标准库包含一系列系统调用接口的封装– read、write、fork、open…</li>\n</ul>\n<h3 id=\"syscall系统调用接口的封装\">syscall系统调用接口的封装</h3>\n<p>对于在C标准库中没有封装的系统调用</p>\n<ul>\n<li>syscall是一个库函数：<code>long syscall(long number, ...);</code>，如果想使用syscall来实现write系统调用，直接<code>syscall(1, 1, &quot;helloworld\\n&quot;, 12)</code>就行</li>\n<li>封装了系统调用的汇编接口– 系统调用前保存CPU寄存器– 从系统调用返回后，恢复寄存器</li>\n</ul>\n<p>syscall的汇编实现：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">000</span>dad70 &lt;syscall<span class=\"comment\">@@GLIBC_2.4&gt;:</span></span><br><span class=\"line\"><span class=\"symbol\">   dad70:</span>\te1a0c00d \t<span class=\"keyword\">mov</span>\t<span class=\"built_in\">ip</span>, <span class=\"built_in\">sp</span></span><br><span class=\"line\"><span class=\"symbol\">   dad74:</span>\te92d00f0 \t<span class=\"keyword\">push</span>\t&#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r6</span>, <span class=\"built_in\">r7</span>&#125;</span><br><span class=\"line\"><span class=\"symbol\">   dad78:</span>\te1a07000 \t<span class=\"keyword\">mov</span>\t<span class=\"built_in\">r7</span>, <span class=\"built_in\">r0</span></span><br><span class=\"line\"><span class=\"symbol\">   dad7c:</span>\te1a00001 \t<span class=\"keyword\">mov</span>\t<span class=\"built_in\">r0</span>, <span class=\"built_in\">r1</span></span><br><span class=\"line\"><span class=\"symbol\">   dad80:</span>\te1a01002 \t<span class=\"keyword\">mov</span>\t<span class=\"built_in\">r1</span>, <span class=\"built_in\">r2</span></span><br><span class=\"line\"><span class=\"symbol\">   dad84:</span>\te1a02003 \t<span class=\"keyword\">mov</span>\t<span class=\"built_in\">r2</span>, <span class=\"built_in\">r3</span></span><br><span class=\"line\"><span class=\"symbol\">   dad88:</span>\te89c0078 \t<span class=\"keyword\">ldm</span>\t<span class=\"built_in\">ip</span>, &#123;<span class=\"built_in\">r3</span>, <span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r6</span>&#125;</span><br><span class=\"line\"><span class=\"symbol\">   dad8c:</span>\tef000000 \t<span class=\"keyword\">svc</span>\t<span class=\"number\">0x00000000</span></span><br><span class=\"line\"><span class=\"symbol\">   dad90:</span>\te8bd00f0 \t<span class=\"keyword\">pop</span>\t&#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r6</span>, <span class=\"built_in\">r7</span>&#125;</span><br><span class=\"line\"><span class=\"symbol\">   dad94:</span>\te3700a01 \t<span class=\"keyword\">cmn</span>\t<span class=\"built_in\">r0</span>, <span class=\"number\">#4096</span>\t<span class=\"comment\">; 0x1000</span></span><br><span class=\"line\"><span class=\"symbol\">   dad98:</span>\t<span class=\"number\">312</span>fff1e \t<span class=\"keyword\">bxcc</span>\t<span class=\"built_in\">lr</span></span><br><span class=\"line\"><span class=\"symbol\">   dad9c:</span>\teafcf2c3 \t<span class=\"keyword\">b</span>\t<span class=\"number\">178</span>b0 &lt;__libc_start_main<span class=\"comment\">@@GLIBC_2.4+0x278&gt;</span></span><br></pre></td></tr></table></figure>\n<h1>系统调用流程分析</h1>\n<p>以kill这个系统调用来分析：</p>\n<ol>\n<li>接口封装: /usr/arm-linux-gnueabi/lib/libc.a</li>\n<li>系统调用号: arch/arm/include/generated/calls-eabi.S 这里定义了一个系统调用表，将系统调用号和指针对应起来，用户使用系统调用就能根据此表找到函数指针，从而跳转过去运行</li>\n<li>内核实现: kernel/signal.c 不同系统调用实现分布在不同的内核部分</li>\n<li>中断处理: arch/arm/kernel/entry-common.S  软中断</li>\n</ol>\n<p><strong>实现过程就是根据系统调用号，从系统调用表中找到对应的入口函数指针，跳转执行，中间包含各种软中断的管理操作</strong></p>\n<h2 id=\"系统调用号：\">系统调用号：</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">arch/arm/include/generated/uapi/<span class=\"keyword\">asm</span>/unistd-common.h</span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"keyword\">define</span> __NR_kill (__NR_SYSCALL_BASE + 37)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"x系统调用实现：\">x系统调用实现：</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"> kernel/signal.c :</span><br><span class=\"line\"> SYSCALL_DEFINE2(kill, <span class=\"type\">pid_t</span>, pid, <span class=\"type\">int</span>, sig)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kernel_siginfo</span> <span class=\"title\">info</span>;</span></span><br><span class=\"line\">    prepare_kill_siginfo(sig, &amp;info);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kill_something_info(sig, &amp;info, pid);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">展开后相当于：</span><br><span class=\"line\">asmlinkage <span class=\"type\">long</span> <span class=\"title function_\">sys_kill</span><span class=\"params\">(<span class=\"type\">pid_t</span> pid, <span class=\"type\">int</span> sig)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"系统调用函数实现：\">系统调用函数实现：</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"> include/linux/syscalls.h</span><br><span class=\"line\"> asmlinkage:GCC扩展，表示读取的参数来自栈中，而非寄存器</span><br><span class=\"line\"><span class=\"comment\">/* kernel/signal.c */</span></span><br><span class=\"line\"> asmlinkage <span class=\"type\">long</span> <span class=\"title function_\">sys_restart_syscall</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"> asmlinkage <span class=\"type\">long</span> <span class=\"title function_\">sys_kill</span><span class=\"params\">(<span class=\"type\">pid_t</span> pid, <span class=\"type\">int</span> sig)</span>;</span><br><span class=\"line\"> asmlinkage <span class=\"type\">long</span> <span class=\"title function_\">sys_tkill</span><span class=\"params\">(<span class=\"type\">pid_t</span> pid, <span class=\"type\">int</span> sig)</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取系统调用号\">获取系统调用号</h2>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"> arch/<span class=\"meta\">arm</span>/kernel/<span class=\"meta\">entry</span>-<span class=\"meta\">common</span>.S :  保护现场，获取系统调用号</span><br><span class=\"line\"><span class=\"symbol\">ENTRY</span>(vector_swi)</span><br><span class=\"line\"> <span class=\"keyword\">addne</span> scno, <span class=\"built_in\">r7</span>, <span class=\"symbol\">#__NR_SYSCALL_BASE</span>\t<span class=\"comment\">@ put OS number in</span></span><br><span class=\"line\"> <span class=\"keyword\">ldr</span> tbl, sys_call_table</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> invoke_syscall tbl, scno, <span class=\"built_in\">r10</span>, __ret_fast_syscall</span><br><span class=\"line\">   <span class=\"keyword\">add</span>  <span class=\"built_in\">r1</span>, <span class=\"built_in\">sp</span>, <span class=\"symbol\">#S_OFF</span></span><br><span class=\"line\"> <span class=\"number\">2</span>: <span class=\"keyword\">cmp</span>  scno, #(__ARM_NR_BASE - \t__NR_SYSCALL_BASE)</span><br><span class=\"line\">   <span class=\"keyword\">eor</span>  <span class=\"built_in\">r0</span>, scno, <span class=\"symbol\">#__NR_SYSCALL_BASE</span> <span class=\"comment\">@ put OS number back</span></span><br><span class=\"line\">   <span class=\"keyword\">bcs</span>  arm_syscall</span><br><span class=\"line\">   <span class=\"keyword\">mov</span>  why, <span class=\"number\">#0</span>\t\t <span class=\"comment\">@ no longer a real syscall</span></span><br><span class=\"line\">   <span class=\"keyword\">b</span>   sys_ni_syscall\t\t <span class=\"comment\">@ not private func</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\"> <span class=\"number\">9001</span>:</span><br><span class=\"line\">  <span class=\"keyword\">sub</span> <span class=\"built_in\">lr</span>, saved_pc, <span class=\"number\">#4</span></span><br><span class=\"line\">  <span class=\"keyword\">str</span> <span class=\"built_in\">lr</span>, [<span class=\"built_in\">sp</span>, <span class=\"symbol\">#S_PC</span>]</span><br><span class=\"line\">  get_thread_info tsk</span><br><span class=\"line\">  <span class=\"keyword\">b</span> ret_fast_syscall   回到用户态kill，继续执行用户态代码</span><br><span class=\"line\"><span class=\"symbol\">ENDPROC</span>(vector_swi)</span><br><span class=\"line\"></span><br><span class=\"line\"> syscall_table_start sys_call_table</span><br><span class=\"line\">  <span class=\"comment\">#define COMPAT(nr, native, compat) syscall nr, native</span></span><br><span class=\"line\">  <span class=\"comment\">#ifdef CONFIG_AEABI</span></span><br><span class=\"line\">    <span class=\"comment\">#include &lt;calls-eabi.S&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">#else</span></span><br><span class=\"line\">    <span class=\"comment\">#include &lt;calls-oabi.S&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">#endif</span></span><br><span class=\"line\">  <span class=\"comment\">#undef COMPAT</span></span><br><span class=\"line\"> syscall_table_end sys_call_table</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#define NATIVE(nr, func) syscall nr, func</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"系统调用表\">系统调用表</h2>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">arch</span>/<span class=\"meta\">arm</span>/<span class=\"meta\">include</span>/generated/calls-eabi.S :</span><br><span class=\"line\"> NATIVE(<span class=\"number\">0</span>, sys_restart_syscall)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">1</span>, sys_exit)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">2</span>, sys_fork)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">3</span>, sys_read)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">4</span>, sys_write)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">5</span>, sys_open)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">6</span>, sys_close)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">8</span>, sys_creat)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">9</span>, sys_link)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">10</span>, sys_unlink)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">11</span>, sys_execve)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">12</span>, sys_chdir)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">14</span>, sys_mknod)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">15</span>, sys_chmod)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">16</span>, sys_lchown16)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">19</span>, sys_lseek)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">20</span>, sys_getpid)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">21</span>, sys_mount)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">23</span>, sys_setuid16)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">24</span>, sys_getuid16)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">26</span>, sys_ptrace)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">29</span>, sys_pause)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">33</span>, sys_access)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">34</span>, sys_nice)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">36</span>, sys_sync)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">37</span>, sys_kill)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">38</span>, sys_rename)</span><br><span class=\"line\"> NATIVE(<span class=\"number\">39</span>, sys_mkdir)</span><br><span class=\"line\">其实就是定义一个函数入口指针  <span class=\"meta\">.long</span> sys_kill</span><br></pre></td></tr></table></figure>\n<h1>添加一个系统调用</h1>\n<h2 id=\"增加内核对应的实现函数\">增加内核对应的实现函数</h2>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">diff</span> <span class=\"literal\">--git</span> a/arch/arm/kernel/signal.c b/arch/arm/kernel/signal.c</span><br><span class=\"line\">index <span class=\"number\">585</span>edbfcc..<span class=\"number\">544</span>c92bcb <span class=\"number\">100644</span></span><br><span class=\"line\"><span class=\"literal\">---</span> a/arch/arm/kernel/signal.c</span><br><span class=\"line\">+++ b/arch/arm/kernel/signal.c</span><br><span class=\"line\"><span class=\"selector-tag\">@</span><span class=\"selector-tag\">@</span> <span class=\"literal\">-723</span>,<span class=\"number\">3</span> +<span class=\"number\">723</span>,<span class=\"number\">17</span> <span class=\"selector-tag\">@</span><span class=\"selector-tag\">@</span> asmlinkage void do_rseq_syscall(struct pt_regs *regs)</span><br><span class=\"line\"> \trseq_syscall(regs);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">#endif</span></span><br><span class=\"line\">+/* add by wit */</span><br><span class=\"line\">+asmlinkage  void sys_hello(const char __user *buf, size_t count)</span><br><span class=\"line\">+&#123;</span><br><span class=\"line\">+    char kernel_buf[<span class=\"number\">100</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span>(buf)</span><br><span class=\"line\">+    &#123;</span><br><span class=\"line\">+        copy_from_user(kernel_buf, buf, (count &lt; <span class=\"number\">100</span>) ? count:<span class=\"number\">100</span>);</span><br><span class=\"line\">+        printk(<span class=\"string\">&quot;sys_hello: %s\\n&quot;</span>, kernel_buf);</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+</span><br><span class=\"line\">+</span><br></pre></td></tr></table></figure>\n<h2 id=\"在系统调用表中增加一个系统调用号及入口\">在系统调用表中增加一个系统调用号及入口</h2>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">diff</span> <span class=\"literal\">--git</span> a/include/linux/syscalls.h b/include/linux/syscalls.h</span><br><span class=\"line\">index <span class=\"number\">37</span>bea07c1..a43e2e0c6 <span class=\"number\">100644</span></span><br><span class=\"line\"><span class=\"literal\">---</span> a/include/linux/syscalls.h</span><br><span class=\"line\">+++ b/include/linux/syscalls.h</span><br><span class=\"line\"><span class=\"selector-tag\">@</span><span class=\"selector-tag\">@</span> <span class=\"literal\">-674</span>,<span class=\"number\">6</span> +<span class=\"number\">674</span>,<span class=\"number\">9</span> <span class=\"selector-tag\">@</span><span class=\"selector-tag\">@</span> asmlinkage long sys_sched_rr_get_interval(pid_t pid,</span><br><span class=\"line\"> asmlinkage long sys_sched_rr_get_interval_time32(pid_t pid,</span><br><span class=\"line\"> \t\t\t\t\t\t struct old_timespec32 __user *interval);</span><br><span class=\"line\"> </span><br><span class=\"line\">+/* add by wit: add a system call: hello */</span><br><span class=\"line\">+asmlinkage void sys_hello(const char __user *buf, size_t count);</span><br><span class=\"line\">+</span><br><span class=\"line\"> /* kernel/signal.c */</span><br><span class=\"line\"> asmlinkage long sys_restart_syscall(void);</span><br><span class=\"line\"> asmlinkage long sys_kill(pid_t pid, int sig);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">---</span> a/arch/arm/include/generated/calls<span class=\"literal\">-eabi</span>.S</span><br><span class=\"line\">+++ b/arch/arm/include/generated/calls<span class=\"literal\">-eabi</span>.S</span><br><span class=\"line\"></span><br><span class=\"line\">+ NATIVE(<span class=\"number\">441</span>, sys_hello)</span><br></pre></td></tr></table></figure>\n<h1>系统调用的开销</h1>\n<h2 id=\"主要的开销\">主要的开销</h2>\n<ul>\n<li>中断，软中断也是中断，变态是有代价的，每次切换需刷新 CPU 流水线、TLB 和缓存，现代 CPU 需约 100-1000 时钟周期。</li>\n<li>上下文保存与恢复，CPU 需保存用户态寄存器状态（如 PC、SP、EFLAGS）到内核栈，返回时再恢复。容易造成额外的内存访问</li>\n<li>抢占系统、任务调度</li>\n<li>同步，内核全局资源（如文件系统）可能需加锁，引发争用。</li>\n<li>IO等待，频繁拷贝（尤其是大块数据）会显著降低性能。</li>\n</ul>\n<h2 id=\"解决思路\">解决思路</h2>\n<ul>\n<li>\n<p>快速系统调用指令：<br>\nx86 的 syscall（比 int 0x80 快 2-3 倍）。</p>\n</li>\n<li>\n<p>虚拟系统调用：</p>\n<ul>\n<li>vdso (Virtual Dynamic Shared Object)：<br>\n将部分调用（如 gettimeofday()）映射到用户态，无需切换。</li>\n<li>vsyscall（Virtual System Call）<br>\n内核将部分系统调用的代码映射到固定的用户空间地址（如 0xffffffffff600000）。用户程序直接跳转到该地址执行，无需切换特权级。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vsyscall\">vsyscall</h3>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">cat</span> /proc/self/maps</span><br><span class=\"line\"><span class=\"number\">5611</span>f7bb1000<span class=\"literal\">-5611f7bb3000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00000000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1704088</span>                    /usr/bin/<span class=\"built_in\">cat</span></span><br><span class=\"line\"><span class=\"number\">5611</span>f7bb3000<span class=\"literal\">-5611f7bb8000</span> <span class=\"built_in\">r</span><span class=\"literal\">-xp</span> <span class=\"number\">00002000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1704088</span>                    /usr/bin/<span class=\"built_in\">cat</span></span><br><span class=\"line\"><span class=\"number\">5611</span>f7bb8000<span class=\"literal\">-5611f7bbb000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00007000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1704088</span>                    /usr/bin/<span class=\"built_in\">cat</span></span><br><span class=\"line\"><span class=\"number\">5611</span>f7bbb000<span class=\"literal\">-5611f7bbc000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00009000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1704088</span>                    /usr/bin/<span class=\"built_in\">cat</span></span><br><span class=\"line\"><span class=\"number\">5611</span>f7bbc000<span class=\"literal\">-5611f7bbd000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">0000</span>a000 <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1704088</span>                    /usr/bin/<span class=\"built_in\">cat</span></span><br><span class=\"line\"><span class=\"number\">56123188</span>b000<span class=\"literal\">-5612318ac000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span>                          [<span class=\"type\">heap</span>]</span><br><span class=\"line\"><span class=\"number\">7</span>f7dec15b000<span class=\"literal\">-7f7dec17d000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"number\">7</span>f7dec17d000<span class=\"literal\">-7f7dec9ee000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00000000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1704009</span>                    /usr/lib/locale/locale<span class=\"literal\">-archive</span></span><br><span class=\"line\"><span class=\"number\">7</span>f7dec9ee000<span class=\"literal\">-7f7deca10000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00000000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706133</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/libc<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7deca10000<span class=\"literal\">-7f7decb88000</span> <span class=\"built_in\">r</span><span class=\"literal\">-xp</span> <span class=\"number\">00022000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706133</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/libc<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decb88000<span class=\"literal\">-7f7decbd6000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">0019</span>a000 <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706133</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/libc<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decbd6000<span class=\"literal\">-7f7decbda000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">001</span>e7000 <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706133</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/libc<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decbda000<span class=\"literal\">-7f7decbdc000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">001</span>eb000 <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706133</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/libc<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decbdc000<span class=\"literal\">-7f7decbe2000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"number\">7</span>f7decbf5000<span class=\"literal\">-7f7decbf6000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00000000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706106</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/ld<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decbf6000<span class=\"literal\">-7f7decc19000</span> <span class=\"built_in\">r</span><span class=\"literal\">-xp</span> <span class=\"number\">00001000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706106</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/ld<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decc19000<span class=\"literal\">-7f7decc21000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00024000</span> <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706106</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/ld<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decc22000<span class=\"literal\">-7f7decc23000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">0002</span>c000 <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706106</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/ld<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decc23000<span class=\"literal\">-7f7decc24000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">0002</span>d000 <span class=\"number\">08</span>:<span class=\"number\">05</span> <span class=\"number\">1706106</span>                    /usr/lib/x86_64<span class=\"literal\">-linux-gnu</span>/ld<span class=\"literal\">-2</span>.<span class=\"number\">31</span>.so</span><br><span class=\"line\"><span class=\"number\">7</span>f7decc24000<span class=\"literal\">-7f7decc25000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"number\">7</span>ffc30544000<span class=\"literal\">-7ffc30565000</span> rw<span class=\"literal\">-p</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span>                          [<span class=\"type\">stack</span>]</span><br><span class=\"line\"><span class=\"number\">7</span>ffc305d7000<span class=\"literal\">-7ffc305db000</span> <span class=\"built_in\">r</span><span class=\"literal\">--p</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span>                          [<span class=\"type\">vvar</span>]</span><br><span class=\"line\"><span class=\"number\">7</span>ffc305db000<span class=\"literal\">-7ffc305dd000</span> <span class=\"built_in\">r</span><span class=\"literal\">-xp</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span>                          [<span class=\"type\">vdso</span>]</span><br><span class=\"line\">ffffffffff600000<span class=\"literal\">-ffffffffff601000</span> <span class=\"literal\">--xp</span> <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span>                  [<span class=\"type\">vsyscall</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可以看到程序段映射中有vsyscall段，这里保存了一些固定的系统调用。</p>\n<p><strong>尽管 vsyscall 机制已被弃用，但 Linux 内核仍然在内存映射中保留</strong><br>\nffffffffff600000-ffffffffff601000 这个区域（标记为 [vsyscall]）</p>\n<h3 id=\"VDSO\">VDSO</h3>\n<hr>\n<h2 id=\"3-对比-vsyscall-和-vDSO\"><strong>3. 对比 <code>vsyscall</code> 和 <code>vDSO</code></strong></h2>\n<table>\n<thead>\n<tr>\n<th><strong>特性</strong></th>\n<th><strong><code>vsyscall</code></strong></th>\n<th><strong><code>vDSO</code></strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>地址分配</strong></td>\n<td>固定 (<code>0xffffffffff600000</code>)</td>\n<td>动态加载（ASLR 支持）</td>\n</tr>\n<tr>\n<td><strong>安全性</strong></td>\n<td>低（固定地址易受攻击）</td>\n<td>高（随机化地址）</td>\n</tr>\n<tr>\n<td><strong>内核支持</strong></td>\n<td>旧版机制，已废弃</td>\n<td>现代默认机制</td>\n</tr>\n<tr>\n<td><strong>性能</strong></td>\n<td>模拟执行（较慢）</td>\n<td>直接用户态执行（最快）</td>\n</tr>\n<tr>\n<td><strong>调用方式</strong></td>\n<td>硬编码地址</td>\n<td>通过 <code>glibc</code> 或 <code>dlopen</code> 调用</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>在内存映射中，可以看道vdso这个段，这个地址是随机的</p>\n<p>源码在内核中实现</p>\n<ul>\n<li>arch/arm/kernel/vdso.c</li>\n<li>关键函数:vdso_mremap、install_vvar\n<ul>\n<li>速度最快</li>\n<li>开销最小,基本等价于函数调用开销</li>\n</ul>\n</li>\n</ul>\n<h1>一切皆文件的哲学</h1>\n<p><strong>“一切皆文件”是 Linux 对系统资源的高度抽象，通过文件接口屏蔽底层差异，提供了简洁、一致的操作方式。</strong>、<br>\n这种设计降低了系统复杂性，使得工具、脚本和应用程序能够以统一模式处理多样化资源，是 Linux 强大灵活性的重要基石。</p>\n<p>简单来说，在Linux操作系统中，所有的资源（包括普通文件（文本、二进制文件等）、目录、设备（如磁盘、键盘）、进程信息、网络套接字、管道等）都被抽象为了文件。</p>\n<p>在用户层面上，我们可以通过对对应的文件进行操作，进而完成对这些资源的操作。</p>\n<p>这样做最明显的好处是，开发者仅需要使用一套 API 和开发工具，即可调取 Linux 系统中绝大部分的资源。</p>\n<p>举个简单的例子，Linux 中几乎所有读（读文件，读系统状态，读PIPE）的操作都可以用read 函数来进行；几乎所有更改（更改文件，更改系统参数，写 PIPE）的操作都可以用 write 函数来进行。</p>\n<p>每一种设备都有用于描述自身的读写方法与属性等(在对应的数据结构中)，将这些方法的地址赋值给对应的函数，将属性抽象成文件的内容，就可以用访问文件的方式来访问这些资源。</p>\n<p>虽然在访问这些设备时所调用的函数都是文件的 read 和 write 等，但实际上调用的却是对应设备的读写函数。</p>\n<p>按照面向对象语言的视角来理解就是：struct file 是一个抽象类，而各种设备继承自 struct file 并各自实现了读写等方法。在较高的层次就可以将这些设备都看作文件来处理。</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/04/15/vpxf4e-0.webp\" alt=\"一切皆文件\"></p>\n<h2 id=\"硬件识别机制\">硬件识别机制</h2>\n<p>在Linux当中的<code>/dev</code>目录下可以看到存在许多文件;</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">ls</span> /dev</span><br><span class=\"line\">AliSecGuard      initctl           </span><br><span class=\"line\">autofs           input              </span><br><span class=\"line\">block            kmsg               </span><br><span class=\"line\">btrfs<span class=\"literal\">-control</span>    log                </span><br><span class=\"line\">bus              loop<span class=\"literal\">-control</span>       </span><br><span class=\"line\">char             mapper              </span><br><span class=\"line\">console          mcelog              </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>而这些文件被称为设备文件;<br>\n同时这些设备文件代表着系统当中的各种硬件设备,它们将为用户的程序提供一个接口;<br>\n用户可以通过这些口从而间接的调用硬件;</p>\n<p><strong>驱动程序等后续会说到</strong></p>\n<ul>\n<li>驱动程序负责管理和控制硬件,而驱动程序本身也是被OS进行管理的;</li>\n<li>设备文件本身也是为用户提供一个与用户与驱动交互的接口;</li>\n<li>而驱动程序则为为设备文件提供的一个与硬件交互的一个接口;</li>\n<li>这些抽象的接口本身对于OS来说是不知情的;</li>\n<li>OS只知道在调用对应的硬件时只需要去调用对应的设备文件即可;这样就把硬件设备抽象成执行文件了</li>\n</ul>\n"},{"title":"qemu模拟开发板开发","abbrlink":34218,"date":"2025-02-06T11:34:54.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqvf20-0.webp","swiper_index":null,"_content":"\n\n# 参考文章\n{% link 如何配置 QEMU 虚拟机网络, https://huaweicloud.csdn.net/6707aefbe2ce0119e0a1e3eb.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NjUyNDYwLCJleHAiOjE3NDA2MjcwNjIsImlhdCI6MTc0MDAyMjI2MiwidXNlcm5hbWUiOiJBX3J1b3NodWkifQ.UvK-zaDEx_il-jNwsV5R23KQ9JmvEZ0mjEbYDA-PcRU&spm=1001.2101.3001.6650.15&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-129685202-blog-131290211.235%5Ev43%5Epc_blog_bottom_relevance_base4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-129685202-blog-131290211.235%5Ev43%5Epc_blog_bottom_relevance_base4&utm_relevant_index=21, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n# 使用qemu模拟A9处理器并启动linux全过程记录\n\n## qemu是什么\nqemu是一个可以虚拟成硬件的软件，随心所欲地使用调试环境，不同架构的硬件平台并运行虚拟机\n\n## 安装过程\n1. 拉取官方源码分支8.2 ，只克隆最近的 5 次提交的历史记录\n   `git clone https://gitlab.com/qemu-project/qemu.git .-branch stable-8.2 --depth 5` \n   - 克隆完会发现有很多嵌套的子模块需要克隆，比如`u-boot`，这里使用`git submodule`可以查询还有什么子模块。\n   - 下载子模块使用`git submudule update --init --recursive --depth 5` 追踪并递归最新子模块\n\n2. 源码编译、\n   {% link Hosts/Linux, https://wiki.qemu.org/Hosts/Linux, https://image.aruoshui.fun/i/2025/02/21/uqa4z4-0.webp %} \n   - 安装工具\n   `sudo apt-get install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev ninja-build`\n   ```powershell\n    sudo apt-get install git-email\n    sudo apt-get install libaio-dev libbluetooth-dev libcapstone-dev libbrlapi-dev libbz2-dev\n    sudo apt-get install libcap-ng-dev libcurl4-gnutls-dev libgtk-3-dev\n    sudo apt-get install libibverbs-dev libjpeg8-dev libncurses5-dev libnuma-dev\n    sudo apt-get install librbd-dev librdmacm-dev\n    sudo apt-get install libsasl2-dev libsdl2-dev libseccomp-dev libsnappy-dev libssh-dev\n    sudo apt-get install libvde-dev libvdeplug-dev libvte-2.91-dev libxen-dev liblzo2-dev\n    sudo apt-get install valgrind xfslibs-dev \n    ```\n   - 编译\n    ```powershell\n    mkdir build\n    cd build\n    ../configure\n    make\n    ```\n\n## 模拟vexpress-a9\n#### 先下载一下Linux源码\n```powershell\nwget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.14.7.tar.xz\ntar xvf linux-4.14.7.tar.xz\n```    \n#### 编译内核\n   下面命令把vexpress_defconfig作为配置文件保存为.config，并根据这个config中的配置进行编译。\n   ```powershell\n   make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm vexpress_defconfig\n   make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm -j8\n   ```\n   编译得到内核文件arch/arm/boot/zImage，Qemu启动时需要指定使用这个映像文件。\n#### 制作根文件系统\n   - 文件系统是对存储设备上的数据进行组织的机制，用户与操作系统进行交互的主要工具就是通过**文件系统调用**\n   - 根文件系统是Linux内核启动后的第一个挂载的文件系统，主要由最基本的shell命令、各种库、字符设备、配置脚本组成\n```powershell\ncd busybox-1.35.0/\nmake defconfig\nmake CROSS_COMPILE=arm-linux-gnueabi- -j8\nmake install CROSS_COMPILE=arm-linux-gnueabi- -j8\n```\n   切换到busybox的上级目录，并使用如下脚本制作镜像：\n```powershell\n#!/bin/bash\n\nmkdir -p rootfs/{dev,etc/init.d,lib}\ntouch rootfs/etc/init.d/rcS\n#这里用双引号可能会报错\necho -e '#!/bin/sh\\n' > rootfs/etc/init.d/rcS\ncp busybox-1.35.0/_install/* -r rootfs/\n#sudo cp -P /usr/arm-linux-gnueabihf/lib/* rootfs/lib/\nsudo cp /usr/arm-linux-gnueabihf/lib/sf/* rootfs/lib/\n\n#ln -s bin/busybox rootfs/init\n#ln -s -f bin/busybox rootfs/sbin/init\n\nsudo mknod rootfs/dev/tty1 c 4 1\nsudo mknod rootfs/dev/tty2 c 4 2\nsudo mknod rootfs/dev/tty3 c 4 3\nsudo mknod rootfs/dev/tty4 c 4 4\n\nsudo chown root:root -R rootfs/*\nsudo  chmod  777 rootfs/etc/init.d/rcS\n\nqemu-img create -f raw disk.img 512M\nmkfs -t ext4 ./disk.img\nmkdir  -p   tmpfs\nsudo mount -o loop ./disk.img tmpfs/\nsudo cp -r rootfs/* tmpfs/\nsudo umount tmpfs\nfile disk.img\n```\n### 启动~！\n```shell\nqemu-system-arm \\\n\t-M vexpress-a9 \\\n\t-m 512M \\\n\t-kernel linux-4.14.7/arch/arm/boot/zImage \\\n\t-dtb linux-4.14.7/arch/arm/boot/dts/vexpress-v2p-ca9.dtb \\\n\t-nographic \\\n\t-append \"root=/dev/mmcblk0 rw console=ttyAMA0\" \\\n\t-sd disk.img\n\n```\n关于`qemu-system-arm`命令各个参数详细解释如下：\n\n`-M vexpress-a9`：表示使用vexpress-a9开发板的配置；\n`-m 512M`：表示这只内存为512M；\n`-kernel xxx/arch/arm/boot/zImage`：表示使用哪个内核镜像；\n`-dtb xxx/arch/arm/boot/dts/vexpress-v2p-ca9.dtb`：表示使用哪个dtb文件；\n`-nographic`：表示不启动图形化界面；\n`-append`：表示设置kernel的cmdline；\n`-sd disk.img`：表示使用sd卡上某个文件作为根文件系统；\n`qemu-system-arm -M help`：可以查看支持的板子情况。\n\n\n## 嵌入式启动\n### 嵌入式bootloader\n- 类似于PC的BIOS、硬件自检是否正常\n- 加载系统镜像到RAM\n- 设置不同的启动方式\n\n### 常见的启动方式\n- NOR/NAND flash 启动\n- SD卡启动\n- Bootloader从网络加载Linux内核启动\n\n### u-boot\n前面我们已经可以正常启动linux了，这是qemu帮忙做好的工作，现在自己来配置启动程序\n#### 下载\n下载最新的稳定版就行：\nhttps://ftp.denx.de/pub/u-boot/u-boot-2025.01.tar.bz2\n#### 修改配置文件\n- 进入解压好的目录，用编辑器打开makefile，修改以下配置：\n`CROSS_COMPILE ?= arm-linux-gnueabi-`\n- 再修改配置config.mk\n`ARCH := arm`\n#### 编译\n`make vexpress_ca9x4_defconfig`\n`make -j4`\n#### qemu网络功能设置\n配置QEMU与主机的网络连接 \n• 采用桥接(bridge)的网络连接与Host通信 \n• 需要主机内核tun/tap模块支持 \n这部分参考：\n\n{% link 如何配置 QEMU 虚拟机网络, https://www.zhaixue.cc/qemu/qemu-u-boot.html, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n#### NFS服务\n{% link 挂载NFS根文件系统, https://www.zhaixue.cc/qemu/qemu-mount_nfs_rootfs.html, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n","source":"_posts/qemu模拟开发板开发.md","raw":"---\ntitle: qemu模拟开发板开发\nabbrlink: 34218\ndate: 2025-02-06 19:34:54\ntags:\ndescription:\ncategories:\ncover:\nswiper_index:\n---\n\n\n# 参考文章\n{% link 如何配置 QEMU 虚拟机网络, https://huaweicloud.csdn.net/6707aefbe2ce0119e0a1e3eb.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NjUyNDYwLCJleHAiOjE3NDA2MjcwNjIsImlhdCI6MTc0MDAyMjI2MiwidXNlcm5hbWUiOiJBX3J1b3NodWkifQ.UvK-zaDEx_il-jNwsV5R23KQ9JmvEZ0mjEbYDA-PcRU&spm=1001.2101.3001.6650.15&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-129685202-blog-131290211.235%5Ev43%5Epc_blog_bottom_relevance_base4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-129685202-blog-131290211.235%5Ev43%5Epc_blog_bottom_relevance_base4&utm_relevant_index=21, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n# 使用qemu模拟A9处理器并启动linux全过程记录\n\n## qemu是什么\nqemu是一个可以虚拟成硬件的软件，随心所欲地使用调试环境，不同架构的硬件平台并运行虚拟机\n\n## 安装过程\n1. 拉取官方源码分支8.2 ，只克隆最近的 5 次提交的历史记录\n   `git clone https://gitlab.com/qemu-project/qemu.git .-branch stable-8.2 --depth 5` \n   - 克隆完会发现有很多嵌套的子模块需要克隆，比如`u-boot`，这里使用`git submodule`可以查询还有什么子模块。\n   - 下载子模块使用`git submudule update --init --recursive --depth 5` 追踪并递归最新子模块\n\n2. 源码编译、\n   {% link Hosts/Linux, https://wiki.qemu.org/Hosts/Linux, https://image.aruoshui.fun/i/2025/02/21/uqa4z4-0.webp %} \n   - 安装工具\n   `sudo apt-get install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev ninja-build`\n   ```powershell\n    sudo apt-get install git-email\n    sudo apt-get install libaio-dev libbluetooth-dev libcapstone-dev libbrlapi-dev libbz2-dev\n    sudo apt-get install libcap-ng-dev libcurl4-gnutls-dev libgtk-3-dev\n    sudo apt-get install libibverbs-dev libjpeg8-dev libncurses5-dev libnuma-dev\n    sudo apt-get install librbd-dev librdmacm-dev\n    sudo apt-get install libsasl2-dev libsdl2-dev libseccomp-dev libsnappy-dev libssh-dev\n    sudo apt-get install libvde-dev libvdeplug-dev libvte-2.91-dev libxen-dev liblzo2-dev\n    sudo apt-get install valgrind xfslibs-dev \n    ```\n   - 编译\n    ```powershell\n    mkdir build\n    cd build\n    ../configure\n    make\n    ```\n\n## 模拟vexpress-a9\n#### 先下载一下Linux源码\n```powershell\nwget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.14.7.tar.xz\ntar xvf linux-4.14.7.tar.xz\n```    \n#### 编译内核\n   下面命令把vexpress_defconfig作为配置文件保存为.config，并根据这个config中的配置进行编译。\n   ```powershell\n   make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm vexpress_defconfig\n   make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm -j8\n   ```\n   编译得到内核文件arch/arm/boot/zImage，Qemu启动时需要指定使用这个映像文件。\n#### 制作根文件系统\n   - 文件系统是对存储设备上的数据进行组织的机制，用户与操作系统进行交互的主要工具就是通过**文件系统调用**\n   - 根文件系统是Linux内核启动后的第一个挂载的文件系统，主要由最基本的shell命令、各种库、字符设备、配置脚本组成\n```powershell\ncd busybox-1.35.0/\nmake defconfig\nmake CROSS_COMPILE=arm-linux-gnueabi- -j8\nmake install CROSS_COMPILE=arm-linux-gnueabi- -j8\n```\n   切换到busybox的上级目录，并使用如下脚本制作镜像：\n```powershell\n#!/bin/bash\n\nmkdir -p rootfs/{dev,etc/init.d,lib}\ntouch rootfs/etc/init.d/rcS\n#这里用双引号可能会报错\necho -e '#!/bin/sh\\n' > rootfs/etc/init.d/rcS\ncp busybox-1.35.0/_install/* -r rootfs/\n#sudo cp -P /usr/arm-linux-gnueabihf/lib/* rootfs/lib/\nsudo cp /usr/arm-linux-gnueabihf/lib/sf/* rootfs/lib/\n\n#ln -s bin/busybox rootfs/init\n#ln -s -f bin/busybox rootfs/sbin/init\n\nsudo mknod rootfs/dev/tty1 c 4 1\nsudo mknod rootfs/dev/tty2 c 4 2\nsudo mknod rootfs/dev/tty3 c 4 3\nsudo mknod rootfs/dev/tty4 c 4 4\n\nsudo chown root:root -R rootfs/*\nsudo  chmod  777 rootfs/etc/init.d/rcS\n\nqemu-img create -f raw disk.img 512M\nmkfs -t ext4 ./disk.img\nmkdir  -p   tmpfs\nsudo mount -o loop ./disk.img tmpfs/\nsudo cp -r rootfs/* tmpfs/\nsudo umount tmpfs\nfile disk.img\n```\n### 启动~！\n```shell\nqemu-system-arm \\\n\t-M vexpress-a9 \\\n\t-m 512M \\\n\t-kernel linux-4.14.7/arch/arm/boot/zImage \\\n\t-dtb linux-4.14.7/arch/arm/boot/dts/vexpress-v2p-ca9.dtb \\\n\t-nographic \\\n\t-append \"root=/dev/mmcblk0 rw console=ttyAMA0\" \\\n\t-sd disk.img\n\n```\n关于`qemu-system-arm`命令各个参数详细解释如下：\n\n`-M vexpress-a9`：表示使用vexpress-a9开发板的配置；\n`-m 512M`：表示这只内存为512M；\n`-kernel xxx/arch/arm/boot/zImage`：表示使用哪个内核镜像；\n`-dtb xxx/arch/arm/boot/dts/vexpress-v2p-ca9.dtb`：表示使用哪个dtb文件；\n`-nographic`：表示不启动图形化界面；\n`-append`：表示设置kernel的cmdline；\n`-sd disk.img`：表示使用sd卡上某个文件作为根文件系统；\n`qemu-system-arm -M help`：可以查看支持的板子情况。\n\n\n## 嵌入式启动\n### 嵌入式bootloader\n- 类似于PC的BIOS、硬件自检是否正常\n- 加载系统镜像到RAM\n- 设置不同的启动方式\n\n### 常见的启动方式\n- NOR/NAND flash 启动\n- SD卡启动\n- Bootloader从网络加载Linux内核启动\n\n### u-boot\n前面我们已经可以正常启动linux了，这是qemu帮忙做好的工作，现在自己来配置启动程序\n#### 下载\n下载最新的稳定版就行：\nhttps://ftp.denx.de/pub/u-boot/u-boot-2025.01.tar.bz2\n#### 修改配置文件\n- 进入解压好的目录，用编辑器打开makefile，修改以下配置：\n`CROSS_COMPILE ?= arm-linux-gnueabi-`\n- 再修改配置config.mk\n`ARCH := arm`\n#### 编译\n`make vexpress_ca9x4_defconfig`\n`make -j4`\n#### qemu网络功能设置\n配置QEMU与主机的网络连接 \n• 采用桥接(bridge)的网络连接与Host通信 \n• 需要主机内核tun/tap模块支持 \n这部分参考：\n\n{% link 如何配置 QEMU 虚拟机网络, https://www.zhaixue.cc/qemu/qemu-u-boot.html, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n#### NFS服务\n{% link 挂载NFS根文件系统, https://www.zhaixue.cc/qemu/qemu-mount_nfs_rootfs.html, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n","slug":"qemu模拟开发板开发","published":1,"updated":"2025-02-23T13:27:26.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io1001pmktt88xr5tjq","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"如何配置 QEMU 虚拟机网络\" href=\"https://huaweicloud.csdn.net/6707aefbe2ce0119e0a1e3eb.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NjUyNDYwLCJleHAiOjE3NDA2MjcwNjIsImlhdCI6MTc0MDAyMjI2MiwidXNlcm5hbWUiOiJBX3J1b3NodWkifQ.UvK-zaDEx_il-jNwsV5R23KQ9JmvEZ0mjEbYDA-PcRU&spm=1001.2101.3001.6650.15&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-129685202-blog-131290211.235%5Ev43%5Epc_blog_bottom_relevance_base4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-129685202-blog-131290211.235%5Ev43%5Epc_blog_bottom_relevance_base4&utm_relevant_index=21\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">如何配置 QEMU 虚拟机网络</p><p class=\"url\">https://huaweicloud.csdn.net/6707aefbe2ce0119e0a1e3eb.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NjUyNDYwLCJleHAiOjE3NDA2MjcwNjIsImlhdCI6MTc0MDAyMjI2MiwidXNlcm5hbWUiOiJBX3J1b3NodWkifQ.UvK-zaDEx_il-jNwsV5R23KQ9JmvEZ0mjEbYDA-PcRU&spm=1001.2101.3001.6650.15&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-129685202-blog-131290211.235%5Ev43%5Epc_blog_bottom_relevance_base4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-129685202-blog-131290211.235%5Ev43%5Epc_blog_bottom_relevance_base4&utm_relevant_index=21</p></div></a></div> \n<h1>使用qemu模拟A9处理器并启动linux全过程记录</h1>\n<h2 id=\"qemu是什么\">qemu是什么</h2>\n<p>qemu是一个可以虚拟成硬件的软件，随心所欲地使用调试环境，不同架构的硬件平台并运行虚拟机</p>\n<h2 id=\"安装过程\">安装过程</h2>\n<ol>\n<li>\n<p>拉取官方源码分支8.2 ，只克隆最近的 5 次提交的历史记录<br>\n<code>git clone https://gitlab.com/qemu-project/qemu.git .-branch stable-8.2 --depth 5</code></p>\n<ul>\n<li>克隆完会发现有很多嵌套的子模块需要克隆，比如<code>u-boot</code>，这里使用<code>git submodule</code>可以查询还有什么子模块。</li>\n<li>下载子模块使用<code>git submudule update --init --recursive --depth 5</code> 追踪并递归最新子模块</li>\n</ul>\n</li>\n<li>\n<p>源码编译、</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"Hosts/Linux\" href=\"https://wiki.qemu.org/Hosts/Linux\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/21/uqa4z4-0.webp\"/></div><div class=\"right\"><p class=\"text\">Hosts/Linux</p><p class=\"url\">https://wiki.qemu.org/Hosts/Linux</p></div></a></div> \n<ul>\n<li>安装工具<br>\n<code>sudo apt-get install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev ninja-build</code></li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install git<span class=\"literal\">-email</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install libaio<span class=\"literal\">-dev</span> libbluetooth<span class=\"literal\">-dev</span> libcapstone<span class=\"literal\">-dev</span> libbrlapi<span class=\"literal\">-dev</span> libbz2<span class=\"literal\">-dev</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install libcap<span class=\"literal\">-ng-dev</span> libcurl4<span class=\"literal\">-gnutls-dev</span> libgtk<span class=\"literal\">-3-dev</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install libibverbs<span class=\"literal\">-dev</span> libjpeg8<span class=\"literal\">-dev</span> libncurses5<span class=\"literal\">-dev</span> libnuma<span class=\"literal\">-dev</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install librbd<span class=\"literal\">-dev</span> librdmacm<span class=\"literal\">-dev</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install libsasl2<span class=\"literal\">-dev</span> libsdl2<span class=\"literal\">-dev</span> libseccomp<span class=\"literal\">-dev</span> libsnappy<span class=\"literal\">-dev</span> libssh<span class=\"literal\">-dev</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install libvde<span class=\"literal\">-dev</span> libvdeplug<span class=\"literal\">-dev</span> libvte<span class=\"literal\">-2</span>.<span class=\"number\">91</span><span class=\"literal\">-dev</span> libxen<span class=\"literal\">-dev</span> liblzo2<span class=\"literal\">-dev</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install valgrind xfslibs<span class=\"literal\">-dev</span> </span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译</li>\n</ul>\n <figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">../configure</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"模拟vexpress-a9\">模拟vexpress-a9</h2>\n<h4 id=\"先下载一下Linux源码\">先下载一下Linux源码</h4>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">wget</span> https://cdn.kernel.org/pub/linux/kernel/v4.x/linux<span class=\"literal\">-4</span>.<span class=\"number\">14.7</span>.tar.xz</span><br><span class=\"line\">tar xvf linux<span class=\"literal\">-4</span>.<span class=\"number\">14.7</span>.tar.xz</span><br><span class=\"line\">```    </span><br><span class=\"line\"><span class=\"comment\">#### 编译内核</span></span><br><span class=\"line\">   下面命令把vexpress_defconfig作为配置文件保存为.config，并根据这个config中的配置进行编译。</span><br><span class=\"line\">   ```powershell</span><br><span class=\"line\">   make CROSS_COMPILE=arm<span class=\"literal\">-linux-gnueabi-</span> ARCH=arm vexpress_defconfig</span><br><span class=\"line\">   make CROSS_COMPILE=arm<span class=\"literal\">-linux-gnueabi-</span> ARCH=arm <span class=\"literal\">-j8</span></span><br></pre></td></tr></table></figure>\n<p>编译得到内核文件arch/arm/boot/zImage，Qemu启动时需要指定使用这个映像文件。</p>\n<h4 id=\"制作根文件系统\">制作根文件系统</h4>\n<ul>\n<li>文件系统是对存储设备上的数据进行组织的机制，用户与操作系统进行交互的主要工具就是通过<strong>文件系统调用</strong></li>\n<li>根文件系统是Linux内核启动后的第一个挂载的文件系统，主要由最基本的shell命令、各种库、字符设备、配置脚本组成</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> busybox<span class=\"literal\">-1</span>.<span class=\"number\">35.0</span>/</span><br><span class=\"line\">make defconfig</span><br><span class=\"line\">make CROSS_COMPILE=arm<span class=\"literal\">-linux-gnueabi-</span> <span class=\"literal\">-j8</span></span><br><span class=\"line\">make install CROSS_COMPILE=arm<span class=\"literal\">-linux-gnueabi-</span> <span class=\"literal\">-j8</span></span><br></pre></td></tr></table></figure>\n<p>切换到busybox的上级目录，并使用如下脚本制作镜像：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">mkdir <span class=\"literal\">-p</span> rootfs/&#123;dev,etc/init.d,lib&#125;</span><br><span class=\"line\">touch rootfs/etc/init.d/rcS</span><br><span class=\"line\"><span class=\"comment\">#这里用双引号可能会报错</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"literal\">-e</span> <span class=\"string\">&#x27;#!/bin/sh\\n&#x27;</span> &gt; rootfs/etc/init.d/rcS</span><br><span class=\"line\"><span class=\"built_in\">cp</span> busybox<span class=\"literal\">-1</span>.<span class=\"number\">35.0</span>/_install/* <span class=\"literal\">-r</span> rootfs/</span><br><span class=\"line\"><span class=\"comment\">#sudo cp -P /usr/arm-linux-gnueabihf/lib/* rootfs/lib/</span></span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> /usr/arm<span class=\"literal\">-linux-gnueabihf</span>/lib/sf/* rootfs/lib/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ln -s bin/busybox rootfs/init</span></span><br><span class=\"line\"><span class=\"comment\">#ln -s -f bin/busybox rootfs/sbin/init</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo mknod rootfs/dev/tty1 c <span class=\"number\">4</span> <span class=\"number\">1</span></span><br><span class=\"line\">sudo mknod rootfs/dev/tty2 c <span class=\"number\">4</span> <span class=\"number\">2</span></span><br><span class=\"line\">sudo mknod rootfs/dev/tty3 c <span class=\"number\">4</span> <span class=\"number\">3</span></span><br><span class=\"line\">sudo mknod rootfs/dev/tty4 c <span class=\"number\">4</span> <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo chown root:root <span class=\"literal\">-R</span> rootfs/*</span><br><span class=\"line\">sudo  chmod  <span class=\"number\">777</span> rootfs/etc/init.d/rcS</span><br><span class=\"line\"></span><br><span class=\"line\">qemu<span class=\"literal\">-img</span> create <span class=\"operator\">-f</span> raw disk.img <span class=\"number\">512</span>M</span><br><span class=\"line\">mkfs <span class=\"literal\">-t</span> ext4 ./disk.img</span><br><span class=\"line\">mkdir  <span class=\"literal\">-p</span>   tmpfs</span><br><span class=\"line\">sudo <span class=\"built_in\">mount</span> <span class=\"literal\">-o</span> loop ./disk.img tmpfs/</span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> <span class=\"literal\">-r</span> rootfs/* tmpfs/</span><br><span class=\"line\">sudo umount tmpfs</span><br><span class=\"line\">file disk.img</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-！\">启动~！</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">qemu-system-arm \\</span><br><span class=\"line\">\t-M vexpress-a9 \\</span><br><span class=\"line\">\t-m 512M \\</span><br><span class=\"line\">\t-kernel linux-4.14.7/arch/arm/boot/zImage \\</span><br><span class=\"line\">\t-dtb linux-4.14.7/arch/arm/boot/dts/vexpress-v2p-ca9.dtb \\</span><br><span class=\"line\">\t-nographic \\</span><br><span class=\"line\">\t-append &quot;root=/dev/mmcblk0 rw console=ttyAMA0&quot; \\</span><br><span class=\"line\">\t-sd disk.img</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>关于<code>qemu-system-arm</code>命令各个参数详细解释如下：</p>\n<p><code>-M vexpress-a9</code>：表示使用vexpress-a9开发板的配置；<br>\n<code>-m 512M</code>：表示这只内存为512M；<br>\n<code>-kernel xxx/arch/arm/boot/zImage</code>：表示使用哪个内核镜像；<br>\n<code>-dtb xxx/arch/arm/boot/dts/vexpress-v2p-ca9.dtb</code>：表示使用哪个dtb文件；<br>\n<code>-nographic</code>：表示不启动图形化界面；<br>\n<code>-append</code>：表示设置kernel的cmdline；<br>\n<code>-sd disk.img</code>：表示使用sd卡上某个文件作为根文件系统；<br>\n<code>qemu-system-arm -M help</code>：可以查看支持的板子情况。</p>\n<h2 id=\"嵌入式启动\">嵌入式启动</h2>\n<h3 id=\"嵌入式bootloader\">嵌入式bootloader</h3>\n<ul>\n<li>类似于PC的BIOS、硬件自检是否正常</li>\n<li>加载系统镜像到RAM</li>\n<li>设置不同的启动方式</li>\n</ul>\n<h3 id=\"常见的启动方式\">常见的启动方式</h3>\n<ul>\n<li>NOR/NAND flash 启动</li>\n<li>SD卡启动</li>\n<li>Bootloader从网络加载Linux内核启动</li>\n</ul>\n<h3 id=\"u-boot\">u-boot</h3>\n<p>前面我们已经可以正常启动linux了，这是qemu帮忙做好的工作，现在自己来配置启动程序</p>\n<h4 id=\"下载\">下载</h4>\n<p>下载最新的稳定版就行：<br>\n<a href=\"https://ftp.denx.de/pub/u-boot/u-boot-2025.01.tar.bz2\">https://ftp.denx.de/pub/u-boot/u-boot-2025.01.tar.bz2</a></p>\n<h4 id=\"修改配置文件\">修改配置文件</h4>\n<ul>\n<li>进入解压好的目录，用编辑器打开makefile，修改以下配置：<br>\n<code>CROSS_COMPILE ?= arm-linux-gnueabi-</code></li>\n<li><a href=\"http://xn--config-2g0jt4i987d404c3c0b.mk\">再修改配置config.mk</a><br>\n<code>ARCH := arm</code></li>\n</ul>\n<h4 id=\"编译\">编译</h4>\n<p><code>make vexpress_ca9x4_defconfig</code><br>\n<code>make -j4</code></p>\n<h4 id=\"qemu网络功能设置\">qemu网络功能设置</h4>\n<p>配置QEMU与主机的网络连接<br>\n• 采用桥接(bridge)的网络连接与Host通信<br>\n• 需要主机内核tun/tap模块支持<br>\n这部分参考：</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"如何配置 QEMU 虚拟机网络\" href=\"https://www.zhaixue.cc/qemu/qemu-u-boot.html\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">如何配置 QEMU 虚拟机网络</p><p class=\"url\">https://www.zhaixue.cc/qemu/qemu-u-boot.html</p></div></a></div> \n<h4 id=\"NFS服务\">NFS服务</h4>\n<div class=\"tag link\"><a class=\"link-card\" title=\"挂载NFS根文件系统\" href=\"https://www.zhaixue.cc/qemu/qemu-mount_nfs_rootfs.html\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">挂载NFS根文件系统</p><p class=\"url\">https://www.zhaixue.cc/qemu/qemu-mount_nfs_rootfs.html</p></div></a></div> \n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"如何配置 QEMU 虚拟机网络\" href=\"https://huaweicloud.csdn.net/6707aefbe2ce0119e0a1e3eb.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NjUyNDYwLCJleHAiOjE3NDA2MjcwNjIsImlhdCI6MTc0MDAyMjI2MiwidXNlcm5hbWUiOiJBX3J1b3NodWkifQ.UvK-zaDEx_il-jNwsV5R23KQ9JmvEZ0mjEbYDA-PcRU&spm=1001.2101.3001.6650.15&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-129685202-blog-131290211.235%5Ev43%5Epc_blog_bottom_relevance_base4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-129685202-blog-131290211.235%5Ev43%5Epc_blog_bottom_relevance_base4&utm_relevant_index=21\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">如何配置 QEMU 虚拟机网络</p><p class=\"url\">https://huaweicloud.csdn.net/6707aefbe2ce0119e0a1e3eb.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NjUyNDYwLCJleHAiOjE3NDA2MjcwNjIsImlhdCI6MTc0MDAyMjI2MiwidXNlcm5hbWUiOiJBX3J1b3NodWkifQ.UvK-zaDEx_il-jNwsV5R23KQ9JmvEZ0mjEbYDA-PcRU&spm=1001.2101.3001.6650.15&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-129685202-blog-131290211.235%5Ev43%5Epc_blog_bottom_relevance_base4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-129685202-blog-131290211.235%5Ev43%5Epc_blog_bottom_relevance_base4&utm_relevant_index=21</p></div></a></div> \n<h1>使用qemu模拟A9处理器并启动linux全过程记录</h1>\n<h2 id=\"qemu是什么\">qemu是什么</h2>\n<p>qemu是一个可以虚拟成硬件的软件，随心所欲地使用调试环境，不同架构的硬件平台并运行虚拟机</p>\n<h2 id=\"安装过程\">安装过程</h2>\n<ol>\n<li>\n<p>拉取官方源码分支8.2 ，只克隆最近的 5 次提交的历史记录<br>\n<code>git clone https://gitlab.com/qemu-project/qemu.git .-branch stable-8.2 --depth 5</code></p>\n<ul>\n<li>克隆完会发现有很多嵌套的子模块需要克隆，比如<code>u-boot</code>，这里使用<code>git submodule</code>可以查询还有什么子模块。</li>\n<li>下载子模块使用<code>git submudule update --init --recursive --depth 5</code> 追踪并递归最新子模块</li>\n</ul>\n</li>\n<li>\n<p>源码编译、</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"Hosts/Linux\" href=\"https://wiki.qemu.org/Hosts/Linux\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/21/uqa4z4-0.webp\"/></div><div class=\"right\"><p class=\"text\">Hosts/Linux</p><p class=\"url\">https://wiki.qemu.org/Hosts/Linux</p></div></a></div> \n<ul>\n<li>安装工具<br>\n<code>sudo apt-get install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev ninja-build</code></li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install git<span class=\"literal\">-email</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install libaio<span class=\"literal\">-dev</span> libbluetooth<span class=\"literal\">-dev</span> libcapstone<span class=\"literal\">-dev</span> libbrlapi<span class=\"literal\">-dev</span> libbz2<span class=\"literal\">-dev</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install libcap<span class=\"literal\">-ng-dev</span> libcurl4<span class=\"literal\">-gnutls-dev</span> libgtk<span class=\"literal\">-3-dev</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install libibverbs<span class=\"literal\">-dev</span> libjpeg8<span class=\"literal\">-dev</span> libncurses5<span class=\"literal\">-dev</span> libnuma<span class=\"literal\">-dev</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install librbd<span class=\"literal\">-dev</span> librdmacm<span class=\"literal\">-dev</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install libsasl2<span class=\"literal\">-dev</span> libsdl2<span class=\"literal\">-dev</span> libseccomp<span class=\"literal\">-dev</span> libsnappy<span class=\"literal\">-dev</span> libssh<span class=\"literal\">-dev</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install libvde<span class=\"literal\">-dev</span> libvdeplug<span class=\"literal\">-dev</span> libvte<span class=\"literal\">-2</span>.<span class=\"number\">91</span><span class=\"literal\">-dev</span> libxen<span class=\"literal\">-dev</span> liblzo2<span class=\"literal\">-dev</span></span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install valgrind xfslibs<span class=\"literal\">-dev</span> </span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译</li>\n</ul>\n <figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">../configure</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"模拟vexpress-a9\">模拟vexpress-a9</h2>\n<h4 id=\"先下载一下Linux源码\">先下载一下Linux源码</h4>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">wget</span> https://cdn.kernel.org/pub/linux/kernel/v4.x/linux<span class=\"literal\">-4</span>.<span class=\"number\">14.7</span>.tar.xz</span><br><span class=\"line\">tar xvf linux<span class=\"literal\">-4</span>.<span class=\"number\">14.7</span>.tar.xz</span><br><span class=\"line\">```    </span><br><span class=\"line\"><span class=\"comment\">#### 编译内核</span></span><br><span class=\"line\">   下面命令把vexpress_defconfig作为配置文件保存为.config，并根据这个config中的配置进行编译。</span><br><span class=\"line\">   ```powershell</span><br><span class=\"line\">   make CROSS_COMPILE=arm<span class=\"literal\">-linux-gnueabi-</span> ARCH=arm vexpress_defconfig</span><br><span class=\"line\">   make CROSS_COMPILE=arm<span class=\"literal\">-linux-gnueabi-</span> ARCH=arm <span class=\"literal\">-j8</span></span><br></pre></td></tr></table></figure>\n<p>编译得到内核文件arch/arm/boot/zImage，Qemu启动时需要指定使用这个映像文件。</p>\n<h4 id=\"制作根文件系统\">制作根文件系统</h4>\n<ul>\n<li>文件系统是对存储设备上的数据进行组织的机制，用户与操作系统进行交互的主要工具就是通过<strong>文件系统调用</strong></li>\n<li>根文件系统是Linux内核启动后的第一个挂载的文件系统，主要由最基本的shell命令、各种库、字符设备、配置脚本组成</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> busybox<span class=\"literal\">-1</span>.<span class=\"number\">35.0</span>/</span><br><span class=\"line\">make defconfig</span><br><span class=\"line\">make CROSS_COMPILE=arm<span class=\"literal\">-linux-gnueabi-</span> <span class=\"literal\">-j8</span></span><br><span class=\"line\">make install CROSS_COMPILE=arm<span class=\"literal\">-linux-gnueabi-</span> <span class=\"literal\">-j8</span></span><br></pre></td></tr></table></figure>\n<p>切换到busybox的上级目录，并使用如下脚本制作镜像：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">mkdir <span class=\"literal\">-p</span> rootfs/&#123;dev,etc/init.d,lib&#125;</span><br><span class=\"line\">touch rootfs/etc/init.d/rcS</span><br><span class=\"line\"><span class=\"comment\">#这里用双引号可能会报错</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"literal\">-e</span> <span class=\"string\">&#x27;#!/bin/sh\\n&#x27;</span> &gt; rootfs/etc/init.d/rcS</span><br><span class=\"line\"><span class=\"built_in\">cp</span> busybox<span class=\"literal\">-1</span>.<span class=\"number\">35.0</span>/_install/* <span class=\"literal\">-r</span> rootfs/</span><br><span class=\"line\"><span class=\"comment\">#sudo cp -P /usr/arm-linux-gnueabihf/lib/* rootfs/lib/</span></span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> /usr/arm<span class=\"literal\">-linux-gnueabihf</span>/lib/sf/* rootfs/lib/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ln -s bin/busybox rootfs/init</span></span><br><span class=\"line\"><span class=\"comment\">#ln -s -f bin/busybox rootfs/sbin/init</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo mknod rootfs/dev/tty1 c <span class=\"number\">4</span> <span class=\"number\">1</span></span><br><span class=\"line\">sudo mknod rootfs/dev/tty2 c <span class=\"number\">4</span> <span class=\"number\">2</span></span><br><span class=\"line\">sudo mknod rootfs/dev/tty3 c <span class=\"number\">4</span> <span class=\"number\">3</span></span><br><span class=\"line\">sudo mknod rootfs/dev/tty4 c <span class=\"number\">4</span> <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo chown root:root <span class=\"literal\">-R</span> rootfs/*</span><br><span class=\"line\">sudo  chmod  <span class=\"number\">777</span> rootfs/etc/init.d/rcS</span><br><span class=\"line\"></span><br><span class=\"line\">qemu<span class=\"literal\">-img</span> create <span class=\"operator\">-f</span> raw disk.img <span class=\"number\">512</span>M</span><br><span class=\"line\">mkfs <span class=\"literal\">-t</span> ext4 ./disk.img</span><br><span class=\"line\">mkdir  <span class=\"literal\">-p</span>   tmpfs</span><br><span class=\"line\">sudo <span class=\"built_in\">mount</span> <span class=\"literal\">-o</span> loop ./disk.img tmpfs/</span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> <span class=\"literal\">-r</span> rootfs/* tmpfs/</span><br><span class=\"line\">sudo umount tmpfs</span><br><span class=\"line\">file disk.img</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-！\">启动~！</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">qemu-system-arm \\</span><br><span class=\"line\">\t-M vexpress-a9 \\</span><br><span class=\"line\">\t-m 512M \\</span><br><span class=\"line\">\t-kernel linux-4.14.7/arch/arm/boot/zImage \\</span><br><span class=\"line\">\t-dtb linux-4.14.7/arch/arm/boot/dts/vexpress-v2p-ca9.dtb \\</span><br><span class=\"line\">\t-nographic \\</span><br><span class=\"line\">\t-append &quot;root=/dev/mmcblk0 rw console=ttyAMA0&quot; \\</span><br><span class=\"line\">\t-sd disk.img</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>关于<code>qemu-system-arm</code>命令各个参数详细解释如下：</p>\n<p><code>-M vexpress-a9</code>：表示使用vexpress-a9开发板的配置；<br>\n<code>-m 512M</code>：表示这只内存为512M；<br>\n<code>-kernel xxx/arch/arm/boot/zImage</code>：表示使用哪个内核镜像；<br>\n<code>-dtb xxx/arch/arm/boot/dts/vexpress-v2p-ca9.dtb</code>：表示使用哪个dtb文件；<br>\n<code>-nographic</code>：表示不启动图形化界面；<br>\n<code>-append</code>：表示设置kernel的cmdline；<br>\n<code>-sd disk.img</code>：表示使用sd卡上某个文件作为根文件系统；<br>\n<code>qemu-system-arm -M help</code>：可以查看支持的板子情况。</p>\n<h2 id=\"嵌入式启动\">嵌入式启动</h2>\n<h3 id=\"嵌入式bootloader\">嵌入式bootloader</h3>\n<ul>\n<li>类似于PC的BIOS、硬件自检是否正常</li>\n<li>加载系统镜像到RAM</li>\n<li>设置不同的启动方式</li>\n</ul>\n<h3 id=\"常见的启动方式\">常见的启动方式</h3>\n<ul>\n<li>NOR/NAND flash 启动</li>\n<li>SD卡启动</li>\n<li>Bootloader从网络加载Linux内核启动</li>\n</ul>\n<h3 id=\"u-boot\">u-boot</h3>\n<p>前面我们已经可以正常启动linux了，这是qemu帮忙做好的工作，现在自己来配置启动程序</p>\n<h4 id=\"下载\">下载</h4>\n<p>下载最新的稳定版就行：<br>\n<a href=\"https://ftp.denx.de/pub/u-boot/u-boot-2025.01.tar.bz2\">https://ftp.denx.de/pub/u-boot/u-boot-2025.01.tar.bz2</a></p>\n<h4 id=\"修改配置文件\">修改配置文件</h4>\n<ul>\n<li>进入解压好的目录，用编辑器打开makefile，修改以下配置：<br>\n<code>CROSS_COMPILE ?= arm-linux-gnueabi-</code></li>\n<li><a href=\"http://xn--config-2g0jt4i987d404c3c0b.mk\">再修改配置config.mk</a><br>\n<code>ARCH := arm</code></li>\n</ul>\n<h4 id=\"编译\">编译</h4>\n<p><code>make vexpress_ca9x4_defconfig</code><br>\n<code>make -j4</code></p>\n<h4 id=\"qemu网络功能设置\">qemu网络功能设置</h4>\n<p>配置QEMU与主机的网络连接<br>\n• 采用桥接(bridge)的网络连接与Host通信<br>\n• 需要主机内核tun/tap模块支持<br>\n这部分参考：</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"如何配置 QEMU 虚拟机网络\" href=\"https://www.zhaixue.cc/qemu/qemu-u-boot.html\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">如何配置 QEMU 虚拟机网络</p><p class=\"url\">https://www.zhaixue.cc/qemu/qemu-u-boot.html</p></div></a></div> \n<h4 id=\"NFS服务\">NFS服务</h4>\n<div class=\"tag link\"><a class=\"link-card\" title=\"挂载NFS根文件系统\" href=\"https://www.zhaixue.cc/qemu/qemu-mount_nfs_rootfs.html\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">挂载NFS根文件系统</p><p class=\"url\">https://www.zhaixue.cc/qemu/qemu-mount_nfs_rootfs.html</p></div></a></div> \n"},{"title":"test","cover":"https://image.aruoshui.fun/i/2024/12/31/vshir1-0.webp","description":"测试功能随便写的","abbrlink":63534,"date":"2024-01-26T02:28:48.000Z","_content":"\n# 测试一级标题\n## 二级标题\n### 三级标题\n#### H4\n##### H5\n###### H6\n\n这是一个数学公式\n$\\lim_{x \\to \\infty}f(x)$\n\n![alt text](https://s2.loli.net/2024/01/29/Lk54vdUi2COefu1.jpg)\n\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=239146551&bvid=BV1Ve411Y7Vp&cid=1417237970&p=1&high_quality=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n\n# 自动部署测试ing\n\n# 手动部署\n\n# 测试字体大小","source":"_posts/test.md","raw":"---\ntitle: test\ncover: 'https://image.aruoshui.fun/i/2024/12/31/vshir1-0.webp'\ndescription: 测试功能随便写的\nabbrlink: 63534\ndate: 2024-1-26 10:28:48\n---\n\n# 测试一级标题\n## 二级标题\n### 三级标题\n#### H4\n##### H5\n###### H6\n\n这是一个数学公式\n$\\lim_{x \\to \\infty}f(x)$\n\n![alt text](https://s2.loli.net/2024/01/29/Lk54vdUi2COefu1.jpg)\n\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=239146551&bvid=BV1Ve411Y7Vp&cid=1417237970&p=1&high_quality=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n\n# 自动部署测试ing\n\n# 手动部署\n\n# 测试字体大小","slug":"test","published":1,"updated":"2024-12-31T11:25:16.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io30024mkttb49pfhc4","content":"<h1>测试一级标题</h1>\n<h2 id=\"二级标题\">二级标题</h2>\n<h3 id=\"三级标题\">三级标题</h3>\n<h4 id=\"H4\">H4</h4>\n<h5 id=\"H5\">H5</h5>\n<h6 id=\"H6\">H6</h6>\n<p>这是一个数学公式<br>\n$\\lim_{x \\to \\infty}f(x)$</p>\n<p><img src=\"https://s2.loli.net/2024/01/29/Lk54vdUi2COefu1.jpg\" alt=\"alt text\"></p>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=239146551&bvid=BV1Ve411Y7Vp&cid=1417237970&p=1&high_quality=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<h1>自动部署测试ing</h1>\n<h1>手动部署</h1>\n<h1>测试字体大小</h1>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>测试一级标题</h1>\n<h2 id=\"二级标题\">二级标题</h2>\n<h3 id=\"三级标题\">三级标题</h3>\n<h4 id=\"H4\">H4</h4>\n<h5 id=\"H5\">H5</h5>\n<h6 id=\"H6\">H6</h6>\n<p>这是一个数学公式<br>\n$\\lim_{x \\to \\infty}f(x)$</p>\n<p><img src=\"https://s2.loli.net/2024/01/29/Lk54vdUi2COefu1.jpg\" alt=\"alt text\"></p>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=239146551&bvid=BV1Ve411Y7Vp&cid=1417237970&p=1&high_quality=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<h1>自动部署测试ing</h1>\n<h1>手动部署</h1>\n<h1>测试字体大小</h1>\n"},{"title":"makefile工程项目","abbrlink":26988,"date":"2024-02-26T12:03:31.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqu1jr-0.webp","swiper_index":null,"_content":"\n\n\n\n# 参考文章\n{% link 知乎, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n{% link CSDN, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n\n{% link github, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp%} \n\n\n# 什么是makefile\n- 描述了整个工程了的编译、链接规则 \n- 软件项目自动化编译 \n\n# 程序的编译以及链接\n## 程序的存储与运行\n![计算机架构](https://image.aruoshui.fun/i/2025/02/26/xf9l23-0.webp)\n\n### 嵌入式系统架构\n![架构](https://image.aruoshui.fun/i/2025/02/26/xg6ill-0.webp)\n\n## 程序文件的分类\n- 二进制文件bin，用途依系统或应用而定\n- elf文件，用于二进制文件、可执行文件、目标代码、共享库和核心转储格式文件的文件格式。\n    - 可执行文件\n    - 可重定位文件、可组装文件\n    - 共享库文件\n\n## 动态库和静态库\n库就是目标文件的归档\n- 静态库：在编译链接的过程中就链接到了可执行文件中，但是如果部分库重复使用，就会导致重复链接，造成文件大小太大\n  ![静态库](https://image.aruoshui.fun/i/2025/02/26/xqq5p8-0.webp)\n\n- 动态库：可以看到入口地址，就像我们安装文件的时候，安装包里有很多dll文件，在运行时会随可执行文件一起加载到内存中去，程序运行到该位置会从内存中动态加载此库，从而减少程序的体积\n  ![动态库](https://image.aruoshui.fun/i/2025/02/26/xpipv7-0.webp)\n\n{% note success modern %}success \n\n问题：\n一个C文件中，如果一行代码后面忘记; 是报编译错误还是链接错误？ \n**编译器在语法分析阶段直接报错**\n• 一个C文件中，引用了一个在另一个C文件中定义的函数,但是没有声明，编译会成功吗？会出现什么错误或者警告，如何去除这个错误或警告？ \n**可能通过但产生 警告（如隐式函数声明警告），也可能直接报错（取决于编译器严格性）**\n• 一个C文件中，引用了一个没有被定义的函数，是否会编译通过？是报编译错误，还是链接错误？\n\n**编译阶段：可能通过但有警告（隐式声明），生成目标文件。**\n**错误阶段：最终报 链接错误，因为函数定义不存在于任何链接的文件中。**\n\n{% endnote %}\n\n## makefile的基本语法\n### 规则\n\n#### 目标\n1. 一个规则中可以无目标依赖，仅仅实现某种操作\n    比如：\n    ```makefile\n    test1 :\n     @echo \"Just for test1:$@\"\n    test2:\n     @echo \"Just for test2\"\n    ```\n2. 一个规则中可以没有命令，仅仅描述依赖关系\n    ```makefile\n    all:test1\n    all:test2\n    ```\n    这两条命令都依赖test1或2来执行\n3. 默认目标：可以有多个目标，但是以第一个为默认目标 \n   \n4. 多目标：一个规则中可以有多个目标，多个目标具有相同的生成命令 \n   \n5. 多规则目标:多个规则可以是同一目标，make在解析的过程中会将多个规则的依赖文件合并\n    ```makefile\n    all:test1\n    all:test2\n    ```\n    还是一样的在make中会将所有的all合并一起\n\n6. 伪目标：无条件执行，可以看做一种标签，实行某种操作\n   ```makefile\n   .PONHY: clean\n   clean:\n\trm -f lcd.o hello player.o\n   ```\n#### 目标依赖\n1. 时间戳机制：makefile其实就是根据时间戳来判断目标依赖文件是否需要更新的\n   - 在上次make之后修改过的C文件，会被重新编译 \n   - 在上次make之后修改过的头文件，依赖此头文件的会被重新编译\n2. 自动产生依赖\n   Gcc –M命令生成该文件要依赖的文件\n3. 模式匹配\n\n#### 生成命令\n由shell命令组成，每条命令make都会开一个进程并执行。\n命令也支持并发执行命令 `make -j4`\n\n### 变量\n#### 变量基础\n清晰易懂\n```makefile\nSTR = hello\nSTR2 = hello\nSTR2 += world!\n\ntest1 = a\ntest1 ?= b\ntest2 ?= b\n\nall:\n\t@echo \"STR = $(STR)\"\n\t@echo \"STR2 = $(STR2)\"\n\t@echo \"test1 = $(test1)\"\n\t@echo \"test2 = $(test2)\"\n```\n#### 变量分类\n1. 立即展开变量：在解析阶段直接赋值常量字符串\n   使用`:=`赋值操作符\n2. 延迟展开变量：在运行阶段，实际使用变量时再进行求值 \n   使用`=`赋值操作符\n```makefile\n.PHONY:all\n\nHELLO = Good\nTIME = morning!\nSTRING = $(HELLO) $(TIME)\n# STRING ：= $(HELLO) $(TIME)\n$(info $(STRING))\nTIME = afternoon!\n$(info $(STRING))\n\nall:\n\t@echo \"done\"\n```\n这里如果使用立即展开变量，在makefile解析生成依赖树的时候，**直接变成常量字符串了**\n\n• 一般在目标、目标依赖中使用立即展开变量 \n• 在命令中一般使用延迟展开变量\n\n#### 追加、条件赋值\n#### 目标变量\n默认为全局变量，在所有依赖的规则中都可以使用，可以做到文件级的编译选项\n```makefile\n.PHONY:clean\n\nOBJS = player.o lcd.o\nBIN  = mp3\nN = 1\n$(BIN): N = 2\n$(BIN):$(OBJS)\n\t@echo \"BIN: N = $(N)\"\n\tgcc -o $(BIN) $(OBJS)\nplayer.o:N= 3\nplayer.o:player.c\n\t@echo \"player.o: N = $(N)\"\n\tgcc -o player.o -c player.c\nlcd.o:lcd.c # 这个N是由于 bin依赖lcd，所以N取 bin中定义的N = 2\n\t@echo \"lcd.o: N = $(N)\"\n\tgcc -o lcd.o -c lcd.c\nclean:\n\t@echo \"clean: N = $(N)\"\n\trm -f  $(BIN) $(OBJS)\n```\n\n#### 模式变量\n```makefile\n.PHONY:clean\nN = 1\nOBJS = player.o lcd.o\nBIN  = mp3\n$(BIN):$(OBJS)\n\t@echo \"BIN:N=$(N)\"\n\tgcc -o $(BIN) $(OBJS)\n$(BIN): N = 2\n%.o: N = 3\nplayer.o:player.c\n\t@echo \"player.o:N=$(N)\"\n\tgcc -o player.o -c player.c\nlcd.o:lcd.c\n\t@echo \"lcd.o:N=$(N)\"\n\tgcc -o lcd.o -c lcd.c\nclean:\n\t@echo \"clean: N = $(N)\"\n\trm  $(BIN) $(OBJS)\n\n##########################\nplayer.o:N=3\ngcc -o player.o -c player.c\nlcd.o:N=3\ngcc -o lcd.o -c lcd.c\nBIN:N=2\ngcc -o mp3 player.o lcd.o\n```\n从结果可以知道所有.o后缀的目标都以N = 3为值\n\n#### 自动变量\n```txt\n自动变量是局部变量 \n• 目标 \n$@ \n• 所有目标依赖 \n$^ \n• 第一个依赖 \n$< \n• 使用举例 \ngcc  -o $@ $^ \n```\n\n```makefile\n.PHONY:clean\nOBJS = player.o lcd.o\nBIN  = mp3\n$(BIN):$(OBJS)\n\t@echo \"BIN------------$@:$^\"\n\tgcc -o $@ $^ \nplayer.o:player.c\n\t@echo \"------------$@:$^\"\n\tgcc -o $@ -c $^\nlcd.o:lcd.c\n\t@echo \"---------$@:$^\"\n\tgcc -o $@ -c $^\nclean:\n\trm -f $(BIN) $(OBJS)\n```\n\n#### 系统环境变量\n作用范围 \n- 变量在make开始运行时被载入到Makefile文件中 \n- 对所有的Makefile都有效。 \n- 若Makefile中定义同名变量，系统环境变量将被覆盖 \n- 命令行中传递同名变量，系统环境变量将被覆盖 \n\n常见的系统环境变量 \n- CFLAGS \n- SHELL \n- MAKE \n\n#### 变量的传递\n```txt\n├── lcd\n│   └── makefile\n├── makefile\n└── test\n    └── makefile\n```\n```makefile\n.PHONY:all\n\nexport N = 3\n#N = 3\nall:\n\t@echo \"build....\"\n#\tcd test && make N=$(N)\n\tcd test && make\n\tmake -C lcd \n```\n这里变量以export设置为系统环境变量，其他makefile也能访问到\n\n### 条件执行\n1. 关键字\n   • ifeq、else、endif \n   • ifneq\n2. 使用\n   条件语句从ifeq开始，括号与关键字用空格隔开\n```makefile\n.PHONY:all\n\nDEBUG = true\nifeq ($(DEBUG),true)\nVERSION = debug\nCC = gcc -g\nelse\nVERSION = release\nCC = gcc\nendif\n\nhello:hello.c\n\t@echo \"build $(VERSION) mode\"\n\t$(CC) -o $@ $^\nclean:\n\trm hello\n```\n进行选择debug模式或者release模式切换\n\n### 函数\n直接查手册就行\n#### 文本处理函数\n```makefile\n.PHONY:all\nSRCS = player.c lcd.c usb.c media.c hello.h main.txt\nOBJS = $(subst .c,.o,$(strip $(SRCS)))\nDEPS = $(patsubst %.c,%.d,$(SRCS))\nDEPS2 = $(SRCS:.c=.d)\nFIND = $(findstring usb,$(SRCS))\nFILTER = $(filter %.c %.h, $(SRCS))\nall:\n\t@echo \"OBJS = $(OBJS)\"\t\n\t@echo \"DEPS = $(DEPS)\"\n\t@echo \"DEPS2 = $(DEPS2)\"\n\t@echo \"FIND = $(FIND)\"\n\t@echo \"FILTER = $(FILTER)\"\n\n#########################################\nOBJS = player.o lcd.o usb.o media.o hello.h main.txt\nDEPS = player.d lcd.d usb.d media.d hello.h main.txt\nDEPS2 = player.d lcd.d usb.d media.d hello.h main.txt\nFIND = usb\nFILTER = player.c lcd.c usb.c media.c hello.h\n```\n\n#### 文件名处理函数\n```makefile\n.PHONY:all\nLIB = /home/hello/libhello.a\nLIB1 = $(dir $(LIB))\nLIB2 = $(notdir $(LIB))\nLIB3 = $(suffix $(LIB))\nLIB4 = $(basename $(LIB))\nLIB5 = $(addsuffix .c,$(LIB4))\nLIB6 = $(addprefix /usr/lib/,$(LIB2))\nSRCS = $(wildcard *.c)\nall:\n\t@echo \"LIB1 = $(LIB1)\"\n\t@echo \"LIB2 = $(LIB2)\"\n\t@echo \"LIB3 = $(LIB3)\"\n\t@echo \"LIB4 = $(LIB4)\"\n\t@echo \"LIB5 = $(LIB5)\"\n\t@echo \"LIB6 = $(LIB6)\"\t\n\t@echo \"SRCS = $(SRCS)\"\n\n#########################################\nLIB1 = /home/hello/\nLIB2 = libhello.a\nLIB3 = .a\nLIB4 = /home/hello/libhello\nLIB5 = /home/hello/libhello.c\nLIB6 = /usr/lib/libhello.a\nSRCS = hello.c 3.c main.c\n```\n#### 常用函数 \nforeach\n```makefile\nA = 1 3 4 5 6 7 8 9\nB = $(foreach i,$(A),$(addprefix 0.,$(i)))\nC = $(foreach i,$(A),$(addsuffix .0,$(i)))\n\n\nall:\n@echo \"A = $(A)\"\n@echo \"B = $(B)\"\n@echo \"C = $(C)\"\n```\n   \nshell\n```makefile\n.PHONY:all clean\n$(shell mkdir -p s1)\n$(shell mkdir -p s2)\nall:\n\t@echo \"hello world\"\nclean:\n\trm -r s1 s2\n```\n### 库的生成和使用\n#### 静态库的生成\n都知道库是给别人用的，所以做库时，头文件(.h)必须暴露，源文件(.c)必须隐藏。\n1. 将需要形成库的文件编译成.o文件\n   ```dotnetcli\n   ├── hello.c  - 做成库\n   ├── hello.h\n   └── main.c   -调用库\n   ```\n   `gcc -c hello.c -o hello.o`\n2. 然后使用指令`ar -rc libhello.a hello.o`来生成库\n   注意**形成库文件前缀必须是lib，后缀必须是.a，后面可以加版本号。**\n\n#### 静态库的使用\n我这里已经成了一个静态库，现在交付给其他人使用\n首先拿到别人给的头文件和库文件，我们需要去系统路径下安装别人给的头文件和库文件： \n\n安装头文件：sudo cp*.h /usr/include/\n安装库文件：sudo cp libmy_stdio.a /lib64/\n\n```txt\n├── hello.c\n├── hello.h\n├── hello.o\n├── libhello.a\n└── main.c\n```\n简单例子来看现在main.c需要使用库，就可以使用` gcc main.c -L ./ -l hello` ，运行生成的可执行文件即可\n`-l`参数使用来指定第三方库的\n`-L`参数使用来指定库的路径的，由于我这个简单的例子没有将库放入系统库文件，所以使用`-L`来指定位置\n\n#### makefile中的静态库生成\n制作：\n```makefile\n.PHONY:clean\n\nlibmath.a:libmath.o\n\tar rcs $@ $^\nlibmath.o:libmath.c libmath.h\nclean:\n\trm libmath.a libmath.o\n```\n\n使用：\n```makefile\n.PHONY: clean\n\nhello:main.o\n\tgcc -o $@ $^ -L./ -lmath\nmain.o:main.c\n\tgcc -o $@ -c $^\nclean:\n\trm hello main.o\n```\n\n#### 动态库的生成\n有了静态库，动态库也不难理解\n```makefile\n.PHONY:clean\nlibdll.so:dll.o\n\tgcc -o $@ -shared $^\ndll.o:dll.c\n\tgcc -o $@ -fPIC -c $^ \nclean:\n\trm libdll.so dll.o\n```\n\n使用方法跟静态库类似\n```makefile\n.PHONY:clean\nhello:main.o\n\tgcc -o hello main.o -L./ -ldll\nmain.o:main.c\n\tgcc -o $@ -c -fPIC $^\n\nclean:\n\trm -f  main.o hello\n```\n这里可以使用`ldd`系统命令来查看依赖情况\n\n#### Linux系统中，os可以根据环境变量查动态库\n`export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:` +路径也可以：\n如果想永久加env可以`vim .bash.src`中加入export ...\n记得刷新就行\n\n## makefile小tips\n学完了基本的语法，就可以开始实践makefile了，下面是开发中经常遇到的初级及tips\n### 自动生成依赖关系\n\n问题抛出可以看：\n{% link 自动生成依赖关系, https://blog.csdn.net/qq_52484093/article/details/122765782,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n执行 make 时，首先查看 include，然后才是执行顶层目标所对应的规则。\n\n\n### 使用目录管理源文件\n源文件散着放在一起会造成混乱，少一点还能理清楚，但是源文件多起来就不那么方便了，这里使用目录来管理源文件\n\n{% link 利用Makefile给多文件、多目录C源码建立工程, https://zhuanlan.zhihu.com/p/422891037,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n\n## 实战案例\n{% link Makefile工程实践, https://blog.csdn.net/qq_55299368/article/details/122071652,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n","source":"_posts/makefile工程项目.md","raw":"---\ntitle: makefile工程项目\nabbrlink: 26988\ndate: 2024-02-26 20:03:31\ntags:\ndescription:\ncategories:\ncover:\nswiper_index:\n---\n\n\n\n\n# 参考文章\n{% link 知乎, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n{% link CSDN, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n\n{% link github, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp%} \n\n\n# 什么是makefile\n- 描述了整个工程了的编译、链接规则 \n- 软件项目自动化编译 \n\n# 程序的编译以及链接\n## 程序的存储与运行\n![计算机架构](https://image.aruoshui.fun/i/2025/02/26/xf9l23-0.webp)\n\n### 嵌入式系统架构\n![架构](https://image.aruoshui.fun/i/2025/02/26/xg6ill-0.webp)\n\n## 程序文件的分类\n- 二进制文件bin，用途依系统或应用而定\n- elf文件，用于二进制文件、可执行文件、目标代码、共享库和核心转储格式文件的文件格式。\n    - 可执行文件\n    - 可重定位文件、可组装文件\n    - 共享库文件\n\n## 动态库和静态库\n库就是目标文件的归档\n- 静态库：在编译链接的过程中就链接到了可执行文件中，但是如果部分库重复使用，就会导致重复链接，造成文件大小太大\n  ![静态库](https://image.aruoshui.fun/i/2025/02/26/xqq5p8-0.webp)\n\n- 动态库：可以看到入口地址，就像我们安装文件的时候，安装包里有很多dll文件，在运行时会随可执行文件一起加载到内存中去，程序运行到该位置会从内存中动态加载此库，从而减少程序的体积\n  ![动态库](https://image.aruoshui.fun/i/2025/02/26/xpipv7-0.webp)\n\n{% note success modern %}success \n\n问题：\n一个C文件中，如果一行代码后面忘记; 是报编译错误还是链接错误？ \n**编译器在语法分析阶段直接报错**\n• 一个C文件中，引用了一个在另一个C文件中定义的函数,但是没有声明，编译会成功吗？会出现什么错误或者警告，如何去除这个错误或警告？ \n**可能通过但产生 警告（如隐式函数声明警告），也可能直接报错（取决于编译器严格性）**\n• 一个C文件中，引用了一个没有被定义的函数，是否会编译通过？是报编译错误，还是链接错误？\n\n**编译阶段：可能通过但有警告（隐式声明），生成目标文件。**\n**错误阶段：最终报 链接错误，因为函数定义不存在于任何链接的文件中。**\n\n{% endnote %}\n\n## makefile的基本语法\n### 规则\n\n#### 目标\n1. 一个规则中可以无目标依赖，仅仅实现某种操作\n    比如：\n    ```makefile\n    test1 :\n     @echo \"Just for test1:$@\"\n    test2:\n     @echo \"Just for test2\"\n    ```\n2. 一个规则中可以没有命令，仅仅描述依赖关系\n    ```makefile\n    all:test1\n    all:test2\n    ```\n    这两条命令都依赖test1或2来执行\n3. 默认目标：可以有多个目标，但是以第一个为默认目标 \n   \n4. 多目标：一个规则中可以有多个目标，多个目标具有相同的生成命令 \n   \n5. 多规则目标:多个规则可以是同一目标，make在解析的过程中会将多个规则的依赖文件合并\n    ```makefile\n    all:test1\n    all:test2\n    ```\n    还是一样的在make中会将所有的all合并一起\n\n6. 伪目标：无条件执行，可以看做一种标签，实行某种操作\n   ```makefile\n   .PONHY: clean\n   clean:\n\trm -f lcd.o hello player.o\n   ```\n#### 目标依赖\n1. 时间戳机制：makefile其实就是根据时间戳来判断目标依赖文件是否需要更新的\n   - 在上次make之后修改过的C文件，会被重新编译 \n   - 在上次make之后修改过的头文件，依赖此头文件的会被重新编译\n2. 自动产生依赖\n   Gcc –M命令生成该文件要依赖的文件\n3. 模式匹配\n\n#### 生成命令\n由shell命令组成，每条命令make都会开一个进程并执行。\n命令也支持并发执行命令 `make -j4`\n\n### 变量\n#### 变量基础\n清晰易懂\n```makefile\nSTR = hello\nSTR2 = hello\nSTR2 += world!\n\ntest1 = a\ntest1 ?= b\ntest2 ?= b\n\nall:\n\t@echo \"STR = $(STR)\"\n\t@echo \"STR2 = $(STR2)\"\n\t@echo \"test1 = $(test1)\"\n\t@echo \"test2 = $(test2)\"\n```\n#### 变量分类\n1. 立即展开变量：在解析阶段直接赋值常量字符串\n   使用`:=`赋值操作符\n2. 延迟展开变量：在运行阶段，实际使用变量时再进行求值 \n   使用`=`赋值操作符\n```makefile\n.PHONY:all\n\nHELLO = Good\nTIME = morning!\nSTRING = $(HELLO) $(TIME)\n# STRING ：= $(HELLO) $(TIME)\n$(info $(STRING))\nTIME = afternoon!\n$(info $(STRING))\n\nall:\n\t@echo \"done\"\n```\n这里如果使用立即展开变量，在makefile解析生成依赖树的时候，**直接变成常量字符串了**\n\n• 一般在目标、目标依赖中使用立即展开变量 \n• 在命令中一般使用延迟展开变量\n\n#### 追加、条件赋值\n#### 目标变量\n默认为全局变量，在所有依赖的规则中都可以使用，可以做到文件级的编译选项\n```makefile\n.PHONY:clean\n\nOBJS = player.o lcd.o\nBIN  = mp3\nN = 1\n$(BIN): N = 2\n$(BIN):$(OBJS)\n\t@echo \"BIN: N = $(N)\"\n\tgcc -o $(BIN) $(OBJS)\nplayer.o:N= 3\nplayer.o:player.c\n\t@echo \"player.o: N = $(N)\"\n\tgcc -o player.o -c player.c\nlcd.o:lcd.c # 这个N是由于 bin依赖lcd，所以N取 bin中定义的N = 2\n\t@echo \"lcd.o: N = $(N)\"\n\tgcc -o lcd.o -c lcd.c\nclean:\n\t@echo \"clean: N = $(N)\"\n\trm -f  $(BIN) $(OBJS)\n```\n\n#### 模式变量\n```makefile\n.PHONY:clean\nN = 1\nOBJS = player.o lcd.o\nBIN  = mp3\n$(BIN):$(OBJS)\n\t@echo \"BIN:N=$(N)\"\n\tgcc -o $(BIN) $(OBJS)\n$(BIN): N = 2\n%.o: N = 3\nplayer.o:player.c\n\t@echo \"player.o:N=$(N)\"\n\tgcc -o player.o -c player.c\nlcd.o:lcd.c\n\t@echo \"lcd.o:N=$(N)\"\n\tgcc -o lcd.o -c lcd.c\nclean:\n\t@echo \"clean: N = $(N)\"\n\trm  $(BIN) $(OBJS)\n\n##########################\nplayer.o:N=3\ngcc -o player.o -c player.c\nlcd.o:N=3\ngcc -o lcd.o -c lcd.c\nBIN:N=2\ngcc -o mp3 player.o lcd.o\n```\n从结果可以知道所有.o后缀的目标都以N = 3为值\n\n#### 自动变量\n```txt\n自动变量是局部变量 \n• 目标 \n$@ \n• 所有目标依赖 \n$^ \n• 第一个依赖 \n$< \n• 使用举例 \ngcc  -o $@ $^ \n```\n\n```makefile\n.PHONY:clean\nOBJS = player.o lcd.o\nBIN  = mp3\n$(BIN):$(OBJS)\n\t@echo \"BIN------------$@:$^\"\n\tgcc -o $@ $^ \nplayer.o:player.c\n\t@echo \"------------$@:$^\"\n\tgcc -o $@ -c $^\nlcd.o:lcd.c\n\t@echo \"---------$@:$^\"\n\tgcc -o $@ -c $^\nclean:\n\trm -f $(BIN) $(OBJS)\n```\n\n#### 系统环境变量\n作用范围 \n- 变量在make开始运行时被载入到Makefile文件中 \n- 对所有的Makefile都有效。 \n- 若Makefile中定义同名变量，系统环境变量将被覆盖 \n- 命令行中传递同名变量，系统环境变量将被覆盖 \n\n常见的系统环境变量 \n- CFLAGS \n- SHELL \n- MAKE \n\n#### 变量的传递\n```txt\n├── lcd\n│   └── makefile\n├── makefile\n└── test\n    └── makefile\n```\n```makefile\n.PHONY:all\n\nexport N = 3\n#N = 3\nall:\n\t@echo \"build....\"\n#\tcd test && make N=$(N)\n\tcd test && make\n\tmake -C lcd \n```\n这里变量以export设置为系统环境变量，其他makefile也能访问到\n\n### 条件执行\n1. 关键字\n   • ifeq、else、endif \n   • ifneq\n2. 使用\n   条件语句从ifeq开始，括号与关键字用空格隔开\n```makefile\n.PHONY:all\n\nDEBUG = true\nifeq ($(DEBUG),true)\nVERSION = debug\nCC = gcc -g\nelse\nVERSION = release\nCC = gcc\nendif\n\nhello:hello.c\n\t@echo \"build $(VERSION) mode\"\n\t$(CC) -o $@ $^\nclean:\n\trm hello\n```\n进行选择debug模式或者release模式切换\n\n### 函数\n直接查手册就行\n#### 文本处理函数\n```makefile\n.PHONY:all\nSRCS = player.c lcd.c usb.c media.c hello.h main.txt\nOBJS = $(subst .c,.o,$(strip $(SRCS)))\nDEPS = $(patsubst %.c,%.d,$(SRCS))\nDEPS2 = $(SRCS:.c=.d)\nFIND = $(findstring usb,$(SRCS))\nFILTER = $(filter %.c %.h, $(SRCS))\nall:\n\t@echo \"OBJS = $(OBJS)\"\t\n\t@echo \"DEPS = $(DEPS)\"\n\t@echo \"DEPS2 = $(DEPS2)\"\n\t@echo \"FIND = $(FIND)\"\n\t@echo \"FILTER = $(FILTER)\"\n\n#########################################\nOBJS = player.o lcd.o usb.o media.o hello.h main.txt\nDEPS = player.d lcd.d usb.d media.d hello.h main.txt\nDEPS2 = player.d lcd.d usb.d media.d hello.h main.txt\nFIND = usb\nFILTER = player.c lcd.c usb.c media.c hello.h\n```\n\n#### 文件名处理函数\n```makefile\n.PHONY:all\nLIB = /home/hello/libhello.a\nLIB1 = $(dir $(LIB))\nLIB2 = $(notdir $(LIB))\nLIB3 = $(suffix $(LIB))\nLIB4 = $(basename $(LIB))\nLIB5 = $(addsuffix .c,$(LIB4))\nLIB6 = $(addprefix /usr/lib/,$(LIB2))\nSRCS = $(wildcard *.c)\nall:\n\t@echo \"LIB1 = $(LIB1)\"\n\t@echo \"LIB2 = $(LIB2)\"\n\t@echo \"LIB3 = $(LIB3)\"\n\t@echo \"LIB4 = $(LIB4)\"\n\t@echo \"LIB5 = $(LIB5)\"\n\t@echo \"LIB6 = $(LIB6)\"\t\n\t@echo \"SRCS = $(SRCS)\"\n\n#########################################\nLIB1 = /home/hello/\nLIB2 = libhello.a\nLIB3 = .a\nLIB4 = /home/hello/libhello\nLIB5 = /home/hello/libhello.c\nLIB6 = /usr/lib/libhello.a\nSRCS = hello.c 3.c main.c\n```\n#### 常用函数 \nforeach\n```makefile\nA = 1 3 4 5 6 7 8 9\nB = $(foreach i,$(A),$(addprefix 0.,$(i)))\nC = $(foreach i,$(A),$(addsuffix .0,$(i)))\n\n\nall:\n@echo \"A = $(A)\"\n@echo \"B = $(B)\"\n@echo \"C = $(C)\"\n```\n   \nshell\n```makefile\n.PHONY:all clean\n$(shell mkdir -p s1)\n$(shell mkdir -p s2)\nall:\n\t@echo \"hello world\"\nclean:\n\trm -r s1 s2\n```\n### 库的生成和使用\n#### 静态库的生成\n都知道库是给别人用的，所以做库时，头文件(.h)必须暴露，源文件(.c)必须隐藏。\n1. 将需要形成库的文件编译成.o文件\n   ```dotnetcli\n   ├── hello.c  - 做成库\n   ├── hello.h\n   └── main.c   -调用库\n   ```\n   `gcc -c hello.c -o hello.o`\n2. 然后使用指令`ar -rc libhello.a hello.o`来生成库\n   注意**形成库文件前缀必须是lib，后缀必须是.a，后面可以加版本号。**\n\n#### 静态库的使用\n我这里已经成了一个静态库，现在交付给其他人使用\n首先拿到别人给的头文件和库文件，我们需要去系统路径下安装别人给的头文件和库文件： \n\n安装头文件：sudo cp*.h /usr/include/\n安装库文件：sudo cp libmy_stdio.a /lib64/\n\n```txt\n├── hello.c\n├── hello.h\n├── hello.o\n├── libhello.a\n└── main.c\n```\n简单例子来看现在main.c需要使用库，就可以使用` gcc main.c -L ./ -l hello` ，运行生成的可执行文件即可\n`-l`参数使用来指定第三方库的\n`-L`参数使用来指定库的路径的，由于我这个简单的例子没有将库放入系统库文件，所以使用`-L`来指定位置\n\n#### makefile中的静态库生成\n制作：\n```makefile\n.PHONY:clean\n\nlibmath.a:libmath.o\n\tar rcs $@ $^\nlibmath.o:libmath.c libmath.h\nclean:\n\trm libmath.a libmath.o\n```\n\n使用：\n```makefile\n.PHONY: clean\n\nhello:main.o\n\tgcc -o $@ $^ -L./ -lmath\nmain.o:main.c\n\tgcc -o $@ -c $^\nclean:\n\trm hello main.o\n```\n\n#### 动态库的生成\n有了静态库，动态库也不难理解\n```makefile\n.PHONY:clean\nlibdll.so:dll.o\n\tgcc -o $@ -shared $^\ndll.o:dll.c\n\tgcc -o $@ -fPIC -c $^ \nclean:\n\trm libdll.so dll.o\n```\n\n使用方法跟静态库类似\n```makefile\n.PHONY:clean\nhello:main.o\n\tgcc -o hello main.o -L./ -ldll\nmain.o:main.c\n\tgcc -o $@ -c -fPIC $^\n\nclean:\n\trm -f  main.o hello\n```\n这里可以使用`ldd`系统命令来查看依赖情况\n\n#### Linux系统中，os可以根据环境变量查动态库\n`export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:` +路径也可以：\n如果想永久加env可以`vim .bash.src`中加入export ...\n记得刷新就行\n\n## makefile小tips\n学完了基本的语法，就可以开始实践makefile了，下面是开发中经常遇到的初级及tips\n### 自动生成依赖关系\n\n问题抛出可以看：\n{% link 自动生成依赖关系, https://blog.csdn.net/qq_52484093/article/details/122765782,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n执行 make 时，首先查看 include，然后才是执行顶层目标所对应的规则。\n\n\n### 使用目录管理源文件\n源文件散着放在一起会造成混乱，少一点还能理清楚，但是源文件多起来就不那么方便了，这里使用目录来管理源文件\n\n{% link 利用Makefile给多文件、多目录C源码建立工程, https://zhuanlan.zhihu.com/p/422891037,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n\n## 实战案例\n{% link Makefile工程实践, https://blog.csdn.net/qq_55299368/article/details/122071652,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n","slug":"makefile工程项目","published":1,"updated":"2025-03-05T12:01:24.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io40025mkttemwbdjg6","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"知乎\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">知乎</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"CSDN\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">CSDN</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"github\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp\"/></div><div class=\"right\"><p class=\"text\">github</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<h1>什么是makefile</h1>\n<ul>\n<li>描述了整个工程了的编译、链接规则</li>\n<li>软件项目自动化编译</li>\n</ul>\n<h1>程序的编译以及链接</h1>\n<h2 id=\"程序的存储与运行\">程序的存储与运行</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/26/xf9l23-0.webp\" alt=\"计算机架构\"></p>\n<h3 id=\"嵌入式系统架构\">嵌入式系统架构</h3>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/26/xg6ill-0.webp\" alt=\"架构\"></p>\n<h2 id=\"程序文件的分类\">程序文件的分类</h2>\n<ul>\n<li>二进制文件bin，用途依系统或应用而定</li>\n<li>elf文件，用于二进制文件、可执行文件、目标代码、共享库和核心转储格式文件的文件格式。\n<ul>\n<li>可执行文件</li>\n<li>可重定位文件、可组装文件</li>\n<li>共享库文件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动态库和静态库\">动态库和静态库</h2>\n<p>库就是目标文件的归档</p>\n<ul>\n<li>\n<p>静态库：在编译链接的过程中就链接到了可执行文件中，但是如果部分库重复使用，就会导致重复链接，造成文件大小太大<br>\n<img src=\"https://image.aruoshui.fun/i/2025/02/26/xqq5p8-0.webp\" alt=\"静态库\"></p>\n</li>\n<li>\n<p>动态库：可以看到入口地址，就像我们安装文件的时候，安装包里有很多dll文件，在运行时会随可执行文件一起加载到内存中去，程序运行到该位置会从内存中动态加载此库，从而减少程序的体积<br>\n<img src=\"https://image.aruoshui.fun/i/2025/02/26/xpipv7-0.webp\" alt=\"动态库\"></p>\n</li>\n</ul>\n<div class=\"note success modern\"><p>success</p>\n<p>问题：<br>\n一个C文件中，如果一行代码后面忘记; 是报编译错误还是链接错误？<br>\n<strong>编译器在语法分析阶段直接报错</strong><br>\n• 一个C文件中，引用了一个在另一个C文件中定义的函数,但是没有声明，编译会成功吗？会出现什么错误或者警告，如何去除这个错误或警告？<br>\n<strong>可能通过但产生 警告（如隐式函数声明警告），也可能直接报错（取决于编译器严格性）</strong><br>\n• 一个C文件中，引用了一个没有被定义的函数，是否会编译通过？是报编译错误，还是链接错误？</p>\n<p><strong>编译阶段：可能通过但有警告（隐式声明），生成目标文件。</strong><br>\n<strong>错误阶段：最终报 链接错误，因为函数定义不存在于任何链接的文件中。</strong></p>\n</div>\n<h2 id=\"makefile的基本语法\">makefile的基本语法</h2>\n<h3 id=\"规则\">规则</h3>\n<h4 id=\"目标\">目标</h4>\n<ol>\n<li>\n<p>一个规则中可以无目标依赖，仅仅实现某种操作<br>\n比如：</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">test1 :</span><br><span class=\"line\"> @echo <span class=\"string\">&quot;Just for test1:<span class=\"variable\">$@</span>&quot;</span></span><br><span class=\"line\"><span class=\"section\">test2:</span></span><br><span class=\"line\"> @echo <span class=\"string\">&quot;Just for test2&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>一个规则中可以没有命令，仅仅描述依赖关系</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">all:test1</span></span><br><span class=\"line\"><span class=\"section\">all:test2</span></span><br></pre></td></tr></table></figure>\n<p>这两条命令都依赖test1或2来执行</p>\n</li>\n<li>\n<p>默认目标：可以有多个目标，但是以第一个为默认目标</p>\n</li>\n<li>\n<p>多目标：一个规则中可以有多个目标，多个目标具有相同的生成命令</p>\n</li>\n<li>\n<p>多规则目标:多个规则可以是同一目标，make在解析的过程中会将多个规则的依赖文件合并</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">all:test1</span></span><br><span class=\"line\"><span class=\"section\">all:test2</span></span><br></pre></td></tr></table></figure>\n<p>还是一样的在make中会将所有的all合并一起</p>\n</li>\n<li>\n<p>伪目标：无条件执行，可以看做一种标签，实行某种操作</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">  .PONHY: clean</span><br><span class=\"line\">  clean:</span><br><span class=\"line\">rm -f lcd.o hello player.o</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"目标依赖\">目标依赖</h4>\n<ol>\n<li>时间戳机制：makefile其实就是根据时间戳来判断目标依赖文件是否需要更新的\n<ul>\n<li>在上次make之后修改过的C文件，会被重新编译</li>\n<li>在上次make之后修改过的头文件，依赖此头文件的会被重新编译</li>\n</ul>\n</li>\n<li>自动产生依赖<br>\nGcc –M命令生成该文件要依赖的文件</li>\n<li>模式匹配</li>\n</ol>\n<h4 id=\"生成命令\">生成命令</h4>\n<p>由shell命令组成，每条命令make都会开一个进程并执行。<br>\n命令也支持并发执行命令 <code>make -j4</code></p>\n<h3 id=\"变量\">变量</h3>\n<h4 id=\"变量基础\">变量基础</h4>\n<p>清晰易懂</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">STR = hello</span><br><span class=\"line\">STR2 = hello</span><br><span class=\"line\">STR2 += world!</span><br><span class=\"line\"></span><br><span class=\"line\">test1 = a</span><br><span class=\"line\">test1 ?= b</span><br><span class=\"line\">test2 ?= b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;STR = <span class=\"variable\">$(STR)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;STR2 = <span class=\"variable\">$(STR2)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;test1 = <span class=\"variable\">$(test1)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;test2 = <span class=\"variable\">$(test2)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"变量分类\">变量分类</h4>\n<ol>\n<li>立即展开变量：在解析阶段直接赋值常量字符串<br>\n使用<code>:=</code>赋值操作符</li>\n<li>延迟展开变量：在运行阶段，实际使用变量时再进行求值<br>\n使用<code>=</code>赋值操作符</li>\n</ol>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:all</span></span><br><span class=\"line\"></span><br><span class=\"line\">HELLO = Good</span><br><span class=\"line\">TIME = morning!</span><br><span class=\"line\">STRING = <span class=\"variable\">$(HELLO)</span> <span class=\"variable\">$(TIME)</span></span><br><span class=\"line\"><span class=\"comment\"># STRING ：= $(HELLO) $(TIME)</span></span><br><span class=\"line\"><span class=\"variable\">$(info <span class=\"variable\">$(STRING)</span>)</span></span><br><span class=\"line\">TIME = afternoon!</span><br><span class=\"line\"><span class=\"variable\">$(info <span class=\"variable\">$(STRING)</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;done&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这里如果使用立即展开变量，在makefile解析生成依赖树的时候，<strong>直接变成常量字符串了</strong></p>\n<p>• 一般在目标、目标依赖中使用立即展开变量<br>\n• 在命令中一般使用延迟展开变量</p>\n<h4 id=\"追加、条件赋值\">追加、条件赋值</h4>\n<h4 id=\"目标变量\">目标变量</h4>\n<p>默认为全局变量，在所有依赖的规则中都可以使用，可以做到文件级的编译选项</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\"></span><br><span class=\"line\">OBJS = player.o lcd.o</span><br><span class=\"line\">BIN  = mp3</span><br><span class=\"line\">N = 1</span><br><span class=\"line\"><span class=\"variable\">$(BIN)</span>: N = 2</span><br><span class=\"line\"><span class=\"variable\">$(BIN)</span>:<span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;BIN: N = <span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$(BIN)</span> <span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\"><span class=\"section\">player.o:N= 3</span></span><br><span class=\"line\"><span class=\"section\">player.o:player.c</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;player.o: N = <span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\tgcc -o player.o -c player.c</span><br><span class=\"line\"><span class=\"section\">lcd.o:lcd.c # 这个N是由于 bin依赖lcd，所以N取 bin中定义的N = 2</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;lcd.o: N = <span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\tgcc -o lcd.o -c lcd.c</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;clean: N = <span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\trm -f  <span class=\"variable\">$(BIN)</span> <span class=\"variable\">$(OBJS)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"模式变量\">模式变量</h4>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\">N = 1</span><br><span class=\"line\">OBJS = player.o lcd.o</span><br><span class=\"line\">BIN  = mp3</span><br><span class=\"line\"><span class=\"variable\">$(BIN)</span>:<span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;BIN:N=<span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$(BIN)</span> <span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\"><span class=\"variable\">$(BIN)</span>: N = 2</span><br><span class=\"line\"><span class=\"section\">%.o: N = 3</span></span><br><span class=\"line\"><span class=\"section\">player.o:player.c</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;player.o:N=<span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\tgcc -o player.o -c player.c</span><br><span class=\"line\"><span class=\"section\">lcd.o:lcd.c</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;lcd.o:N=<span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\tgcc -o lcd.o -c lcd.c</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;clean: N = <span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\trm  <span class=\"variable\">$(BIN)</span> <span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################</span></span><br><span class=\"line\"><span class=\"section\">player.o:N=3</span></span><br><span class=\"line\">gcc -o player.o -c player.c</span><br><span class=\"line\"><span class=\"section\">lcd.o:N=3</span></span><br><span class=\"line\">gcc -o lcd.o -c lcd.c</span><br><span class=\"line\"><span class=\"section\">BIN:N=2</span></span><br><span class=\"line\">gcc -o mp3 player.o lcd.o</span><br></pre></td></tr></table></figure>\n<p>从结果可以知道所有.o后缀的目标都以N = 3为值</p>\n<h4 id=\"自动变量\">自动变量</h4>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">自动变量是局部变量 </span><br><span class=\"line\">• 目标 </span><br><span class=\"line\">$@ </span><br><span class=\"line\">• 所有目标依赖 </span><br><span class=\"line\">$^ </span><br><span class=\"line\">• 第一个依赖 </span><br><span class=\"line\">$&lt; </span><br><span class=\"line\">• 使用举例 </span><br><span class=\"line\">gcc  -o $@ $^ </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\">OBJS = player.o lcd.o</span><br><span class=\"line\">BIN  = mp3</span><br><span class=\"line\"><span class=\"variable\">$(BIN)</span>:<span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;BIN------------<span class=\"variable\">$@</span>:<span class=\"variable\">$^</span>&quot;</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> <span class=\"variable\">$^</span> </span><br><span class=\"line\"><span class=\"section\">player.o:player.c</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;------------<span class=\"variable\">$@</span>:<span class=\"variable\">$^</span>&quot;</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> -c <span class=\"variable\">$^</span></span><br><span class=\"line\"><span class=\"section\">lcd.o:lcd.c</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;---------<span class=\"variable\">$@</span>:<span class=\"variable\">$^</span>&quot;</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> -c <span class=\"variable\">$^</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm -f <span class=\"variable\">$(BIN)</span> <span class=\"variable\">$(OBJS)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"系统环境变量\">系统环境变量</h4>\n<p>作用范围</p>\n<ul>\n<li>变量在make开始运行时被载入到Makefile文件中</li>\n<li>对所有的Makefile都有效。</li>\n<li>若Makefile中定义同名变量，系统环境变量将被覆盖</li>\n<li>命令行中传递同名变量，系统环境变量将被覆盖</li>\n</ul>\n<p>常见的系统环境变量</p>\n<ul>\n<li>CFLAGS</li>\n<li>SHELL</li>\n<li>MAKE</li>\n</ul>\n<h4 id=\"变量的传递\">变量的传递</h4>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── lcd</span><br><span class=\"line\">│   └── makefile</span><br><span class=\"line\">├── makefile</span><br><span class=\"line\">└── test</span><br><span class=\"line\">    └── makefile</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:all</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> N = 3</span><br><span class=\"line\"><span class=\"comment\">#N = 3</span></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;build....&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#\tcd test &amp;&amp; make N=$(N)</span></span><br><span class=\"line\">\tcd test &amp;&amp; make</span><br><span class=\"line\">\tmake -C lcd </span><br></pre></td></tr></table></figure>\n<p>这里变量以export设置为系统环境变量，其他makefile也能访问到</p>\n<h3 id=\"条件执行\">条件执行</h3>\n<ol>\n<li>关键字<br>\n• ifeq、else、endif<br>\n• ifneq</li>\n<li>使用<br>\n条件语句从ifeq开始，括号与关键字用空格隔开</li>\n</ol>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:all</span></span><br><span class=\"line\"></span><br><span class=\"line\">DEBUG = true</span><br><span class=\"line\"><span class=\"keyword\">ifeq</span> (<span class=\"variable\">$(DEBUG)</span>,true)</span><br><span class=\"line\">VERSION = debug</span><br><span class=\"line\">CC = gcc -g</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">VERSION = release</span><br><span class=\"line\">CC = gcc</span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">hello:hello.c</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;build <span class=\"variable\">$(VERSION)</span> mode&quot;</span></span><br><span class=\"line\">\t<span class=\"variable\">$(CC)</span> -o <span class=\"variable\">$@</span> <span class=\"variable\">$^</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm hello</span><br></pre></td></tr></table></figure>\n<p>进行选择debug模式或者release模式切换</p>\n<h3 id=\"函数\">函数</h3>\n<p>直接查手册就行</p>\n<h4 id=\"文本处理函数\">文本处理函数</h4>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:all</span></span><br><span class=\"line\">SRCS = player.c lcd.c usb.c media.c hello.h main.txt</span><br><span class=\"line\">OBJS = <span class=\"variable\">$(<span class=\"built_in\">subst</span> .c,.o,$(<span class=\"built_in\">strip</span> <span class=\"variable\">$(SRCS)</span>)</span>)</span><br><span class=\"line\">DEPS = <span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %.c,%.d,<span class=\"variable\">$(SRCS)</span>)</span></span><br><span class=\"line\">DEPS2 = $(SRCS:.c=.d)</span><br><span class=\"line\">FIND = <span class=\"variable\">$(<span class=\"built_in\">findstring</span> usb,<span class=\"variable\">$(SRCS)</span>)</span></span><br><span class=\"line\">FILTER = <span class=\"variable\">$(<span class=\"built_in\">filter</span> %.c %.h, <span class=\"variable\">$(SRCS)</span>)</span></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;OBJS = <span class=\"variable\">$(OBJS)</span>&quot;</span>\t</span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;DEPS = <span class=\"variable\">$(DEPS)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;DEPS2 = <span class=\"variable\">$(DEPS2)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;FIND = <span class=\"variable\">$(FIND)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;FILTER = <span class=\"variable\">$(FILTER)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#########################################</span></span><br><span class=\"line\">OBJS = player.o lcd.o usb.o media.o hello.h main.txt</span><br><span class=\"line\">DEPS = player.d lcd.d usb.d media.d hello.h main.txt</span><br><span class=\"line\">DEPS2 = player.d lcd.d usb.d media.d hello.h main.txt</span><br><span class=\"line\">FIND = usb</span><br><span class=\"line\">FILTER = player.c lcd.c usb.c media.c hello.h</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件名处理函数\">文件名处理函数</h4>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:all</span></span><br><span class=\"line\">LIB = /home/hello/libhello.a</span><br><span class=\"line\">LIB1 = <span class=\"variable\">$(<span class=\"built_in\">dir</span> <span class=\"variable\">$(LIB)</span>)</span></span><br><span class=\"line\">LIB2 = <span class=\"variable\">$(<span class=\"built_in\">notdir</span> <span class=\"variable\">$(LIB)</span>)</span></span><br><span class=\"line\">LIB3 = <span class=\"variable\">$(<span class=\"built_in\">suffix</span> <span class=\"variable\">$(LIB)</span>)</span></span><br><span class=\"line\">LIB4 = <span class=\"variable\">$(<span class=\"built_in\">basename</span> <span class=\"variable\">$(LIB)</span>)</span></span><br><span class=\"line\">LIB5 = <span class=\"variable\">$(<span class=\"built_in\">addsuffix</span> .c,<span class=\"variable\">$(LIB4)</span>)</span></span><br><span class=\"line\">LIB6 = <span class=\"variable\">$(<span class=\"built_in\">addprefix</span> /usr/lib/,<span class=\"variable\">$(LIB2)</span>)</span></span><br><span class=\"line\">SRCS = <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.c)</span></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;LIB1 = <span class=\"variable\">$(LIB1)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;LIB2 = <span class=\"variable\">$(LIB2)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;LIB3 = <span class=\"variable\">$(LIB3)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;LIB4 = <span class=\"variable\">$(LIB4)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;LIB5 = <span class=\"variable\">$(LIB5)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;LIB6 = <span class=\"variable\">$(LIB6)</span>&quot;</span>\t</span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;SRCS = <span class=\"variable\">$(SRCS)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#########################################</span></span><br><span class=\"line\">LIB1 = /home/hello/</span><br><span class=\"line\">LIB2 = libhello.a</span><br><span class=\"line\">LIB3 = .a</span><br><span class=\"line\">LIB4 = /home/hello/libhello</span><br><span class=\"line\">LIB5 = /home/hello/libhello.c</span><br><span class=\"line\">LIB6 = /usr/lib/libhello.a</span><br><span class=\"line\">SRCS = hello.c 3.c main.c</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用函数\">常用函数</h4>\n<p>foreach</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">A = 1 3 4 5 6 7 8 9</span><br><span class=\"line\">B = <span class=\"variable\">$(<span class=\"built_in\">foreach</span> i,<span class=\"variable\">$(A)</span>,$(<span class=\"built_in\">addprefix</span> 0.,<span class=\"variable\">$(i)</span>)</span>)</span><br><span class=\"line\">C = <span class=\"variable\">$(<span class=\"built_in\">foreach</span> i,<span class=\"variable\">$(A)</span>,$(<span class=\"built_in\">addsuffix</span> .0,<span class=\"variable\">$(i)</span>)</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">@echo <span class=\"string\">&quot;A = <span class=\"variable\">$(A)</span>&quot;</span></span><br><span class=\"line\">@echo <span class=\"string\">&quot;B = <span class=\"variable\">$(B)</span>&quot;</span></span><br><span class=\"line\">@echo <span class=\"string\">&quot;C = <span class=\"variable\">$(C)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p>shell</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:all clean</span></span><br><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">shell</span> mkdir -p s1)</span></span><br><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">shell</span> mkdir -p s2)</span></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm -r s1 s2</span><br></pre></td></tr></table></figure>\n<h3 id=\"库的生成和使用\">库的生成和使用</h3>\n<h4 id=\"静态库的生成\">静态库的生成</h4>\n<p>都知道库是给别人用的，所以做库时，头文件(.h)必须暴露，源文件(.c)必须隐藏。</p>\n<ol>\n<li>将需要形成库的文件编译成.o文件<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── hello.c  - 做成库</span><br><span class=\"line\">├── hello.h</span><br><span class=\"line\">└── main.c   -调用库</span><br></pre></td></tr></table></figure>\n<code>gcc -c hello.c -o hello.o</code></li>\n<li>然后使用指令<code>ar -rc libhello.a hello.o</code>来生成库<br>\n注意<strong>形成库文件前缀必须是lib，后缀必须是.a，后面可以加版本号。</strong></li>\n</ol>\n<h4 id=\"静态库的使用\">静态库的使用</h4>\n<p>我这里已经成了一个静态库，现在交付给其他人使用<br>\n首先拿到别人给的头文件和库文件，我们需要去系统路径下安装别人给的头文件和库文件：</p>\n<p>安装头文件：sudo cp*.h /usr/include/<br>\n安装库文件：sudo cp libmy_stdio.a /lib64/</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── hello.c</span><br><span class=\"line\">├── hello.h</span><br><span class=\"line\">├── hello.o</span><br><span class=\"line\">├── libhello.a</span><br><span class=\"line\">└── main.c</span><br></pre></td></tr></table></figure>\n<p>简单例子来看现在main.c需要使用库，就可以使用<code> gcc main.c -L ./ -l hello</code> ，运行生成的可执行文件即可<br>\n<code>-l</code>参数使用来指定第三方库的<br>\n<code>-L</code>参数使用来指定库的路径的，由于我这个简单的例子没有将库放入系统库文件，所以使用<code>-L</code>来指定位置</p>\n<h4 id=\"makefile中的静态库生成\">makefile中的静态库生成</h4>\n<p>制作：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">libmath.a:libmath.o</span></span><br><span class=\"line\">\tar rcs <span class=\"variable\">$@</span> <span class=\"variable\">$^</span></span><br><span class=\"line\"><span class=\"section\">libmath.o:libmath.c libmath.h</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm libmath.a libmath.o</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: clean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">hello:main.o</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> <span class=\"variable\">$^</span> -L./ -lmath</span><br><span class=\"line\"><span class=\"section\">main.o:main.c</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> -c <span class=\"variable\">$^</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm hello main.o</span><br></pre></td></tr></table></figure>\n<h4 id=\"动态库的生成\">动态库的生成</h4>\n<p>有了静态库，动态库也不难理解</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\"><span class=\"section\">libdll.so:dll.o</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> -shared <span class=\"variable\">$^</span></span><br><span class=\"line\"><span class=\"section\">dll.o:dll.c</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> -fPIC -c <span class=\"variable\">$^</span> </span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm libdll.so dll.o</span><br></pre></td></tr></table></figure>\n<p>使用方法跟静态库类似</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\"><span class=\"section\">hello:main.o</span></span><br><span class=\"line\">\tgcc -o hello main.o -L./ -ldll</span><br><span class=\"line\"><span class=\"section\">main.o:main.c</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> -c -fPIC <span class=\"variable\">$^</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm -f  main.o hello</span><br></pre></td></tr></table></figure>\n<p>这里可以使用<code>ldd</code>系统命令来查看依赖情况</p>\n<h4 id=\"Linux系统中，os可以根据环境变量查动态库\">Linux系统中，os可以根据环境变量查动态库</h4>\n<p><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:</code> +路径也可以：<br>\n如果想永久加env可以<code>vim .bash.src</code>中加入export …<br>\n记得刷新就行</p>\n<h2 id=\"makefile小tips\">makefile小tips</h2>\n<p>学完了基本的语法，就可以开始实践makefile了，下面是开发中经常遇到的初级及tips</p>\n<h3 id=\"自动生成依赖关系\">自动生成依赖关系</h3>\n<p>问题抛出可以看：</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"自动生成依赖关系\" href=\"https://blog.csdn.net/qq_52484093/article/details/122765782\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">自动生成依赖关系</p><p class=\"url\">https://blog.csdn.net/qq_52484093/article/details/122765782</p></div></a></div> \n<p>执行 make 时，首先查看 include，然后才是执行顶层目标所对应的规则。</p>\n<h3 id=\"使用目录管理源文件\">使用目录管理源文件</h3>\n<p>源文件散着放在一起会造成混乱，少一点还能理清楚，但是源文件多起来就不那么方便了，这里使用目录来管理源文件</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"利用Makefile给多文件、多目录C源码建立工程\" href=\"https://zhuanlan.zhihu.com/p/422891037\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">利用Makefile给多文件、多目录C源码建立工程</p><p class=\"url\">https://zhuanlan.zhihu.com/p/422891037</p></div></a></div> \n<h2 id=\"实战案例\">实战案例</h2>\n<div class=\"tag link\"><a class=\"link-card\" title=\"Makefile工程实践\" href=\"https://blog.csdn.net/qq_55299368/article/details/122071652\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">Makefile工程实践</p><p class=\"url\">https://blog.csdn.net/qq_55299368/article/details/122071652</p></div></a></div> \n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"知乎\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">知乎</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"CSDN\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">CSDN</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"github\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp\"/></div><div class=\"right\"><p class=\"text\">github</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<h1>什么是makefile</h1>\n<ul>\n<li>描述了整个工程了的编译、链接规则</li>\n<li>软件项目自动化编译</li>\n</ul>\n<h1>程序的编译以及链接</h1>\n<h2 id=\"程序的存储与运行\">程序的存储与运行</h2>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/26/xf9l23-0.webp\" alt=\"计算机架构\"></p>\n<h3 id=\"嵌入式系统架构\">嵌入式系统架构</h3>\n<p><img src=\"https://image.aruoshui.fun/i/2025/02/26/xg6ill-0.webp\" alt=\"架构\"></p>\n<h2 id=\"程序文件的分类\">程序文件的分类</h2>\n<ul>\n<li>二进制文件bin，用途依系统或应用而定</li>\n<li>elf文件，用于二进制文件、可执行文件、目标代码、共享库和核心转储格式文件的文件格式。\n<ul>\n<li>可执行文件</li>\n<li>可重定位文件、可组装文件</li>\n<li>共享库文件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动态库和静态库\">动态库和静态库</h2>\n<p>库就是目标文件的归档</p>\n<ul>\n<li>\n<p>静态库：在编译链接的过程中就链接到了可执行文件中，但是如果部分库重复使用，就会导致重复链接，造成文件大小太大<br>\n<img src=\"https://image.aruoshui.fun/i/2025/02/26/xqq5p8-0.webp\" alt=\"静态库\"></p>\n</li>\n<li>\n<p>动态库：可以看到入口地址，就像我们安装文件的时候，安装包里有很多dll文件，在运行时会随可执行文件一起加载到内存中去，程序运行到该位置会从内存中动态加载此库，从而减少程序的体积<br>\n<img src=\"https://image.aruoshui.fun/i/2025/02/26/xpipv7-0.webp\" alt=\"动态库\"></p>\n</li>\n</ul>\n<div class=\"note success modern\"><p>success</p>\n<p>问题：<br>\n一个C文件中，如果一行代码后面忘记; 是报编译错误还是链接错误？<br>\n<strong>编译器在语法分析阶段直接报错</strong><br>\n• 一个C文件中，引用了一个在另一个C文件中定义的函数,但是没有声明，编译会成功吗？会出现什么错误或者警告，如何去除这个错误或警告？<br>\n<strong>可能通过但产生 警告（如隐式函数声明警告），也可能直接报错（取决于编译器严格性）</strong><br>\n• 一个C文件中，引用了一个没有被定义的函数，是否会编译通过？是报编译错误，还是链接错误？</p>\n<p><strong>编译阶段：可能通过但有警告（隐式声明），生成目标文件。</strong><br>\n<strong>错误阶段：最终报 链接错误，因为函数定义不存在于任何链接的文件中。</strong></p>\n</div>\n<h2 id=\"makefile的基本语法\">makefile的基本语法</h2>\n<h3 id=\"规则\">规则</h3>\n<h4 id=\"目标\">目标</h4>\n<ol>\n<li>\n<p>一个规则中可以无目标依赖，仅仅实现某种操作<br>\n比如：</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">test1 :</span><br><span class=\"line\"> @echo <span class=\"string\">&quot;Just for test1:<span class=\"variable\">$@</span>&quot;</span></span><br><span class=\"line\"><span class=\"section\">test2:</span></span><br><span class=\"line\"> @echo <span class=\"string\">&quot;Just for test2&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>一个规则中可以没有命令，仅仅描述依赖关系</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">all:test1</span></span><br><span class=\"line\"><span class=\"section\">all:test2</span></span><br></pre></td></tr></table></figure>\n<p>这两条命令都依赖test1或2来执行</p>\n</li>\n<li>\n<p>默认目标：可以有多个目标，但是以第一个为默认目标</p>\n</li>\n<li>\n<p>多目标：一个规则中可以有多个目标，多个目标具有相同的生成命令</p>\n</li>\n<li>\n<p>多规则目标:多个规则可以是同一目标，make在解析的过程中会将多个规则的依赖文件合并</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">all:test1</span></span><br><span class=\"line\"><span class=\"section\">all:test2</span></span><br></pre></td></tr></table></figure>\n<p>还是一样的在make中会将所有的all合并一起</p>\n</li>\n<li>\n<p>伪目标：无条件执行，可以看做一种标签，实行某种操作</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">  .PONHY: clean</span><br><span class=\"line\">  clean:</span><br><span class=\"line\">rm -f lcd.o hello player.o</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"目标依赖\">目标依赖</h4>\n<ol>\n<li>时间戳机制：makefile其实就是根据时间戳来判断目标依赖文件是否需要更新的\n<ul>\n<li>在上次make之后修改过的C文件，会被重新编译</li>\n<li>在上次make之后修改过的头文件，依赖此头文件的会被重新编译</li>\n</ul>\n</li>\n<li>自动产生依赖<br>\nGcc –M命令生成该文件要依赖的文件</li>\n<li>模式匹配</li>\n</ol>\n<h4 id=\"生成命令\">生成命令</h4>\n<p>由shell命令组成，每条命令make都会开一个进程并执行。<br>\n命令也支持并发执行命令 <code>make -j4</code></p>\n<h3 id=\"变量\">变量</h3>\n<h4 id=\"变量基础\">变量基础</h4>\n<p>清晰易懂</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">STR = hello</span><br><span class=\"line\">STR2 = hello</span><br><span class=\"line\">STR2 += world!</span><br><span class=\"line\"></span><br><span class=\"line\">test1 = a</span><br><span class=\"line\">test1 ?= b</span><br><span class=\"line\">test2 ?= b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;STR = <span class=\"variable\">$(STR)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;STR2 = <span class=\"variable\">$(STR2)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;test1 = <span class=\"variable\">$(test1)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;test2 = <span class=\"variable\">$(test2)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"变量分类\">变量分类</h4>\n<ol>\n<li>立即展开变量：在解析阶段直接赋值常量字符串<br>\n使用<code>:=</code>赋值操作符</li>\n<li>延迟展开变量：在运行阶段，实际使用变量时再进行求值<br>\n使用<code>=</code>赋值操作符</li>\n</ol>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:all</span></span><br><span class=\"line\"></span><br><span class=\"line\">HELLO = Good</span><br><span class=\"line\">TIME = morning!</span><br><span class=\"line\">STRING = <span class=\"variable\">$(HELLO)</span> <span class=\"variable\">$(TIME)</span></span><br><span class=\"line\"><span class=\"comment\"># STRING ：= $(HELLO) $(TIME)</span></span><br><span class=\"line\"><span class=\"variable\">$(info <span class=\"variable\">$(STRING)</span>)</span></span><br><span class=\"line\">TIME = afternoon!</span><br><span class=\"line\"><span class=\"variable\">$(info <span class=\"variable\">$(STRING)</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;done&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这里如果使用立即展开变量，在makefile解析生成依赖树的时候，<strong>直接变成常量字符串了</strong></p>\n<p>• 一般在目标、目标依赖中使用立即展开变量<br>\n• 在命令中一般使用延迟展开变量</p>\n<h4 id=\"追加、条件赋值\">追加、条件赋值</h4>\n<h4 id=\"目标变量\">目标变量</h4>\n<p>默认为全局变量，在所有依赖的规则中都可以使用，可以做到文件级的编译选项</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\"></span><br><span class=\"line\">OBJS = player.o lcd.o</span><br><span class=\"line\">BIN  = mp3</span><br><span class=\"line\">N = 1</span><br><span class=\"line\"><span class=\"variable\">$(BIN)</span>: N = 2</span><br><span class=\"line\"><span class=\"variable\">$(BIN)</span>:<span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;BIN: N = <span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$(BIN)</span> <span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\"><span class=\"section\">player.o:N= 3</span></span><br><span class=\"line\"><span class=\"section\">player.o:player.c</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;player.o: N = <span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\tgcc -o player.o -c player.c</span><br><span class=\"line\"><span class=\"section\">lcd.o:lcd.c # 这个N是由于 bin依赖lcd，所以N取 bin中定义的N = 2</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;lcd.o: N = <span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\tgcc -o lcd.o -c lcd.c</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;clean: N = <span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\trm -f  <span class=\"variable\">$(BIN)</span> <span class=\"variable\">$(OBJS)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"模式变量\">模式变量</h4>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\">N = 1</span><br><span class=\"line\">OBJS = player.o lcd.o</span><br><span class=\"line\">BIN  = mp3</span><br><span class=\"line\"><span class=\"variable\">$(BIN)</span>:<span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;BIN:N=<span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$(BIN)</span> <span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\"><span class=\"variable\">$(BIN)</span>: N = 2</span><br><span class=\"line\"><span class=\"section\">%.o: N = 3</span></span><br><span class=\"line\"><span class=\"section\">player.o:player.c</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;player.o:N=<span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\tgcc -o player.o -c player.c</span><br><span class=\"line\"><span class=\"section\">lcd.o:lcd.c</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;lcd.o:N=<span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\tgcc -o lcd.o -c lcd.c</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;clean: N = <span class=\"variable\">$(N)</span>&quot;</span></span><br><span class=\"line\">\trm  <span class=\"variable\">$(BIN)</span> <span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################</span></span><br><span class=\"line\"><span class=\"section\">player.o:N=3</span></span><br><span class=\"line\">gcc -o player.o -c player.c</span><br><span class=\"line\"><span class=\"section\">lcd.o:N=3</span></span><br><span class=\"line\">gcc -o lcd.o -c lcd.c</span><br><span class=\"line\"><span class=\"section\">BIN:N=2</span></span><br><span class=\"line\">gcc -o mp3 player.o lcd.o</span><br></pre></td></tr></table></figure>\n<p>从结果可以知道所有.o后缀的目标都以N = 3为值</p>\n<h4 id=\"自动变量\">自动变量</h4>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">自动变量是局部变量 </span><br><span class=\"line\">• 目标 </span><br><span class=\"line\">$@ </span><br><span class=\"line\">• 所有目标依赖 </span><br><span class=\"line\">$^ </span><br><span class=\"line\">• 第一个依赖 </span><br><span class=\"line\">$&lt; </span><br><span class=\"line\">• 使用举例 </span><br><span class=\"line\">gcc  -o $@ $^ </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\">OBJS = player.o lcd.o</span><br><span class=\"line\">BIN  = mp3</span><br><span class=\"line\"><span class=\"variable\">$(BIN)</span>:<span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;BIN------------<span class=\"variable\">$@</span>:<span class=\"variable\">$^</span>&quot;</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> <span class=\"variable\">$^</span> </span><br><span class=\"line\"><span class=\"section\">player.o:player.c</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;------------<span class=\"variable\">$@</span>:<span class=\"variable\">$^</span>&quot;</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> -c <span class=\"variable\">$^</span></span><br><span class=\"line\"><span class=\"section\">lcd.o:lcd.c</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;---------<span class=\"variable\">$@</span>:<span class=\"variable\">$^</span>&quot;</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> -c <span class=\"variable\">$^</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm -f <span class=\"variable\">$(BIN)</span> <span class=\"variable\">$(OBJS)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"系统环境变量\">系统环境变量</h4>\n<p>作用范围</p>\n<ul>\n<li>变量在make开始运行时被载入到Makefile文件中</li>\n<li>对所有的Makefile都有效。</li>\n<li>若Makefile中定义同名变量，系统环境变量将被覆盖</li>\n<li>命令行中传递同名变量，系统环境变量将被覆盖</li>\n</ul>\n<p>常见的系统环境变量</p>\n<ul>\n<li>CFLAGS</li>\n<li>SHELL</li>\n<li>MAKE</li>\n</ul>\n<h4 id=\"变量的传递\">变量的传递</h4>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── lcd</span><br><span class=\"line\">│   └── makefile</span><br><span class=\"line\">├── makefile</span><br><span class=\"line\">└── test</span><br><span class=\"line\">    └── makefile</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:all</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> N = 3</span><br><span class=\"line\"><span class=\"comment\">#N = 3</span></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;build....&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#\tcd test &amp;&amp; make N=$(N)</span></span><br><span class=\"line\">\tcd test &amp;&amp; make</span><br><span class=\"line\">\tmake -C lcd </span><br></pre></td></tr></table></figure>\n<p>这里变量以export设置为系统环境变量，其他makefile也能访问到</p>\n<h3 id=\"条件执行\">条件执行</h3>\n<ol>\n<li>关键字<br>\n• ifeq、else、endif<br>\n• ifneq</li>\n<li>使用<br>\n条件语句从ifeq开始，括号与关键字用空格隔开</li>\n</ol>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:all</span></span><br><span class=\"line\"></span><br><span class=\"line\">DEBUG = true</span><br><span class=\"line\"><span class=\"keyword\">ifeq</span> (<span class=\"variable\">$(DEBUG)</span>,true)</span><br><span class=\"line\">VERSION = debug</span><br><span class=\"line\">CC = gcc -g</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">VERSION = release</span><br><span class=\"line\">CC = gcc</span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">hello:hello.c</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;build <span class=\"variable\">$(VERSION)</span> mode&quot;</span></span><br><span class=\"line\">\t<span class=\"variable\">$(CC)</span> -o <span class=\"variable\">$@</span> <span class=\"variable\">$^</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm hello</span><br></pre></td></tr></table></figure>\n<p>进行选择debug模式或者release模式切换</p>\n<h3 id=\"函数\">函数</h3>\n<p>直接查手册就行</p>\n<h4 id=\"文本处理函数\">文本处理函数</h4>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:all</span></span><br><span class=\"line\">SRCS = player.c lcd.c usb.c media.c hello.h main.txt</span><br><span class=\"line\">OBJS = <span class=\"variable\">$(<span class=\"built_in\">subst</span> .c,.o,$(<span class=\"built_in\">strip</span> <span class=\"variable\">$(SRCS)</span>)</span>)</span><br><span class=\"line\">DEPS = <span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %.c,%.d,<span class=\"variable\">$(SRCS)</span>)</span></span><br><span class=\"line\">DEPS2 = $(SRCS:.c=.d)</span><br><span class=\"line\">FIND = <span class=\"variable\">$(<span class=\"built_in\">findstring</span> usb,<span class=\"variable\">$(SRCS)</span>)</span></span><br><span class=\"line\">FILTER = <span class=\"variable\">$(<span class=\"built_in\">filter</span> %.c %.h, <span class=\"variable\">$(SRCS)</span>)</span></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;OBJS = <span class=\"variable\">$(OBJS)</span>&quot;</span>\t</span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;DEPS = <span class=\"variable\">$(DEPS)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;DEPS2 = <span class=\"variable\">$(DEPS2)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;FIND = <span class=\"variable\">$(FIND)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;FILTER = <span class=\"variable\">$(FILTER)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#########################################</span></span><br><span class=\"line\">OBJS = player.o lcd.o usb.o media.o hello.h main.txt</span><br><span class=\"line\">DEPS = player.d lcd.d usb.d media.d hello.h main.txt</span><br><span class=\"line\">DEPS2 = player.d lcd.d usb.d media.d hello.h main.txt</span><br><span class=\"line\">FIND = usb</span><br><span class=\"line\">FILTER = player.c lcd.c usb.c media.c hello.h</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件名处理函数\">文件名处理函数</h4>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:all</span></span><br><span class=\"line\">LIB = /home/hello/libhello.a</span><br><span class=\"line\">LIB1 = <span class=\"variable\">$(<span class=\"built_in\">dir</span> <span class=\"variable\">$(LIB)</span>)</span></span><br><span class=\"line\">LIB2 = <span class=\"variable\">$(<span class=\"built_in\">notdir</span> <span class=\"variable\">$(LIB)</span>)</span></span><br><span class=\"line\">LIB3 = <span class=\"variable\">$(<span class=\"built_in\">suffix</span> <span class=\"variable\">$(LIB)</span>)</span></span><br><span class=\"line\">LIB4 = <span class=\"variable\">$(<span class=\"built_in\">basename</span> <span class=\"variable\">$(LIB)</span>)</span></span><br><span class=\"line\">LIB5 = <span class=\"variable\">$(<span class=\"built_in\">addsuffix</span> .c,<span class=\"variable\">$(LIB4)</span>)</span></span><br><span class=\"line\">LIB6 = <span class=\"variable\">$(<span class=\"built_in\">addprefix</span> /usr/lib/,<span class=\"variable\">$(LIB2)</span>)</span></span><br><span class=\"line\">SRCS = <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.c)</span></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;LIB1 = <span class=\"variable\">$(LIB1)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;LIB2 = <span class=\"variable\">$(LIB2)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;LIB3 = <span class=\"variable\">$(LIB3)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;LIB4 = <span class=\"variable\">$(LIB4)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;LIB5 = <span class=\"variable\">$(LIB5)</span>&quot;</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;LIB6 = <span class=\"variable\">$(LIB6)</span>&quot;</span>\t</span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;SRCS = <span class=\"variable\">$(SRCS)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#########################################</span></span><br><span class=\"line\">LIB1 = /home/hello/</span><br><span class=\"line\">LIB2 = libhello.a</span><br><span class=\"line\">LIB3 = .a</span><br><span class=\"line\">LIB4 = /home/hello/libhello</span><br><span class=\"line\">LIB5 = /home/hello/libhello.c</span><br><span class=\"line\">LIB6 = /usr/lib/libhello.a</span><br><span class=\"line\">SRCS = hello.c 3.c main.c</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用函数\">常用函数</h4>\n<p>foreach</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">A = 1 3 4 5 6 7 8 9</span><br><span class=\"line\">B = <span class=\"variable\">$(<span class=\"built_in\">foreach</span> i,<span class=\"variable\">$(A)</span>,$(<span class=\"built_in\">addprefix</span> 0.,<span class=\"variable\">$(i)</span>)</span>)</span><br><span class=\"line\">C = <span class=\"variable\">$(<span class=\"built_in\">foreach</span> i,<span class=\"variable\">$(A)</span>,$(<span class=\"built_in\">addsuffix</span> .0,<span class=\"variable\">$(i)</span>)</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">@echo <span class=\"string\">&quot;A = <span class=\"variable\">$(A)</span>&quot;</span></span><br><span class=\"line\">@echo <span class=\"string\">&quot;B = <span class=\"variable\">$(B)</span>&quot;</span></span><br><span class=\"line\">@echo <span class=\"string\">&quot;C = <span class=\"variable\">$(C)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p>shell</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:all clean</span></span><br><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">shell</span> mkdir -p s1)</span></span><br><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">shell</span> mkdir -p s2)</span></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\t@echo <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm -r s1 s2</span><br></pre></td></tr></table></figure>\n<h3 id=\"库的生成和使用\">库的生成和使用</h3>\n<h4 id=\"静态库的生成\">静态库的生成</h4>\n<p>都知道库是给别人用的，所以做库时，头文件(.h)必须暴露，源文件(.c)必须隐藏。</p>\n<ol>\n<li>将需要形成库的文件编译成.o文件<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── hello.c  - 做成库</span><br><span class=\"line\">├── hello.h</span><br><span class=\"line\">└── main.c   -调用库</span><br></pre></td></tr></table></figure>\n<code>gcc -c hello.c -o hello.o</code></li>\n<li>然后使用指令<code>ar -rc libhello.a hello.o</code>来生成库<br>\n注意<strong>形成库文件前缀必须是lib，后缀必须是.a，后面可以加版本号。</strong></li>\n</ol>\n<h4 id=\"静态库的使用\">静态库的使用</h4>\n<p>我这里已经成了一个静态库，现在交付给其他人使用<br>\n首先拿到别人给的头文件和库文件，我们需要去系统路径下安装别人给的头文件和库文件：</p>\n<p>安装头文件：sudo cp*.h /usr/include/<br>\n安装库文件：sudo cp libmy_stdio.a /lib64/</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── hello.c</span><br><span class=\"line\">├── hello.h</span><br><span class=\"line\">├── hello.o</span><br><span class=\"line\">├── libhello.a</span><br><span class=\"line\">└── main.c</span><br></pre></td></tr></table></figure>\n<p>简单例子来看现在main.c需要使用库，就可以使用<code> gcc main.c -L ./ -l hello</code> ，运行生成的可执行文件即可<br>\n<code>-l</code>参数使用来指定第三方库的<br>\n<code>-L</code>参数使用来指定库的路径的，由于我这个简单的例子没有将库放入系统库文件，所以使用<code>-L</code>来指定位置</p>\n<h4 id=\"makefile中的静态库生成\">makefile中的静态库生成</h4>\n<p>制作：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">libmath.a:libmath.o</span></span><br><span class=\"line\">\tar rcs <span class=\"variable\">$@</span> <span class=\"variable\">$^</span></span><br><span class=\"line\"><span class=\"section\">libmath.o:libmath.c libmath.h</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm libmath.a libmath.o</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: clean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">hello:main.o</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> <span class=\"variable\">$^</span> -L./ -lmath</span><br><span class=\"line\"><span class=\"section\">main.o:main.c</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> -c <span class=\"variable\">$^</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm hello main.o</span><br></pre></td></tr></table></figure>\n<h4 id=\"动态库的生成\">动态库的生成</h4>\n<p>有了静态库，动态库也不难理解</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\"><span class=\"section\">libdll.so:dll.o</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> -shared <span class=\"variable\">$^</span></span><br><span class=\"line\"><span class=\"section\">dll.o:dll.c</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> -fPIC -c <span class=\"variable\">$^</span> </span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm libdll.so dll.o</span><br></pre></td></tr></table></figure>\n<p>使用方法跟静态库类似</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\"><span class=\"section\">hello:main.o</span></span><br><span class=\"line\">\tgcc -o hello main.o -L./ -ldll</span><br><span class=\"line\"><span class=\"section\">main.o:main.c</span></span><br><span class=\"line\">\tgcc -o <span class=\"variable\">$@</span> -c -fPIC <span class=\"variable\">$^</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm -f  main.o hello</span><br></pre></td></tr></table></figure>\n<p>这里可以使用<code>ldd</code>系统命令来查看依赖情况</p>\n<h4 id=\"Linux系统中，os可以根据环境变量查动态库\">Linux系统中，os可以根据环境变量查动态库</h4>\n<p><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:</code> +路径也可以：<br>\n如果想永久加env可以<code>vim .bash.src</code>中加入export …<br>\n记得刷新就行</p>\n<h2 id=\"makefile小tips\">makefile小tips</h2>\n<p>学完了基本的语法，就可以开始实践makefile了，下面是开发中经常遇到的初级及tips</p>\n<h3 id=\"自动生成依赖关系\">自动生成依赖关系</h3>\n<p>问题抛出可以看：</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"自动生成依赖关系\" href=\"https://blog.csdn.net/qq_52484093/article/details/122765782\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">自动生成依赖关系</p><p class=\"url\">https://blog.csdn.net/qq_52484093/article/details/122765782</p></div></a></div> \n<p>执行 make 时，首先查看 include，然后才是执行顶层目标所对应的规则。</p>\n<h3 id=\"使用目录管理源文件\">使用目录管理源文件</h3>\n<p>源文件散着放在一起会造成混乱，少一点还能理清楚，但是源文件多起来就不那么方便了，这里使用目录来管理源文件</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"利用Makefile给多文件、多目录C源码建立工程\" href=\"https://zhuanlan.zhihu.com/p/422891037\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">利用Makefile给多文件、多目录C源码建立工程</p><p class=\"url\">https://zhuanlan.zhihu.com/p/422891037</p></div></a></div> \n<h2 id=\"实战案例\">实战案例</h2>\n<div class=\"tag link\"><a class=\"link-card\" title=\"Makefile工程实践\" href=\"https://blog.csdn.net/qq_55299368/article/details/122071652\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">Makefile工程实践</p><p class=\"url\">https://blog.csdn.net/qq_55299368/article/details/122071652</p></div></a></div> \n"},{"title":"从0手搓无人机","description":"本文用于记录BEVDet在ROS上部署的开发日志","cover":"https://image.aruoshui.fun/i/2024/12/31/vsilyx-0.webp","swiper_index":3,"abbrlink":61537,"date":"2024-06-28T11:52:30.000Z","_content":"# 小组成员： 杨佳瑶，李焓蕾，张恒\n\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/6/28 -->\n## 完成内容\n- 观看视频学习开发板硬件参数以及外设资源\n- 完成开发软件Keil uVision5环境搭建\n- 实现库函数点灯程序烧录，并成功将led引脚从PD7改为PA5\n- 小组成员公共完成遥控器和信号接收器的对码，并实现遥控器控制舵机转动\n- 完成接收遥控器的信号获取输入捕获和输出比较，并统计结果\n  \n## 后续安排\n- 观看后续视频\n- 利用MPU6050及磁力计进行姿态解算，修正yaw轴\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/6/29 -->\n## 完成内容\n- MPU6050姿态解算视频学习\n- MPU6050移植到梁山派开发板并在串口调试助手输出欧拉角度 \n- MPU6050欧拉角度数据测试\n- 对于数据误差，经讨论得出，现在有两种方法解决，一个是跟视频用mpu6050来获得xyz轴角度（梁山派有从STM32移植过来的代码，验证可以直接使用），用磁力计来修正y轴偏差，其他角度尝试利用卡尔曼滤波，另一个是使用他们比赛小车上的IMU（已经从硬件角度解决漂移问题，xyz轴角度很稳定），要解决的是自己从stm32移植到梁山派。\n\n## 后续安排\n- 观看后续视频  \n- 完成HMC5883L移植到梁山派开发板并在串口调试助手输出数据\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/7/02~2024/7/03 由于小学期结课任务，每天陆陆续续不能得出固定产出，今天统一写出成果 -->\n- 查询大量资料。通过修改GPIO输出方式，修改软件I2C稳定了mpu6050的数值，但yaw角问题依然存在（老问题），利用磁力计互补能改善，但一般由于无人机四轴电机磁转影响，查询得知，会使无人机控制中更容易失调，所以选择不再加入磁力计。\n- 学习四轴飞行控制原理，6自由度\n- 复习PID算法\n<!-- endtimeline -->4\n\n<!-- timeline 2024/7/06 -->\n【完成】：\n(1)观看单级PID和串级PID视频，了解PID基础原理\n(2)学习飞控PID算法\n(3)学习梁山派芯片开发手册\n(4)完成无人机叶片调整及测试\n(5)完成无人机试飞\n \n【遇到的问题】：\n(1)将两个摇杆控制四个电机旋转改为一个遥感控制电机运行 \n(2)飞控与遥控器信号的对应，暂时不能得知\n\n【问题解决】：\n (1)通过修改代码完成1个信号PWM输入四个引脚输出\n\n【后续工作安排】：\n（1）观看后续视频  \n（2）通过代码编写完成另外一个摇杆控制无人机飞行方向\n（3）PID调参实现无人机悬停\n \n<!-- endtimeline -->\n\n<!-- timeline 2024/7/08 -->\n7月8日工作进展：\n【完成】\n（1）观看视频，分析代码\n代码来源：https://github.com/hzacross/FlightControlSystem_Study\n（2）了解PID的原理以及输入输出参数\n\n问题：暂无\n\n后续工作安排：\n继续研究代码，学习参数调整\n<!-- endtimeline -->\n\n<!-- timeline 2024/7/09 -->\n【完成】：\n完成PID算法的开发，利用姿态仪反馈的角度数据实现无人机的精确悬停控制。\n\n【遇到的问题】：\n(1)mpu6050的横滚角和俯仰角用代码修正以后稳定状态和测量状态输出数据有误\n(2)在使用PID算法根据姿态仪反馈的角度数据进行系统调整时，遇到了数据不稳定的问题\n \n【问题解决】：\n(1)通过在程序中debug，发现在 main函数中for(num =0; num<100; num++) 循环时，acc_x_cal 和 acc_y_cal 被累加，数组 accData 出现了越界，通过改变数组的索引方式解决了输出错误的问题。\n(2)通过与其他同学的PID算法进行比较发现是因为姿态仪受到噪声干扰，导致反馈数据不准确，影响了PID控制器的性能，通过对姿态仪的反馈数据进行滤波处理解决了此问题。\n\n【后续工作安排】：\n（1）将芯片安装至无人机上进行调参\n（2）针对视频学习的控制，进一步学习FreeRTOS实时操作系统进行实现\n \n<!-- endtimeline -->\n\n<!-- timeline 2024/7/10 -->\n学习FreeRTOS实时操作系统 \n<!-- endtimeline -->\n\n<!-- timeline 2024/7/11 -->\n【完成】：\n完成对FreeRTOS的裁剪\n学习FreeRTOS抢占调度和时间片轮转的底层逻辑和过程，队列的使用，同步与互斥关系定义\n继续完成对无人机线路及接线的优化，利用面包板和核心板排线，稳定搭载的传感器\n \n【问题解决】：\n暂无\n\n【后续工作安排】：\n（1）继续学习FreeRTOS\n（2）规划无人机飞行状态，确定任务调度过程及数据传输\n \n<!-- endtimeline -->\n\n\n<!-- timeline 2024/7/12 -->\n【完成】：\n通过调整PID参数逐步稳定机身\n无人机解锁条件修改为当VRA的值小于1100并且start = 0时，解锁无人机（成功，并且非常好控制，较为安全）\n\n【问题】\n平衡参数还未达到最优，侧翻问题还会时不时出现\n\n【后续工作安排】：\n（1）继续学习FreeRTOS\n（2）继续对无人机PID参数进行调整，实现各个方向的运动，并对运动方向进行任务级的划分\n \n<!-- endtimeline -->\n\n<!-- timeline 2024/7/15 -->\n【完成】：\n学习使用GT-U12模块获取GPS定位信息\n模块输出语句的解析\n\n【问题】\nGPS定位不准，稍有0.01的偏差，后边进行多次定位，尝试用不同型号的卫星进行定位信息的校准\n\n【后续工作安排】：\n（1）数据串口输入到梁山派开发板\n（2）完成对数据的解析和标定，找出最准确的定位位置信息\n \n<!-- endtimeline -->\n\n\n<!-- timeline 2024/7/16 -->\n【完成】：\n（1）找到STM32F103的相关解析GPS的代码\n（2）对代码进行移植并测试\n\n【后续工作安排】：\n（1）继续学习FreeRTOS\n（2）继续对无人机PID参数进行调节，搭配GPS实现自动返航任务\n \n<!-- endtimeline -->\n\n<!-- timeline 2024/7/18 -->\n【完成】：\n（1）完成FreeRTOS的学习\n（2）解决了GPS通信串口输入的问题\n\n【后续工作安排】：\n（1）串口输入数据还需要解析，而且由于GPS数据较慢，串口速度读取很快，出现很多空数据的情况，正在尝试匹配数据速率，实现对GPS数据的正确解析\n（2）对飞行任务进行操作系统级别的设计和编码\n \n<!-- endtimeline -->\n\n<!-- timeline 2024/7/19 ~ 2024/7/22 -->\n【完成】：\n（1）GPS数据解析完毕\n（2）设计无人机飞行任务发现很困难，在寻找思路的时候发现有开源的代码，也是用FreeRTOS实现的：[2021年 G题 植保飞行器](https://oshwhub.com/dahjdksakdlshjkads/g-zhi-bao-fei-xing-qi)，观看了其演示视频，发现效果很好，顺其代码往下看，其实他这个也是其他开源飞控改过来的：[MiniFly四轴飞行器 ](http://www.openedv.com/docs/fouraxis-fly/minifly.html)，效果也非常好，能借鉴，其中也包含了硬件资料、地面站使用教程，可以涵盖我们目前的任务。\n（3）完成PID调参架的搭建\n\n\n【后续工作安排】：\n学习MiniFly的源代码，尝试在我们自己的设备上实现\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/7/24-->\n【完成】：\n（1）分析MiniFly中FreeRTOS的调度及任务关系\n（2）搜索了有关图传的信息，结合评论等，如果要实现一个功能完善，效果稳定的图传，直接淘宝购买是最合适的\n\n【后续工作安排】：\n（1）查看MiniFly中用户数据使用方法，能自己写协议与地面站进行通信，实时调参\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/7/25-->\n【完成】：\n（1）学习了匿名飞控地面站的使用，学习了定义的通信协议\n\n\n【后续工作安排】：\n（1）写协议与地面站进行通信，实时调参\n（2）找到minifly中通信协议的定义，能够挪用到我们板子上\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n遥控器的信号获取输入捕获与输出比较\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=1554114226&bvid=BV181421677A&cid=1533315007&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\nMPU6050姿态解算介绍\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=1254437099&bvid=BV1PJ4m1N7BK&cid=1541344870&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n\n# 详细开发过程\n## 问题与解决\n### 6月28日问题\n（1）在搭建程序时遇到ULINK2/ME-Cortex-M Error，NO ULINK2/ME Device found的问题\n（2）接收遥控器的信号获取输入在串口监视器上数值不变\n（3）无法导入GD32F4xx库\n（4）下载的时候报错：Error: Flash Download failed - Target DLL has been cancelled\n（5）keil免费激活\n#### 6月28日解决\n（1）通过网上查找资料发现自己搭建的项目与芯片型号不符，通过修改项目型号成功解决问题\n（2）通过单一变量法解决接线对应的数据变化\n（3）使用离线导入即可\n固件库下载地址：https://www.gd32mcu.com/cn/download/7?kw=GD32F4下载GD32F4xx AddOn压缩包，解压后安装GigaDevice.GD32F4xx_DFP.3.2.0.pack\n（4）type-c接口未完全插入\n（5）科学软件使用教程：https://blog.csdn.net/qq_54995462/article/details/126533029\n\n### 6月29日问题\n(1)MPU6050移植到梁山派开发板上以后无法在串口调制助手输出数据\n(2)MPU6050数据三个角度都有很大误差，更新慢\n#### 6月29日解决\n(1)经过仔细排查发现是杜邦线有问题，换掉有问题杜邦线之后数据正常输出\n(2)尝试用磁力计进行互补滤波算法，修正误差\n\n\n## 开发收获 \n### 遥控器控制以及接线\n![控制接线](https://s2.loli.net/2024/06/28/uqwfpH9NiaE3SIv.png)\n\n### 遥控器信号控制舵机\n拍摄视频如下：\n<video\nsrc=\"/img/yaokongqi.mp4\" controls=\"\"\nheight=400 \nwidth=600> \n</video>\n\n### MPU6050移植\n\n### 四轴控制算法\n#### 无人机四轴机体结构\n![无人机四轴机体结构](https://s2.loli.net/2024/07/05/T7BQ8zS6PNZ2yVK.png)\n\n##### 垂直升降运动\n升力>重力，四轴电机转动速度不经相同，在我们测试过程中容易出现向一边偏离的情况，这个问题是固然存在的，难以通过硬件电机速度使四轴转动速度一致（首要解决的是稳定悬停）。\n##### 俯仰角度/前后运动\n![前后运动](https://s2.loli.net/2024/07/05/FoHR9N6VyCeQPLh.png)\nM1，M2转动速度下降，M3，M4转动速度上升->前进，并保持这个斜角，能往前进（升力在重力反方向的分力始终抵消重力）\nM1，M2转动速度上升，M3，M4转动速度下降->前进，并保持这个斜角，能往前进（升力在重力反方向的分力始终抵消重力）\n###### 控制框图\n![](https://s2.loli.net/2024/07/05/kMGPWOoX5gYpBC7.png)\n##### 横滚角度/左右运动\n同前后，原理相似\n##### 航偏角度\n![偏航角](https://s2.loli.net/2024/07/05/CojJmb2v7HpAUI9.png)\nM1，M3转动速度 > M2，M4转动速度->逆时针\nM1，M3转动速度 < M2，M4转动速度->顺时针\n\n#### 单级PID控制\n![](https://s2.loli.net/2024/07/05/mbk8Mg6nBhWzYpv.png)\n四轴飞行器接收遥控器发送来的姿态角,作为期望角度输入到控制系统中与姿态解算算法解算出的实际姿态角度进行求取偏差，分别经过各自的PID控制器进行PID 运算，运算结果转化成电机调速的PWM 方波来调节四个电机的转速，从而调节四轴飞行器的姿态和运动。调节后的姿态角又进过姿态反馈环反馈给了输入为下一次控制做准备。\n\n搜索资料发现：采用单级 PID 控制飞行姿态，四轴飞行器在无遥控打舵控制下自稳性能很不做错，但是遥控打舵的跟随性不够完美。这是由于四轴飞行器的螺旋桨转速与升力不成正比关系,而是呈现平方倍的关系。这也就直接导致了四轴飞行器输入与输出量不再是线性关系。所以只用单闭环 PID 控制姿态，在遥控大舵量遥控时会出现飞行器失衡或跟随时滞的现象\n\n#### 双闭环串级PID控制\n解决这个问题可以采用双闭环策略。对角度进行 PID 控制又对角速度进行 PID 控制。 由于角度的微分就是角速度，所以角度环的误差就可以理解成角速度,把角度环的误差作为角速度环的期望值输入到角速度环,角速度环用陀螺仪来观测角速度的变化作为反馈值与期望值求取误差，然后控制角度速度尽快达到期望值，角速度环的输出值给四路电机控制飞机姿态，姿态解算算法获取实时姿态作为角度环的反馈值。这样就将两个PID控制器串联在一起,通常把角度环叫做外环,角速度环叫做内环。\n![](https://s2.loli.net/2024/07/05/24ubyQEwzaGZBtO.png)\n双闭环串级 PID 控制比单闭环 PID 控制，多了个角速度环的控制，角速度的数据是陀螺仪测出来的,测量值一般不容易受到干扰,并且角速度变化比较快,当受外界干扰时反应迅速增强了系统的鲁棒性。这样就解决了单级PID 控制时打大舵量遥控时会出现飞行器失衡或跟随滞后的问题\n\n\n#### 电机动力分配\n\n#### 无线调参\n利用串口进行PID参数输出，手动改代码来修PID显然较为效率低下，正在寻找上位机，希望能进行动态调参。\n\n### FreeRTOS\n#### 环境搭建\nGD32开发板FreeRTOS环境搭建\nhttps://blog.csdn.net/m0_52999945/article/details/135891681\n\n【野火FreeRTOS例程移植到梁山派开发板之按键控灯】 https://www.bilibili.com/video/BV1Lm4y1G7Xi/?share_source=copy_web&vd_source=8e98251de20e8e78de3196f9a8473f8a\n\n#### 学习\n\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=320990385&bvid=BV1Jw411i7Fz&cid=1271201329&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n\n### GY-U12模块使用\n测试将GPS模块放置到室外空旷地带，板载 LED 保持一定的频率闪烁证明定位成功了。、\n#### 串口输出GPS信号\n![GPS](https://s2.loli.net/2024/07/15/aUiedG8RZ6MDIYv.png)\n\n#### 对信号进行解析\n\n{% note warning modern %}\nGP ：只使用 GPS-QZSS-SBAS 卫星 \nBD ：只使用 BEIDOU 卫星 \nGL ：只使用 GLONASS 卫星 DC\nGI ：只使用 INSAT 卫星 \nGA ：只使用 GALILEO 卫星 \nGN ：多卫星系统组合定位。 \n{% endnote %}\n\n![协议说明](https://s2.loli.net/2024/07/15/3ySzTX89d2wC6lW.png)\n\n##### GGA协议\n![GGA](https://s2.loli.net/2024/07/15/QK8LjdD1kpEXyBb.png)\n\n\n##### GSA协议\n![GSA](https://s2.loli.net/2024/07/15/QEzmHpohKBXaGOU.png)\n\n##### GSV协议\n![GSV](https://s2.loli.net/2024/07/15/3GoJk71iO5pDbRH.png)\n\n##### RMC协议\n![RMC](https://s2.loli.net/2024/07/15/OIaqJtYBeGNufps.png)\n\n##### TXT\n![TXT](https://s2.loli.net/2024/07/15/w7KCgHlBtFvT1Jy.png)\n\n##### 经纬度转换\n![转换结果](https://s2.loli.net/2024/07/15/59hSlV1GUvJMewj.png)\n定位相比较有一点点偏差，尝试解析不同的协议进行选择\n\n正确的位置是在：\n![正确](https://s2.loli.net/2024/07/15/vOn2IfCLSWRe1Zl.png)\n\n","source":"_posts/从0手搓无人机.md","raw":"---\ntitle: 从0手搓无人机\ntags:\n  - 飞控\n  - 单片机\ndescription: 本文用于记录BEVDet在ROS上部署的开发日志\ncategories:\n  - 嵌入式开发\ncover: 'https://image.aruoshui.fun/i/2024/12/31/vsilyx-0.webp'\nswiper_index: 3\nabbrlink: 61537\ndate: 2024-06-28 19:52:30\n---\n# 小组成员： 杨佳瑶，李焓蕾，张恒\n\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/6/28 -->\n## 完成内容\n- 观看视频学习开发板硬件参数以及外设资源\n- 完成开发软件Keil uVision5环境搭建\n- 实现库函数点灯程序烧录，并成功将led引脚从PD7改为PA5\n- 小组成员公共完成遥控器和信号接收器的对码，并实现遥控器控制舵机转动\n- 完成接收遥控器的信号获取输入捕获和输出比较，并统计结果\n  \n## 后续安排\n- 观看后续视频\n- 利用MPU6050及磁力计进行姿态解算，修正yaw轴\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/6/29 -->\n## 完成内容\n- MPU6050姿态解算视频学习\n- MPU6050移植到梁山派开发板并在串口调试助手输出欧拉角度 \n- MPU6050欧拉角度数据测试\n- 对于数据误差，经讨论得出，现在有两种方法解决，一个是跟视频用mpu6050来获得xyz轴角度（梁山派有从STM32移植过来的代码，验证可以直接使用），用磁力计来修正y轴偏差，其他角度尝试利用卡尔曼滤波，另一个是使用他们比赛小车上的IMU（已经从硬件角度解决漂移问题，xyz轴角度很稳定），要解决的是自己从stm32移植到梁山派。\n\n## 后续安排\n- 观看后续视频  \n- 完成HMC5883L移植到梁山派开发板并在串口调试助手输出数据\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/7/02~2024/7/03 由于小学期结课任务，每天陆陆续续不能得出固定产出，今天统一写出成果 -->\n- 查询大量资料。通过修改GPIO输出方式，修改软件I2C稳定了mpu6050的数值，但yaw角问题依然存在（老问题），利用磁力计互补能改善，但一般由于无人机四轴电机磁转影响，查询得知，会使无人机控制中更容易失调，所以选择不再加入磁力计。\n- 学习四轴飞行控制原理，6自由度\n- 复习PID算法\n<!-- endtimeline -->4\n\n<!-- timeline 2024/7/06 -->\n【完成】：\n(1)观看单级PID和串级PID视频，了解PID基础原理\n(2)学习飞控PID算法\n(3)学习梁山派芯片开发手册\n(4)完成无人机叶片调整及测试\n(5)完成无人机试飞\n \n【遇到的问题】：\n(1)将两个摇杆控制四个电机旋转改为一个遥感控制电机运行 \n(2)飞控与遥控器信号的对应，暂时不能得知\n\n【问题解决】：\n (1)通过修改代码完成1个信号PWM输入四个引脚输出\n\n【后续工作安排】：\n（1）观看后续视频  \n（2）通过代码编写完成另外一个摇杆控制无人机飞行方向\n（3）PID调参实现无人机悬停\n \n<!-- endtimeline -->\n\n<!-- timeline 2024/7/08 -->\n7月8日工作进展：\n【完成】\n（1）观看视频，分析代码\n代码来源：https://github.com/hzacross/FlightControlSystem_Study\n（2）了解PID的原理以及输入输出参数\n\n问题：暂无\n\n后续工作安排：\n继续研究代码，学习参数调整\n<!-- endtimeline -->\n\n<!-- timeline 2024/7/09 -->\n【完成】：\n完成PID算法的开发，利用姿态仪反馈的角度数据实现无人机的精确悬停控制。\n\n【遇到的问题】：\n(1)mpu6050的横滚角和俯仰角用代码修正以后稳定状态和测量状态输出数据有误\n(2)在使用PID算法根据姿态仪反馈的角度数据进行系统调整时，遇到了数据不稳定的问题\n \n【问题解决】：\n(1)通过在程序中debug，发现在 main函数中for(num =0; num<100; num++) 循环时，acc_x_cal 和 acc_y_cal 被累加，数组 accData 出现了越界，通过改变数组的索引方式解决了输出错误的问题。\n(2)通过与其他同学的PID算法进行比较发现是因为姿态仪受到噪声干扰，导致反馈数据不准确，影响了PID控制器的性能，通过对姿态仪的反馈数据进行滤波处理解决了此问题。\n\n【后续工作安排】：\n（1）将芯片安装至无人机上进行调参\n（2）针对视频学习的控制，进一步学习FreeRTOS实时操作系统进行实现\n \n<!-- endtimeline -->\n\n<!-- timeline 2024/7/10 -->\n学习FreeRTOS实时操作系统 \n<!-- endtimeline -->\n\n<!-- timeline 2024/7/11 -->\n【完成】：\n完成对FreeRTOS的裁剪\n学习FreeRTOS抢占调度和时间片轮转的底层逻辑和过程，队列的使用，同步与互斥关系定义\n继续完成对无人机线路及接线的优化，利用面包板和核心板排线，稳定搭载的传感器\n \n【问题解决】：\n暂无\n\n【后续工作安排】：\n（1）继续学习FreeRTOS\n（2）规划无人机飞行状态，确定任务调度过程及数据传输\n \n<!-- endtimeline -->\n\n\n<!-- timeline 2024/7/12 -->\n【完成】：\n通过调整PID参数逐步稳定机身\n无人机解锁条件修改为当VRA的值小于1100并且start = 0时，解锁无人机（成功，并且非常好控制，较为安全）\n\n【问题】\n平衡参数还未达到最优，侧翻问题还会时不时出现\n\n【后续工作安排】：\n（1）继续学习FreeRTOS\n（2）继续对无人机PID参数进行调整，实现各个方向的运动，并对运动方向进行任务级的划分\n \n<!-- endtimeline -->\n\n<!-- timeline 2024/7/15 -->\n【完成】：\n学习使用GT-U12模块获取GPS定位信息\n模块输出语句的解析\n\n【问题】\nGPS定位不准，稍有0.01的偏差，后边进行多次定位，尝试用不同型号的卫星进行定位信息的校准\n\n【后续工作安排】：\n（1）数据串口输入到梁山派开发板\n（2）完成对数据的解析和标定，找出最准确的定位位置信息\n \n<!-- endtimeline -->\n\n\n<!-- timeline 2024/7/16 -->\n【完成】：\n（1）找到STM32F103的相关解析GPS的代码\n（2）对代码进行移植并测试\n\n【后续工作安排】：\n（1）继续学习FreeRTOS\n（2）继续对无人机PID参数进行调节，搭配GPS实现自动返航任务\n \n<!-- endtimeline -->\n\n<!-- timeline 2024/7/18 -->\n【完成】：\n（1）完成FreeRTOS的学习\n（2）解决了GPS通信串口输入的问题\n\n【后续工作安排】：\n（1）串口输入数据还需要解析，而且由于GPS数据较慢，串口速度读取很快，出现很多空数据的情况，正在尝试匹配数据速率，实现对GPS数据的正确解析\n（2）对飞行任务进行操作系统级别的设计和编码\n \n<!-- endtimeline -->\n\n<!-- timeline 2024/7/19 ~ 2024/7/22 -->\n【完成】：\n（1）GPS数据解析完毕\n（2）设计无人机飞行任务发现很困难，在寻找思路的时候发现有开源的代码，也是用FreeRTOS实现的：[2021年 G题 植保飞行器](https://oshwhub.com/dahjdksakdlshjkads/g-zhi-bao-fei-xing-qi)，观看了其演示视频，发现效果很好，顺其代码往下看，其实他这个也是其他开源飞控改过来的：[MiniFly四轴飞行器 ](http://www.openedv.com/docs/fouraxis-fly/minifly.html)，效果也非常好，能借鉴，其中也包含了硬件资料、地面站使用教程，可以涵盖我们目前的任务。\n（3）完成PID调参架的搭建\n\n\n【后续工作安排】：\n学习MiniFly的源代码，尝试在我们自己的设备上实现\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/7/24-->\n【完成】：\n（1）分析MiniFly中FreeRTOS的调度及任务关系\n（2）搜索了有关图传的信息，结合评论等，如果要实现一个功能完善，效果稳定的图传，直接淘宝购买是最合适的\n\n【后续工作安排】：\n（1）查看MiniFly中用户数据使用方法，能自己写协议与地面站进行通信，实时调参\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/7/25-->\n【完成】：\n（1）学习了匿名飞控地面站的使用，学习了定义的通信协议\n\n\n【后续工作安排】：\n（1）写协议与地面站进行通信，实时调参\n（2）找到minifly中通信协议的定义，能够挪用到我们板子上\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n遥控器的信号获取输入捕获与输出比较\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=1554114226&bvid=BV181421677A&cid=1533315007&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\nMPU6050姿态解算介绍\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=1254437099&bvid=BV1PJ4m1N7BK&cid=1541344870&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n\n# 详细开发过程\n## 问题与解决\n### 6月28日问题\n（1）在搭建程序时遇到ULINK2/ME-Cortex-M Error，NO ULINK2/ME Device found的问题\n（2）接收遥控器的信号获取输入在串口监视器上数值不变\n（3）无法导入GD32F4xx库\n（4）下载的时候报错：Error: Flash Download failed - Target DLL has been cancelled\n（5）keil免费激活\n#### 6月28日解决\n（1）通过网上查找资料发现自己搭建的项目与芯片型号不符，通过修改项目型号成功解决问题\n（2）通过单一变量法解决接线对应的数据变化\n（3）使用离线导入即可\n固件库下载地址：https://www.gd32mcu.com/cn/download/7?kw=GD32F4下载GD32F4xx AddOn压缩包，解压后安装GigaDevice.GD32F4xx_DFP.3.2.0.pack\n（4）type-c接口未完全插入\n（5）科学软件使用教程：https://blog.csdn.net/qq_54995462/article/details/126533029\n\n### 6月29日问题\n(1)MPU6050移植到梁山派开发板上以后无法在串口调制助手输出数据\n(2)MPU6050数据三个角度都有很大误差，更新慢\n#### 6月29日解决\n(1)经过仔细排查发现是杜邦线有问题，换掉有问题杜邦线之后数据正常输出\n(2)尝试用磁力计进行互补滤波算法，修正误差\n\n\n## 开发收获 \n### 遥控器控制以及接线\n![控制接线](https://s2.loli.net/2024/06/28/uqwfpH9NiaE3SIv.png)\n\n### 遥控器信号控制舵机\n拍摄视频如下：\n<video\nsrc=\"/img/yaokongqi.mp4\" controls=\"\"\nheight=400 \nwidth=600> \n</video>\n\n### MPU6050移植\n\n### 四轴控制算法\n#### 无人机四轴机体结构\n![无人机四轴机体结构](https://s2.loli.net/2024/07/05/T7BQ8zS6PNZ2yVK.png)\n\n##### 垂直升降运动\n升力>重力，四轴电机转动速度不经相同，在我们测试过程中容易出现向一边偏离的情况，这个问题是固然存在的，难以通过硬件电机速度使四轴转动速度一致（首要解决的是稳定悬停）。\n##### 俯仰角度/前后运动\n![前后运动](https://s2.loli.net/2024/07/05/FoHR9N6VyCeQPLh.png)\nM1，M2转动速度下降，M3，M4转动速度上升->前进，并保持这个斜角，能往前进（升力在重力反方向的分力始终抵消重力）\nM1，M2转动速度上升，M3，M4转动速度下降->前进，并保持这个斜角，能往前进（升力在重力反方向的分力始终抵消重力）\n###### 控制框图\n![](https://s2.loli.net/2024/07/05/kMGPWOoX5gYpBC7.png)\n##### 横滚角度/左右运动\n同前后，原理相似\n##### 航偏角度\n![偏航角](https://s2.loli.net/2024/07/05/CojJmb2v7HpAUI9.png)\nM1，M3转动速度 > M2，M4转动速度->逆时针\nM1，M3转动速度 < M2，M4转动速度->顺时针\n\n#### 单级PID控制\n![](https://s2.loli.net/2024/07/05/mbk8Mg6nBhWzYpv.png)\n四轴飞行器接收遥控器发送来的姿态角,作为期望角度输入到控制系统中与姿态解算算法解算出的实际姿态角度进行求取偏差，分别经过各自的PID控制器进行PID 运算，运算结果转化成电机调速的PWM 方波来调节四个电机的转速，从而调节四轴飞行器的姿态和运动。调节后的姿态角又进过姿态反馈环反馈给了输入为下一次控制做准备。\n\n搜索资料发现：采用单级 PID 控制飞行姿态，四轴飞行器在无遥控打舵控制下自稳性能很不做错，但是遥控打舵的跟随性不够完美。这是由于四轴飞行器的螺旋桨转速与升力不成正比关系,而是呈现平方倍的关系。这也就直接导致了四轴飞行器输入与输出量不再是线性关系。所以只用单闭环 PID 控制姿态，在遥控大舵量遥控时会出现飞行器失衡或跟随时滞的现象\n\n#### 双闭环串级PID控制\n解决这个问题可以采用双闭环策略。对角度进行 PID 控制又对角速度进行 PID 控制。 由于角度的微分就是角速度，所以角度环的误差就可以理解成角速度,把角度环的误差作为角速度环的期望值输入到角速度环,角速度环用陀螺仪来观测角速度的变化作为反馈值与期望值求取误差，然后控制角度速度尽快达到期望值，角速度环的输出值给四路电机控制飞机姿态，姿态解算算法获取实时姿态作为角度环的反馈值。这样就将两个PID控制器串联在一起,通常把角度环叫做外环,角速度环叫做内环。\n![](https://s2.loli.net/2024/07/05/24ubyQEwzaGZBtO.png)\n双闭环串级 PID 控制比单闭环 PID 控制，多了个角速度环的控制，角速度的数据是陀螺仪测出来的,测量值一般不容易受到干扰,并且角速度变化比较快,当受外界干扰时反应迅速增强了系统的鲁棒性。这样就解决了单级PID 控制时打大舵量遥控时会出现飞行器失衡或跟随滞后的问题\n\n\n#### 电机动力分配\n\n#### 无线调参\n利用串口进行PID参数输出，手动改代码来修PID显然较为效率低下，正在寻找上位机，希望能进行动态调参。\n\n### FreeRTOS\n#### 环境搭建\nGD32开发板FreeRTOS环境搭建\nhttps://blog.csdn.net/m0_52999945/article/details/135891681\n\n【野火FreeRTOS例程移植到梁山派开发板之按键控灯】 https://www.bilibili.com/video/BV1Lm4y1G7Xi/?share_source=copy_web&vd_source=8e98251de20e8e78de3196f9a8473f8a\n\n#### 学习\n\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=320990385&bvid=BV1Jw411i7Fz&cid=1271201329&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n\n### GY-U12模块使用\n测试将GPS模块放置到室外空旷地带，板载 LED 保持一定的频率闪烁证明定位成功了。、\n#### 串口输出GPS信号\n![GPS](https://s2.loli.net/2024/07/15/aUiedG8RZ6MDIYv.png)\n\n#### 对信号进行解析\n\n{% note warning modern %}\nGP ：只使用 GPS-QZSS-SBAS 卫星 \nBD ：只使用 BEIDOU 卫星 \nGL ：只使用 GLONASS 卫星 DC\nGI ：只使用 INSAT 卫星 \nGA ：只使用 GALILEO 卫星 \nGN ：多卫星系统组合定位。 \n{% endnote %}\n\n![协议说明](https://s2.loli.net/2024/07/15/3ySzTX89d2wC6lW.png)\n\n##### GGA协议\n![GGA](https://s2.loli.net/2024/07/15/QK8LjdD1kpEXyBb.png)\n\n\n##### GSA协议\n![GSA](https://s2.loli.net/2024/07/15/QEzmHpohKBXaGOU.png)\n\n##### GSV协议\n![GSV](https://s2.loli.net/2024/07/15/3GoJk71iO5pDbRH.png)\n\n##### RMC协议\n![RMC](https://s2.loli.net/2024/07/15/OIaqJtYBeGNufps.png)\n\n##### TXT\n![TXT](https://s2.loli.net/2024/07/15/w7KCgHlBtFvT1Jy.png)\n\n##### 经纬度转换\n![转换结果](https://s2.loli.net/2024/07/15/59hSlV1GUvJMewj.png)\n定位相比较有一点点偏差，尝试解析不同的协议进行选择\n\n正确的位置是在：\n![正确](https://s2.loli.net/2024/07/15/vOn2IfCLSWRe1Zl.png)\n\n","slug":"从0手搓无人机","published":1,"updated":"2024-12-31T11:23:00.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io40026mktt567ahn33","content":"<h1>小组成员： 杨佳瑶，李焓蕾，张恒</h1>\n<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/6/28</p>\n</div></div><div class='timeline-item-content'><h2 id=\"完成内容\">完成内容</h2>\n<ul>\n<li>观看视频学习开发板硬件参数以及外设资源</li>\n<li>完成开发软件Keil uVision5环境搭建</li>\n<li>实现库函数点灯程序烧录，并成功将led引脚从PD7改为PA5</li>\n<li>小组成员公共完成遥控器和信号接收器的对码，并实现遥控器控制舵机转动</li>\n<li>完成接收遥控器的信号获取输入捕获和输出比较，并统计结果</li>\n</ul>\n<h2 id=\"后续安排\">后续安排</h2>\n<ul>\n<li>观看后续视频</li>\n<li>利用MPU6050及磁力计进行姿态解算，修正yaw轴</li>\n</ul>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/6/29</p>\n</div></div><div class='timeline-item-content'><h2 id=\"完成内容\">完成内容</h2>\n<ul>\n<li>MPU6050姿态解算视频学习</li>\n<li>MPU6050移植到梁山派开发板并在串口调试助手输出欧拉角度</li>\n<li>MPU6050欧拉角度数据测试</li>\n<li>对于数据误差，经讨论得出，现在有两种方法解决，一个是跟视频用mpu6050来获得xyz轴角度（梁山派有从STM32移植过来的代码，验证可以直接使用），用磁力计来修正y轴偏差，其他角度尝试利用卡尔曼滤波，另一个是使用他们比赛小车上的IMU（已经从硬件角度解决漂移问题，xyz轴角度很稳定），要解决的是自己从stm32移植到梁山派。</li>\n</ul>\n<h2 id=\"后续安排\">后续安排</h2>\n<ul>\n<li>观看后续视频</li>\n<li>完成HMC5883L移植到梁山派开发板并在串口调试助手输出数据</li>\n</ul>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/02~2024/7/03 由于小学期结课任务，每天陆陆续续不能得出固定产出，今天统一写出成果</p>\n</div></div><div class='timeline-item-content'><ul>\n<li>查询大量资料。通过修改GPIO输出方式，修改软件I2C稳定了mpu6050的数值，但yaw角问题依然存在（老问题），利用磁力计互补能改善，但一般由于无人机四轴电机磁转影响，查询得知，会使无人机控制中更容易失调，所以选择不再加入磁力计。</li>\n<li>学习四轴飞行控制原理，6自由度</li>\n<li>复习PID算法</li>\n</ul>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/06</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n(1)观看单级PID和串级PID视频，了解PID基础原理<br>\n(2)学习飞控PID算法<br>\n(3)学习梁山派芯片开发手册<br>\n(4)完成无人机叶片调整及测试<br>\n(5)完成无人机试飞</p>\n<p>【遇到的问题】：<br>\n(1)将两个摇杆控制四个电机旋转改为一个遥感控制电机运行<br>\n(2)飞控与遥控器信号的对应，暂时不能得知</p>\n<p>【问题解决】：<br>\n(1)通过修改代码完成1个信号PWM输入四个引脚输出</p>\n<p>【后续工作安排】：<br>\n（1）观看后续视频<br>\n（2）通过代码编写完成另外一个摇杆控制无人机飞行方向<br>\n（3）PID调参实现无人机悬停</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/08</p>\n</div></div><div class='timeline-item-content'><p>7月8日工作进展：<br>\n【完成】<br>\n（1）观看视频，分析代码<br>\n代码来源：<a href=\"https://github.com/hzacross/FlightControlSystem_Study\">https://github.com/hzacross/FlightControlSystem_Study</a><br>\n（2）了解PID的原理以及输入输出参数</p>\n<p>问题：暂无</p>\n<p>后续工作安排：<br>\n继续研究代码，学习参数调整</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/09</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n完成PID算法的开发，利用姿态仪反馈的角度数据实现无人机的精确悬停控制。</p>\n<p>【遇到的问题】：<br>\n(1)mpu6050的横滚角和俯仰角用代码修正以后稳定状态和测量状态输出数据有误<br>\n(2)在使用PID算法根据姿态仪反馈的角度数据进行系统调整时，遇到了数据不稳定的问题</p>\n<p>【问题解决】：<br>\n(1)通过在程序中debug，发现在 main函数中for(num =0; num&lt;100; num++) 循环时，acc_x_cal 和 acc_y_cal 被累加，数组 accData 出现了越界，通过改变数组的索引方式解决了输出错误的问题。<br>\n(2)通过与其他同学的PID算法进行比较发现是因为姿态仪受到噪声干扰，导致反馈数据不准确，影响了PID控制器的性能，通过对姿态仪的反馈数据进行滤波处理解决了此问题。</p>\n<p>【后续工作安排】：<br>\n（1）将芯片安装至无人机上进行调参<br>\n（2）针对视频学习的控制，进一步学习FreeRTOS实时操作系统进行实现</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/10</p>\n</div></div><div class='timeline-item-content'><p>学习FreeRTOS实时操作系统</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/11</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n完成对FreeRTOS的裁剪<br>\n学习FreeRTOS抢占调度和时间片轮转的底层逻辑和过程，队列的使用，同步与互斥关系定义<br>\n继续完成对无人机线路及接线的优化，利用面包板和核心板排线，稳定搭载的传感器</p>\n<p>【问题解决】：<br>\n暂无</p>\n<p>【后续工作安排】：<br>\n（1）继续学习FreeRTOS<br>\n（2）规划无人机飞行状态，确定任务调度过程及数据传输</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/12</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n通过调整PID参数逐步稳定机身<br>\n无人机解锁条件修改为当VRA的值小于1100并且start = 0时，解锁无人机（成功，并且非常好控制，较为安全）</p>\n<p>【问题】<br>\n平衡参数还未达到最优，侧翻问题还会时不时出现</p>\n<p>【后续工作安排】：<br>\n（1）继续学习FreeRTOS<br>\n（2）继续对无人机PID参数进行调整，实现各个方向的运动，并对运动方向进行任务级的划分</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/15</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n学习使用GT-U12模块获取GPS定位信息<br>\n模块输出语句的解析</p>\n<p>【问题】<br>\nGPS定位不准，稍有0.01的偏差，后边进行多次定位，尝试用不同型号的卫星进行定位信息的校准</p>\n<p>【后续工作安排】：<br>\n（1）数据串口输入到梁山派开发板<br>\n（2）完成对数据的解析和标定，找出最准确的定位位置信息</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/16</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n（1）找到STM32F103的相关解析GPS的代码<br>\n（2）对代码进行移植并测试</p>\n<p>【后续工作安排】：<br>\n（1）继续学习FreeRTOS<br>\n（2）继续对无人机PID参数进行调节，搭配GPS实现自动返航任务</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/18</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n（1）完成FreeRTOS的学习<br>\n（2）解决了GPS通信串口输入的问题</p>\n<p>【后续工作安排】：<br>\n（1）串口输入数据还需要解析，而且由于GPS数据较慢，串口速度读取很快，出现很多空数据的情况，正在尝试匹配数据速率，实现对GPS数据的正确解析<br>\n（2）对飞行任务进行操作系统级别的设计和编码</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/19 ~ 2024/7/22</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n（1）GPS数据解析完毕<br>\n（2）设计无人机飞行任务发现很困难，在寻找思路的时候发现有开源的代码，也是用FreeRTOS实现的：<a href=\"https://oshwhub.com/dahjdksakdlshjkads/g-zhi-bao-fei-xing-qi\">2021年 G题 植保飞行器</a>，观看了其演示视频，发现效果很好，顺其代码往下看，其实他这个也是其他开源飞控改过来的：<a href=\"http://www.openedv.com/docs/fouraxis-fly/minifly.html\">MiniFly四轴飞行器 </a>，效果也非常好，能借鉴，其中也包含了硬件资料、地面站使用教程，可以涵盖我们目前的任务。<br>\n（3）完成PID调参架的搭建</p>\n<p>【后续工作安排】：<br>\n学习MiniFly的源代码，尝试在我们自己的设备上实现</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/24</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n（1）分析MiniFly中FreeRTOS的调度及任务关系<br>\n（2）搜索了有关图传的信息，结合评论等，如果要实现一个功能完善，效果稳定的图传，直接淘宝购买是最合适的</p>\n<p>【后续工作安排】：<br>\n（1）查看MiniFly中用户数据使用方法，能自己写协议与地面站进行通信，实时调参</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/25</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n（1）学习了匿名飞控地面站的使用，学习了定义的通信协议</p>\n<p>【后续工作安排】：<br>\n（1）写协议与地面站进行通信，实时调参<br>\n（2）找到minifly中通信协议的定义，能够挪用到我们板子上</p>\n</div></div></div>\n<h1>参考文章</h1>\n<p>遥控器的信号获取输入捕获与输出比较</p>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=1554114226&bvid=BV181421677A&cid=1533315007&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<p>MPU6050姿态解算介绍</p>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=1254437099&bvid=BV1PJ4m1N7BK&cid=1541344870&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<h1>详细开发过程</h1>\n<h2 id=\"问题与解决\">问题与解决</h2>\n<h3 id=\"6月28日问题\">6月28日问题</h3>\n<p>（1）在搭建程序时遇到ULINK2/ME-Cortex-M Error，NO ULINK2/ME Device found的问题<br>\n（2）接收遥控器的信号获取输入在串口监视器上数值不变<br>\n（3）无法导入GD32F4xx库<br>\n（4）下载的时候报错：Error: Flash Download failed - Target DLL has been cancelled<br>\n（5）keil免费激活</p>\n<h4 id=\"6月28日解决\">6月28日解决</h4>\n<p>（1）通过网上查找资料发现自己搭建的项目与芯片型号不符，通过修改项目型号成功解决问题<br>\n（2）通过单一变量法解决接线对应的数据变化<br>\n（3）使用离线导入即可<br>\n固件库下载地址：<a href=\"https://www.gd32mcu.com/cn/download/7?kw=GD32F4%E4%B8%8B%E8%BD%BDGD32F4xx\">https://www.gd32mcu.com/cn/download/7?kw=GD32F4下载GD32F4xx</a> AddOn压缩包，解压后安装GigaDevice.GD32F4xx_DFP.3.2.0.pack<br>\n（4）type-c接口未完全插入<br>\n（5）科学软件使用教程：<a href=\"https://blog.csdn.net/qq_54995462/article/details/126533029\">https://blog.csdn.net/qq_54995462/article/details/126533029</a></p>\n<h3 id=\"6月29日问题\">6月29日问题</h3>\n<p>(1)MPU6050移植到梁山派开发板上以后无法在串口调制助手输出数据<br>\n(2)MPU6050数据三个角度都有很大误差，更新慢</p>\n<h4 id=\"6月29日解决\">6月29日解决</h4>\n<p>(1)经过仔细排查发现是杜邦线有问题，换掉有问题杜邦线之后数据正常输出<br>\n(2)尝试用磁力计进行互补滤波算法，修正误差</p>\n<h2 id=\"开发收获\">开发收获</h2>\n<h3 id=\"遥控器控制以及接线\">遥控器控制以及接线</h3>\n<p><img src=\"https://s2.loli.net/2024/06/28/uqwfpH9NiaE3SIv.png\" alt=\"控制接线\"></p>\n<h3 id=\"遥控器信号控制舵机\">遥控器信号控制舵机</h3>\n<p>拍摄视频如下：<br>\n<video\nsrc=\"/img/yaokongqi.mp4\" controls=\"\"\nheight=400 \nwidth=600><br>\n</video></p>\n<h3 id=\"MPU6050移植\">MPU6050移植</h3>\n<h3 id=\"四轴控制算法\">四轴控制算法</h3>\n<h4 id=\"无人机四轴机体结构\">无人机四轴机体结构</h4>\n<p><img src=\"https://s2.loli.net/2024/07/05/T7BQ8zS6PNZ2yVK.png\" alt=\"无人机四轴机体结构\"></p>\n<h5 id=\"垂直升降运动\">垂直升降运动</h5>\n<p>升力&gt;重力，四轴电机转动速度不经相同，在我们测试过程中容易出现向一边偏离的情况，这个问题是固然存在的，难以通过硬件电机速度使四轴转动速度一致（首要解决的是稳定悬停）。</p>\n<h5 id=\"俯仰角度-前后运动\">俯仰角度/前后运动</h5>\n<p><img src=\"https://s2.loli.net/2024/07/05/FoHR9N6VyCeQPLh.png\" alt=\"前后运动\"><br>\nM1，M2转动速度下降，M3，M4转动速度上升-&gt;前进，并保持这个斜角，能往前进（升力在重力反方向的分力始终抵消重力）<br>\nM1，M2转动速度上升，M3，M4转动速度下降-&gt;前进，并保持这个斜角，能往前进（升力在重力反方向的分力始终抵消重力）</p>\n<h6 id=\"控制框图\">控制框图</h6>\n<p><img src=\"https://s2.loli.net/2024/07/05/kMGPWOoX5gYpBC7.png\" alt=\"\"></p>\n<h5 id=\"横滚角度-左右运动\">横滚角度/左右运动</h5>\n<p>同前后，原理相似</p>\n<h5 id=\"航偏角度\">航偏角度</h5>\n<p><img src=\"https://s2.loli.net/2024/07/05/CojJmb2v7HpAUI9.png\" alt=\"偏航角\"><br>\nM1，M3转动速度 &gt; M2，M4转动速度-&gt;逆时针<br>\nM1，M3转动速度 &lt; M2，M4转动速度-&gt;顺时针</p>\n<h4 id=\"单级PID控制\">单级PID控制</h4>\n<p><img src=\"https://s2.loli.net/2024/07/05/mbk8Mg6nBhWzYpv.png\" alt=\"\"><br>\n四轴飞行器接收遥控器发送来的姿态角,作为期望角度输入到控制系统中与姿态解算算法解算出的实际姿态角度进行求取偏差，分别经过各自的PID控制器进行PID 运算，运算结果转化成电机调速的PWM 方波来调节四个电机的转速，从而调节四轴飞行器的姿态和运动。调节后的姿态角又进过姿态反馈环反馈给了输入为下一次控制做准备。</p>\n<p>搜索资料发现：采用单级 PID 控制飞行姿态，四轴飞行器在无遥控打舵控制下自稳性能很不做错，但是遥控打舵的跟随性不够完美。这是由于四轴飞行器的螺旋桨转速与升力不成正比关系,而是呈现平方倍的关系。这也就直接导致了四轴飞行器输入与输出量不再是线性关系。所以只用单闭环 PID 控制姿态，在遥控大舵量遥控时会出现飞行器失衡或跟随时滞的现象</p>\n<h4 id=\"双闭环串级PID控制\">双闭环串级PID控制</h4>\n<p>解决这个问题可以采用双闭环策略。对角度进行 PID 控制又对角速度进行 PID 控制。 由于角度的微分就是角速度，所以角度环的误差就可以理解成角速度,把角度环的误差作为角速度环的期望值输入到角速度环,角速度环用陀螺仪来观测角速度的变化作为反馈值与期望值求取误差，然后控制角度速度尽快达到期望值，角速度环的输出值给四路电机控制飞机姿态，姿态解算算法获取实时姿态作为角度环的反馈值。这样就将两个PID控制器串联在一起,通常把角度环叫做外环,角速度环叫做内环。<br>\n<img src=\"https://s2.loli.net/2024/07/05/24ubyQEwzaGZBtO.png\" alt=\"\"><br>\n双闭环串级 PID 控制比单闭环 PID 控制，多了个角速度环的控制，角速度的数据是陀螺仪测出来的,测量值一般不容易受到干扰,并且角速度变化比较快,当受外界干扰时反应迅速增强了系统的鲁棒性。这样就解决了单级PID 控制时打大舵量遥控时会出现飞行器失衡或跟随滞后的问题</p>\n<h4 id=\"电机动力分配\">电机动力分配</h4>\n<h4 id=\"无线调参\">无线调参</h4>\n<p>利用串口进行PID参数输出，手动改代码来修PID显然较为效率低下，正在寻找上位机，希望能进行动态调参。</p>\n<h3 id=\"FreeRTOS\">FreeRTOS</h3>\n<h4 id=\"环境搭建\">环境搭建</h4>\n<p>GD32开发板FreeRTOS环境搭建<br>\n<a href=\"https://blog.csdn.net/m0_52999945/article/details/135891681\">https://blog.csdn.net/m0_52999945/article/details/135891681</a></p>\n<p>【野火FreeRTOS例程移植到梁山派开发板之按键控灯】 <a href=\"https://www.bilibili.com/video/BV1Lm4y1G7Xi/?share_source=copy_web&amp;vd_source=8e98251de20e8e78de3196f9a8473f8a\">https://www.bilibili.com/video/BV1Lm4y1G7Xi/?share_source=copy_web&amp;vd_source=8e98251de20e8e78de3196f9a8473f8a</a></p>\n<h4 id=\"学习\">学习</h4>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=320990385&bvid=BV1Jw411i7Fz&cid=1271201329&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<h3 id=\"GY-U12模块使用\">GY-U12模块使用</h3>\n<p>测试将GPS模块放置到室外空旷地带，板载 LED 保持一定的频率闪烁证明定位成功了。、</p>\n<h4 id=\"串口输出GPS信号\">串口输出GPS信号</h4>\n<p><img src=\"https://s2.loli.net/2024/07/15/aUiedG8RZ6MDIYv.png\" alt=\"GPS\"></p>\n<h4 id=\"对信号进行解析\">对信号进行解析</h4>\n<div class=\"note warning modern\"><p>GP ：只使用 GPS-QZSS-SBAS 卫星<br>\nBD ：只使用 BEIDOU 卫星<br>\nGL ：只使用 GLONASS 卫星 DC<br>\nGI ：只使用 INSAT 卫星<br>\nGA ：只使用 GALILEO 卫星<br>\nGN ：多卫星系统组合定位。</p>\n</div>\n<p><img src=\"https://s2.loli.net/2024/07/15/3ySzTX89d2wC6lW.png\" alt=\"协议说明\"></p>\n<h5 id=\"GGA协议\">GGA协议</h5>\n<p><img src=\"https://s2.loli.net/2024/07/15/QK8LjdD1kpEXyBb.png\" alt=\"GGA\"></p>\n<h5 id=\"GSA协议\">GSA协议</h5>\n<p><img src=\"https://s2.loli.net/2024/07/15/QEzmHpohKBXaGOU.png\" alt=\"GSA\"></p>\n<h5 id=\"GSV协议\">GSV协议</h5>\n<p><img src=\"https://s2.loli.net/2024/07/15/3GoJk71iO5pDbRH.png\" alt=\"GSV\"></p>\n<h5 id=\"RMC协议\">RMC协议</h5>\n<p><img src=\"https://s2.loli.net/2024/07/15/OIaqJtYBeGNufps.png\" alt=\"RMC\"></p>\n<h5 id=\"TXT\">TXT</h5>\n<p><img src=\"https://s2.loli.net/2024/07/15/w7KCgHlBtFvT1Jy.png\" alt=\"TXT\"></p>\n<h5 id=\"经纬度转换\">经纬度转换</h5>\n<p><img src=\"https://s2.loli.net/2024/07/15/59hSlV1GUvJMewj.png\" alt=\"转换结果\"><br>\n定位相比较有一点点偏差，尝试解析不同的协议进行选择</p>\n<p>正确的位置是在：<br>\n<img src=\"https://s2.loli.net/2024/07/15/vOn2IfCLSWRe1Zl.png\" alt=\"正确\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>小组成员： 杨佳瑶，李焓蕾，张恒</h1>\n<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/6/28</p>\n</div></div><div class='timeline-item-content'><h2 id=\"完成内容\">完成内容</h2>\n<ul>\n<li>观看视频学习开发板硬件参数以及外设资源</li>\n<li>完成开发软件Keil uVision5环境搭建</li>\n<li>实现库函数点灯程序烧录，并成功将led引脚从PD7改为PA5</li>\n<li>小组成员公共完成遥控器和信号接收器的对码，并实现遥控器控制舵机转动</li>\n<li>完成接收遥控器的信号获取输入捕获和输出比较，并统计结果</li>\n</ul>\n<h2 id=\"后续安排\">后续安排</h2>\n<ul>\n<li>观看后续视频</li>\n<li>利用MPU6050及磁力计进行姿态解算，修正yaw轴</li>\n</ul>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/6/29</p>\n</div></div><div class='timeline-item-content'><h2 id=\"完成内容\">完成内容</h2>\n<ul>\n<li>MPU6050姿态解算视频学习</li>\n<li>MPU6050移植到梁山派开发板并在串口调试助手输出欧拉角度</li>\n<li>MPU6050欧拉角度数据测试</li>\n<li>对于数据误差，经讨论得出，现在有两种方法解决，一个是跟视频用mpu6050来获得xyz轴角度（梁山派有从STM32移植过来的代码，验证可以直接使用），用磁力计来修正y轴偏差，其他角度尝试利用卡尔曼滤波，另一个是使用他们比赛小车上的IMU（已经从硬件角度解决漂移问题，xyz轴角度很稳定），要解决的是自己从stm32移植到梁山派。</li>\n</ul>\n<h2 id=\"后续安排\">后续安排</h2>\n<ul>\n<li>观看后续视频</li>\n<li>完成HMC5883L移植到梁山派开发板并在串口调试助手输出数据</li>\n</ul>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/02~2024/7/03 由于小学期结课任务，每天陆陆续续不能得出固定产出，今天统一写出成果</p>\n</div></div><div class='timeline-item-content'><ul>\n<li>查询大量资料。通过修改GPIO输出方式，修改软件I2C稳定了mpu6050的数值，但yaw角问题依然存在（老问题），利用磁力计互补能改善，但一般由于无人机四轴电机磁转影响，查询得知，会使无人机控制中更容易失调，所以选择不再加入磁力计。</li>\n<li>学习四轴飞行控制原理，6自由度</li>\n<li>复习PID算法</li>\n</ul>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/06</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n(1)观看单级PID和串级PID视频，了解PID基础原理<br>\n(2)学习飞控PID算法<br>\n(3)学习梁山派芯片开发手册<br>\n(4)完成无人机叶片调整及测试<br>\n(5)完成无人机试飞</p>\n<p>【遇到的问题】：<br>\n(1)将两个摇杆控制四个电机旋转改为一个遥感控制电机运行<br>\n(2)飞控与遥控器信号的对应，暂时不能得知</p>\n<p>【问题解决】：<br>\n(1)通过修改代码完成1个信号PWM输入四个引脚输出</p>\n<p>【后续工作安排】：<br>\n（1）观看后续视频<br>\n（2）通过代码编写完成另外一个摇杆控制无人机飞行方向<br>\n（3）PID调参实现无人机悬停</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/08</p>\n</div></div><div class='timeline-item-content'><p>7月8日工作进展：<br>\n【完成】<br>\n（1）观看视频，分析代码<br>\n代码来源：<a href=\"https://github.com/hzacross/FlightControlSystem_Study\">https://github.com/hzacross/FlightControlSystem_Study</a><br>\n（2）了解PID的原理以及输入输出参数</p>\n<p>问题：暂无</p>\n<p>后续工作安排：<br>\n继续研究代码，学习参数调整</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/09</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n完成PID算法的开发，利用姿态仪反馈的角度数据实现无人机的精确悬停控制。</p>\n<p>【遇到的问题】：<br>\n(1)mpu6050的横滚角和俯仰角用代码修正以后稳定状态和测量状态输出数据有误<br>\n(2)在使用PID算法根据姿态仪反馈的角度数据进行系统调整时，遇到了数据不稳定的问题</p>\n<p>【问题解决】：<br>\n(1)通过在程序中debug，发现在 main函数中for(num =0; num&lt;100; num++) 循环时，acc_x_cal 和 acc_y_cal 被累加，数组 accData 出现了越界，通过改变数组的索引方式解决了输出错误的问题。<br>\n(2)通过与其他同学的PID算法进行比较发现是因为姿态仪受到噪声干扰，导致反馈数据不准确，影响了PID控制器的性能，通过对姿态仪的反馈数据进行滤波处理解决了此问题。</p>\n<p>【后续工作安排】：<br>\n（1）将芯片安装至无人机上进行调参<br>\n（2）针对视频学习的控制，进一步学习FreeRTOS实时操作系统进行实现</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/10</p>\n</div></div><div class='timeline-item-content'><p>学习FreeRTOS实时操作系统</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/11</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n完成对FreeRTOS的裁剪<br>\n学习FreeRTOS抢占调度和时间片轮转的底层逻辑和过程，队列的使用，同步与互斥关系定义<br>\n继续完成对无人机线路及接线的优化，利用面包板和核心板排线，稳定搭载的传感器</p>\n<p>【问题解决】：<br>\n暂无</p>\n<p>【后续工作安排】：<br>\n（1）继续学习FreeRTOS<br>\n（2）规划无人机飞行状态，确定任务调度过程及数据传输</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/12</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n通过调整PID参数逐步稳定机身<br>\n无人机解锁条件修改为当VRA的值小于1100并且start = 0时，解锁无人机（成功，并且非常好控制，较为安全）</p>\n<p>【问题】<br>\n平衡参数还未达到最优，侧翻问题还会时不时出现</p>\n<p>【后续工作安排】：<br>\n（1）继续学习FreeRTOS<br>\n（2）继续对无人机PID参数进行调整，实现各个方向的运动，并对运动方向进行任务级的划分</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/15</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n学习使用GT-U12模块获取GPS定位信息<br>\n模块输出语句的解析</p>\n<p>【问题】<br>\nGPS定位不准，稍有0.01的偏差，后边进行多次定位，尝试用不同型号的卫星进行定位信息的校准</p>\n<p>【后续工作安排】：<br>\n（1）数据串口输入到梁山派开发板<br>\n（2）完成对数据的解析和标定，找出最准确的定位位置信息</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/16</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n（1）找到STM32F103的相关解析GPS的代码<br>\n（2）对代码进行移植并测试</p>\n<p>【后续工作安排】：<br>\n（1）继续学习FreeRTOS<br>\n（2）继续对无人机PID参数进行调节，搭配GPS实现自动返航任务</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/18</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n（1）完成FreeRTOS的学习<br>\n（2）解决了GPS通信串口输入的问题</p>\n<p>【后续工作安排】：<br>\n（1）串口输入数据还需要解析，而且由于GPS数据较慢，串口速度读取很快，出现很多空数据的情况，正在尝试匹配数据速率，实现对GPS数据的正确解析<br>\n（2）对飞行任务进行操作系统级别的设计和编码</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/19 ~ 2024/7/22</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n（1）GPS数据解析完毕<br>\n（2）设计无人机飞行任务发现很困难，在寻找思路的时候发现有开源的代码，也是用FreeRTOS实现的：<a href=\"https://oshwhub.com/dahjdksakdlshjkads/g-zhi-bao-fei-xing-qi\">2021年 G题 植保飞行器</a>，观看了其演示视频，发现效果很好，顺其代码往下看，其实他这个也是其他开源飞控改过来的：<a href=\"http://www.openedv.com/docs/fouraxis-fly/minifly.html\">MiniFly四轴飞行器 </a>，效果也非常好，能借鉴，其中也包含了硬件资料、地面站使用教程，可以涵盖我们目前的任务。<br>\n（3）完成PID调参架的搭建</p>\n<p>【后续工作安排】：<br>\n学习MiniFly的源代码，尝试在我们自己的设备上实现</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/24</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n（1）分析MiniFly中FreeRTOS的调度及任务关系<br>\n（2）搜索了有关图传的信息，结合评论等，如果要实现一个功能完善，效果稳定的图传，直接淘宝购买是最合适的</p>\n<p>【后续工作安排】：<br>\n（1）查看MiniFly中用户数据使用方法，能自己写协议与地面站进行通信，实时调参</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/7/25</p>\n</div></div><div class='timeline-item-content'><p>【完成】：<br>\n（1）学习了匿名飞控地面站的使用，学习了定义的通信协议</p>\n<p>【后续工作安排】：<br>\n（1）写协议与地面站进行通信，实时调参<br>\n（2）找到minifly中通信协议的定义，能够挪用到我们板子上</p>\n</div></div></div>\n<h1>参考文章</h1>\n<p>遥控器的信号获取输入捕获与输出比较</p>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=1554114226&bvid=BV181421677A&cid=1533315007&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<p>MPU6050姿态解算介绍</p>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=1254437099&bvid=BV1PJ4m1N7BK&cid=1541344870&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<h1>详细开发过程</h1>\n<h2 id=\"问题与解决\">问题与解决</h2>\n<h3 id=\"6月28日问题\">6月28日问题</h3>\n<p>（1）在搭建程序时遇到ULINK2/ME-Cortex-M Error，NO ULINK2/ME Device found的问题<br>\n（2）接收遥控器的信号获取输入在串口监视器上数值不变<br>\n（3）无法导入GD32F4xx库<br>\n（4）下载的时候报错：Error: Flash Download failed - Target DLL has been cancelled<br>\n（5）keil免费激活</p>\n<h4 id=\"6月28日解决\">6月28日解决</h4>\n<p>（1）通过网上查找资料发现自己搭建的项目与芯片型号不符，通过修改项目型号成功解决问题<br>\n（2）通过单一变量法解决接线对应的数据变化<br>\n（3）使用离线导入即可<br>\n固件库下载地址：<a href=\"https://www.gd32mcu.com/cn/download/7?kw=GD32F4%E4%B8%8B%E8%BD%BDGD32F4xx\">https://www.gd32mcu.com/cn/download/7?kw=GD32F4下载GD32F4xx</a> AddOn压缩包，解压后安装GigaDevice.GD32F4xx_DFP.3.2.0.pack<br>\n（4）type-c接口未完全插入<br>\n（5）科学软件使用教程：<a href=\"https://blog.csdn.net/qq_54995462/article/details/126533029\">https://blog.csdn.net/qq_54995462/article/details/126533029</a></p>\n<h3 id=\"6月29日问题\">6月29日问题</h3>\n<p>(1)MPU6050移植到梁山派开发板上以后无法在串口调制助手输出数据<br>\n(2)MPU6050数据三个角度都有很大误差，更新慢</p>\n<h4 id=\"6月29日解决\">6月29日解决</h4>\n<p>(1)经过仔细排查发现是杜邦线有问题，换掉有问题杜邦线之后数据正常输出<br>\n(2)尝试用磁力计进行互补滤波算法，修正误差</p>\n<h2 id=\"开发收获\">开发收获</h2>\n<h3 id=\"遥控器控制以及接线\">遥控器控制以及接线</h3>\n<p><img src=\"https://s2.loli.net/2024/06/28/uqwfpH9NiaE3SIv.png\" alt=\"控制接线\"></p>\n<h3 id=\"遥控器信号控制舵机\">遥控器信号控制舵机</h3>\n<p>拍摄视频如下：<br>\n<video\nsrc=\"/img/yaokongqi.mp4\" controls=\"\"\nheight=400 \nwidth=600><br>\n</video></p>\n<h3 id=\"MPU6050移植\">MPU6050移植</h3>\n<h3 id=\"四轴控制算法\">四轴控制算法</h3>\n<h4 id=\"无人机四轴机体结构\">无人机四轴机体结构</h4>\n<p><img src=\"https://s2.loli.net/2024/07/05/T7BQ8zS6PNZ2yVK.png\" alt=\"无人机四轴机体结构\"></p>\n<h5 id=\"垂直升降运动\">垂直升降运动</h5>\n<p>升力&gt;重力，四轴电机转动速度不经相同，在我们测试过程中容易出现向一边偏离的情况，这个问题是固然存在的，难以通过硬件电机速度使四轴转动速度一致（首要解决的是稳定悬停）。</p>\n<h5 id=\"俯仰角度-前后运动\">俯仰角度/前后运动</h5>\n<p><img src=\"https://s2.loli.net/2024/07/05/FoHR9N6VyCeQPLh.png\" alt=\"前后运动\"><br>\nM1，M2转动速度下降，M3，M4转动速度上升-&gt;前进，并保持这个斜角，能往前进（升力在重力反方向的分力始终抵消重力）<br>\nM1，M2转动速度上升，M3，M4转动速度下降-&gt;前进，并保持这个斜角，能往前进（升力在重力反方向的分力始终抵消重力）</p>\n<h6 id=\"控制框图\">控制框图</h6>\n<p><img src=\"https://s2.loli.net/2024/07/05/kMGPWOoX5gYpBC7.png\" alt=\"\"></p>\n<h5 id=\"横滚角度-左右运动\">横滚角度/左右运动</h5>\n<p>同前后，原理相似</p>\n<h5 id=\"航偏角度\">航偏角度</h5>\n<p><img src=\"https://s2.loli.net/2024/07/05/CojJmb2v7HpAUI9.png\" alt=\"偏航角\"><br>\nM1，M3转动速度 &gt; M2，M4转动速度-&gt;逆时针<br>\nM1，M3转动速度 &lt; M2，M4转动速度-&gt;顺时针</p>\n<h4 id=\"单级PID控制\">单级PID控制</h4>\n<p><img src=\"https://s2.loli.net/2024/07/05/mbk8Mg6nBhWzYpv.png\" alt=\"\"><br>\n四轴飞行器接收遥控器发送来的姿态角,作为期望角度输入到控制系统中与姿态解算算法解算出的实际姿态角度进行求取偏差，分别经过各自的PID控制器进行PID 运算，运算结果转化成电机调速的PWM 方波来调节四个电机的转速，从而调节四轴飞行器的姿态和运动。调节后的姿态角又进过姿态反馈环反馈给了输入为下一次控制做准备。</p>\n<p>搜索资料发现：采用单级 PID 控制飞行姿态，四轴飞行器在无遥控打舵控制下自稳性能很不做错，但是遥控打舵的跟随性不够完美。这是由于四轴飞行器的螺旋桨转速与升力不成正比关系,而是呈现平方倍的关系。这也就直接导致了四轴飞行器输入与输出量不再是线性关系。所以只用单闭环 PID 控制姿态，在遥控大舵量遥控时会出现飞行器失衡或跟随时滞的现象</p>\n<h4 id=\"双闭环串级PID控制\">双闭环串级PID控制</h4>\n<p>解决这个问题可以采用双闭环策略。对角度进行 PID 控制又对角速度进行 PID 控制。 由于角度的微分就是角速度，所以角度环的误差就可以理解成角速度,把角度环的误差作为角速度环的期望值输入到角速度环,角速度环用陀螺仪来观测角速度的变化作为反馈值与期望值求取误差，然后控制角度速度尽快达到期望值，角速度环的输出值给四路电机控制飞机姿态，姿态解算算法获取实时姿态作为角度环的反馈值。这样就将两个PID控制器串联在一起,通常把角度环叫做外环,角速度环叫做内环。<br>\n<img src=\"https://s2.loli.net/2024/07/05/24ubyQEwzaGZBtO.png\" alt=\"\"><br>\n双闭环串级 PID 控制比单闭环 PID 控制，多了个角速度环的控制，角速度的数据是陀螺仪测出来的,测量值一般不容易受到干扰,并且角速度变化比较快,当受外界干扰时反应迅速增强了系统的鲁棒性。这样就解决了单级PID 控制时打大舵量遥控时会出现飞行器失衡或跟随滞后的问题</p>\n<h4 id=\"电机动力分配\">电机动力分配</h4>\n<h4 id=\"无线调参\">无线调参</h4>\n<p>利用串口进行PID参数输出，手动改代码来修PID显然较为效率低下，正在寻找上位机，希望能进行动态调参。</p>\n<h3 id=\"FreeRTOS\">FreeRTOS</h3>\n<h4 id=\"环境搭建\">环境搭建</h4>\n<p>GD32开发板FreeRTOS环境搭建<br>\n<a href=\"https://blog.csdn.net/m0_52999945/article/details/135891681\">https://blog.csdn.net/m0_52999945/article/details/135891681</a></p>\n<p>【野火FreeRTOS例程移植到梁山派开发板之按键控灯】 <a href=\"https://www.bilibili.com/video/BV1Lm4y1G7Xi/?share_source=copy_web&amp;vd_source=8e98251de20e8e78de3196f9a8473f8a\">https://www.bilibili.com/video/BV1Lm4y1G7Xi/?share_source=copy_web&amp;vd_source=8e98251de20e8e78de3196f9a8473f8a</a></p>\n<h4 id=\"学习\">学习</h4>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=320990385&bvid=BV1Jw411i7Fz&cid=1271201329&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<h3 id=\"GY-U12模块使用\">GY-U12模块使用</h3>\n<p>测试将GPS模块放置到室外空旷地带，板载 LED 保持一定的频率闪烁证明定位成功了。、</p>\n<h4 id=\"串口输出GPS信号\">串口输出GPS信号</h4>\n<p><img src=\"https://s2.loli.net/2024/07/15/aUiedG8RZ6MDIYv.png\" alt=\"GPS\"></p>\n<h4 id=\"对信号进行解析\">对信号进行解析</h4>\n<div class=\"note warning modern\"><p>GP ：只使用 GPS-QZSS-SBAS 卫星<br>\nBD ：只使用 BEIDOU 卫星<br>\nGL ：只使用 GLONASS 卫星 DC<br>\nGI ：只使用 INSAT 卫星<br>\nGA ：只使用 GALILEO 卫星<br>\nGN ：多卫星系统组合定位。</p>\n</div>\n<p><img src=\"https://s2.loli.net/2024/07/15/3ySzTX89d2wC6lW.png\" alt=\"协议说明\"></p>\n<h5 id=\"GGA协议\">GGA协议</h5>\n<p><img src=\"https://s2.loli.net/2024/07/15/QK8LjdD1kpEXyBb.png\" alt=\"GGA\"></p>\n<h5 id=\"GSA协议\">GSA协议</h5>\n<p><img src=\"https://s2.loli.net/2024/07/15/QEzmHpohKBXaGOU.png\" alt=\"GSA\"></p>\n<h5 id=\"GSV协议\">GSV协议</h5>\n<p><img src=\"https://s2.loli.net/2024/07/15/3GoJk71iO5pDbRH.png\" alt=\"GSV\"></p>\n<h5 id=\"RMC协议\">RMC协议</h5>\n<p><img src=\"https://s2.loli.net/2024/07/15/OIaqJtYBeGNufps.png\" alt=\"RMC\"></p>\n<h5 id=\"TXT\">TXT</h5>\n<p><img src=\"https://s2.loli.net/2024/07/15/w7KCgHlBtFvT1Jy.png\" alt=\"TXT\"></p>\n<h5 id=\"经纬度转换\">经纬度转换</h5>\n<p><img src=\"https://s2.loli.net/2024/07/15/59hSlV1GUvJMewj.png\" alt=\"转换结果\"><br>\n定位相比较有一点点偏差，尝试解析不同的协议进行选择</p>\n<p>正确的位置是在：<br>\n<img src=\"https://s2.loli.net/2024/07/15/vOn2IfCLSWRe1Zl.png\" alt=\"正确\"></p>\n"},{"title":"linxu-kernel-interrupt","abbrlink":18712,"date":"2025-04-15T11:07:59.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqt6nt-0.webp","swiper_index":null,"_content":"\n\n\n\n# 参考文章\n{% link 知乎, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n{% link CSDN, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n\n{% link github, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp%} \n\n# 中断\n\n{% note info modern %}\nCPU在正常运行期间，由外部或者内部引起的事件，让CPU停下当前正在运行的程序，转而去执行触发他的中断所对应的程序，处理完中断对应的程序以后在回来继续执行。这个就是中断。举例:同学A现在正在厨房做饭，突然电话响了，然后A关火去接电话。接完电话在回去开火继续做饭。这个过程就是一个中断的一个过程。\n{% endnote %}\n\n## 中断类型\n- 同步中断由CPU本身产生，又称为内部中断。这里同步是指中断请求信号与代码指令之间的同步执行，在一条指令执行完毕后，CPU才能进行中断，不能在执行期间。所以也称为异常（exception）。\n\n- 异步中断是由外部硬件设备产生，又称为外部中断，与同步中断相反，异步中断可在任何时间产生，包括指令执行期间，所以也被称为中断（interrupt）。\n\n- 异常又可分为可屏蔽中断（Maskable interrupt）和非屏蔽中断（Nomaskable interrupt）。而中断可分为故障（fault）、陷阱（trap）、终止（abort）三类。\n \n# 中断子系统框架\n- CPU\n- 中断控制器\n- 外设\n- 中断向量表\n- 中断号\n- Linux内核中断子系统\n- 中断编程接口\n- 具体的外设驱动\n\n## 没那么简单\n学操作系统或者单片机时候都知道中断是重点，而且也能自己分析和配置中断程序并执行，但是在Linux内核中中断的实现复杂的多\n中断大致可以分为以下几个步骤：\n\n- 当前正在执行的程序\n- 保存被打断的上下文\n- 中断向量表\n- 找到发生中断的设备\n- 中断服务程序\n- 退出中断,调度程序运行\n    - 恢复被打断的上下文\n    - 回到被打断的程序,继续执行...\n    - 恢复高优先级的进程的上下文\n    - 切换到高优先级的程序执行...\n\n在C语言的函数调用中，也常常需要保存上下文信息到栈帧当中，可能是某些寄存器或者状态寄存器的信息，函数调用完成之后需要返回\n\n![函数调用](https://image.aruoshui.fun/i/2025/04/15/w9sief-0.webp)\n但在中断中，每次中断位置不固定，编译过程中不会像函数调用一样保存上下文，中断过程中需要自己存\n\n# 中断控制器\n- 负责处理各种中断\n- 优先级、屏蔽、使能\n\n## • SGI：16 Software Generated Interrupts\n1. 中断号ID0~ID15，用于多核之间通讯\n• PPI：16 external Private Peripheral Interrupts\n2. 每个core私有的中断，如本地时钟，ID16~ID31\n• SPI：Shared Peripheral Interrupt\n3. 所有core共享的中断，可以在多个core上运行\n– 支持范围可配置：32~1019，步进32，从ID32开始\n\n![中断](https://image.aruoshui.fun/i/2025/07/09/yt9q00-0.webp)\n\n# 中断号\n1. HW interrupt ID\n2. IRQ number\n3. IRQ_domain\n\nHW Interrupt ID是硬件层面的中断标识符，IRQ Number是操作系统用来管理和响应中断的内部编号，而IRQ Domain则是一种机制，用于处理不同来源的中断如何被映射到IRQ编号的问题。这三者共同作用，确保操作系统能够有效地管理和响应来自各种硬件设备的中断请求。\n\n# GIC 处理中断流程\n\n![中断流程](https://image.aruoshui.fun/i/2025/07/10/xrfb9j-0.webp)\n\n1. GIC检测到使能的中断发生，将中断状态设为pending\n2. GIC的仲裁器将最高优先级的pending中断发送到指\n定的CPU interface\n3. CPU interface根据配置，将中断信号发送到CPU\n4. CPU应答该中断，读取寄存器获取interrupt ID，GIC\n更新中断状态为active\n»Pending --> active\n»Pending --> active and pending 中断重新产生\n»Active  active and pending 若中断状态为active\n5. CPU处理完中断后，发送EOI（End Of Interrupt）信号给GIC，通知中断控制器该中断已处理完成，GIC将中断状态从active清除，允许后续中断继续响应。\n\n**仲裁器的作用**\n当有多个设备或进程同时请求同一个资源（比如总线、内存、I/O端口）时，仲裁器决定谁可以优先使用该资源。仲裁器可以实现公平访问（如轮询法），也可以实现优先级访问（如高优先级设备先获得资源）。\n","source":"_posts/linxu-kernel-interrupt.md","raw":"---\ntitle: linxu-kernel-interrupt\nabbrlink: 18712\ndate: 2025-04-15 19:07:59\ntags:\ndescription:\ncategories:\ncover:\nswiper_index:\n---\n\n\n\n\n# 参考文章\n{% link 知乎, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp%} \n\n{% link CSDN, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp%} \n\n{% link github, https://zhuanlan.zhihu.com/p/666861211,  https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp%} \n\n# 中断\n\n{% note info modern %}\nCPU在正常运行期间，由外部或者内部引起的事件，让CPU停下当前正在运行的程序，转而去执行触发他的中断所对应的程序，处理完中断对应的程序以后在回来继续执行。这个就是中断。举例:同学A现在正在厨房做饭，突然电话响了，然后A关火去接电话。接完电话在回去开火继续做饭。这个过程就是一个中断的一个过程。\n{% endnote %}\n\n## 中断类型\n- 同步中断由CPU本身产生，又称为内部中断。这里同步是指中断请求信号与代码指令之间的同步执行，在一条指令执行完毕后，CPU才能进行中断，不能在执行期间。所以也称为异常（exception）。\n\n- 异步中断是由外部硬件设备产生，又称为外部中断，与同步中断相反，异步中断可在任何时间产生，包括指令执行期间，所以也被称为中断（interrupt）。\n\n- 异常又可分为可屏蔽中断（Maskable interrupt）和非屏蔽中断（Nomaskable interrupt）。而中断可分为故障（fault）、陷阱（trap）、终止（abort）三类。\n \n# 中断子系统框架\n- CPU\n- 中断控制器\n- 外设\n- 中断向量表\n- 中断号\n- Linux内核中断子系统\n- 中断编程接口\n- 具体的外设驱动\n\n## 没那么简单\n学操作系统或者单片机时候都知道中断是重点，而且也能自己分析和配置中断程序并执行，但是在Linux内核中中断的实现复杂的多\n中断大致可以分为以下几个步骤：\n\n- 当前正在执行的程序\n- 保存被打断的上下文\n- 中断向量表\n- 找到发生中断的设备\n- 中断服务程序\n- 退出中断,调度程序运行\n    - 恢复被打断的上下文\n    - 回到被打断的程序,继续执行...\n    - 恢复高优先级的进程的上下文\n    - 切换到高优先级的程序执行...\n\n在C语言的函数调用中，也常常需要保存上下文信息到栈帧当中，可能是某些寄存器或者状态寄存器的信息，函数调用完成之后需要返回\n\n![函数调用](https://image.aruoshui.fun/i/2025/04/15/w9sief-0.webp)\n但在中断中，每次中断位置不固定，编译过程中不会像函数调用一样保存上下文，中断过程中需要自己存\n\n# 中断控制器\n- 负责处理各种中断\n- 优先级、屏蔽、使能\n\n## • SGI：16 Software Generated Interrupts\n1. 中断号ID0~ID15，用于多核之间通讯\n• PPI：16 external Private Peripheral Interrupts\n2. 每个core私有的中断，如本地时钟，ID16~ID31\n• SPI：Shared Peripheral Interrupt\n3. 所有core共享的中断，可以在多个core上运行\n– 支持范围可配置：32~1019，步进32，从ID32开始\n\n![中断](https://image.aruoshui.fun/i/2025/07/09/yt9q00-0.webp)\n\n# 中断号\n1. HW interrupt ID\n2. IRQ number\n3. IRQ_domain\n\nHW Interrupt ID是硬件层面的中断标识符，IRQ Number是操作系统用来管理和响应中断的内部编号，而IRQ Domain则是一种机制，用于处理不同来源的中断如何被映射到IRQ编号的问题。这三者共同作用，确保操作系统能够有效地管理和响应来自各种硬件设备的中断请求。\n\n# GIC 处理中断流程\n\n![中断流程](https://image.aruoshui.fun/i/2025/07/10/xrfb9j-0.webp)\n\n1. GIC检测到使能的中断发生，将中断状态设为pending\n2. GIC的仲裁器将最高优先级的pending中断发送到指\n定的CPU interface\n3. CPU interface根据配置，将中断信号发送到CPU\n4. CPU应答该中断，读取寄存器获取interrupt ID，GIC\n更新中断状态为active\n»Pending --> active\n»Pending --> active and pending 中断重新产生\n»Active  active and pending 若中断状态为active\n5. CPU处理完中断后，发送EOI（End Of Interrupt）信号给GIC，通知中断控制器该中断已处理完成，GIC将中断状态从active清除，允许后续中断继续响应。\n\n**仲裁器的作用**\n当有多个设备或进程同时请求同一个资源（比如总线、内存、I/O端口）时，仲裁器决定谁可以优先使用该资源。仲裁器可以实现公平访问（如轮询法），也可以实现优先级访问（如高优先级设备先获得资源）。\n","slug":"linxu-kernel-interrupt","published":1,"updated":"2025-07-10T12:50:15.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io40027mktt60kj2u2c","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"知乎\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">知乎</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"CSDN\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">CSDN</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"github\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp\"/></div><div class=\"right\"><p class=\"text\">github</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<h1>中断</h1>\n<div class=\"note info modern\"><p>CPU在正常运行期间，由外部或者内部引起的事件，让CPU停下当前正在运行的程序，转而去执行触发他的中断所对应的程序，处理完中断对应的程序以后在回来继续执行。这个就是中断。举例:同学A现在正在厨房做饭，突然电话响了，然后A关火去接电话。接完电话在回去开火继续做饭。这个过程就是一个中断的一个过程。</p>\n</div>\n<h2 id=\"中断类型\">中断类型</h2>\n<ul>\n<li>\n<p>同步中断由CPU本身产生，又称为内部中断。这里同步是指中断请求信号与代码指令之间的同步执行，在一条指令执行完毕后，CPU才能进行中断，不能在执行期间。所以也称为异常（exception）。</p>\n</li>\n<li>\n<p>异步中断是由外部硬件设备产生，又称为外部中断，与同步中断相反，异步中断可在任何时间产生，包括指令执行期间，所以也被称为中断（interrupt）。</p>\n</li>\n<li>\n<p>异常又可分为可屏蔽中断（Maskable interrupt）和非屏蔽中断（Nomaskable interrupt）。而中断可分为故障（fault）、陷阱（trap）、终止（abort）三类。</p>\n</li>\n</ul>\n<h1>中断子系统框架</h1>\n<ul>\n<li>CPU</li>\n<li>中断控制器</li>\n<li>外设</li>\n<li>中断向量表</li>\n<li>中断号</li>\n<li>Linux内核中断子系统</li>\n<li>中断编程接口</li>\n<li>具体的外设驱动</li>\n</ul>\n<h2 id=\"没那么简单\">没那么简单</h2>\n<p>学操作系统或者单片机时候都知道中断是重点，而且也能自己分析和配置中断程序并执行，但是在Linux内核中中断的实现复杂的多<br>\n中断大致可以分为以下几个步骤：</p>\n<ul>\n<li>当前正在执行的程序</li>\n<li>保存被打断的上下文</li>\n<li>中断向量表</li>\n<li>找到发生中断的设备</li>\n<li>中断服务程序</li>\n<li>退出中断,调度程序运行\n<ul>\n<li>恢复被打断的上下文</li>\n<li>回到被打断的程序,继续执行…</li>\n<li>恢复高优先级的进程的上下文</li>\n<li>切换到高优先级的程序执行…</li>\n</ul>\n</li>\n</ul>\n<p>在C语言的函数调用中，也常常需要保存上下文信息到栈帧当中，可能是某些寄存器或者状态寄存器的信息，函数调用完成之后需要返回</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/04/15/w9sief-0.webp\" alt=\"函数调用\"><br>\n但在中断中，每次中断位置不固定，编译过程中不会像函数调用一样保存上下文，中断过程中需要自己存</p>\n<h1>中断控制器</h1>\n<ul>\n<li>负责处理各种中断</li>\n<li>优先级、屏蔽、使能</li>\n</ul>\n<h2 id=\"•-SGI：16-Software-Generated-Interrupts\">• SGI：16 Software Generated Interrupts</h2>\n<ol>\n<li>中断号ID0~ID15，用于多核之间通讯<br>\n• PPI：16 external Private Peripheral Interrupts</li>\n<li>每个core私有的中断，如本地时钟，ID16~ID31<br>\n• SPI：Shared Peripheral Interrupt</li>\n<li>所有core共享的中断，可以在多个core上运行<br>\n– 支持范围可配置：32~1019，步进32，从ID32开始</li>\n</ol>\n<p><img src=\"https://image.aruoshui.fun/i/2025/07/09/yt9q00-0.webp\" alt=\"中断\"></p>\n<h1>中断号</h1>\n<ol>\n<li>HW interrupt ID</li>\n<li>IRQ number</li>\n<li>IRQ_domain</li>\n</ol>\n<p>HW Interrupt ID是硬件层面的中断标识符，IRQ Number是操作系统用来管理和响应中断的内部编号，而IRQ Domain则是一种机制，用于处理不同来源的中断如何被映射到IRQ编号的问题。这三者共同作用，确保操作系统能够有效地管理和响应来自各种硬件设备的中断请求。</p>\n<h1>GIC 处理中断流程</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/07/10/xrfb9j-0.webp\" alt=\"中断流程\"></p>\n<ol>\n<li>GIC检测到使能的中断发生，将中断状态设为pending</li>\n<li>GIC的仲裁器将最高优先级的pending中断发送到指<br>\n定的CPU interface</li>\n<li>CPU interface根据配置，将中断信号发送到CPU</li>\n<li>CPU应答该中断，读取寄存器获取interrupt ID，GIC<br>\n更新中断状态为active<br>\n»Pending --&gt; active<br>\n»Pending --&gt; active and pending 中断重新产生<br>\n»Active  active and pending 若中断状态为active</li>\n<li>CPU处理完中断后，发送EOI（End Of Interrupt）信号给GIC，通知中断控制器该中断已处理完成，GIC将中断状态从active清除，允许后续中断继续响应。</li>\n</ol>\n<p><strong>仲裁器的作用</strong><br>\n当有多个设备或进程同时请求同一个资源（比如总线、内存、I/O端口）时，仲裁器决定谁可以优先使用该资源。仲裁器可以实现公平访问（如轮询法），也可以实现优先级访问（如高优先级设备先获得资源）。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"知乎\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/02/13/o4yax8-0.webp\"/></div><div class=\"right\"><p class=\"text\">知乎</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"CSDN\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">CSDN</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<div class=\"tag link\"><a class=\"link-card\" title=\"github\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/13/p2416y-0.webp\"/></div><div class=\"right\"><p class=\"text\">github</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<h1>中断</h1>\n<div class=\"note info modern\"><p>CPU在正常运行期间，由外部或者内部引起的事件，让CPU停下当前正在运行的程序，转而去执行触发他的中断所对应的程序，处理完中断对应的程序以后在回来继续执行。这个就是中断。举例:同学A现在正在厨房做饭，突然电话响了，然后A关火去接电话。接完电话在回去开火继续做饭。这个过程就是一个中断的一个过程。</p>\n</div>\n<h2 id=\"中断类型\">中断类型</h2>\n<ul>\n<li>\n<p>同步中断由CPU本身产生，又称为内部中断。这里同步是指中断请求信号与代码指令之间的同步执行，在一条指令执行完毕后，CPU才能进行中断，不能在执行期间。所以也称为异常（exception）。</p>\n</li>\n<li>\n<p>异步中断是由外部硬件设备产生，又称为外部中断，与同步中断相反，异步中断可在任何时间产生，包括指令执行期间，所以也被称为中断（interrupt）。</p>\n</li>\n<li>\n<p>异常又可分为可屏蔽中断（Maskable interrupt）和非屏蔽中断（Nomaskable interrupt）。而中断可分为故障（fault）、陷阱（trap）、终止（abort）三类。</p>\n</li>\n</ul>\n<h1>中断子系统框架</h1>\n<ul>\n<li>CPU</li>\n<li>中断控制器</li>\n<li>外设</li>\n<li>中断向量表</li>\n<li>中断号</li>\n<li>Linux内核中断子系统</li>\n<li>中断编程接口</li>\n<li>具体的外设驱动</li>\n</ul>\n<h2 id=\"没那么简单\">没那么简单</h2>\n<p>学操作系统或者单片机时候都知道中断是重点，而且也能自己分析和配置中断程序并执行，但是在Linux内核中中断的实现复杂的多<br>\n中断大致可以分为以下几个步骤：</p>\n<ul>\n<li>当前正在执行的程序</li>\n<li>保存被打断的上下文</li>\n<li>中断向量表</li>\n<li>找到发生中断的设备</li>\n<li>中断服务程序</li>\n<li>退出中断,调度程序运行\n<ul>\n<li>恢复被打断的上下文</li>\n<li>回到被打断的程序,继续执行…</li>\n<li>恢复高优先级的进程的上下文</li>\n<li>切换到高优先级的程序执行…</li>\n</ul>\n</li>\n</ul>\n<p>在C语言的函数调用中，也常常需要保存上下文信息到栈帧当中，可能是某些寄存器或者状态寄存器的信息，函数调用完成之后需要返回</p>\n<p><img src=\"https://image.aruoshui.fun/i/2025/04/15/w9sief-0.webp\" alt=\"函数调用\"><br>\n但在中断中，每次中断位置不固定，编译过程中不会像函数调用一样保存上下文，中断过程中需要自己存</p>\n<h1>中断控制器</h1>\n<ul>\n<li>负责处理各种中断</li>\n<li>优先级、屏蔽、使能</li>\n</ul>\n<h2 id=\"•-SGI：16-Software-Generated-Interrupts\">• SGI：16 Software Generated Interrupts</h2>\n<ol>\n<li>中断号ID0~ID15，用于多核之间通讯<br>\n• PPI：16 external Private Peripheral Interrupts</li>\n<li>每个core私有的中断，如本地时钟，ID16~ID31<br>\n• SPI：Shared Peripheral Interrupt</li>\n<li>所有core共享的中断，可以在多个core上运行<br>\n– 支持范围可配置：32~1019，步进32，从ID32开始</li>\n</ol>\n<p><img src=\"https://image.aruoshui.fun/i/2025/07/09/yt9q00-0.webp\" alt=\"中断\"></p>\n<h1>中断号</h1>\n<ol>\n<li>HW interrupt ID</li>\n<li>IRQ number</li>\n<li>IRQ_domain</li>\n</ol>\n<p>HW Interrupt ID是硬件层面的中断标识符，IRQ Number是操作系统用来管理和响应中断的内部编号，而IRQ Domain则是一种机制，用于处理不同来源的中断如何被映射到IRQ编号的问题。这三者共同作用，确保操作系统能够有效地管理和响应来自各种硬件设备的中断请求。</p>\n<h1>GIC 处理中断流程</h1>\n<p><img src=\"https://image.aruoshui.fun/i/2025/07/10/xrfb9j-0.webp\" alt=\"中断流程\"></p>\n<ol>\n<li>GIC检测到使能的中断发生，将中断状态设为pending</li>\n<li>GIC的仲裁器将最高优先级的pending中断发送到指<br>\n定的CPU interface</li>\n<li>CPU interface根据配置，将中断信号发送到CPU</li>\n<li>CPU应答该中断，读取寄存器获取interrupt ID，GIC<br>\n更新中断状态为active<br>\n»Pending --&gt; active<br>\n»Pending --&gt; active and pending 中断重新产生<br>\n»Active  active and pending 若中断状态为active</li>\n<li>CPU处理完中断后，发送EOI（End Of Interrupt）信号给GIC，通知中断控制器该中断已处理完成，GIC将中断状态从active清除，允许后续中断继续响应。</li>\n</ol>\n<p><strong>仲裁器的作用</strong><br>\n当有多个设备或进程同时请求同一个资源（比如总线、内存、I/O端口）时，仲裁器决定谁可以优先使用该资源。仲裁器可以实现公平访问（如轮询法），也可以实现优先级访问（如高优先级设备先获得资源）。</p>\n"},{"title":"与SSH的今生今世😅","description":"就是因为他我服务器被黑😅","cover":"https://image.aruoshui.fun/i/2024/12/31/vsj31n-0.webp","abbrlink":12699,"date":"2024-03-14T12:43:03.000Z","_content":"\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/3/14 -->\n学习SSH原理\n<!-- endtimeline -->\n\n<!-- timeline 2024/3/15 -->\nSSH操作及SSH的免密登录\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/3/20 -->\nTCP_wapper的原理使用\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n# 参考文章\n{% link 一口气把 SSH 原理搞懂了, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %}\n{% link SSH协议握手核心过程, https://www.bilibili.com/video/BV13P4y1o76u/?spm_id_from=333.337.search-card.all.click&vd_source=6718fb46dbdd603565f483b04b4cdb50, https://s2.loli.net/2024/03/18/L4b2k8WlnsZzF3O.jpg %}\n{% link 万字详解SSH, https://blog.csdn.net/weixin_53946852/article/details/125754556, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %}\n\n\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=900637560&bvid=BV13P4y1o76u&cid=835703824&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n# 我与SSH的今生今世\n\n{% timeline ,blue %}\n\n<!-- timeline 第一次用 -->\n第一次用是学习Linux的时候，VMTools有时候老挂，几行的命令又懒得手敲，于是用到了xshell来远程连接Linux机，当时仅仅以为是一个连接虚拟机的工具，没有仔细研究。\n<!-- endtimeline -->\n\n<!-- timeline 方便的工具 -->\n在大创的时候，嵌入式部署模型，买了一块英伟达的Jetson Orin nano嵌入式开发板，当时使用远程连接终端MobaXterm来连接开发板（虽然有图形界面，但是还是更喜欢Windows敲代码），软件里内置了很多远程连接工具（SSH、X11、RDP、VNC、FTP、MOSH 等），也学习了很多SSH的命令。 \n<!-- endtimeline -->\n\n<!-- timeline 留下隐患 -->\n- 到后边用Linux系统越来越多，每次我都会配置好SSH，用工具连接好，但是由于每次为了连接方便，好记住，忽略了一个重大问题，就是配置的密码很简单(主要是为了好记住)，用了这么久也没出过什么问题，所以也就不以为然了。\n- 直到我自己租了一台服务器，用来部署网站和搭服务，一贯操作培好了SSH，密码依旧是那简单的123456😅，依旧是用着看似没问题，但是这个安全隐患已经深深埋入了。\n<!-- endtimeline -->\n\n<!-- timeline 爆出问题 -->\n就在2月27日，突然腾讯云发出告警，我寻思我一个破服务器还能被入侵？经过排查，查到了系统的登录日志，毫不意外，除了我的IP，还藏着几个漂亮国IP，看了各种博客，终于找到了被入侵的原因，就是SSH，破译这样的脑瘫密码根本不用费功夫，分分钟就攻破了，跟离谱的就是我刚配置完SSH，过了三天他们就已经登上了我的服务器。\n<!-- endtimeline -->\n\n{% endtimeline %}\n我与SSH就是这么个故事，希望写下这篇博客也能让自己记住这个遭遇。总的来说，还是安全意识不够，理论永远代替不了实际，尽管常常被灌输安全知识，甚至有点不耐烦，但是说到底，可乘之机还是自己创造的。\n\n\n\n# SSH原理\n## 什么是SSH\nSSH是一种网络协议，基于非对称加密，用于计算机之间的加密登录。最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。\n## 加密技术\n\n### 对称加密算法（DES）\n采用{% emp 单钥密码系统 %}的加密方法，同一个密钥可以同时用作信息的加密和解密，需要对加密和解密使用相同密钥的加密算法，其实整个过程跟房东租房一样，只有两把钥匙开门，租客一把，房东一把，交换信息都需要这个密钥。\n![对称加密的过程](https://s2.loli.net/2024/03/18/ODbykA4d6ZSIBms.png)\n### 非对称加密（RSA）\n- 非对称密钥不是一个加密密钥，而是由两个元素（即私钥和公钥）组成，这两个元素组成了密钥对。 \n- 公钥，顾名思义，可以与任何人共享，因此个人和组织无需担心其安全分发问题。私钥必须妥善保管。 它仅由生成密钥对的人管理，不与任何人共享。 {% emp 需要加密消息的用户将使用公钥，但只有持有私钥的人才能对其进行解密 %}。\n![非对称加密](https://learn.microsoft.com/zh-cn/training/wwl-sci/describe-concepts-of-cryptography/media/key-pair-generation.png)\n当 Quincy 想要向 Monica 发送安全消息时，他使用她的公钥来加密纯文本并创建已加密文本。 然后，Quincy 用他喜欢的任意方式将已加密文本发送给 Monica。 当 Monica 收到已加密文本时，她使用自己的私钥对该文本进行解密，从而将其恢复为纯文本。\n![加密及解密过程](https://learn.microsoft.com/zh-cn/training/wwl-sci/describe-concepts-of-cryptography/media/asymmetric-encryption-process.png)\n### 对称加密与非对称加密区别\n为什么非对称加密更加安全，但是还是需要对称加密呢？接下来看看两者的区别：\n{% checkbox plus green checked, 对称加密，成本是比较低(机器资源消耗少)，速度也是很快的 %}\n{% checkbox minus yellow checked, 非对称加密，成本比对称加密高很多(机器资源消耗的多)，速度也慢 %}\n{% checkbox plus blue checked, 对称加密使用同一个密钥进行加密和解密，密钥本身也在网络上文明传输，也容易被黑客获取 %}\n{% checkbox minus red checked, 非对称加密，加密使用公钥，解密使用私钥。更加安全 %}\n### 信息安全性的安全措施\n但是对称加密和非对称加密都有一个同样的问题，怎么安全的将密钥发给对方，又不会被中间人知道具体密钥？这时候就需要`Diffie Hellman`密钥交换\n\n#### DH算法用于交换密钥\n交换密钥的目的是生成仅双方共享的密钥(共享的秘密)\n#### 交换密钥的基本过程\n- 双方确定公开的内容\n- 用各自的私钥分别对公共内容加密（加密本质就是数学运算）并发送给对方\n- 这时双方使用自己的密钥对收到的内容加密（要设计运算保证最后结果相同，也就是两步运算的顺序是可以调换的），双方就得到了共同的结果（作为公共密钥）\n- 这样就实现了安全的将密钥传递给对方的目的\n- 由于私钥没有被传递所以监听者无法得到最终的公共密钥\n![过程](https://s2.loli.net/2024/03/18/gkCxK19MdoXs6eJ.jpg)\n过程中的参数`P`,`G`,以及公式都是公开的，两边运算之后就可以用这个公共秘钥进行对自己的秘钥的加密。 \n其实在过程中，可以理解到，黑客由于不知道双方的随机数（各自保留的），所以面临的是这样的问题\n这里为什么黑客无法破解这个公共秘钥呢？\n![](https://s2.loli.net/2024/03/18/E3OhcJGlN6aoKzT.jpg)\n核心其实在于：过程是一个离散对数问题 {% emp 正向运算简单、逆向困难 %}\n黑客除了双方的随机数不知道，其他都可以获取到，其实需要破解的是`?`的值是多少\n小一些的数破解起来容易，但是数一旦大了，逆向破解起来就很困难。\n#### 中间人篡改问题\n\n如果黑客劫持了数据，发现自己解不开，又不想放过，就加上自己的秘钥分别发送给双方，成为隐形的中间人，还是会互相干扰。\n{% note info flat %}参考：[什么是哈希（Hsah）算法，哈希算法的作用以及Java中常见的哈希算法的使用案例。](https://blog.csdn.net/2301_77852117/article/details/131643540){% endnote %}\n为了解决这个问题，需要使用哈希算法比对哈希值可以确认信息是否篡改，但哈希值也可被篡改，这里就涉及到了SSH精髓的地方\n\n## SSH协议握手过程\n为了完全理解这个不分部分，还需要进行实验，使用抓包工具`wireshark`来进行测试。\n### TCP和版本信息握手\n![](https://s2.loli.net/2024/03/18/Mq2TFsyjLvYEeck.jpg)\n因为SSH1和SSH2两个协议互不兼容，加密方式也不相同，所以要对协议版本进行握手认证。\n\n### 密钥交换初始化 KEXINIT\n- 临时秘钥是用来后续生成共享秘钥使用的\n- 服务端生成安全秘钥，只要客户端也有这个安全秘钥，加密后信息就不容易被破解了，但是为了保证客户端也能有一模一样的安全秘钥，且服务端不能把自己的安全秘钥发送过去，这个时候就要使用到了前面提到的DH算法，SSH这里使用的是加强版的DH算法\n- 服务端把自己的临时公钥发送给客户端，就能生成相同的公共秘钥了\n![密钥交换初始化过程](https://s2.loli.net/2024/03/18/Fmbp3MUTk2ZAGva.jpg)\n\n### 防止中间人\n避免中间人篡改，得到与中间人一样的共享安全密钥，就要使用到哈希来证明信息没有篡改\n\n### ECDH秘钥交换初始化和ECDH秘钥交换回复\n\n![](https://s2.loli.net/2024/03/18/2wAfBva8GTdVOHI.jpg)\n服务端用自己的Host私钥加密了交换哈希值，中间人不知道服务端私钥，如果用其他私钥进行加密，所得到的哈希值就不同\n\n### 可恶的中间人\nSSH最危险的就是首次连接，如果服务端密钥指纹没有经过确认就信任，就有可能出现中间人攻击，反过来，如果首次连接即确认了服务端身份，那么后续只要没有警告，那么与服务端的链接就是安全的。 \n\n其实就跟你首次建立SSH连接，会提示你如下：\n![](https://s2.loli.net/2024/03/18/SYO3cTUpbXisRde.png)\n如果之后你输入登录密码，如果这个时候被监听了，那么结果还是寄了。 \n\n{% checkbox green checked, 关于这个情况，你登录的时间是随机的，一般中间人不会一直蹲守你，所以相比较还是很安全的，除非你一直连续登录，中间人找到了你的登录习惯😂 %}\n\n# SSH的优点\n1. 安全性： 数据传输是加密的，可以防止信息泄漏。\n2. 身份验证：防止未经授权的用户访问远程系统。\n3. 远程管理：可通过SSH协议登录远程服务器并执行命令，无需直接物理访问设备。\n4. 端口转发：SSH支持 端口转发功能，可以安全地传输其他协议和应用程序。\n5. 传输速度: 数据传输是压缩的，可以提高传输速度。\n\n\n# SSH基本用法\n{% tabs test1 %}\n<!-- tab 方式一-->\n```bash\nssh -p 22 user@host\n```\n参数：\n-p：指定端口号。\nuser：登录的用户名。\nhost：登录的主机。\n\n由于默认端口是22，用这个默认端口号的时候，可以省略，直接用以下形式：\n```bash\nssh user@host\n```\n\n此外，如果本地正在使用的用户名与远程登录的用户名一致，登录用户名也是可以省略的，即如下：\n```bash\nssh host\n```\n<!-- endtab -->\n\n<!-- tab 方式二：跳板连接 -->\n- 跳板连接用于在{% emp 不直接暴露目标主机 %}的情况下进行安全访问。\n- 通过跳板连接，用户可以首先连接到中间设备，然后再通过中间设备连接到目标主机。\n- 中间设备不一定是跳板机，只需要安装ssh服务就可以。\n![](https://s2.loli.net/2024/03/20/Y15IDPaF3N7GZmJ.jpg)\n\n```bash\nssh -t IP1  ssh -t IP2.... ssh -t 目标IP\n# IP1和IP2为跳板机的IP地址，先跳转到IP1，再跳转到IP2\n#两次跳转成功后，才能远程连接到目标设备\n\n#举例#\nssh -t 192.168.2.102 ssh -t 192.168.2.103 ssh -t 192.168.2.74 \n#跳转两次，从当前设备远程连接IP地址为192.168.2.74的主机或者服务器\n```\n\n<!-- endtab -->\n\n\n<!-- tab 方式三：远程控制-->\n```bash\nssh 目标设备的IP地址 命令\n#远程控制目标主机使用命令 并将命令执行结果返回本机\n\n#主机B的IP地址为xx \n[root@A ~] ssh xx ls #查看主机B家目录下有哪些目录或文件 \n```\n\n<!-- endtab -->\n{% endtabs %}\n\n\n# SSH免密登录\n\n## 原理\n在SSH免密登录过程中，客户端和服务器之间通过密钥对进行身份验证，而不是使用传统的密码验证方式。SSH会自动使用密钥对进行验证，而无需输入密码。\n\n## 步骤\n下面在两个ubuntu系统上有演示：\n客户端：192.168.131.138\n服务端：192.168.131.139\n### 在客户端生成密钥文件\n```bash\nssh-keygen   #生成密钥文件 \n\n-t #指定加密方式 \n#不加此选项，默认使用rsa方式\n\nEnter file in which to save the key(/root/.ssh/id_rsa): 直接回车\n#选择密钥文件存放的位置                 （默认路径）\n\nEnter passphrase (empty for no passphrase): \n#对密钥文件进行加密,设置密码后，访问文件需要输入密码\n\n#一般不输入密码 直接回车\nEnter same passphrase again: \n\n```\n\n\n最后会生成两个文件 \n```bash\ncd /root/.ssh\nls \n```\n\n.pub为密钥文件\n\n## 将公钥复制到SSH服务器上\n```bash\nssh-copy-id -i 公钥文件  [用户名]@IP地址 \n#将密钥文件传过去\n#下次就可以免密登录\n#以root用户登录时 可省略\n```\n\n## 通过SSH连接尝试登录到服务器\n成功免密登录服务器192.168.131.139\n![](https://s2.loli.net/2024/03/21/1RYNrC2lGnJSUqF.png)\n\n\n\n# TCP_wapper的原理和运用\n## TCP_wapper的原理\n\nTCP_Wrappers是一个工作在第四层(传输层)的的安全工具，对有状态连接 (TCP)的特定服务进行安全检测并实现访问控制，界定方式是凡是调用libwrap.so库文件的的程序就可以受TCP Wrappers的安全控制。它的主要功能就是控制谁可以访问，常见的程序有rpcbind、vsftpd、sshd，telnet。\n\nTCP_Wrappers有一个TCP的守护进程叫作tcpd。 \n以ssh为例，每当有ssh的连接请求时，tcpd即会截获请求，先读取系统管理员所设置的访问控制文件，符合要求，则会把这次连接原封不动的转给真正的ssh进程，由ssh完成后续工作；如果这次连接发起的ip不符合访问控制文件中的设置，则会中断连接请求，拒绝提供ssh服务。\n\n![图示](https://s2.loli.net/2024/03/21/i7FdP1rcKf8NWwu.png)\n\n## 设置黑白名单\n\n![](https://s2.loli.net/2024/03/21/QVElYwjmWHFnOi5.png)\n\n/etc/hosts.allow 设置允许访问 tcp 服务程序的策略（白名单）\n/etc/hosts.deny 设置禁止访问 tcp 服务程序的策略 （黑名单）\n\n拒绝单个 IP 使用 ssh 远程连接:\n配置文件:\n```bash\nhosts.allow:空着\nhosts.deny: sshd:192.168.88.20\n```\n\n拒绝某一网段使用 ssh 远程连接:\n```bash\nhosts.allow:空着\nhosts.deny: sshd:192.168.88\n\n```\n\n仅允许某一IP 使用 ssh 远程连接\n```bash\nhosts.allow: sshd:192.168.88.20\nhosts deny: sshd:ALL\n```\n","source":"_posts/与SSH的今生今世.md","raw":"---\ntitle: \"与SSH的今生今世😅\"\ndescription: \"就是因为他我服务器被黑😅\"\ntags:\n  - 端口\n  - 网络传输协议\n  - 加密\n  - 网络安全\ncategories:\n  - 必学开发技能\ncover: 'https://image.aruoshui.fun/i/2024/12/31/vsj31n-0.webp'\nabbrlink: 12699\ndate: 2024-03-14 20:43:03\n---\n\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/3/14 -->\n学习SSH原理\n<!-- endtimeline -->\n\n<!-- timeline 2024/3/15 -->\nSSH操作及SSH的免密登录\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/3/20 -->\nTCP_wapper的原理使用\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n# 参考文章\n{% link 一口气把 SSH 原理搞懂了, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %}\n{% link SSH协议握手核心过程, https://www.bilibili.com/video/BV13P4y1o76u/?spm_id_from=333.337.search-card.all.click&vd_source=6718fb46dbdd603565f483b04b4cdb50, https://s2.loli.net/2024/03/18/L4b2k8WlnsZzF3O.jpg %}\n{% link 万字详解SSH, https://blog.csdn.net/weixin_53946852/article/details/125754556, https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png %}\n\n\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=900637560&bvid=BV13P4y1o76u&cid=835703824&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n# 我与SSH的今生今世\n\n{% timeline ,blue %}\n\n<!-- timeline 第一次用 -->\n第一次用是学习Linux的时候，VMTools有时候老挂，几行的命令又懒得手敲，于是用到了xshell来远程连接Linux机，当时仅仅以为是一个连接虚拟机的工具，没有仔细研究。\n<!-- endtimeline -->\n\n<!-- timeline 方便的工具 -->\n在大创的时候，嵌入式部署模型，买了一块英伟达的Jetson Orin nano嵌入式开发板，当时使用远程连接终端MobaXterm来连接开发板（虽然有图形界面，但是还是更喜欢Windows敲代码），软件里内置了很多远程连接工具（SSH、X11、RDP、VNC、FTP、MOSH 等），也学习了很多SSH的命令。 \n<!-- endtimeline -->\n\n<!-- timeline 留下隐患 -->\n- 到后边用Linux系统越来越多，每次我都会配置好SSH，用工具连接好，但是由于每次为了连接方便，好记住，忽略了一个重大问题，就是配置的密码很简单(主要是为了好记住)，用了这么久也没出过什么问题，所以也就不以为然了。\n- 直到我自己租了一台服务器，用来部署网站和搭服务，一贯操作培好了SSH，密码依旧是那简单的123456😅，依旧是用着看似没问题，但是这个安全隐患已经深深埋入了。\n<!-- endtimeline -->\n\n<!-- timeline 爆出问题 -->\n就在2月27日，突然腾讯云发出告警，我寻思我一个破服务器还能被入侵？经过排查，查到了系统的登录日志，毫不意外，除了我的IP，还藏着几个漂亮国IP，看了各种博客，终于找到了被入侵的原因，就是SSH，破译这样的脑瘫密码根本不用费功夫，分分钟就攻破了，跟离谱的就是我刚配置完SSH，过了三天他们就已经登上了我的服务器。\n<!-- endtimeline -->\n\n{% endtimeline %}\n我与SSH就是这么个故事，希望写下这篇博客也能让自己记住这个遭遇。总的来说，还是安全意识不够，理论永远代替不了实际，尽管常常被灌输安全知识，甚至有点不耐烦，但是说到底，可乘之机还是自己创造的。\n\n\n\n# SSH原理\n## 什么是SSH\nSSH是一种网络协议，基于非对称加密，用于计算机之间的加密登录。最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。\n## 加密技术\n\n### 对称加密算法（DES）\n采用{% emp 单钥密码系统 %}的加密方法，同一个密钥可以同时用作信息的加密和解密，需要对加密和解密使用相同密钥的加密算法，其实整个过程跟房东租房一样，只有两把钥匙开门，租客一把，房东一把，交换信息都需要这个密钥。\n![对称加密的过程](https://s2.loli.net/2024/03/18/ODbykA4d6ZSIBms.png)\n### 非对称加密（RSA）\n- 非对称密钥不是一个加密密钥，而是由两个元素（即私钥和公钥）组成，这两个元素组成了密钥对。 \n- 公钥，顾名思义，可以与任何人共享，因此个人和组织无需担心其安全分发问题。私钥必须妥善保管。 它仅由生成密钥对的人管理，不与任何人共享。 {% emp 需要加密消息的用户将使用公钥，但只有持有私钥的人才能对其进行解密 %}。\n![非对称加密](https://learn.microsoft.com/zh-cn/training/wwl-sci/describe-concepts-of-cryptography/media/key-pair-generation.png)\n当 Quincy 想要向 Monica 发送安全消息时，他使用她的公钥来加密纯文本并创建已加密文本。 然后，Quincy 用他喜欢的任意方式将已加密文本发送给 Monica。 当 Monica 收到已加密文本时，她使用自己的私钥对该文本进行解密，从而将其恢复为纯文本。\n![加密及解密过程](https://learn.microsoft.com/zh-cn/training/wwl-sci/describe-concepts-of-cryptography/media/asymmetric-encryption-process.png)\n### 对称加密与非对称加密区别\n为什么非对称加密更加安全，但是还是需要对称加密呢？接下来看看两者的区别：\n{% checkbox plus green checked, 对称加密，成本是比较低(机器资源消耗少)，速度也是很快的 %}\n{% checkbox minus yellow checked, 非对称加密，成本比对称加密高很多(机器资源消耗的多)，速度也慢 %}\n{% checkbox plus blue checked, 对称加密使用同一个密钥进行加密和解密，密钥本身也在网络上文明传输，也容易被黑客获取 %}\n{% checkbox minus red checked, 非对称加密，加密使用公钥，解密使用私钥。更加安全 %}\n### 信息安全性的安全措施\n但是对称加密和非对称加密都有一个同样的问题，怎么安全的将密钥发给对方，又不会被中间人知道具体密钥？这时候就需要`Diffie Hellman`密钥交换\n\n#### DH算法用于交换密钥\n交换密钥的目的是生成仅双方共享的密钥(共享的秘密)\n#### 交换密钥的基本过程\n- 双方确定公开的内容\n- 用各自的私钥分别对公共内容加密（加密本质就是数学运算）并发送给对方\n- 这时双方使用自己的密钥对收到的内容加密（要设计运算保证最后结果相同，也就是两步运算的顺序是可以调换的），双方就得到了共同的结果（作为公共密钥）\n- 这样就实现了安全的将密钥传递给对方的目的\n- 由于私钥没有被传递所以监听者无法得到最终的公共密钥\n![过程](https://s2.loli.net/2024/03/18/gkCxK19MdoXs6eJ.jpg)\n过程中的参数`P`,`G`,以及公式都是公开的，两边运算之后就可以用这个公共秘钥进行对自己的秘钥的加密。 \n其实在过程中，可以理解到，黑客由于不知道双方的随机数（各自保留的），所以面临的是这样的问题\n这里为什么黑客无法破解这个公共秘钥呢？\n![](https://s2.loli.net/2024/03/18/E3OhcJGlN6aoKzT.jpg)\n核心其实在于：过程是一个离散对数问题 {% emp 正向运算简单、逆向困难 %}\n黑客除了双方的随机数不知道，其他都可以获取到，其实需要破解的是`?`的值是多少\n小一些的数破解起来容易，但是数一旦大了，逆向破解起来就很困难。\n#### 中间人篡改问题\n\n如果黑客劫持了数据，发现自己解不开，又不想放过，就加上自己的秘钥分别发送给双方，成为隐形的中间人，还是会互相干扰。\n{% note info flat %}参考：[什么是哈希（Hsah）算法，哈希算法的作用以及Java中常见的哈希算法的使用案例。](https://blog.csdn.net/2301_77852117/article/details/131643540){% endnote %}\n为了解决这个问题，需要使用哈希算法比对哈希值可以确认信息是否篡改，但哈希值也可被篡改，这里就涉及到了SSH精髓的地方\n\n## SSH协议握手过程\n为了完全理解这个不分部分，还需要进行实验，使用抓包工具`wireshark`来进行测试。\n### TCP和版本信息握手\n![](https://s2.loli.net/2024/03/18/Mq2TFsyjLvYEeck.jpg)\n因为SSH1和SSH2两个协议互不兼容，加密方式也不相同，所以要对协议版本进行握手认证。\n\n### 密钥交换初始化 KEXINIT\n- 临时秘钥是用来后续生成共享秘钥使用的\n- 服务端生成安全秘钥，只要客户端也有这个安全秘钥，加密后信息就不容易被破解了，但是为了保证客户端也能有一模一样的安全秘钥，且服务端不能把自己的安全秘钥发送过去，这个时候就要使用到了前面提到的DH算法，SSH这里使用的是加强版的DH算法\n- 服务端把自己的临时公钥发送给客户端，就能生成相同的公共秘钥了\n![密钥交换初始化过程](https://s2.loli.net/2024/03/18/Fmbp3MUTk2ZAGva.jpg)\n\n### 防止中间人\n避免中间人篡改，得到与中间人一样的共享安全密钥，就要使用到哈希来证明信息没有篡改\n\n### ECDH秘钥交换初始化和ECDH秘钥交换回复\n\n![](https://s2.loli.net/2024/03/18/2wAfBva8GTdVOHI.jpg)\n服务端用自己的Host私钥加密了交换哈希值，中间人不知道服务端私钥，如果用其他私钥进行加密，所得到的哈希值就不同\n\n### 可恶的中间人\nSSH最危险的就是首次连接，如果服务端密钥指纹没有经过确认就信任，就有可能出现中间人攻击，反过来，如果首次连接即确认了服务端身份，那么后续只要没有警告，那么与服务端的链接就是安全的。 \n\n其实就跟你首次建立SSH连接，会提示你如下：\n![](https://s2.loli.net/2024/03/18/SYO3cTUpbXisRde.png)\n如果之后你输入登录密码，如果这个时候被监听了，那么结果还是寄了。 \n\n{% checkbox green checked, 关于这个情况，你登录的时间是随机的，一般中间人不会一直蹲守你，所以相比较还是很安全的，除非你一直连续登录，中间人找到了你的登录习惯😂 %}\n\n# SSH的优点\n1. 安全性： 数据传输是加密的，可以防止信息泄漏。\n2. 身份验证：防止未经授权的用户访问远程系统。\n3. 远程管理：可通过SSH协议登录远程服务器并执行命令，无需直接物理访问设备。\n4. 端口转发：SSH支持 端口转发功能，可以安全地传输其他协议和应用程序。\n5. 传输速度: 数据传输是压缩的，可以提高传输速度。\n\n\n# SSH基本用法\n{% tabs test1 %}\n<!-- tab 方式一-->\n```bash\nssh -p 22 user@host\n```\n参数：\n-p：指定端口号。\nuser：登录的用户名。\nhost：登录的主机。\n\n由于默认端口是22，用这个默认端口号的时候，可以省略，直接用以下形式：\n```bash\nssh user@host\n```\n\n此外，如果本地正在使用的用户名与远程登录的用户名一致，登录用户名也是可以省略的，即如下：\n```bash\nssh host\n```\n<!-- endtab -->\n\n<!-- tab 方式二：跳板连接 -->\n- 跳板连接用于在{% emp 不直接暴露目标主机 %}的情况下进行安全访问。\n- 通过跳板连接，用户可以首先连接到中间设备，然后再通过中间设备连接到目标主机。\n- 中间设备不一定是跳板机，只需要安装ssh服务就可以。\n![](https://s2.loli.net/2024/03/20/Y15IDPaF3N7GZmJ.jpg)\n\n```bash\nssh -t IP1  ssh -t IP2.... ssh -t 目标IP\n# IP1和IP2为跳板机的IP地址，先跳转到IP1，再跳转到IP2\n#两次跳转成功后，才能远程连接到目标设备\n\n#举例#\nssh -t 192.168.2.102 ssh -t 192.168.2.103 ssh -t 192.168.2.74 \n#跳转两次，从当前设备远程连接IP地址为192.168.2.74的主机或者服务器\n```\n\n<!-- endtab -->\n\n\n<!-- tab 方式三：远程控制-->\n```bash\nssh 目标设备的IP地址 命令\n#远程控制目标主机使用命令 并将命令执行结果返回本机\n\n#主机B的IP地址为xx \n[root@A ~] ssh xx ls #查看主机B家目录下有哪些目录或文件 \n```\n\n<!-- endtab -->\n{% endtabs %}\n\n\n# SSH免密登录\n\n## 原理\n在SSH免密登录过程中，客户端和服务器之间通过密钥对进行身份验证，而不是使用传统的密码验证方式。SSH会自动使用密钥对进行验证，而无需输入密码。\n\n## 步骤\n下面在两个ubuntu系统上有演示：\n客户端：192.168.131.138\n服务端：192.168.131.139\n### 在客户端生成密钥文件\n```bash\nssh-keygen   #生成密钥文件 \n\n-t #指定加密方式 \n#不加此选项，默认使用rsa方式\n\nEnter file in which to save the key(/root/.ssh/id_rsa): 直接回车\n#选择密钥文件存放的位置                 （默认路径）\n\nEnter passphrase (empty for no passphrase): \n#对密钥文件进行加密,设置密码后，访问文件需要输入密码\n\n#一般不输入密码 直接回车\nEnter same passphrase again: \n\n```\n\n\n最后会生成两个文件 \n```bash\ncd /root/.ssh\nls \n```\n\n.pub为密钥文件\n\n## 将公钥复制到SSH服务器上\n```bash\nssh-copy-id -i 公钥文件  [用户名]@IP地址 \n#将密钥文件传过去\n#下次就可以免密登录\n#以root用户登录时 可省略\n```\n\n## 通过SSH连接尝试登录到服务器\n成功免密登录服务器192.168.131.139\n![](https://s2.loli.net/2024/03/21/1RYNrC2lGnJSUqF.png)\n\n\n\n# TCP_wapper的原理和运用\n## TCP_wapper的原理\n\nTCP_Wrappers是一个工作在第四层(传输层)的的安全工具，对有状态连接 (TCP)的特定服务进行安全检测并实现访问控制，界定方式是凡是调用libwrap.so库文件的的程序就可以受TCP Wrappers的安全控制。它的主要功能就是控制谁可以访问，常见的程序有rpcbind、vsftpd、sshd，telnet。\n\nTCP_Wrappers有一个TCP的守护进程叫作tcpd。 \n以ssh为例，每当有ssh的连接请求时，tcpd即会截获请求，先读取系统管理员所设置的访问控制文件，符合要求，则会把这次连接原封不动的转给真正的ssh进程，由ssh完成后续工作；如果这次连接发起的ip不符合访问控制文件中的设置，则会中断连接请求，拒绝提供ssh服务。\n\n![图示](https://s2.loli.net/2024/03/21/i7FdP1rcKf8NWwu.png)\n\n## 设置黑白名单\n\n![](https://s2.loli.net/2024/03/21/QVElYwjmWHFnOi5.png)\n\n/etc/hosts.allow 设置允许访问 tcp 服务程序的策略（白名单）\n/etc/hosts.deny 设置禁止访问 tcp 服务程序的策略 （黑名单）\n\n拒绝单个 IP 使用 ssh 远程连接:\n配置文件:\n```bash\nhosts.allow:空着\nhosts.deny: sshd:192.168.88.20\n```\n\n拒绝某一网段使用 ssh 远程连接:\n```bash\nhosts.allow:空着\nhosts.deny: sshd:192.168.88\n\n```\n\n仅允许某一IP 使用 ssh 远程连接\n```bash\nhosts.allow: sshd:192.168.88.20\nhosts deny: sshd:ALL\n```\n","slug":"与SSH的今生今世","published":1,"updated":"2025-01-02T06:25:46.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io40029mktt9tlbcngg","content":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/14</p>\n</div></div><div class='timeline-item-content'><p>学习SSH原理</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/15</p>\n</div></div><div class='timeline-item-content'><p>SSH操作及SSH的免密登录</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/20</p>\n</div></div><div class='timeline-item-content'><p>TCP_wapper的原理使用</p>\n</div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"一口气把 SSH 原理搞懂了\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">一口气把 SSH 原理搞懂了</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div>\n<div class=\"tag link\"><a class=\"link-card\" title=\"SSH协议握手核心过程\" href=\"https://www.bilibili.com/video/BV13P4y1o76u/?spm_id_from=333.337.search-card.all.click&vd_source=6718fb46dbdd603565f483b04b4cdb50\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/18/L4b2k8WlnsZzF3O.jpg\"/></div><div class=\"right\"><p class=\"text\">SSH协议握手核心过程</p><p class=\"url\">https://www.bilibili.com/video/BV13P4y1o76u/?spm_id_from=333.337.search-card.all.click&vd_source=6718fb46dbdd603565f483b04b4cdb50</p></div></a></div>\n<div class=\"tag link\"><a class=\"link-card\" title=\"万字详解SSH\" href=\"https://blog.csdn.net/weixin_53946852/article/details/125754556\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png\"/></div><div class=\"right\"><p class=\"text\">万字详解SSH</p><p class=\"url\">https://blog.csdn.net/weixin_53946852/article/details/125754556</p></div></a></div>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=900637560&bvid=BV13P4y1o76u&cid=835703824&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<h1>我与SSH的今生今世</h1>\n<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第一次用</p>\n</div></div><div class='timeline-item-content'><p>第一次用是学习Linux的时候，VMTools有时候老挂，几行的命令又懒得手敲，于是用到了xshell来远程连接Linux机，当时仅仅以为是一个连接虚拟机的工具，没有仔细研究。</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>方便的工具</p>\n</div></div><div class='timeline-item-content'><p>在大创的时候，嵌入式部署模型，买了一块英伟达的Jetson Orin nano嵌入式开发板，当时使用远程连接终端MobaXterm来连接开发板（虽然有图形界面，但是还是更喜欢Windows敲代码），软件里内置了很多远程连接工具（SSH、X11、RDP、VNC、FTP、MOSH 等），也学习了很多SSH的命令。</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>留下隐患</p>\n</div></div><div class='timeline-item-content'><ul>\n<li>到后边用Linux系统越来越多，每次我都会配置好SSH，用工具连接好，但是由于每次为了连接方便，好记住，忽略了一个重大问题，就是配置的密码很简单(主要是为了好记住)，用了这么久也没出过什么问题，所以也就不以为然了。</li>\n<li>直到我自己租了一台服务器，用来部署网站和搭服务，一贯操作培好了SSH，密码依旧是那简单的123456😅，依旧是用着看似没问题，但是这个安全隐患已经深深埋入了。</li>\n</ul>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>爆出问题</p>\n</div></div><div class='timeline-item-content'><p>就在2月27日，突然腾讯云发出告警，我寻思我一个破服务器还能被入侵？经过排查，查到了系统的登录日志，毫不意外，除了我的IP，还藏着几个漂亮国IP，看了各种博客，终于找到了被入侵的原因，就是SSH，破译这样的脑瘫密码根本不用费功夫，分分钟就攻破了，跟离谱的就是我刚配置完SSH，过了三天他们就已经登上了我的服务器。</p>\n</div></div></div>\n<p>我与SSH就是这么个故事，希望写下这篇博客也能让自己记住这个遭遇。总的来说，还是安全意识不够，理论永远代替不了实际，尽管常常被灌输安全知识，甚至有点不耐烦，但是说到底，可乘之机还是自己创造的。</p>\n<h1>SSH原理</h1>\n<h2 id=\"什么是SSH\">什么是SSH</h2>\n<p>SSH是一种网络协议，基于非对称加密，用于计算机之间的加密登录。最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p>\n<h2 id=\"加密技术\">加密技术</h2>\n<h3 id=\"对称加密算法（DES）\">对称加密算法（DES）</h3>\n<p>采用<emp>单钥密码系统</emp>的加密方法，同一个密钥可以同时用作信息的加密和解密，需要对加密和解密使用相同密钥的加密算法，其实整个过程跟房东租房一样，只有两把钥匙开门，租客一把，房东一把，交换信息都需要这个密钥。<br>\n<img src=\"https://s2.loli.net/2024/03/18/ODbykA4d6ZSIBms.png\" alt=\"对称加密的过程\"></p>\n<h3 id=\"非对称加密（RSA）\">非对称加密（RSA）</h3>\n<ul>\n<li>非对称密钥不是一个加密密钥，而是由两个元素（即私钥和公钥）组成，这两个元素组成了密钥对。</li>\n<li>公钥，顾名思义，可以与任何人共享，因此个人和组织无需担心其安全分发问题。私钥必须妥善保管。 它仅由生成密钥对的人管理，不与任何人共享。 <emp>需要加密消息的用户将使用公钥，但只有持有私钥的人才能对其进行解密</emp>。<br>\n<img src=\"https://learn.microsoft.com/zh-cn/training/wwl-sci/describe-concepts-of-cryptography/media/key-pair-generation.png\" alt=\"非对称加密\"><br>\n当 Quincy 想要向 Monica 发送安全消息时，他使用她的公钥来加密纯文本并创建已加密文本。 然后，Quincy 用他喜欢的任意方式将已加密文本发送给 Monica。 当 Monica 收到已加密文本时，她使用自己的私钥对该文本进行解密，从而将其恢复为纯文本。<br>\n<img src=\"https://learn.microsoft.com/zh-cn/training/wwl-sci/describe-concepts-of-cryptography/media/asymmetric-encryption-process.png\" alt=\"加密及解密过程\"></li>\n</ul>\n<h3 id=\"对称加密与非对称加密区别\">对称加密与非对称加密区别</h3>\n<p>为什么非对称加密更加安全，但是还是需要对称加密呢？接下来看看两者的区别：</p>\n<div class='checkbox plus green checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>对称加密，成本是比较低(机器资源消耗少)，速度也是很快的</p>\n            </div>\n<div class='checkbox minus yellow checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>非对称加密，成本比对称加密高很多(机器资源消耗的多)，速度也慢</p>\n            </div>\n<div class='checkbox plus blue checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>对称加密使用同一个密钥进行加密和解密，密钥本身也在网络上文明传输，也容易被黑客获取</p>\n            </div>\n<div class='checkbox minus red checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>非对称加密，加密使用公钥，解密使用私钥。更加安全</p>\n            </div>\n<h3 id=\"信息安全性的安全措施\">信息安全性的安全措施</h3>\n<p>但是对称加密和非对称加密都有一个同样的问题，怎么安全的将密钥发给对方，又不会被中间人知道具体密钥？这时候就需要<code>Diffie Hellman</code>密钥交换</p>\n<h4 id=\"DH算法用于交换密钥\">DH算法用于交换密钥</h4>\n<p>交换密钥的目的是生成仅双方共享的密钥(共享的秘密)</p>\n<h4 id=\"交换密钥的基本过程\">交换密钥的基本过程</h4>\n<ul>\n<li>双方确定公开的内容</li>\n<li>用各自的私钥分别对公共内容加密（加密本质就是数学运算）并发送给对方</li>\n<li>这时双方使用自己的密钥对收到的内容加密（要设计运算保证最后结果相同，也就是两步运算的顺序是可以调换的），双方就得到了共同的结果（作为公共密钥）</li>\n<li>这样就实现了安全的将密钥传递给对方的目的</li>\n<li>由于私钥没有被传递所以监听者无法得到最终的公共密钥<br>\n<img src=\"https://s2.loli.net/2024/03/18/gkCxK19MdoXs6eJ.jpg\" alt=\"过程\"><br>\n过程中的参数<code>P</code>,<code>G</code>,以及公式都是公开的，两边运算之后就可以用这个公共秘钥进行对自己的秘钥的加密。<br>\n其实在过程中，可以理解到，黑客由于不知道双方的随机数（各自保留的），所以面临的是这样的问题<br>\n这里为什么黑客无法破解这个公共秘钥呢？<br>\n<img src=\"https://s2.loli.net/2024/03/18/E3OhcJGlN6aoKzT.jpg\" alt=\"\"><br>\n核心其实在于：过程是一个离散对数问题 <emp>正向运算简单、逆向困难</emp><br>\n黑客除了双方的随机数不知道，其他都可以获取到，其实需要破解的是<code>?</code>的值是多少<br>\n小一些的数破解起来容易，但是数一旦大了，逆向破解起来就很困难。</li>\n</ul>\n<h4 id=\"中间人篡改问题\">中间人篡改问题</h4>\n<p>如果黑客劫持了数据，发现自己解不开，又不想放过，就加上自己的秘钥分别发送给双方，成为隐形的中间人，还是会互相干扰。</p>\n<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/2301_77852117/article/details/131643540\">什么是哈希（Hsah）算法，哈希算法的作用以及Java中常见的哈希算法的使用案例。</a></p>\n</div>\n<p>为了解决这个问题，需要使用哈希算法比对哈希值可以确认信息是否篡改，但哈希值也可被篡改，这里就涉及到了SSH精髓的地方</p>\n<h2 id=\"SSH协议握手过程\">SSH协议握手过程</h2>\n<p>为了完全理解这个不分部分，还需要进行实验，使用抓包工具<code>wireshark</code>来进行测试。</p>\n<h3 id=\"TCP和版本信息握手\">TCP和版本信息握手</h3>\n<p><img src=\"https://s2.loli.net/2024/03/18/Mq2TFsyjLvYEeck.jpg\" alt=\"\"><br>\n因为SSH1和SSH2两个协议互不兼容，加密方式也不相同，所以要对协议版本进行握手认证。</p>\n<h3 id=\"密钥交换初始化-KEXINIT\">密钥交换初始化 KEXINIT</h3>\n<ul>\n<li>临时秘钥是用来后续生成共享秘钥使用的</li>\n<li>服务端生成安全秘钥，只要客户端也有这个安全秘钥，加密后信息就不容易被破解了，但是为了保证客户端也能有一模一样的安全秘钥，且服务端不能把自己的安全秘钥发送过去，这个时候就要使用到了前面提到的DH算法，SSH这里使用的是加强版的DH算法</li>\n<li>服务端把自己的临时公钥发送给客户端，就能生成相同的公共秘钥了<br>\n<img src=\"https://s2.loli.net/2024/03/18/Fmbp3MUTk2ZAGva.jpg\" alt=\"密钥交换初始化过程\"></li>\n</ul>\n<h3 id=\"防止中间人\">防止中间人</h3>\n<p>避免中间人篡改，得到与中间人一样的共享安全密钥，就要使用到哈希来证明信息没有篡改</p>\n<h3 id=\"ECDH秘钥交换初始化和ECDH秘钥交换回复\">ECDH秘钥交换初始化和ECDH秘钥交换回复</h3>\n<p><img src=\"https://s2.loli.net/2024/03/18/2wAfBva8GTdVOHI.jpg\" alt=\"\"><br>\n服务端用自己的Host私钥加密了交换哈希值，中间人不知道服务端私钥，如果用其他私钥进行加密，所得到的哈希值就不同</p>\n<h3 id=\"可恶的中间人\">可恶的中间人</h3>\n<p>SSH最危险的就是首次连接，如果服务端密钥指纹没有经过确认就信任，就有可能出现中间人攻击，反过来，如果首次连接即确认了服务端身份，那么后续只要没有警告，那么与服务端的链接就是安全的。</p>\n<p>其实就跟你首次建立SSH连接，会提示你如下：<br>\n<img src=\"https://s2.loli.net/2024/03/18/SYO3cTUpbXisRde.png\" alt=\"\"><br>\n如果之后你输入登录密码，如果这个时候被监听了，那么结果还是寄了。</p>\n<div class='checkbox green checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>关于这个情况，你登录的时间是随机的，一般中间人不会一直蹲守你，所以相比较还是很安全的，除非你一直连续登录，中间人找到了你的登录习惯😂</p>\n            </div>\n<h1>SSH的优点</h1>\n<ol>\n<li>安全性： 数据传输是加密的，可以防止信息泄漏。</li>\n<li>身份验证：防止未经授权的用户访问远程系统。</li>\n<li>远程管理：可通过SSH协议登录远程服务器并执行命令，无需直接物理访问设备。</li>\n<li>端口转发：SSH支持 端口转发功能，可以安全地传输其他协议和应用程序。</li>\n<li>传输速度: 数据传输是压缩的，可以提高传输速度。</li>\n</ol>\n<h1>SSH基本用法</h1>\n<div class=\"tabs\" id=\"test1\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"test1-1\">方式一</button><button type=\"button\" class=\"tab \" data-href=\"test1-2\">方式二：跳板连接</button><button type=\"button\" class=\"tab \" data-href=\"test1-3\">方式三：远程控制</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"test1-1\"><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -p 22 user@host</span><br></pre></td></tr></table></figure>\n<p>参数：<br>\n-p：指定端口号。<br>\nuser：登录的用户名。<br>\nhost：登录的主机。</p>\n<p>由于默认端口是22，用这个默认端口号的时候，可以省略，直接用以下形式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh user@host</span><br></pre></td></tr></table></figure>\n<p>此外，如果本地正在使用的用户名与远程登录的用户名一致，登录用户名也是可以省略的，即如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh host</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"test1-2\"><ul>\n<li>跳板连接用于在<emp>不直接暴露目标主机</emp>的情况下进行安全访问。</li>\n<li>通过跳板连接，用户可以首先连接到中间设备，然后再通过中间设备连接到目标主机。</li>\n<li>中间设备不一定是跳板机，只需要安装ssh服务就可以。<br>\n<img src=\"https://s2.loli.net/2024/03/20/Y15IDPaF3N7GZmJ.jpg\" alt=\"\"></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -t IP1  ssh -t IP2.... ssh -t 目标IP</span><br><span class=\"line\"><span class=\"comment\"># IP1和IP2为跳板机的IP地址，先跳转到IP1，再跳转到IP2</span></span><br><span class=\"line\"><span class=\"comment\">#两次跳转成功后，才能远程连接到目标设备</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#举例#</span></span><br><span class=\"line\">ssh -t 192.168.2.102 ssh -t 192.168.2.103 ssh -t 192.168.2.74 </span><br><span class=\"line\"><span class=\"comment\">#跳转两次，从当前设备远程连接IP地址为192.168.2.74的主机或者服务器</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"test1-3\"><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh 目标设备的IP地址 命令</span><br><span class=\"line\"><span class=\"comment\">#远程控制目标主机使用命令 并将命令执行结果返回本机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#主机B的IP地址为xx </span></span><br><span class=\"line\">[root@A ~] ssh xx <span class=\"built_in\">ls</span> <span class=\"comment\">#查看主机B家目录下有哪些目录或文件 </span></span><br></pre></td></tr></table></figure></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h1>SSH免密登录</h1>\n<h2 id=\"原理\">原理</h2>\n<p>在SSH免密登录过程中，客户端和服务器之间通过密钥对进行身份验证，而不是使用传统的密码验证方式。SSH会自动使用密钥对进行验证，而无需输入密码。</p>\n<h2 id=\"步骤\">步骤</h2>\n<p>下面在两个ubuntu系统上有演示：<br>\n客户端：192.168.131.138<br>\n服务端：192.168.131.139</p>\n<h3 id=\"在客户端生成密钥文件\">在客户端生成密钥文件</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen   <span class=\"comment\">#生成密钥文件 </span></span><br><span class=\"line\"></span><br><span class=\"line\">-t <span class=\"comment\">#指定加密方式 </span></span><br><span class=\"line\"><span class=\"comment\">#不加此选项，默认使用rsa方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key(/root/.ssh/id_rsa): 直接回车</span><br><span class=\"line\"><span class=\"comment\">#选择密钥文件存放的位置                 （默认路径）</span></span><br><span class=\"line\"></span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): </span><br><span class=\"line\"><span class=\"comment\">#对密钥文件进行加密,设置密码后，访问文件需要输入密码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#一般不输入密码 直接回车</span></span><br><span class=\"line\">Enter same passphrase again: </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后会生成两个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /root/.ssh</span><br><span class=\"line\"><span class=\"built_in\">ls</span> </span><br></pre></td></tr></table></figure>\n<p>.pub为密钥文件</p>\n<h2 id=\"将公钥复制到SSH服务器上\">将公钥复制到SSH服务器上</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i 公钥文件  [用户名]@IP地址 </span><br><span class=\"line\"><span class=\"comment\">#将密钥文件传过去</span></span><br><span class=\"line\"><span class=\"comment\">#下次就可以免密登录</span></span><br><span class=\"line\"><span class=\"comment\">#以root用户登录时 可省略</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"通过SSH连接尝试登录到服务器\">通过SSH连接尝试登录到服务器</h2>\n<p>成功免密登录服务器192.168.131.139<br>\n<img src=\"https://s2.loli.net/2024/03/21/1RYNrC2lGnJSUqF.png\" alt=\"\"></p>\n<h1>TCP_wapper的原理和运用</h1>\n<h2 id=\"TCP-wapper的原理\">TCP_wapper的原理</h2>\n<p>TCP_Wrappers是一个工作在第四层(传输层)的的安全工具，对有状态连接 (TCP)的特定服务进行安全检测并实现访问控制，界定方式是凡是调用libwrap.so库文件的的程序就可以受TCP Wrappers的安全控制。它的主要功能就是控制谁可以访问，常见的程序有rpcbind、vsftpd、sshd，telnet。</p>\n<p>TCP_Wrappers有一个TCP的守护进程叫作tcpd。<br>\n以ssh为例，每当有ssh的连接请求时，tcpd即会截获请求，先读取系统管理员所设置的访问控制文件，符合要求，则会把这次连接原封不动的转给真正的ssh进程，由ssh完成后续工作；如果这次连接发起的ip不符合访问控制文件中的设置，则会中断连接请求，拒绝提供ssh服务。</p>\n<p><img src=\"https://s2.loli.net/2024/03/21/i7FdP1rcKf8NWwu.png\" alt=\"图示\"></p>\n<h2 id=\"设置黑白名单\">设置黑白名单</h2>\n<p><img src=\"https://s2.loli.net/2024/03/21/QVElYwjmWHFnOi5.png\" alt=\"\"></p>\n<p>/etc/hosts.allow 设置允许访问 tcp 服务程序的策略（白名单）<br>\n/etc/hosts.deny 设置禁止访问 tcp 服务程序的策略 （黑名单）</p>\n<p>拒绝单个 IP 使用 ssh 远程连接:<br>\n配置文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hosts.allow:空着</span><br><span class=\"line\">hosts.deny: sshd:192.168.88.20</span><br></pre></td></tr></table></figure>\n<p>拒绝某一网段使用 ssh 远程连接:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hosts.allow:空着</span><br><span class=\"line\">hosts.deny: sshd:192.168.88</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>仅允许某一IP 使用 ssh 远程连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hosts.allow: sshd:192.168.88.20</span><br><span class=\"line\">hosts deny: sshd:ALL</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/14</p>\n</div></div><div class='timeline-item-content'><p>学习SSH原理</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/15</p>\n</div></div><div class='timeline-item-content'><p>SSH操作及SSH的免密登录</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/20</p>\n</div></div><div class='timeline-item-content'><p>TCP_wapper的原理使用</p>\n</div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"一口气把 SSH 原理搞懂了\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">一口气把 SSH 原理搞懂了</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div>\n<div class=\"tag link\"><a class=\"link-card\" title=\"SSH协议握手核心过程\" href=\"https://www.bilibili.com/video/BV13P4y1o76u/?spm_id_from=333.337.search-card.all.click&vd_source=6718fb46dbdd603565f483b04b4cdb50\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/18/L4b2k8WlnsZzF3O.jpg\"/></div><div class=\"right\"><p class=\"text\">SSH协议握手核心过程</p><p class=\"url\">https://www.bilibili.com/video/BV13P4y1o76u/?spm_id_from=333.337.search-card.all.click&vd_source=6718fb46dbdd603565f483b04b4cdb50</p></div></a></div>\n<div class=\"tag link\"><a class=\"link-card\" title=\"万字详解SSH\" href=\"https://blog.csdn.net/weixin_53946852/article/details/125754556\"><div class=\"left\"><img src=\"https://s2.loli.net/2024/03/18/HQAVcrZC1NKT3pO.png\"/></div><div class=\"right\"><p class=\"text\">万字详解SSH</p><p class=\"url\">https://blog.csdn.net/weixin_53946852/article/details/125754556</p></div></a></div>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=900637560&bvid=BV13P4y1o76u&cid=835703824&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<h1>我与SSH的今生今世</h1>\n<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第一次用</p>\n</div></div><div class='timeline-item-content'><p>第一次用是学习Linux的时候，VMTools有时候老挂，几行的命令又懒得手敲，于是用到了xshell来远程连接Linux机，当时仅仅以为是一个连接虚拟机的工具，没有仔细研究。</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>方便的工具</p>\n</div></div><div class='timeline-item-content'><p>在大创的时候，嵌入式部署模型，买了一块英伟达的Jetson Orin nano嵌入式开发板，当时使用远程连接终端MobaXterm来连接开发板（虽然有图形界面，但是还是更喜欢Windows敲代码），软件里内置了很多远程连接工具（SSH、X11、RDP、VNC、FTP、MOSH 等），也学习了很多SSH的命令。</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>留下隐患</p>\n</div></div><div class='timeline-item-content'><ul>\n<li>到后边用Linux系统越来越多，每次我都会配置好SSH，用工具连接好，但是由于每次为了连接方便，好记住，忽略了一个重大问题，就是配置的密码很简单(主要是为了好记住)，用了这么久也没出过什么问题，所以也就不以为然了。</li>\n<li>直到我自己租了一台服务器，用来部署网站和搭服务，一贯操作培好了SSH，密码依旧是那简单的123456😅，依旧是用着看似没问题，但是这个安全隐患已经深深埋入了。</li>\n</ul>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>爆出问题</p>\n</div></div><div class='timeline-item-content'><p>就在2月27日，突然腾讯云发出告警，我寻思我一个破服务器还能被入侵？经过排查，查到了系统的登录日志，毫不意外，除了我的IP，还藏着几个漂亮国IP，看了各种博客，终于找到了被入侵的原因，就是SSH，破译这样的脑瘫密码根本不用费功夫，分分钟就攻破了，跟离谱的就是我刚配置完SSH，过了三天他们就已经登上了我的服务器。</p>\n</div></div></div>\n<p>我与SSH就是这么个故事，希望写下这篇博客也能让自己记住这个遭遇。总的来说，还是安全意识不够，理论永远代替不了实际，尽管常常被灌输安全知识，甚至有点不耐烦，但是说到底，可乘之机还是自己创造的。</p>\n<h1>SSH原理</h1>\n<h2 id=\"什么是SSH\">什么是SSH</h2>\n<p>SSH是一种网络协议，基于非对称加密，用于计算机之间的加密登录。最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p>\n<h2 id=\"加密技术\">加密技术</h2>\n<h3 id=\"对称加密算法（DES）\">对称加密算法（DES）</h3>\n<p>采用<emp>单钥密码系统</emp>的加密方法，同一个密钥可以同时用作信息的加密和解密，需要对加密和解密使用相同密钥的加密算法，其实整个过程跟房东租房一样，只有两把钥匙开门，租客一把，房东一把，交换信息都需要这个密钥。<br>\n<img src=\"https://s2.loli.net/2024/03/18/ODbykA4d6ZSIBms.png\" alt=\"对称加密的过程\"></p>\n<h3 id=\"非对称加密（RSA）\">非对称加密（RSA）</h3>\n<ul>\n<li>非对称密钥不是一个加密密钥，而是由两个元素（即私钥和公钥）组成，这两个元素组成了密钥对。</li>\n<li>公钥，顾名思义，可以与任何人共享，因此个人和组织无需担心其安全分发问题。私钥必须妥善保管。 它仅由生成密钥对的人管理，不与任何人共享。 <emp>需要加密消息的用户将使用公钥，但只有持有私钥的人才能对其进行解密</emp>。<br>\n<img src=\"https://learn.microsoft.com/zh-cn/training/wwl-sci/describe-concepts-of-cryptography/media/key-pair-generation.png\" alt=\"非对称加密\"><br>\n当 Quincy 想要向 Monica 发送安全消息时，他使用她的公钥来加密纯文本并创建已加密文本。 然后，Quincy 用他喜欢的任意方式将已加密文本发送给 Monica。 当 Monica 收到已加密文本时，她使用自己的私钥对该文本进行解密，从而将其恢复为纯文本。<br>\n<img src=\"https://learn.microsoft.com/zh-cn/training/wwl-sci/describe-concepts-of-cryptography/media/asymmetric-encryption-process.png\" alt=\"加密及解密过程\"></li>\n</ul>\n<h3 id=\"对称加密与非对称加密区别\">对称加密与非对称加密区别</h3>\n<p>为什么非对称加密更加安全，但是还是需要对称加密呢？接下来看看两者的区别：</p>\n<div class='checkbox plus green checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>对称加密，成本是比较低(机器资源消耗少)，速度也是很快的</p>\n            </div>\n<div class='checkbox minus yellow checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>非对称加密，成本比对称加密高很多(机器资源消耗的多)，速度也慢</p>\n            </div>\n<div class='checkbox plus blue checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>对称加密使用同一个密钥进行加密和解密，密钥本身也在网络上文明传输，也容易被黑客获取</p>\n            </div>\n<div class='checkbox minus red checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>非对称加密，加密使用公钥，解密使用私钥。更加安全</p>\n            </div>\n<h3 id=\"信息安全性的安全措施\">信息安全性的安全措施</h3>\n<p>但是对称加密和非对称加密都有一个同样的问题，怎么安全的将密钥发给对方，又不会被中间人知道具体密钥？这时候就需要<code>Diffie Hellman</code>密钥交换</p>\n<h4 id=\"DH算法用于交换密钥\">DH算法用于交换密钥</h4>\n<p>交换密钥的目的是生成仅双方共享的密钥(共享的秘密)</p>\n<h4 id=\"交换密钥的基本过程\">交换密钥的基本过程</h4>\n<ul>\n<li>双方确定公开的内容</li>\n<li>用各自的私钥分别对公共内容加密（加密本质就是数学运算）并发送给对方</li>\n<li>这时双方使用自己的密钥对收到的内容加密（要设计运算保证最后结果相同，也就是两步运算的顺序是可以调换的），双方就得到了共同的结果（作为公共密钥）</li>\n<li>这样就实现了安全的将密钥传递给对方的目的</li>\n<li>由于私钥没有被传递所以监听者无法得到最终的公共密钥<br>\n<img src=\"https://s2.loli.net/2024/03/18/gkCxK19MdoXs6eJ.jpg\" alt=\"过程\"><br>\n过程中的参数<code>P</code>,<code>G</code>,以及公式都是公开的，两边运算之后就可以用这个公共秘钥进行对自己的秘钥的加密。<br>\n其实在过程中，可以理解到，黑客由于不知道双方的随机数（各自保留的），所以面临的是这样的问题<br>\n这里为什么黑客无法破解这个公共秘钥呢？<br>\n<img src=\"https://s2.loli.net/2024/03/18/E3OhcJGlN6aoKzT.jpg\" alt=\"\"><br>\n核心其实在于：过程是一个离散对数问题 <emp>正向运算简单、逆向困难</emp><br>\n黑客除了双方的随机数不知道，其他都可以获取到，其实需要破解的是<code>?</code>的值是多少<br>\n小一些的数破解起来容易，但是数一旦大了，逆向破解起来就很困难。</li>\n</ul>\n<h4 id=\"中间人篡改问题\">中间人篡改问题</h4>\n<p>如果黑客劫持了数据，发现自己解不开，又不想放过，就加上自己的秘钥分别发送给双方，成为隐形的中间人，还是会互相干扰。</p>\n<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/2301_77852117/article/details/131643540\">什么是哈希（Hsah）算法，哈希算法的作用以及Java中常见的哈希算法的使用案例。</a></p>\n</div>\n<p>为了解决这个问题，需要使用哈希算法比对哈希值可以确认信息是否篡改，但哈希值也可被篡改，这里就涉及到了SSH精髓的地方</p>\n<h2 id=\"SSH协议握手过程\">SSH协议握手过程</h2>\n<p>为了完全理解这个不分部分，还需要进行实验，使用抓包工具<code>wireshark</code>来进行测试。</p>\n<h3 id=\"TCP和版本信息握手\">TCP和版本信息握手</h3>\n<p><img src=\"https://s2.loli.net/2024/03/18/Mq2TFsyjLvYEeck.jpg\" alt=\"\"><br>\n因为SSH1和SSH2两个协议互不兼容，加密方式也不相同，所以要对协议版本进行握手认证。</p>\n<h3 id=\"密钥交换初始化-KEXINIT\">密钥交换初始化 KEXINIT</h3>\n<ul>\n<li>临时秘钥是用来后续生成共享秘钥使用的</li>\n<li>服务端生成安全秘钥，只要客户端也有这个安全秘钥，加密后信息就不容易被破解了，但是为了保证客户端也能有一模一样的安全秘钥，且服务端不能把自己的安全秘钥发送过去，这个时候就要使用到了前面提到的DH算法，SSH这里使用的是加强版的DH算法</li>\n<li>服务端把自己的临时公钥发送给客户端，就能生成相同的公共秘钥了<br>\n<img src=\"https://s2.loli.net/2024/03/18/Fmbp3MUTk2ZAGva.jpg\" alt=\"密钥交换初始化过程\"></li>\n</ul>\n<h3 id=\"防止中间人\">防止中间人</h3>\n<p>避免中间人篡改，得到与中间人一样的共享安全密钥，就要使用到哈希来证明信息没有篡改</p>\n<h3 id=\"ECDH秘钥交换初始化和ECDH秘钥交换回复\">ECDH秘钥交换初始化和ECDH秘钥交换回复</h3>\n<p><img src=\"https://s2.loli.net/2024/03/18/2wAfBva8GTdVOHI.jpg\" alt=\"\"><br>\n服务端用自己的Host私钥加密了交换哈希值，中间人不知道服务端私钥，如果用其他私钥进行加密，所得到的哈希值就不同</p>\n<h3 id=\"可恶的中间人\">可恶的中间人</h3>\n<p>SSH最危险的就是首次连接，如果服务端密钥指纹没有经过确认就信任，就有可能出现中间人攻击，反过来，如果首次连接即确认了服务端身份，那么后续只要没有警告，那么与服务端的链接就是安全的。</p>\n<p>其实就跟你首次建立SSH连接，会提示你如下：<br>\n<img src=\"https://s2.loli.net/2024/03/18/SYO3cTUpbXisRde.png\" alt=\"\"><br>\n如果之后你输入登录密码，如果这个时候被监听了，那么结果还是寄了。</p>\n<div class='checkbox green checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>关于这个情况，你登录的时间是随机的，一般中间人不会一直蹲守你，所以相比较还是很安全的，除非你一直连续登录，中间人找到了你的登录习惯😂</p>\n            </div>\n<h1>SSH的优点</h1>\n<ol>\n<li>安全性： 数据传输是加密的，可以防止信息泄漏。</li>\n<li>身份验证：防止未经授权的用户访问远程系统。</li>\n<li>远程管理：可通过SSH协议登录远程服务器并执行命令，无需直接物理访问设备。</li>\n<li>端口转发：SSH支持 端口转发功能，可以安全地传输其他协议和应用程序。</li>\n<li>传输速度: 数据传输是压缩的，可以提高传输速度。</li>\n</ol>\n<h1>SSH基本用法</h1>\n<div class=\"tabs\" id=\"test1\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"test1-1\">方式一</button><button type=\"button\" class=\"tab \" data-href=\"test1-2\">方式二：跳板连接</button><button type=\"button\" class=\"tab \" data-href=\"test1-3\">方式三：远程控制</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"test1-1\"><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -p 22 user@host</span><br></pre></td></tr></table></figure>\n<p>参数：<br>\n-p：指定端口号。<br>\nuser：登录的用户名。<br>\nhost：登录的主机。</p>\n<p>由于默认端口是22，用这个默认端口号的时候，可以省略，直接用以下形式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh user@host</span><br></pre></td></tr></table></figure>\n<p>此外，如果本地正在使用的用户名与远程登录的用户名一致，登录用户名也是可以省略的，即如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh host</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"test1-2\"><ul>\n<li>跳板连接用于在<emp>不直接暴露目标主机</emp>的情况下进行安全访问。</li>\n<li>通过跳板连接，用户可以首先连接到中间设备，然后再通过中间设备连接到目标主机。</li>\n<li>中间设备不一定是跳板机，只需要安装ssh服务就可以。<br>\n<img src=\"https://s2.loli.net/2024/03/20/Y15IDPaF3N7GZmJ.jpg\" alt=\"\"></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -t IP1  ssh -t IP2.... ssh -t 目标IP</span><br><span class=\"line\"><span class=\"comment\"># IP1和IP2为跳板机的IP地址，先跳转到IP1，再跳转到IP2</span></span><br><span class=\"line\"><span class=\"comment\">#两次跳转成功后，才能远程连接到目标设备</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#举例#</span></span><br><span class=\"line\">ssh -t 192.168.2.102 ssh -t 192.168.2.103 ssh -t 192.168.2.74 </span><br><span class=\"line\"><span class=\"comment\">#跳转两次，从当前设备远程连接IP地址为192.168.2.74的主机或者服务器</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"test1-3\"><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh 目标设备的IP地址 命令</span><br><span class=\"line\"><span class=\"comment\">#远程控制目标主机使用命令 并将命令执行结果返回本机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#主机B的IP地址为xx </span></span><br><span class=\"line\">[root@A ~] ssh xx <span class=\"built_in\">ls</span> <span class=\"comment\">#查看主机B家目录下有哪些目录或文件 </span></span><br></pre></td></tr></table></figure></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h1>SSH免密登录</h1>\n<h2 id=\"原理\">原理</h2>\n<p>在SSH免密登录过程中，客户端和服务器之间通过密钥对进行身份验证，而不是使用传统的密码验证方式。SSH会自动使用密钥对进行验证，而无需输入密码。</p>\n<h2 id=\"步骤\">步骤</h2>\n<p>下面在两个ubuntu系统上有演示：<br>\n客户端：192.168.131.138<br>\n服务端：192.168.131.139</p>\n<h3 id=\"在客户端生成密钥文件\">在客户端生成密钥文件</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen   <span class=\"comment\">#生成密钥文件 </span></span><br><span class=\"line\"></span><br><span class=\"line\">-t <span class=\"comment\">#指定加密方式 </span></span><br><span class=\"line\"><span class=\"comment\">#不加此选项，默认使用rsa方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key(/root/.ssh/id_rsa): 直接回车</span><br><span class=\"line\"><span class=\"comment\">#选择密钥文件存放的位置                 （默认路径）</span></span><br><span class=\"line\"></span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): </span><br><span class=\"line\"><span class=\"comment\">#对密钥文件进行加密,设置密码后，访问文件需要输入密码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#一般不输入密码 直接回车</span></span><br><span class=\"line\">Enter same passphrase again: </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后会生成两个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /root/.ssh</span><br><span class=\"line\"><span class=\"built_in\">ls</span> </span><br></pre></td></tr></table></figure>\n<p>.pub为密钥文件</p>\n<h2 id=\"将公钥复制到SSH服务器上\">将公钥复制到SSH服务器上</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i 公钥文件  [用户名]@IP地址 </span><br><span class=\"line\"><span class=\"comment\">#将密钥文件传过去</span></span><br><span class=\"line\"><span class=\"comment\">#下次就可以免密登录</span></span><br><span class=\"line\"><span class=\"comment\">#以root用户登录时 可省略</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"通过SSH连接尝试登录到服务器\">通过SSH连接尝试登录到服务器</h2>\n<p>成功免密登录服务器192.168.131.139<br>\n<img src=\"https://s2.loli.net/2024/03/21/1RYNrC2lGnJSUqF.png\" alt=\"\"></p>\n<h1>TCP_wapper的原理和运用</h1>\n<h2 id=\"TCP-wapper的原理\">TCP_wapper的原理</h2>\n<p>TCP_Wrappers是一个工作在第四层(传输层)的的安全工具，对有状态连接 (TCP)的特定服务进行安全检测并实现访问控制，界定方式是凡是调用libwrap.so库文件的的程序就可以受TCP Wrappers的安全控制。它的主要功能就是控制谁可以访问，常见的程序有rpcbind、vsftpd、sshd，telnet。</p>\n<p>TCP_Wrappers有一个TCP的守护进程叫作tcpd。<br>\n以ssh为例，每当有ssh的连接请求时，tcpd即会截获请求，先读取系统管理员所设置的访问控制文件，符合要求，则会把这次连接原封不动的转给真正的ssh进程，由ssh完成后续工作；如果这次连接发起的ip不符合访问控制文件中的设置，则会中断连接请求，拒绝提供ssh服务。</p>\n<p><img src=\"https://s2.loli.net/2024/03/21/i7FdP1rcKf8NWwu.png\" alt=\"图示\"></p>\n<h2 id=\"设置黑白名单\">设置黑白名单</h2>\n<p><img src=\"https://s2.loli.net/2024/03/21/QVElYwjmWHFnOi5.png\" alt=\"\"></p>\n<p>/etc/hosts.allow 设置允许访问 tcp 服务程序的策略（白名单）<br>\n/etc/hosts.deny 设置禁止访问 tcp 服务程序的策略 （黑名单）</p>\n<p>拒绝单个 IP 使用 ssh 远程连接:<br>\n配置文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hosts.allow:空着</span><br><span class=\"line\">hosts.deny: sshd:192.168.88.20</span><br></pre></td></tr></table></figure>\n<p>拒绝某一网段使用 ssh 远程连接:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hosts.allow:空着</span><br><span class=\"line\">hosts.deny: sshd:192.168.88</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>仅允许某一IP 使用 ssh 远程连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hosts.allow: sshd:192.168.88.20</span><br><span class=\"line\">hosts deny: sshd:ALL</span><br></pre></td></tr></table></figure>\n"},{"title":"基础算法","abbrlink":34887,"date":"2024-03-01T13:34:09.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqu1jr-0.webp","swiper_index":null,"_content":"\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/3/1 -->\n快速排序、归并排序、二分算法\n<!-- endtimeline -->\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n{% link 参考文章, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %} ","source":"_posts/基础算法.md","raw":"---\ntitle: 基础算法\nabbrlink: 34887\ndate: 2024-03-01 21:34:09\ntags:\ndescription:\ncategories: \ncover:\nswiper_index:\n---\n\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/3/1 -->\n快速排序、归并排序、二分算法\n<!-- endtimeline -->\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n{% link 参考文章, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %} ","slug":"基础算法","published":1,"updated":"2025-02-14T10:20:32.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io5002amktt2hjc5bsg","content":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/1</p>\n</div></div><div class='timeline-item-content'><p>快速排序、归并排序、二分算法</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> ","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/1</p>\n</div></div><div class='timeline-item-content'><p>快速排序、归并排序、二分算法</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> "},{"title":"嵌入式系统启动流程","abbrlink":42415,"date":"2025-02-21T10:03:02.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqvf20-0.webp","swiper_index":null,"_content":"\n# 参考文章\n{% link 参考文章, https://blog.csdn.net/qq_28877125/article/details/131032064?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-131032064-blog-116835100.235^v43^pc_blog_bottom_relevance_base4&spm=1001.2101.3001.4242.1&utm_relevant_index=3, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n# Linux的启动过程\n桌面端和嵌入式端的启动过程都遵循以下步骤\n![过程](https://image.aruoshui.fun/i/2025/02/12/rb5kqt-0.webp)\n这里以嵌入式端Linux启动为例子：\n\n\n## 硬件上电与BootROM阶段\n系统通电后，CPU首先执行固化在芯片内部的BootROM代码。该阶段完成基础硬件初始化（如时钟、片内RAM），并根据引脚配置确定启动设备（如eMMC、TF卡），随后从设备中加载SPL（Secondary Program Loader）到RAM并执行。\n\n## 二级引导加载程序（SPL + U-Boot）\nSPL：作为轻量级引导程序，负责初始化DDR内存，并将完整的U-Boot加载到内存中。\nU-Boot：进一步初始化硬件（如网络、存储设备），加载Linux内核镜像（含内核、设备树、根文件系统）到内存，并传递启动参数。\n\n## Linux内核启动 \n内核解压后，执行以下关键操作：  \n初始化硬件子系统：包括中断控制器、内存管理、设备驱动等。  \n挂载根文件系统：通过内核参数确定根文件系统位置（如从存储设备或网络），完成挂载。  \n启动第一个用户进程：内核调用`start_kernel()`完成初始化后，启动`/sbin/init`进程。\n\n### \n\n\n## 用户空间初始化  \ninit进程：读取`/etc/inittab`配置文件，设置默认运行级别（如多用户模式）。  \n执行启动脚本：依次运行`/etc/init.d/rcS`及对应运行级别目录（如`rc5.d`）中的脚本，完成网络配置、服务启动等。  \n启动应用程序：最终通过`getty`或自定义脚本启动用户应用程序。  \n\n## 关键补充说明  \n硬件初始化分层：BootROM和U-Boot的硬件初始化可能被内核覆盖，内核的初始化是最终生效的。  \n内核解压方式：嵌入式系统常采用运行时解压以节省存储空间。  \n\n\n\n\n\n\n\n","source":"_posts/嵌入式系统启动流程.md","raw":"---\ntitle: 嵌入式系统启动流程\nabbrlink: 42415\ndate: 2025-02-21 18:03:02\ntags:\ndescription:\ncategories:\ncover:\nswiper_index:\n---\n\n# 参考文章\n{% link 参考文章, https://blog.csdn.net/qq_28877125/article/details/131032064?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-131032064-blog-116835100.235^v43^pc_blog_bottom_relevance_base4&spm=1001.2101.3001.4242.1&utm_relevant_index=3, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n\n# Linux的启动过程\n桌面端和嵌入式端的启动过程都遵循以下步骤\n![过程](https://image.aruoshui.fun/i/2025/02/12/rb5kqt-0.webp)\n这里以嵌入式端Linux启动为例子：\n\n\n## 硬件上电与BootROM阶段\n系统通电后，CPU首先执行固化在芯片内部的BootROM代码。该阶段完成基础硬件初始化（如时钟、片内RAM），并根据引脚配置确定启动设备（如eMMC、TF卡），随后从设备中加载SPL（Secondary Program Loader）到RAM并执行。\n\n## 二级引导加载程序（SPL + U-Boot）\nSPL：作为轻量级引导程序，负责初始化DDR内存，并将完整的U-Boot加载到内存中。\nU-Boot：进一步初始化硬件（如网络、存储设备），加载Linux内核镜像（含内核、设备树、根文件系统）到内存，并传递启动参数。\n\n## Linux内核启动 \n内核解压后，执行以下关键操作：  \n初始化硬件子系统：包括中断控制器、内存管理、设备驱动等。  \n挂载根文件系统：通过内核参数确定根文件系统位置（如从存储设备或网络），完成挂载。  \n启动第一个用户进程：内核调用`start_kernel()`完成初始化后，启动`/sbin/init`进程。\n\n### \n\n\n## 用户空间初始化  \ninit进程：读取`/etc/inittab`配置文件，设置默认运行级别（如多用户模式）。  \n执行启动脚本：依次运行`/etc/init.d/rcS`及对应运行级别目录（如`rc5.d`）中的脚本，完成网络配置、服务启动等。  \n启动应用程序：最终通过`getty`或自定义脚本启动用户应用程序。  \n\n## 关键补充说明  \n硬件初始化分层：BootROM和U-Boot的硬件初始化可能被内核覆盖，内核的初始化是最终生效的。  \n内核解压方式：嵌入式系统常采用运行时解压以节省存储空间。  \n\n\n\n\n\n\n\n","slug":"嵌入式系统启动流程","published":1,"updated":"2025-05-27T09:45:59.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io5002cmkttepta55a5","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://blog.csdn.net/qq_28877125/article/details/131032064?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-131032064-blog-116835100.235^v43^pc_blog_bottom_relevance_base4&spm=1001.2101.3001.4242.1&utm_relevant_index=3\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://blog.csdn.net/qq_28877125/article/details/131032064?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-131032064-blog-116835100.235^v43^pc_blog_bottom_relevance_base4&spm=1001.2101.3001.4242.1&utm_relevant_index=3</p></div></a></div> \n<h1>Linux的启动过程</h1>\n<p>桌面端和嵌入式端的启动过程都遵循以下步骤<br>\n<img src=\"https://image.aruoshui.fun/i/2025/02/12/rb5kqt-0.webp\" alt=\"过程\"><br>\n这里以嵌入式端Linux启动为例子：</p>\n<h2 id=\"硬件上电与BootROM阶段\">硬件上电与BootROM阶段</h2>\n<p>系统通电后，CPU首先执行固化在芯片内部的BootROM代码。该阶段完成基础硬件初始化（如时钟、片内RAM），并根据引脚配置确定启动设备（如eMMC、TF卡），随后从设备中加载SPL（Secondary Program Loader）到RAM并执行。</p>\n<h2 id=\"二级引导加载程序（SPL-U-Boot）\">二级引导加载程序（SPL + U-Boot）</h2>\n<p>SPL：作为轻量级引导程序，负责初始化DDR内存，并将完整的U-Boot加载到内存中。<br>\nU-Boot：进一步初始化硬件（如网络、存储设备），加载Linux内核镜像（含内核、设备树、根文件系统）到内存，并传递启动参数。</p>\n<h2 id=\"Linux内核启动\">Linux内核启动</h2>\n<p>内核解压后，执行以下关键操作：<br>\n初始化硬件子系统：包括中断控制器、内存管理、设备驱动等。<br>\n挂载根文件系统：通过内核参数确定根文件系统位置（如从存储设备或网络），完成挂载。<br>\n启动第一个用户进程：内核调用<code>start_kernel()</code>完成初始化后，启动<code>/sbin/init</code>进程。</p>\n<h3 id=\"\"></h3>\n<h2 id=\"用户空间初始化\">用户空间初始化</h2>\n<p>init进程：读取<code>/etc/inittab</code>配置文件，设置默认运行级别（如多用户模式）。<br>\n执行启动脚本：依次运行<code>/etc/init.d/rcS</code>及对应运行级别目录（如<code>rc5.d</code>）中的脚本，完成网络配置、服务启动等。<br>\n启动应用程序：最终通过<code>getty</code>或自定义脚本启动用户应用程序。</p>\n<h2 id=\"关键补充说明\">关键补充说明</h2>\n<p>硬件初始化分层：BootROM和U-Boot的硬件初始化可能被内核覆盖，内核的初始化是最终生效的。<br>\n内核解压方式：嵌入式系统常采用运行时解压以节省存储空间。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://blog.csdn.net/qq_28877125/article/details/131032064?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-131032064-blog-116835100.235^v43^pc_blog_bottom_relevance_base4&spm=1001.2101.3001.4242.1&utm_relevant_index=3\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://blog.csdn.net/qq_28877125/article/details/131032064?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-131032064-blog-116835100.235^v43^pc_blog_bottom_relevance_base4&spm=1001.2101.3001.4242.1&utm_relevant_index=3</p></div></a></div> \n<h1>Linux的启动过程</h1>\n<p>桌面端和嵌入式端的启动过程都遵循以下步骤<br>\n<img src=\"https://image.aruoshui.fun/i/2025/02/12/rb5kqt-0.webp\" alt=\"过程\"><br>\n这里以嵌入式端Linux启动为例子：</p>\n<h2 id=\"硬件上电与BootROM阶段\">硬件上电与BootROM阶段</h2>\n<p>系统通电后，CPU首先执行固化在芯片内部的BootROM代码。该阶段完成基础硬件初始化（如时钟、片内RAM），并根据引脚配置确定启动设备（如eMMC、TF卡），随后从设备中加载SPL（Secondary Program Loader）到RAM并执行。</p>\n<h2 id=\"二级引导加载程序（SPL-U-Boot）\">二级引导加载程序（SPL + U-Boot）</h2>\n<p>SPL：作为轻量级引导程序，负责初始化DDR内存，并将完整的U-Boot加载到内存中。<br>\nU-Boot：进一步初始化硬件（如网络、存储设备），加载Linux内核镜像（含内核、设备树、根文件系统）到内存，并传递启动参数。</p>\n<h2 id=\"Linux内核启动\">Linux内核启动</h2>\n<p>内核解压后，执行以下关键操作：<br>\n初始化硬件子系统：包括中断控制器、内存管理、设备驱动等。<br>\n挂载根文件系统：通过内核参数确定根文件系统位置（如从存储设备或网络），完成挂载。<br>\n启动第一个用户进程：内核调用<code>start_kernel()</code>完成初始化后，启动<code>/sbin/init</code>进程。</p>\n<h3 id=\"\"></h3>\n<h2 id=\"用户空间初始化\">用户空间初始化</h2>\n<p>init进程：读取<code>/etc/inittab</code>配置文件，设置默认运行级别（如多用户模式）。<br>\n执行启动脚本：依次运行<code>/etc/init.d/rcS</code>及对应运行级别目录（如<code>rc5.d</code>）中的脚本，完成网络配置、服务启动等。<br>\n启动应用程序：最终通过<code>getty</code>或自定义脚本启动用户应用程序。</p>\n<h2 id=\"关键补充说明\">关键补充说明</h2>\n<p>硬件初始化分层：BootROM和U-Boot的硬件初始化可能被内核覆盖，内核的初始化是最终生效的。<br>\n内核解压方式：嵌入式系统常采用运行时解压以节省存储空间。</p>\n"},{"title":"巡检机器人项目经历优化","abbrlink":65043,"date":"2025-02-18T08:21:05.000Z","_content":"\n### 项目背景\n\n在本项目中，我们采用鸟瞰视角的3D视觉算法**BEVDet**，设计并实现了一款巡检机器人。该机器人主要用于变电站的路径规划和杂物检测，确保变电站的安全和高效运行。\n\n### 技术选型与部署\n\n1. **3D目标检测算法选取与部署**\n   - 选择了**BEVDet**算法，该算法在鸟瞰视角下的3D目标检测中表现出色。\n   - 使用TensorRT对模型进行量化，以提高模型的推理速度和效率。\n   - 在ROS（Robot Operating System）中部署了BEVDet算法，确保其能够在机器人平台上稳定运行。\n\n2. **ROS节点开发与测试**\n   - 参与了模型部署ROS节点的编写及测试，确保模型能够在ROS环境中正确运行。\n   - 编写了六路海康威视GSM摄像头与算力板的通信及数据采集模块，实现了图像的高效预处理。\n\n3. **数据通信实现**\n   - 实现了算力板与下层无人车底层控制系统的数据通信，确保了机器人能够根据检测结果进行路径规划和动作控制。\n\n### 项目成果\n\n- **路径规划**：机器人能够根据BEVDet算法检测到的3D目标，动态规划最优路径，避免障碍物。\n- **杂物检测**：机器人能够准确检测变电站内的杂物，及时报告异常情况，确保变电站的安全。\n- **系统集成**：通过ROS节点的开发和测试，实现了系统的高效集成，确保了各个模块的协同工作。\n\n### 项目经验\n\n- **3D视觉算法**：BEVDet算法在鸟瞰视角下的3D目标检测中表现出色，适合用于需要高精度检测的场景。\n- **模型量化**：使用TensorRT对模型进行量化，显著提高了模型的推理速度，降低了计算资源的消耗。\n- **ROS开发**：ROS节点的开发和测试是项目成功的关键，确保了模型能够在机器人平台上稳定运行。\n- **多摄像头通信**：编写了多路摄像头与算力板的通信及数据采集模块，实现了图像的高效预处理。\n- **数据通信**：实现了算力板与下层无人车底层控制系统的数据通信，确保了机器人能够根据检测结果进行路径规划和动作控制。\n\n### 未来展望\n\n- **算法优化**：进一步优化BEVDet算法，提高检测精度和速度。\n- **系统扩展**：增加更多的传感器和功能模块，提升机器人的综合性能。\n- **应用拓展**：将该技术应用于更多的场景，如工业巡检、安防监控等。\n","source":"_posts/巡检机器人项目经历优化.md","raw":"---\ntitle: 巡检机器人项目经历优化\ncategories:\n  - 嵌入式开发\n  - 机器人技术\ntags:\n  - 3D视觉\n  - BEVDet\n  - TensorRT\n  - ROS\n  - 巡检机器人\nabbrlink: 65043\ndate: 2025-02-18 16:21:05\n---\n\n### 项目背景\n\n在本项目中，我们采用鸟瞰视角的3D视觉算法**BEVDet**，设计并实现了一款巡检机器人。该机器人主要用于变电站的路径规划和杂物检测，确保变电站的安全和高效运行。\n\n### 技术选型与部署\n\n1. **3D目标检测算法选取与部署**\n   - 选择了**BEVDet**算法，该算法在鸟瞰视角下的3D目标检测中表现出色。\n   - 使用TensorRT对模型进行量化，以提高模型的推理速度和效率。\n   - 在ROS（Robot Operating System）中部署了BEVDet算法，确保其能够在机器人平台上稳定运行。\n\n2. **ROS节点开发与测试**\n   - 参与了模型部署ROS节点的编写及测试，确保模型能够在ROS环境中正确运行。\n   - 编写了六路海康威视GSM摄像头与算力板的通信及数据采集模块，实现了图像的高效预处理。\n\n3. **数据通信实现**\n   - 实现了算力板与下层无人车底层控制系统的数据通信，确保了机器人能够根据检测结果进行路径规划和动作控制。\n\n### 项目成果\n\n- **路径规划**：机器人能够根据BEVDet算法检测到的3D目标，动态规划最优路径，避免障碍物。\n- **杂物检测**：机器人能够准确检测变电站内的杂物，及时报告异常情况，确保变电站的安全。\n- **系统集成**：通过ROS节点的开发和测试，实现了系统的高效集成，确保了各个模块的协同工作。\n\n### 项目经验\n\n- **3D视觉算法**：BEVDet算法在鸟瞰视角下的3D目标检测中表现出色，适合用于需要高精度检测的场景。\n- **模型量化**：使用TensorRT对模型进行量化，显著提高了模型的推理速度，降低了计算资源的消耗。\n- **ROS开发**：ROS节点的开发和测试是项目成功的关键，确保了模型能够在机器人平台上稳定运行。\n- **多摄像头通信**：编写了多路摄像头与算力板的通信及数据采集模块，实现了图像的高效预处理。\n- **数据通信**：实现了算力板与下层无人车底层控制系统的数据通信，确保了机器人能够根据检测结果进行路径规划和动作控制。\n\n### 未来展望\n\n- **算法优化**：进一步优化BEVDet算法，提高检测精度和速度。\n- **系统扩展**：增加更多的传感器和功能模块，提升机器人的综合性能。\n- **应用拓展**：将该技术应用于更多的场景，如工业巡检、安防监控等。\n","slug":"巡检机器人项目经历优化","published":1,"updated":"2025-02-18T08:53:58.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io5002emkttf87c6yeo","content":"<h3 id=\"项目背景\">项目背景</h3>\n<p>在本项目中，我们采用鸟瞰视角的3D视觉算法<strong>BEVDet</strong>，设计并实现了一款巡检机器人。该机器人主要用于变电站的路径规划和杂物检测，确保变电站的安全和高效运行。</p>\n<h3 id=\"技术选型与部署\">技术选型与部署</h3>\n<ol>\n<li>\n<p><strong>3D目标检测算法选取与部署</strong></p>\n<ul>\n<li>选择了<strong>BEVDet</strong>算法，该算法在鸟瞰视角下的3D目标检测中表现出色。</li>\n<li>使用TensorRT对模型进行量化，以提高模型的推理速度和效率。</li>\n<li>在ROS（Robot Operating System）中部署了BEVDet算法，确保其能够在机器人平台上稳定运行。</li>\n</ul>\n</li>\n<li>\n<p><strong>ROS节点开发与测试</strong></p>\n<ul>\n<li>参与了模型部署ROS节点的编写及测试，确保模型能够在ROS环境中正确运行。</li>\n<li>编写了六路海康威视GSM摄像头与算力板的通信及数据采集模块，实现了图像的高效预处理。</li>\n</ul>\n</li>\n<li>\n<p><strong>数据通信实现</strong></p>\n<ul>\n<li>实现了算力板与下层无人车底层控制系统的数据通信，确保了机器人能够根据检测结果进行路径规划和动作控制。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"项目成果\">项目成果</h3>\n<ul>\n<li><strong>路径规划</strong>：机器人能够根据BEVDet算法检测到的3D目标，动态规划最优路径，避免障碍物。</li>\n<li><strong>杂物检测</strong>：机器人能够准确检测变电站内的杂物，及时报告异常情况，确保变电站的安全。</li>\n<li><strong>系统集成</strong>：通过ROS节点的开发和测试，实现了系统的高效集成，确保了各个模块的协同工作。</li>\n</ul>\n<h3 id=\"项目经验\">项目经验</h3>\n<ul>\n<li><strong>3D视觉算法</strong>：BEVDet算法在鸟瞰视角下的3D目标检测中表现出色，适合用于需要高精度检测的场景。</li>\n<li><strong>模型量化</strong>：使用TensorRT对模型进行量化，显著提高了模型的推理速度，降低了计算资源的消耗。</li>\n<li><strong>ROS开发</strong>：ROS节点的开发和测试是项目成功的关键，确保了模型能够在机器人平台上稳定运行。</li>\n<li><strong>多摄像头通信</strong>：编写了多路摄像头与算力板的通信及数据采集模块，实现了图像的高效预处理。</li>\n<li><strong>数据通信</strong>：实现了算力板与下层无人车底层控制系统的数据通信，确保了机器人能够根据检测结果进行路径规划和动作控制。</li>\n</ul>\n<h3 id=\"未来展望\">未来展望</h3>\n<ul>\n<li><strong>算法优化</strong>：进一步优化BEVDet算法，提高检测精度和速度。</li>\n<li><strong>系统扩展</strong>：增加更多的传感器和功能模块，提升机器人的综合性能。</li>\n<li><strong>应用拓展</strong>：将该技术应用于更多的场景，如工业巡检、安防监控等。</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqtxn1-0.webp","cover_type":"img","excerpt":"","more":"<h3 id=\"项目背景\">项目背景</h3>\n<p>在本项目中，我们采用鸟瞰视角的3D视觉算法<strong>BEVDet</strong>，设计并实现了一款巡检机器人。该机器人主要用于变电站的路径规划和杂物检测，确保变电站的安全和高效运行。</p>\n<h3 id=\"技术选型与部署\">技术选型与部署</h3>\n<ol>\n<li>\n<p><strong>3D目标检测算法选取与部署</strong></p>\n<ul>\n<li>选择了<strong>BEVDet</strong>算法，该算法在鸟瞰视角下的3D目标检测中表现出色。</li>\n<li>使用TensorRT对模型进行量化，以提高模型的推理速度和效率。</li>\n<li>在ROS（Robot Operating System）中部署了BEVDet算法，确保其能够在机器人平台上稳定运行。</li>\n</ul>\n</li>\n<li>\n<p><strong>ROS节点开发与测试</strong></p>\n<ul>\n<li>参与了模型部署ROS节点的编写及测试，确保模型能够在ROS环境中正确运行。</li>\n<li>编写了六路海康威视GSM摄像头与算力板的通信及数据采集模块，实现了图像的高效预处理。</li>\n</ul>\n</li>\n<li>\n<p><strong>数据通信实现</strong></p>\n<ul>\n<li>实现了算力板与下层无人车底层控制系统的数据通信，确保了机器人能够根据检测结果进行路径规划和动作控制。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"项目成果\">项目成果</h3>\n<ul>\n<li><strong>路径规划</strong>：机器人能够根据BEVDet算法检测到的3D目标，动态规划最优路径，避免障碍物。</li>\n<li><strong>杂物检测</strong>：机器人能够准确检测变电站内的杂物，及时报告异常情况，确保变电站的安全。</li>\n<li><strong>系统集成</strong>：通过ROS节点的开发和测试，实现了系统的高效集成，确保了各个模块的协同工作。</li>\n</ul>\n<h3 id=\"项目经验\">项目经验</h3>\n<ul>\n<li><strong>3D视觉算法</strong>：BEVDet算法在鸟瞰视角下的3D目标检测中表现出色，适合用于需要高精度检测的场景。</li>\n<li><strong>模型量化</strong>：使用TensorRT对模型进行量化，显著提高了模型的推理速度，降低了计算资源的消耗。</li>\n<li><strong>ROS开发</strong>：ROS节点的开发和测试是项目成功的关键，确保了模型能够在机器人平台上稳定运行。</li>\n<li><strong>多摄像头通信</strong>：编写了多路摄像头与算力板的通信及数据采集模块，实现了图像的高效预处理。</li>\n<li><strong>数据通信</strong>：实现了算力板与下层无人车底层控制系统的数据通信，确保了机器人能够根据检测结果进行路径规划和动作控制。</li>\n</ul>\n<h3 id=\"未来展望\">未来展望</h3>\n<ul>\n<li><strong>算法优化</strong>：进一步优化BEVDet算法，提高检测精度和速度。</li>\n<li><strong>系统扩展</strong>：增加更多的传感器和功能模块，提升机器人的综合性能。</li>\n<li><strong>应用拓展</strong>：将该技术应用于更多的场景，如工业巡检、安防监控等。</li>\n</ul>\n"},{"title":"外挂标签","description":"本文汇总外挂标签在网页端的渲染效果，可作为文档进行查询","mathjax":true,"cover":"https://image.aruoshui.fun/i/2024/12/31/vmy92p-0.webp","swiper_index":2,"abbrlink":34757,"date":"2024-03-05T13:01:48.000Z","_content":"\n# 2.外挂标签\n教程参考店长\n{% link 店长教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %}\n\n## 2.1 行内文本样式 text\n\n{% tabs 分栏 %}\n<!-- tab 标签语法 -->\n```Markdown\n{% u 文本内容 %}\n{% emp 文本内容 %}\n{% wavy 文本内容 %}\n{% del 文本内容 %}\n{% kbd 文本内容 %}\n{% psw 文本内容 %}\n```\n<!-- endtab -->\n<!-- tab 示例源码 -->\n```Markdown\n1. 带 {% u 下划线 %} 的文本\n2. 带 {% emp 着重号 %} 的文本\n3. 带 {% wavy 波浪线 %} 的文本\n4. 带 {% del 删除线 %} 的文本\n5. 键盘样式的文本 {% kbd command %} + {% kbd D %}\n6. 密码样式的文本：{% psw 这里没有验证码 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1. 带 {% u 下划线 %} 的文本\n2. 带 {% emp 着重号 %} 的文本\n3. 带 {% wavy 波浪线 %} 的文本\n4. 带 {% del 删除线 %} 的文本\n5. 键盘样式的文本 {% kbd command %} + {% kbd D %}\n6. 密码样式的文本：{% psw 这里没有验证码 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.2 行内文本 span\n\n{% tabs 分栏 %}\n\n\n<!-- tab 标签语法 -->\n```Markdown\n{% span 样式参数(参数以空格划分), 文本内容 %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `字体`: logo, code\n2. `颜色`: red,yellow,green,cyan,blue,gray\n3. `大小`: small, h4, h3, h2, h1, large, huge, ultra\n4. `对齐方向`: left, center, right\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n- 彩色文字\n在一段话中方便插入各种颜色的标签，包括：{% span red, 红色 %}、{% span yellow, 黄色 %}、{% span green, 绿色 %}、{% span cyan, 青色 %}、{% span blue, 蓝色 %}、{% span gray, 灰色 %}。\n- 超大号文字\n文档「开始」页面中的标题部分就是超大号文字。\n{% span center logo large, Volantis %}\n{% span center small, A Wonderful Theme for Hexo %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n- 彩色文字\n在一段话中方便插入各种颜色的标签，包括：{% span red, 红色 %}、{% span yellow, 黄色 %}、{% span green, 绿色 %}、{% span cyan, 青色 %}、{% span blue, 蓝色 %}、{% span gray, 灰色 %}。\n- 超大号文字\n文档「开始」页面中的标题部分就是超大号文字。\n{% span center logo large, Volantis %}\n{% span center small, A Wonderful Theme for Hexo %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n\n## 2.3 段落文本 p\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% p 样式参数(参数以空格划分), 文本内容 %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `字体`: logo, code\n2. `颜色`: red,yellow,green,cyan,blue,gray\n3. `大小`: small, h4, h3, h2, h1, large, huge, ultra\n4. `对齐方向`: left, center, right\n<!-- endtab -->\n\n\n<!-- tab 示例源码 -->\n```Markdown\n- 彩色文字\n在一段话中方便插入各种颜色的标签，包括：{% p red, 红色 %}、{% p yellow, 黄色 %}、{% p green, 绿色 %}、{% p cyan, 青色 %}、{% p blue, 蓝色 %}、{% p gray, 灰色 %}。\n- 超大号文字\n文档「开始」页面中的标题部分就是超大号文字。\n{% p center logo large, Volantis %}\n{% p center small, A Wonderful Theme for Hexo %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n- 彩色文字\n在一段话中方便插入各种颜色的标签，包括：{% p red, 红色 %}、{% p yellow, 黄色 %}、{% p green, 绿色 %}、{% p cyan, 青色 %}、{% p blue, 蓝色 %}、{% p gray, 灰色 %}。\n- 超大号文字\n文档「开始」页面中的标题部分就是超大号文字。\n{% p center logo large, Volantis %}\n{% p center small, A Wonderful Theme for Hexo %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.4 引用note\n\n\n{% tabs 分栏 %}\n\n<!-- tab 通用配置 -->\n\n```Markdown\nnote:\n  # Note tag style values:\n  #  - simple    bs-callout old alert style. Default.\n  #  - modern    bs-callout new (v2-v3) alert style.\n  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.\n  #  - disabled  disable all CSS styles import of note tag.\n  style: simple\n  icons: false\n  border_radius: 3\n  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).\n  # Offset also applied to label tag variables. This option can work with disabled note tag.\n  light_bg_offset: 0\n```\n<!-- endtab -->\n\n<!-- tab 语法格式 -->\n```Markdown\n# 自带icon\n{% note [class] [no-icon] [style] %}\nAny content (support inline tags too.io).\n{% endnote %}\n# 外部icon\n{% note [color] [icon] [style] %}\nAny content (support inline tags too.io).\n{% endnote %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1.自带icon\n\n| 参数    |                             用法                             |\n| ------- | :----------------------------------------------------------: |\n| class   | 【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ） |\n| no-icon |                     【可选】不显示 icon                      |\n| style   | 【可选】可以覆盖配置中的 style （simple/modern/flat/disabled） |\n\n2.外部icon\n\n| 参数    |                             用法                             |\n| ------- | :----------------------------------------------------------: |\n| class   | 【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ） |\n| no-icon | 【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon ) |\n| style   | 【可选】可以覆盖配置中的 style （simple/modern/flat/disabled） |\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n{% folding blue,  1.自带icon %}\n1.`simple`样式\n```Markdown\n{% note simple %}默认 提示块标签{% endnote %}\n\n{% note default simple %}default 提示块标签{% endnote %}\n\n{% note primary simple %}primary 提示块标签{% endnote %}\n\n{% note success simple %}success 提示块标签{% endnote %}\n\n{% note info simple %}info 提示块标签{% endnote %}\n\n{% note warning simple %}warning 提示块标签{% endnote %}\n\n{% note danger simple %}danger 提示块标签{% endnote %}\n```\n2.`modern`样式\n```markdown\n{% note modern %}默认 提示块标签{% endnote %}\n\n{% note default modern %}default 提示块标签{% endnote %}\n\n{% note primary modern %}primary 提示块标签{% endnote %}\n\n{% note success modern %}success 提示块标签{% endnote %}\n\n{% note info modern %}info 提示块标签{% endnote %}\n\n{% note warning modern %}warning 提示块标签{% endnote %}\n\n{% note danger modern %}danger 提示块标签{% endnote %}\n```\n\n3.`flat`样式\n\n```markdown\n{% note flat %}默认 提示块标签{% endnote %}\n\n{% note default flat %}default 提示块标签{% endnote %}\n\n{% note primary flat %}primary 提示块标签{% endnote %}\n\n{% note success flat %}success 提示块标签{% endnote %}\n\n{% note info flat %}info 提示块标签{% endnote %}\n\n{% note warning flat %}warning 提示块标签{% endnote %}\n\n{% note danger flat %}danger 提示块标签{% endnote %}\n```\n\n4.`disabled`样式\n\n```markdown\n{% note disabled %}默认 提示块标签{% endnote %}\n\n{% note default disabled %}default 提示块标签{% endnote %}\n\n{% note primary disabled %}primary 提示块标签{% endnote %}\n\n{% note success disabled %}success 提示块标签{% endnote %}\n\n{% note info disabled %}info 提示块标签{% endnote %}\n\n{% note warning disabled %}warning 提示块标签{% endnote %}\n\n{% note danger disabled %}danger 提示块标签{% endnote %}\n```\n\n5.`no-icon`样式\n\n```markdown\n{% note no-icon %}默认 提示块标签{% endnote %}\n\n{% note default no-icon %}default 提示块标签{% endnote %}\n\n{% note primary no-icon %}primary 提示块标签{% endnote %}\n\n{% note success no-icon %}success 提示块标签{% endnote %}\n\n{% note info no-icon %}info 提示块标签{% endnote %}\n\n{% note warning no-icon %}warning 提示块标签{% endnote %}\n\n{% note danger no-icon %}danger 提示块标签{% endnote %}\n```\n\n{% endfolding %}\n\n\n\n{% folding blue,  2.外部icon %}\n\n1.`simple`样式\n\n```markdown\n{% note 'fab fa-cc-visa' simple %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' simple %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' simple %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' simple%}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' simple %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' simple %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' simple %}前端最讨厌的浏览器{% endnote %}\n```\n\n2.`modern`样式\n\n```markdown\n{% note 'fab fa-cc-visa' modern %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' modern %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' modern %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' modern%}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' modern %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' modern %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' modern %}前端最讨厌的浏览器{% endnote %}\n```\n\n3.`flat`样式\n\n```markdown\n{% note 'fab fa-cc-visa' flat %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' flat %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' flat %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' flat%}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' flat %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' flat %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' flat %}前端最讨厌的浏览器{% endnote %}\n```\n\n4.`disabled`样式\n\n```markdown\n{% note 'fab fa-cc-visa' disabled %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' disabled %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' disabled %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' disabled %}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' disabled %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' disabled %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' disabled %}前端最讨厌的浏览器{% endnote %}\n```\n\n5.`no-icon`样式\n\n```markdown\n{% note no-icon %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue no-icon %}2021年快到了....{% endnote %}\n\n{% note pink no-icon %}小心开车 安全至上{% endnote %}\n\n{% note red no-icon %}这是三片呢？还是四片？{% endnote %}\n\n{% note orange no-icon %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple no-icon %}剪刀石头布{% endnote %}\n\n{% note green no-icon %}前端最讨厌的浏览器{% endnote %}\n```\n\n{% endfolding %}\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n\n{% folding blue,  1.自带icon %}\n1.`simple`样式\n{% note simple %}默认 提示块标签{% endnote %}\n\n{% note default simple %}default 提示块标签{% endnote %}\n\n{% note primary simple %}primary 提示块标签{% endnote %}\n\n{% note success simple %}success 提示块标签{% endnote %}\n\n{% note info simple %}info 提示块标签{% endnote %}\n\n{% note warning simple %}warning 提示块标签{% endnote %}\n\n{% note danger simple %}danger 提示块标签{% endnote %}\n2.`modern`样式\n{% note modern %}默认 提示块标签{% endnote %}\n\n{% note default modern %}default 提示块标签{% endnote %}\n\n{% note primary modern %}primary 提示块标签{% endnote %}\n\n{% note success modern %}success 提示块标签{% endnote %}\n\n{% note info modern %}info 提示块标签{% endnote %}\n\n{% note warning modern %}warning 提示块标签{% endnote %}\n\n{% note danger modern %}danger 提示块标签{% endnote %}\n\n3.`flat`样式\n{% note flat %}默认 提示块标签{% endnote %}\n\n{% note default flat %}default 提示块标签{% endnote %}\n\n{% note primary flat %}primary 提示块标签{% endnote %}\n\n{% note success flat %}success 提示块标签{% endnote %}\n\n{% note info flat %}info 提示块标签{% endnote %}\n\n{% note warning flat %}warning 提示块标签{% endnote %}\n\n{% note danger flat %}danger 提示块标签{% endnote %}\n\n4.`disabled`样式\n\n{% note disabled %}默认 提示块标签{% endnote %}\n\n{% note default disabled %}default 提示块标签{% endnote %}\n\n{% note primary disabled %}primary 提示块标签{% endnote %}\n\n{% note success disabled %}success 提示块标签{% endnote %}\n\n{% note info disabled %}info 提示块标签{% endnote %}\n\n{% note warning disabled %}warning 提示块标签{% endnote %}\n\n{% note danger disabled %}danger 提示块标签{% endnote %}\n\n\n5.`no-icon`样式\n\n{% note no-icon %}默认 提示块标签{% endnote %}\n\n{% note default no-icon %}default 提示块标签{% endnote %}\n\n{% note primary no-icon %}primary 提示块标签{% endnote %}\n\n{% note success no-icon %}success 提示块标签{% endnote %}\n\n{% note info no-icon %}info 提示块标签{% endnote %}\n\n{% note warning no-icon %}warning 提示块标签{% endnote %}\n\n{% note danger no-icon %}danger 提示块标签{% endnote %}\n\n{% endfolding %}\n\n\n\n{% folding blue,  2.外部icon %}\n\n1.`simple`样式\n\n{% note 'fab fa-cc-visa' simple %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' simple %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' simple %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' simple%}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' simple %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' simple %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' simple %}前端最讨厌的浏览器{% endnote %}\n\n\n2.`modern`样式\n\n{% note 'fab fa-cc-visa' modern %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' modern %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' modern %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' modern%}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' modern %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' modern %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' modern %}前端最讨厌的浏览器{% endnote %}\n\n\n3.`flat`样式\n\n{% note 'fab fa-cc-visa' flat %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' flat %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' flat %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' flat%}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' flat %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' flat %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' flat %}前端最讨厌的浏览器{% endnote %}\n\n\n4.`disabled`样式\n\n{% note 'fab fa-cc-visa' disabled %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' disabled %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' disabled %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' disabled %}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' disabled %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' disabled %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' disabled %}前端最讨厌的浏览器{% endnote %}\n\n5.`no-icon`样式\n\n{% note no-icon %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue no-icon %}2021年快到了....{% endnote %}\n\n{% note pink no-icon %}小心开车 安全至上{% endnote %}\n\n{% note red no-icon %}这是三片呢？还是四片？{% endnote %}\n\n{% note orange no-icon %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple no-icon %}剪刀石头布{% endnote %}\n\n{% note green no-icon %}前端最讨厌的浏览器{% endnote %}\n\n{% endfolding %}\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.5 上标标签 tip\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% tip [参数，可选] %}文本内容{% endtip %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `样式`: success,error,warning,bolt,ban,home,sync,cogs,key,bell\n2. `自定义图标`: 支持fontawesome。\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% tip %}default{% endtip %}\n{% tip info %}info{% endtip %}\n{% tip success %}success{% endtip %}\n{% tip error %}error{% endtip %}\n{% tip warning %}warning{% endtip %}\n{% tip bolt %}bolt{% endtip %}\n{% tip ban %}ban{% endtip %}\n{% tip home %}home{% endtip %}\n{% tip sync %}sync{% endtip %}\n{% tip cogs %}cogs{% endtip %}\n{% tip key %}key{% endtip %}\n{% tip bell %}bell{% endtip %}\n{% tip fa-atom %}自定义font awesome图标{% endtip %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% tip %}default{% endtip %}\n{% tip info %}info{% endtip %}\n{% tip success %}success{% endtip %}\n{% tip error %}error{% endtip %}\n{% tip warning %}warning{% endtip %}\n{% tip bolt %}bolt{% endtip %}\n{% tip ban %}ban{% endtip %}\n{% tip home %}home{% endtip %}\n{% tip sync %}sync{% endtip %}\n{% tip cogs %}cogs{% endtip %}\n{% tip key %}key{% endtip %}\n{% tip bell %}bell{% endtip %}\n{% tip fa-atom %}自定义font awesome图标{% endtip %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 2.6 动态标签 anima\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n{% tip [参数，可选] %}文本内容{% endtip %}\n```\n<!-- endtab -->\n<!-- tab 配置参数 -->\n{% note info flat %}\n\n1. 将所需的CSS类添加到图标（或DOM中的任何元素）。\n2. 对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类`faa-parent animated-hover`。（详情见示例及示例源码）\n   You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow\n3. 可以通过给目标元素添加CSS类`faa-fast`或`faa-slow`来控制动画快慢。\n   {% endnote %}\n   <!-- endtab -->\n   <!-- tab 示例源码 -->\n   1.On DOM load（当页面加载时显示动画）\n\n```Markdown\n{% tip warning faa-horizontal animated %}warning{% endtip %}\n{% tip ban faa-flash animated %}ban{% endtip %}\n```\n2.调整动画速度\n```Markdown\n{% tip warning faa-horizontal animated faa-fast %}warning{% endtip %}\n{% tip ban faa-flash animated faa-slow %}ban{% endtip %}\n```\n3.On hover（当鼠标悬停时显示动画）\n```Markdown\n{% tip warning faa-horizontal animated-hover %}warning{% endtip %}\n{% tip ban faa-flash animated-hover %}ban{% endtip %}\n```\n4.On parent hover（当鼠标悬停在父级元素时显示动画）\n```Markdown\n{% tip warning faa-parent animated-hover %}<p class=\"faa-horizontal\">warning</p>{% endtip %}\n{% tip ban faa-parent animated-hover %}<p class=\"faa-flash\">ban</p>{% endtip %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1.On DOM load（当页面加载时显示动画）\n{% tip warning faa-horizontal animated %}warning{% endtip %}\n{% tip ban faa-flash animated %}ban{% endtip %}\n2.调整动画速度\n{% tip warning faa-horizontal animated faa-fast %}warning{% endtip %}\n{% tip ban faa-flash animated faa-slow %}ban{% endtip %}\n3.On hover（当鼠标悬停时显示动画）\n{% tip warning faa-horizontal animated-hover %}warning{% endtip %}\n{% tip ban faa-flash animated-hover %}ban{% endtip %}\n4.On parent hover（当鼠标悬停在父级元素时显示动画）\n{% tip warning faa-parent animated-hover %}<p class=\"faa-horizontal\">warning</p>{% endtip %}\n{% tip ban faa-parent animated-hover %}<p class=\"faa-flash\">ban</p>{% endtip %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.7 复选列表 checkbox\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% checkbox 样式参数（可选）, 文本（支持简单md） %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `样式`: plus, minus, times\n2. `颜色`: red,yellow,green,cyan,blue,gray\n3. `选中状态`: checked\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% checkbox 纯文本测试 %}\n{% checkbox checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %}\n{% checkbox red, 支持自定义颜色 %}\n{% checkbox green checked, 绿色 + 默认选中 %}\n{% checkbox yellow checked, 黄色 + 默认选中 %}\n{% checkbox cyan checked, 青色 + 默认选中 %}\n{% checkbox blue checked, 蓝色 + 默认选中 %}\n{% checkbox plus green checked, 增加 %}\n{% checkbox minus yellow checked, 减少 %}\n{% checkbox times red checked, 叉 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% checkbox 纯文本测试 %}\n{% checkbox checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %}\n{% checkbox red, 支持自定义颜色 %}\n{% checkbox green checked, 绿色 + 默认选中 %}\n{% checkbox yellow checked, 黄色 + 默认选中 %}\n{% checkbox cyan checked, 青色 + 默认选中 %}\n{% checkbox blue checked, 蓝色 + 默认选中 %}\n{% checkbox plus green checked, 增加 %}\n{% checkbox minus yellow checked, 减少 %}\n{% checkbox times red checked, 叉 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.8 单选列表 radio\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% radio 样式参数（可选）, 文本（支持简单md） %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `颜色`: red,yellow,green,cyan,blue,gray\n2. `选中状态`: checked\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% radio 纯文本测试 %}\n{% radio checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %}\n{% radio red, 支持自定义颜色 %}\n{% radio green, 绿色 %}\n{% radio yellow, 黄色 %}\n{% radio cyan, 青色 %}\n{% radio blue, 蓝色 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% radio 纯文本测试 %}\n{% radio checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %}\n{% radio red, 支持自定义颜色 %}\n{% radio green, 绿色 %}\n{% radio yellow, 黄色 %}\n{% radio cyan, 青色 %}\n{% radio blue, 蓝色 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 2.9 时间轴 timeline\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% timeline 时间线标题（可选）[,color] %}\n<!-- timeline 时间节点（标题） -->\n正文内容\n<!-- endtimeline -->\n<!-- timeline 时间节点（标题） -->\n正文内容\n<!-- endtimeline -->\n{% endtimeline %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `title`:标题/时间线\n2. `color`:`timeline`颜色:default(留空) / blue / pink / red / purple / orange / green\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% timeline 时间轴样式,blue %}\n\n<!-- timeline 2020-07-24 [2.6.6 -> 3.0](https://github.com/volantis-x/hexo-theme-volantis/releases) -->\n\n1. 如果有 `hexo-lazyload-image` 插件，需要删除并重新安装最新版本，设置 `lazyload.isSPA: true`。\n2. 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 `use_cdn: true` 则需要删除。\n3. 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。\n4. 2.x 版本的置顶 `top: true` 改为了 `pin: true`，并且同样适用于 `layout: page` 的页面。\n5. 如果使用了 `hexo-offline` 插件，建议卸载，3.0 版本默认开启了 pjax 服务。\n\n<!-- endtimeline -->\n\n<!-- timeline 2020-05-15 [2.6.3 -> 2.6.6](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6) -->\n\n不需要额外处理。\n\n<!-- endtimeline -->\n\n<!-- timeline 2020-04-20 [2.6.2 -> 2.6.3](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) -->\n\n1. 全局搜索 `seotitle` 并替换为 `seo_title`。\n2. group 组件的索引规则有变，使用 group 组件的文章内，`group: group_name` 对应的组件名必须是 `group_name`。\n2. group 组件的列表名优先显示文章的 `short_title` 其次是 `title`。\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% timeline 时间轴样式,blue %}\n\n<!-- timeline 2020-07-24 [2.6.6 -> 3.0](https://github.com/volantis-x/hexo-theme-volantis/releases) -->\n\n1. 如果有 `hexo-lazyload-image` 插件，需要删除并重新安装最新版本，设置 `lazyload.isSPA: true`。\n2. 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 `use_cdn: true` 则需要删除。\n3. 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。\n4. 2.x 版本的置顶 `top: true` 改为了 `pin: true`，并且同样适用于 `layout: page` 的页面。\n5. 如果使用了 `hexo-offline` 插件，建议卸载，3.0 版本默认开启了 pjax 服务。\n\n<!-- endtimeline -->\n\n<!-- timeline 2020-05-15 [2.6.3 -> 2.6.6](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6) -->\n\n不需要额外处理。\n\n<!-- endtimeline -->\n\n<!-- timeline 2020-04-20 [2.6.2 -> 2.6.3](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) -->\n\n1. 全局搜索 `seotitle` 并替换为 `seo_title`。\n2. group 组件的索引规则有变，使用 group 组件的文章内，`group: group_name` 对应的组件名必须是 `group_name`。\n2. group 组件的列表名优先显示文章的 `short_title` 其次是 `title`。\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.10 链接卡片 link\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% link 标题, 链接, 图片链接（可选） %}\n```\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.11 按钮 btns\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% btns 样式参数 %}\n{% cell 标题, 链接, 图片或者图标 %}\n{% cell 标题, 链接, 图片或者图标 %}\n{% endbtns %}\n```\n\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. 圆角样式：rounded, circle\n2. 增加文字样式：可以在容器内增加 `<b>`标题`</b>`和`<p>`描述文字`</p>`\n3. 布局方式：\n   默认为自动宽度，适合视野内只有一两个的情况。\n\n| 参数   | 含义                                   |\n| ------ | -------------------------------------- |\n| wide   | 宽一点的按钮                           |\n| fill   | 填充布局，自动铺满至少一行，多了会换行 |\n| center | 居中，按钮之间是固定间距               |\n| around | 居中分散                               |\n| grid2  | 等宽最多2列，屏幕变窄会适当减少列数    |\n| grid3  | 等宽最多3列，屏幕变窄会适当减少列数    |\n| grid4  | 等宽最多4列，屏幕变窄会适当减少列数    |\n| grid5  | 等宽最多5列，屏幕变窄会适当减少列数    |\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n1.如果需要显示类似「团队成员」之类的一组含有头像的链接\n\n```markdown\n{% btns circle grid5 %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% endbtns %}\n```\n2.或者含有图标的按钮\n```markdown\n{% btns rounded grid5 %}\n{% cell 下载源码, /, fas fa-download %}\n{% cell 查看文档, /, fas fa-book-open %}\n{% endbtns %}\n```\n\n3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中\n```markdown\n{% btns circle center grid5 %}\n<a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>\n  <i class='fab fa-apple'></i>\n  <b>心率管家</b>\n  {% p red, 专业版 %}\n  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'>\n</a>\n<a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>\n  <i class='fab fa-apple'></i>\n  <b>心率管家</b>\n  {% p green, 免费版 %}\n  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'>\n</a>\n{% endbtns %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n\n1.如果需要显示类似「团队成员」之类的一组含有头像的链接\n{% btns circle grid5 %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% endbtns %}\n2.或者含有图标的按钮\n{% btns rounded grid5 %}\n{% cell 下载源码, /, fas fa-download %}\n{% cell 查看文档, /, fas fa-book-open %}\n{% endbtns %}\n3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中\n{% btns circle center grid5 %}\n<a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>\n  <i class='fab fa-apple'></i>\n  <b>心率管家</b>\n  {% p red, 专业版 %}\n  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'>\n</a>\n<a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>\n  <i class='fab fa-apple'></i>\n  <b>心率管家</b>\n  {% p green, 免费版 %}\n  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'>\n</a>\n{% endbtns %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.12 github卡片 ghcard\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% ghcard 用户名, 其它参数（可选） %}\n{% ghcard 用户名/仓库, 其它参数（可选） %}\n```\n\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n使用`,`分割各个参数。写法为：`参数名=参数值`\n以下只写几个常用参数值。\n\n| **参数名**    | 取值                                                         | 释义                             |\n| ------------- | ------------------------------------------------------------ | -------------------------------- |\n| hide          | stars,commits,prs,issues,contribs                            | 隐藏指定统计                     |\n| count_private | true                                                         | 将私人项目贡献添加到总提交计数中 |\n| show_icons    | true                                                         | 显示图标                         |\n| theme         | 查阅:[Available Themes](https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md) | 主题                             |\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n1.用户信息卡片\n\n```Markdown\n| {% ghcard Aruoshui %} | {% ghcard Aruoshui, theme=vue %} |\n| -- | -- |\n| {% ghcard Aruoshui, theme=buefy %} | {% ghcard Aruoshui, theme=solarized-light %} |\n| {% ghcard Aruoshui, theme=onedark %} | {% ghcard Aruoshui, theme=solarized-dark %} |\n| {% ghcard Aruoshui, theme=algolia %} | {% ghcard Aruoshui, theme=calm %} |\n```\n\n2.仓库信息卡片\n\n```markdown\n| {% ghcard Aruoshui/Aruoshui.github.io %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=vue %} |\n| -- | -- |\n| {% ghcard Aruoshui/Aruoshui.github.io, theme=buefy %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=solarized-light %} |\n| {% ghcard Aruoshui/Aruoshui.github.io, theme=onedark %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=solarized-dark %} |\n| {% ghcard Aruoshui/Aruoshui.github.io, theme=algolia %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=calm %} |\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1.用户信息卡片\n\n| {% ghcard Aruoshui %} | {% ghcard Aruoshui, theme=vue %} |\n| -- | -- |\n| {% ghcard Aruoshui, theme=buefy %} | {% ghcard Aruoshui, theme=solarized-light %} |\n| {% ghcard Aruoshui, theme=onedark %} | {% ghcard Aruoshui, theme=solarized-dark %} |\n| {% ghcard Aruoshui, theme=algolia %} | {% ghcard Aruoshui, theme=calm %} |\n\n2.仓库信息卡片\n\n| {% ghcard Aruoshui/Aruoshui.github.io %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=vue %} |\n| -- | -- |\n| {% ghcard Aruoshui/Aruoshui.github.io, theme=buefy %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=solarized-light %} |\n| {% ghcard Aruoshui/Aruoshui.github.io, theme=onedark %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=solarized-dark %} |\n| {% ghcard Aruoshui/Aruoshui.github.io, theme=algolia %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=calm %} |\n\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.13 github徽标 ghbdage\n\n\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% bdage [right],[left],[logo]||[color],[link],[title]||[option] %}\n```\n\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `left`：徽标左边的信息，必选参数。\n2. `right`: 徽标右边的信息，必选参数，\n3. `logo`：徽标图标，图标名称详见[simpleicons](https://simpleicons.org/)，可选参数。\n4. `color`：徽标右边的颜色，可选参数。\n5.  `link`：指向的链接，可选参数。\n6. `title`：徽标的额外信息，可选参数。主要用于优化SEO，但`object`标签不会像`a`标签一样在鼠标悬停显示`title`信息。\n7. `option`：自定义参数，支持[shields.io](https://shields.io/)的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为`name1=value2&name2=value2`。\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n1.基本参数,定义徽标左右文字和图标\n\n```Markdown\n{% bdage Theme,Butterfly %}\n{% bdage Frame,Hexo,hexo %}\n```\n\n2.信息参数，定义徽标右侧内容背景色，指向链接\n\n```markdown\n{% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %}\n//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割\n{% bdage Source,GitHub,GitHub||,https://github.com/ %}\n```\n\n3.拓展参数，支持shields的API的全部参数内容\n\n```markdown\n{% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&logoWidth=20 %}\n//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割\n{% bdage Hosted,Vercel,Vercel||||style=social&logoWidth=20&logoColor=violet %}\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1.基本参数,定义徽标左右文字和图标\n\n{% bdage Theme,Butterfly %}\n{% bdage Frame,Hexo,hexo %}\n\n2.信息参数，定义徽标右侧内容背景色，指向链接\n\n{% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %}\n//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割\n{% bdage Source,GitHub,GitHub||,https://github.com/ %}\n\n3.拓展参数，支持shields的API的全部参数内容\n\n{% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&logoWidth=20 %}\n//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割\n{% bdage Hosted,Vercel,Vercel||||style=social&logoWidth=20&logoColor=violet %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.14 网站卡片 sites\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% sitegroup %}\n{% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %}\n{% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %}\n{% endsitegroup %}\n```\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% sitegroup %}\n{% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %}\n{% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %}\n{% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %}\n{% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %}\n{% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %}\n{% endsitegroup %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% sitegroup %}\n{% site fomalhaut1998, url=https://fomalhaut1998.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %}\n{% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %}\n{% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %}\n{% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %}\n{% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %}\n{% endsitegroup %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.15 行内图片 inlineimage\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% inlineimage 图片链接, height=高度（可选） %}\n```\n\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. `高度`：height=20px\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n```Markdown\n这是 {% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %} 一段话。\n\n这又是 {% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %} 一段话。\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n这是 {% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %} 一段话。\n\n这又是 {% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %} 一段话。\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.16 单张图片 image\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %}\n```\n\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. 图片宽度高度：width=300px, height=32px\n2. 图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）\n3. 占位背景色：bg=#f2f2f2\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n1.添加描述：\n```Markdown\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %}\n```\n2.指定宽度\n```Markdown\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %}\n```\n3.指定宽度并添加描述：\n```Markdown\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %}\n```\n4.设置占位背景色：\n```Markdown\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1.添加描述：\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %}\n2..指定宽度\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %}\n3.指定宽度并添加描述：\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %}\n4.设置占位背景色：\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.17 音频 audio\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% audio 音频链接 %}\n```\n<!-- endtab -->\n\n\n<!-- tab 示例源码 -->\n\n```Markdown\n{% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.18 视频 video\n\n{% tabs 分栏 %}\n<!-- tab 标签语法 -->\n```Markdown\n{% video 视频链接 %}\n```\n<!-- endtab -->\n\n<!-- tab 标签语法 -->\n\n1. `对齐方向`：left, center, right\n2. `列数`：逗号后面直接写列数，支持 1 ～ 4 列。\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n1.100%宽度\n\n```Markdown\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n```\n2.50%宽度\n```Markdown\n{% videos, 2 %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% endvideos %}\n```\n3.25%宽度\n\n```Markdown\n{% videos, 4 %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% endvideos %}\n```\n<!-- endtab -->\n<!-- tab 渲染演示 -->\n\n1.100%宽度\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n2.50%宽度\n{% videos, 2 %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% endvideos %}\n3.25%宽度\n{% videos, 4 %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% endvideos %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.19 相册 gallery\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n1.gallerygroup 相册图库\n```Markdown\n<div class=\"gallery-group-main\">\n{% galleryGroup name description link img-url %}\n{% galleryGroup name description link img-url %}\n{% galleryGroup name description link img-url %}\n</div>\n```\n2.gallery 相册\n```Markdown\n{% gallery %}\nmarkdown 圖片格式\n{% endgallery %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n- gallerygroup 相册图库\n\n| 参数名      | 释义                 |\n| ----------- | -------------------- |\n| name        | 图库名字             |\n| description | 图库描述             |\n| link        | 链接到对应相册的地址 |\n| img-url     | 图库封面             |\n\n- gallery 相册\n\n  区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。**建议在粘贴时故意使用长短、大小、横竖不一的图片**，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n1.gallerygroup 相册图库\n\n```Markdown\n<div class=\"gallery-group-main\">\n{% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 '/gallery/MC/' https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %}\n{% galleryGroup Gundam 哦咧哇gundam哒！ '/gallery/Gundam/' https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %}\n{% galleryGroup I-am-Akilar 某种意义上也算自拍吧 '/gallery/I-am-Akilar/' https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %}\n</div>\n```\n2.gallery 相册\n\n```markdown\n{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n{% endgallery %}\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1.gallerygroup 相册图库\n<div class=\"gallery-group-main\">\n{% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 '/gallery/MC/' https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %}\n{% galleryGroup Gundam 哦咧哇gundam哒！ '/gallery/Gundam/' https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %}\n{% galleryGroup I-am-Akilar 某种意义上也算自拍吧 '/gallery/I-am-Akilar/' https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %}\n</div>\n2.gallery 相册\n\n{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n{% endgallery %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.20 折叠框 folding\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n1.gallerygroup 相册图库\n```Markdown\n{% folding 参数（可选）, 标题 %}\n![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)\n{% endfolding %}\n```\n<!-- tab 参数配置 -->\n\n1. `颜色`：blue, cyan, green, yellow, red\n\n2. `状态`：状态填写 open 代表默认打开。\n\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```markdown\n{% folding 查看图片测试 %}\n\n![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)\n\n{% endfolding %}\n\n{% folding cyan open, 查看默认打开的折叠框 %}\n\n这是一个默认打开的折叠框。\n\n{% endfolding %}\n\n{% folding green, 查看代码测试 %}\n假装这里有代码块（代码块没法嵌套代码块）\n{% endfolding %}\n\n{% folding yellow, 查看列表测试 %}\n\n- haha\n- hehe\n\n{% endfolding %}\n\n{% folding red, 查看嵌套测试 %}\n\n{% folding blue, 查看嵌套测试2 %}\n\n{% folding 查看嵌套测试3 %}\n\nhahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span>\n\n{% endfolding %}\n\n{% endfolding %}\n\n{% endfolding %}\n```\n<!-- endtab -->\n<!-- tab 渲染演示 -->\n\n{% folding 查看图片测试 %}\n\n![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)\n\n{% endfolding %}\n\n{% folding cyan open, 查看默认打开的折叠框 %}\n\n这是一个默认打开的折叠框。\n\n{% endfolding %}\n\n{% folding green, 查看代码测试 %}\n假装这里有代码块（代码块没法嵌套代码块）\n{% endfolding %}\n\n{% folding yellow, 查看列表测试 %}\n\n- haha\n- hehe\n\n{% endfolding %}\n\n{% folding red, 查看嵌套测试 %}\n\n{% folding blue, 查看嵌套测试2 %}\n\n{% folding 查看嵌套测试3 %}\n\nhahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span>\n\n{% endfolding %}\n\n{% endfolding %}\n\n{% endfolding %}\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 2.21 分栏 tab\n\n{% tabs 分栏 %}\n<!-- tab 标签语法 -->\n```markdown\n{% tabs Unique name, [index] %}\n<!-- tab [Tab caption] [@icon] -->\nAny content (support inline tags too).\n<!-- endtab -->\n{% endtabs %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. Unique name :\n\n   - 选项卡块标签的唯一名称，不带逗号。\n\n   - 将在#id中用作每个标签及其索引号的前缀。\n\n   - 如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。\n\n   - 仅当前帖子/页面的URL必须是唯一的！\n\n2. [index]:\n\n   - 活动选项卡的索引号。\n\n   - 如果未指定，将选择第一个标签（1）。\n\n   - 如果index为-1，则不会选择任何选项卡。\n\n   - 可选参数。\n\n3. [Tab caption]:\n\n   - 当前选项卡的标题。\n\n   - 如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。\n\n   - 如果未指定标题，但指定了图标，则标题将为空。\n\n   - 可选参数。\n\n4. [@icon]:\n\n   - FontAwesome图标名称（全名，看起来像“ fas fa-font”）\n\n   - 可以指定带空格或不带空格；\n\n   - 例如’Tab caption @icon’ 和 ‘Tab caption@icon’.\n\n   - 可选参数。\n\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n1.Demo 1 - 预设选择第一个【默认】\n\n```markdown\n{% tabs test1 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n```\n\n2.Demo 2 - 预设选择tabs\n\n```markdown\n{% tabs test2, 3 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n```\n\n3.Demo 3 - 没有预设值\n\n```markdown\n{% tabs test3, -1 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n```\n\n4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名\n\n```markdown\n{% tabs test4 %}\n<!-- tab 第一个Tab -->\n**tab名字为第一个Tab**\n<!-- endtab -->\n\n<!-- tab @fab fa-apple-pay -->\n**只有图标 没有Tab名字**\n<!-- endtab -->\n\n<!-- tab 炸弹@fas fa-bomb -->\n**名字+icon**\n<!-- endtab -->\n{% endtabs %}\n```\n\n\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1.Demo 1 - 预设选择第一个【默认】\n\n{% tabs test1 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n\n2.Demo 2 - 预设选择tabs\n\n{% tabs test2, 3 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n\n3.Demo 3 - 没有预设值\n\n{% tabs test3, -1 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n\n4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名\n\n{% tabs test4 %}\n<!-- tab 第一个Tab -->\n**tab名字为第一个Tab**\n<!-- endtab -->\n\n<!-- tab @fab fa-apple-pay -->\n**只有图标 没有Tab名字**\n<!-- endtab -->\n\n<!-- tab 炸弹@fas fa-bomb -->\n**名字+icon**\n<!-- endtab -->\n{% endtabs %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 2.22 诗词标签 poem\n\n{% tabs 分栏 %}\n\n<!-- tab标签语法 -->\n\n```markdown\n{% poem [title],[author] %}\n诗词内容\n{% endpoem %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. `title`：诗词标题\n2. `author`：作者，可以不写\n   <!-- endtab -->\n   <!-- tab 示例源码 -->\n\n```Markdown\n{% poem 水调歌头,苏轼 %}\n丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。\n明月几时有？把酒问青天。\n不知天上宫阙，今夕是何年？\n我欲乘风归去，又恐琼楼玉宇，高处不胜寒。\n起舞弄清影，何似在人间？\n\n转朱阁，低绮户，照无眠。\n不应有恨，何事长向别时圆？\n人有悲欢离合，月有阴晴圆缺，此事古难全。\n但愿人长久，千里共婵娟。\n{% endpoem %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% poem 水调歌头,苏轼 %}\n丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。\n明月几时有？把酒问青天。\n不知天上宫阙，今夕是何年？\n我欲乘风归去，又恐琼楼玉宇，高处不胜寒。\n起舞弄清影，何似在人间？\n\n转朱阁，低绮户，照无眠。\n不应有恨，何事长向别时圆？\n人有悲欢离合，月有阴晴圆缺，此事古难全。\n但愿人长久，千里共婵娟。\n{% endpoem %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.23 阿里图标 icon\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% icon [icon-xxxx],[font-size] %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. `icon-xxxx`：表示图标`font-class`,可以在自己的阿里矢量图标库项目的`font-class`引用方案内查询并复制。\n2. `font-size`：表示图标大小，直接填写数字即可，单位为`em`。图标大小默认值为`1em`。\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% icon icon-rat_zi %}{% icon icon-rat,2 %}\n\n{% icon icon-ox_chou,3 %}{% icon icon-ox,4 %}\n\n{% icon icon-tiger_yin,5 %}{% icon icon-tiger,6 %}\n\n{% icon icon-rabbit_mao,1 %}{% icon icon-rabbit,2 %}\n\n{% icon icon-dragon_chen,3 %}{% icon icon-dragon,4 %}\n\n{% icon icon-snake_si,5 %}{% icon icon-snake,6 %}\n\n{% icon icon-horse_wu %}{% icon icon-horse,2 %}\n\n{% icon icon-goat_wei,3 %}{% icon icon-goat,4 %}\n\n{% icon icon-monkey_shen,5 %}{% icon icon-monkey,6 %}\n\n{% icon icon-rooster_you %}{% icon icon-rooster,2 %}\n\n{% icon icon-dog_xu,3 %}{% icon icon-dog,4 %}\n\n{% icon icon-boar_hai,5 %}{% icon icon-boar,6 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% icon icon-rat_zi %}{% icon icon-rat,2 %}\n\n{% icon icon-ox_chou,3 %}{% icon icon-ox,4 %}\n\n{% icon icon-tiger_yin,5 %}{% icon icon-tiger,6 %}\n\n{% icon icon-rabbit_mao,1 %}{% icon icon-rabbit,2 %}\n\n{% icon icon-dragon_chen,3 %}{% icon icon-dragon,4 %}\n\n{% icon icon-snake_si,5 %}{% icon icon-snake,6 %}\n\n{% icon icon-horse_wu %}{% icon icon-horse,2 %}\n\n{% icon icon-goat_wei,3 %}{% icon icon-goat,4 %}\n\n{% icon icon-monkey_shen,5 %}{% icon icon-monkey,6 %}\n\n{% icon icon-rooster_you %}{% icon icon-rooster,2 %}\n\n{% icon icon-dog_xu,3 %}{% icon icon-dog,4 %}\n\n{% icon icon-boar_hai,5 %}{% icon icon-boar,6 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.25  进度条 progress\n\n{% note info flat %}\n\n进度条标签参考[沂佰孜猫-给HEXO文章添加彩色进度条](https://rongbuqiu.com/jdt.html)。\n源样式提取自[Cuteen](https://zwying0814.gitbook.io/cuteen/)主题。\n\n{% endnote %}\n\n{% tabs 分栏 %}\n\n<!-- tab 参数配置 -->\n\n```Markdown\n{% progress [width] [color] [text] %}\n```\n<!-- endtab -->\n\n<!-- tab 标签语法 -->\n\n1. `width`: 0到100的阿拉伯数字\n2. `color`: 颜色，取值有red,yellow,green,cyan,blue,gray\n3. `text`:进度条上的文字内容\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% progress 10 red 进度条样式预览 %}\n{% progress 30 yellow 进度条样式预览 %}\n{% progress 50 green 进度条样式预览 %}\n{% progress 70 cyan 进度条样式预览 %}\n{% progress 90 blue 进度条样式预览 %}\n{% progress 100 gray 进度条样式预览 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% progress 10 red 进度条样式预览 %}\n{% progress 30 yellow 进度条样式预览 %}\n{% progress 50 green 进度条样式预览 %}\n{% progress 70 cyan 进度条样式预览 %}\n{% progress 90 blue 进度条样式预览 %}\n{% progress 100 gray 进度条样式预览 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.26 注释 notation\n{% tabs 分栏 %}\n<!-- tab 标签语法 -->\n```Markdown\n{% nota [label] , [text] %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. `label`: 注释词汇\n\n2. `text`: 悬停显示的注解内容\n\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 2.27 气泡注释 bubble\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% bubble [content] , [notation] ,[background-color] %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. `content`: 注释词汇\n2. `notation`: 悬停显示的注解内容\n3. `background-color`: 可选，气泡背景色。默认为“#71a4e3”\n <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的{% bubble 兄弟相邻选择器,\"例如 h1 + p {margin-top:50px;}\" %}，{% bubble flex布局,\"Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性\",\"#ec5830\" %}，{% bubble transform变换,\"transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。\",\"#1db675\" %}，animation的{% bubble 贝塞尔速度曲线,\"贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋\",\"#de4489\" %}写法，还有今天刚看到的{% bubble clip-path,\"clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。\",\"#868fd7\" %}属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的{% bubble 兄弟相邻选择器,\"例如 h1 + p {margin-top:50px;}\" %}，{% bubble flex布局,\"Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性\",\"#ec5830\" %}，{% bubble transform变换,\"transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。\",\"#1db675\" %}，animation的{% bubble 贝塞尔速度曲线,\"贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋\",\"#de4489\" %}写法，还有今天刚看到的{% bubble clip-path,\"clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。\",\"#868fd7\" %}属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.28 引用文献 reference\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% referto [id] , [literature] %}\n{% referfrom [id] , [literature] , [url] %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. referto 引用上标\n\n   - `id`: 上标序号内容，需与referfrom标签的id对应才能实现跳转\n\n   - `literature`: 引用的参考文献名称\n\n2. referfrom 引用出处\n\n   - `id`: 序号内容，需与referto标签的id对应才能实现 跳转\n\n   - `literature`: 引用的参考文献名称\n\n   - `url`: 引用的参考文献链接，可省略\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n```Markdown\n{% span center logo large, 历史上的今天 %}\n1. 1475年：意大利文艺复兴时期的雕塑家米开朗基罗{% referto '[1]','米开朗基罗' %}诞生。他是文艺复兴时期最重要的艺术家之一，作品包括《大卫像》和《圣母玛利亚》等。\n2. 1899年：美国发明家、电影制片人威廉·赛勒斯·福克斯{% referto '[2]','电影制片人威廉·赛勒斯·福克斯' %}诞生。他是电影行业的先驱，创立了20世纪福克斯影业公司。\n3. 1974年：计算机科学家维特·柏恩斯·李发表了有关万维网{% referto '[3]','万维网的提案' %}的提案，奠定了互联网发展的基础。\n4.  1998年：谷歌公司成立，创始人拉里·佩奇和谢尔盖·布林将互联网搜索引擎{% referto '[4]','谷歌搜索引擎的历史' %}带入新的高度，成为全球最大的搜索引擎之一。\n5. 2007年：苹果公司推出首款iPhone{% referto '[5]','首款iPhone手机' %}，引领了智能手机革命，改变了人们的通讯和生活方式。\n\n{% referfrom '[1]','米开朗基罗','https://en.wikipedia.org/wiki/Michelangelo' %}\n{% referfrom '[2]','电影制片人威廉·赛勒斯·福克斯','https://en.wikipedia.org/wiki/William_Fox_(producer)' %}\n{% referfrom '[3]','万维网的提案','https://en.wikipedia.org/wiki/Tim_Berners-Lee' %}\n{% referfrom '[4]','谷歌搜索引擎的历史','https://en.wikipedia.org/wiki/History_of_Google' %}\n{% referfrom '[5]','首款iPhone手机','https://en.wikipedia.org/wiki/IPhone_(1st_generation)' %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% span center logo large, 历史上的今天 %}\n1. 1475年：意大利文艺复兴时期的雕塑家米开朗基罗{% referto '[1]','米开朗基罗' %}诞生。他是文艺复兴时期最重要的艺术家之一，作品包括《大卫像》和《圣母玛利亚》等。\n2. 1899年：美国发明家、电影制片人威廉·赛勒斯·福克斯{% referto '[2]','电影制片人威廉·赛勒斯·福克斯' %}诞生。他是电影行业的先驱，创立了20世纪福克斯影业公司。\n3. 1974年：计算机科学家维特·柏恩斯·李发表了有关万维网{% referto '[3]','万维网的提案' %}的提案，奠定了互联网发展的基础。\n4.  1998年：谷歌公司成立，创始人拉里·佩奇和谢尔盖·布林将互联网搜索引擎{% referto '[4]','谷歌搜索引擎的历史' %}带入新的高度，成为全球最大的搜索引擎之一。\n5. 2007年：苹果公司推出首款iPhone{% referto '[5]','首款iPhone手机' %}，引领了智能手机革命，改变了人们的通讯和生活方式。\n\n{% referfrom '[1]','米开朗基罗','https://en.wikipedia.org/wiki/Michelangelo' %}\n{% referfrom '[2]','电影制片人威廉·赛勒斯·福克斯','https://en.wikipedia.org/wiki/William_Fox_(producer)' %}\n{% referfrom '[3]','万维网的提案','https://en.wikipedia.org/wiki/Tim_Berners-Lee' %}\n{% referfrom '[4]','谷歌搜索引擎的历史','https://en.wikipedia.org/wiki/History_of_Google' %}\n{% referfrom '[5]','首款iPhone手机','https://en.wikipedia.org/wiki/IPhone_(1st_generation)' %}\n\n\n<!-- endtab -->\n\n{% endtabs %}\n\n","source":"_posts/外挂标签.md","raw":"---\ntitle: 外挂标签\ndescription: 本文汇总外挂标签在网页端的渲染效果，可作为文档进行查询\ntags:\n  - Markdown\n  - 外挂标签\ncategories:\n  - 演示\nmathjax: true\ncover: https://image.aruoshui.fun/i/2024/12/31/vmy92p-0.webp\nswiper_index: 2\nabbrlink: 34757\ndate: 2024-03-05 21:01:48\n---\n\n# 2.外挂标签\n教程参考店长\n{% link 店长教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %}\n\n## 2.1 行内文本样式 text\n\n{% tabs 分栏 %}\n<!-- tab 标签语法 -->\n```Markdown\n{% u 文本内容 %}\n{% emp 文本内容 %}\n{% wavy 文本内容 %}\n{% del 文本内容 %}\n{% kbd 文本内容 %}\n{% psw 文本内容 %}\n```\n<!-- endtab -->\n<!-- tab 示例源码 -->\n```Markdown\n1. 带 {% u 下划线 %} 的文本\n2. 带 {% emp 着重号 %} 的文本\n3. 带 {% wavy 波浪线 %} 的文本\n4. 带 {% del 删除线 %} 的文本\n5. 键盘样式的文本 {% kbd command %} + {% kbd D %}\n6. 密码样式的文本：{% psw 这里没有验证码 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1. 带 {% u 下划线 %} 的文本\n2. 带 {% emp 着重号 %} 的文本\n3. 带 {% wavy 波浪线 %} 的文本\n4. 带 {% del 删除线 %} 的文本\n5. 键盘样式的文本 {% kbd command %} + {% kbd D %}\n6. 密码样式的文本：{% psw 这里没有验证码 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.2 行内文本 span\n\n{% tabs 分栏 %}\n\n\n<!-- tab 标签语法 -->\n```Markdown\n{% span 样式参数(参数以空格划分), 文本内容 %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `字体`: logo, code\n2. `颜色`: red,yellow,green,cyan,blue,gray\n3. `大小`: small, h4, h3, h2, h1, large, huge, ultra\n4. `对齐方向`: left, center, right\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n- 彩色文字\n在一段话中方便插入各种颜色的标签，包括：{% span red, 红色 %}、{% span yellow, 黄色 %}、{% span green, 绿色 %}、{% span cyan, 青色 %}、{% span blue, 蓝色 %}、{% span gray, 灰色 %}。\n- 超大号文字\n文档「开始」页面中的标题部分就是超大号文字。\n{% span center logo large, Volantis %}\n{% span center small, A Wonderful Theme for Hexo %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n- 彩色文字\n在一段话中方便插入各种颜色的标签，包括：{% span red, 红色 %}、{% span yellow, 黄色 %}、{% span green, 绿色 %}、{% span cyan, 青色 %}、{% span blue, 蓝色 %}、{% span gray, 灰色 %}。\n- 超大号文字\n文档「开始」页面中的标题部分就是超大号文字。\n{% span center logo large, Volantis %}\n{% span center small, A Wonderful Theme for Hexo %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n\n## 2.3 段落文本 p\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% p 样式参数(参数以空格划分), 文本内容 %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `字体`: logo, code\n2. `颜色`: red,yellow,green,cyan,blue,gray\n3. `大小`: small, h4, h3, h2, h1, large, huge, ultra\n4. `对齐方向`: left, center, right\n<!-- endtab -->\n\n\n<!-- tab 示例源码 -->\n```Markdown\n- 彩色文字\n在一段话中方便插入各种颜色的标签，包括：{% p red, 红色 %}、{% p yellow, 黄色 %}、{% p green, 绿色 %}、{% p cyan, 青色 %}、{% p blue, 蓝色 %}、{% p gray, 灰色 %}。\n- 超大号文字\n文档「开始」页面中的标题部分就是超大号文字。\n{% p center logo large, Volantis %}\n{% p center small, A Wonderful Theme for Hexo %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n- 彩色文字\n在一段话中方便插入各种颜色的标签，包括：{% p red, 红色 %}、{% p yellow, 黄色 %}、{% p green, 绿色 %}、{% p cyan, 青色 %}、{% p blue, 蓝色 %}、{% p gray, 灰色 %}。\n- 超大号文字\n文档「开始」页面中的标题部分就是超大号文字。\n{% p center logo large, Volantis %}\n{% p center small, A Wonderful Theme for Hexo %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.4 引用note\n\n\n{% tabs 分栏 %}\n\n<!-- tab 通用配置 -->\n\n```Markdown\nnote:\n  # Note tag style values:\n  #  - simple    bs-callout old alert style. Default.\n  #  - modern    bs-callout new (v2-v3) alert style.\n  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.\n  #  - disabled  disable all CSS styles import of note tag.\n  style: simple\n  icons: false\n  border_radius: 3\n  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).\n  # Offset also applied to label tag variables. This option can work with disabled note tag.\n  light_bg_offset: 0\n```\n<!-- endtab -->\n\n<!-- tab 语法格式 -->\n```Markdown\n# 自带icon\n{% note [class] [no-icon] [style] %}\nAny content (support inline tags too.io).\n{% endnote %}\n# 外部icon\n{% note [color] [icon] [style] %}\nAny content (support inline tags too.io).\n{% endnote %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1.自带icon\n\n| 参数    |                             用法                             |\n| ------- | :----------------------------------------------------------: |\n| class   | 【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ） |\n| no-icon |                     【可选】不显示 icon                      |\n| style   | 【可选】可以覆盖配置中的 style （simple/modern/flat/disabled） |\n\n2.外部icon\n\n| 参数    |                             用法                             |\n| ------- | :----------------------------------------------------------: |\n| class   | 【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ） |\n| no-icon | 【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon ) |\n| style   | 【可选】可以覆盖配置中的 style （simple/modern/flat/disabled） |\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n{% folding blue,  1.自带icon %}\n1.`simple`样式\n```Markdown\n{% note simple %}默认 提示块标签{% endnote %}\n\n{% note default simple %}default 提示块标签{% endnote %}\n\n{% note primary simple %}primary 提示块标签{% endnote %}\n\n{% note success simple %}success 提示块标签{% endnote %}\n\n{% note info simple %}info 提示块标签{% endnote %}\n\n{% note warning simple %}warning 提示块标签{% endnote %}\n\n{% note danger simple %}danger 提示块标签{% endnote %}\n```\n2.`modern`样式\n```markdown\n{% note modern %}默认 提示块标签{% endnote %}\n\n{% note default modern %}default 提示块标签{% endnote %}\n\n{% note primary modern %}primary 提示块标签{% endnote %}\n\n{% note success modern %}success 提示块标签{% endnote %}\n\n{% note info modern %}info 提示块标签{% endnote %}\n\n{% note warning modern %}warning 提示块标签{% endnote %}\n\n{% note danger modern %}danger 提示块标签{% endnote %}\n```\n\n3.`flat`样式\n\n```markdown\n{% note flat %}默认 提示块标签{% endnote %}\n\n{% note default flat %}default 提示块标签{% endnote %}\n\n{% note primary flat %}primary 提示块标签{% endnote %}\n\n{% note success flat %}success 提示块标签{% endnote %}\n\n{% note info flat %}info 提示块标签{% endnote %}\n\n{% note warning flat %}warning 提示块标签{% endnote %}\n\n{% note danger flat %}danger 提示块标签{% endnote %}\n```\n\n4.`disabled`样式\n\n```markdown\n{% note disabled %}默认 提示块标签{% endnote %}\n\n{% note default disabled %}default 提示块标签{% endnote %}\n\n{% note primary disabled %}primary 提示块标签{% endnote %}\n\n{% note success disabled %}success 提示块标签{% endnote %}\n\n{% note info disabled %}info 提示块标签{% endnote %}\n\n{% note warning disabled %}warning 提示块标签{% endnote %}\n\n{% note danger disabled %}danger 提示块标签{% endnote %}\n```\n\n5.`no-icon`样式\n\n```markdown\n{% note no-icon %}默认 提示块标签{% endnote %}\n\n{% note default no-icon %}default 提示块标签{% endnote %}\n\n{% note primary no-icon %}primary 提示块标签{% endnote %}\n\n{% note success no-icon %}success 提示块标签{% endnote %}\n\n{% note info no-icon %}info 提示块标签{% endnote %}\n\n{% note warning no-icon %}warning 提示块标签{% endnote %}\n\n{% note danger no-icon %}danger 提示块标签{% endnote %}\n```\n\n{% endfolding %}\n\n\n\n{% folding blue,  2.外部icon %}\n\n1.`simple`样式\n\n```markdown\n{% note 'fab fa-cc-visa' simple %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' simple %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' simple %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' simple%}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' simple %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' simple %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' simple %}前端最讨厌的浏览器{% endnote %}\n```\n\n2.`modern`样式\n\n```markdown\n{% note 'fab fa-cc-visa' modern %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' modern %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' modern %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' modern%}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' modern %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' modern %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' modern %}前端最讨厌的浏览器{% endnote %}\n```\n\n3.`flat`样式\n\n```markdown\n{% note 'fab fa-cc-visa' flat %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' flat %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' flat %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' flat%}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' flat %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' flat %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' flat %}前端最讨厌的浏览器{% endnote %}\n```\n\n4.`disabled`样式\n\n```markdown\n{% note 'fab fa-cc-visa' disabled %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' disabled %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' disabled %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' disabled %}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' disabled %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' disabled %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' disabled %}前端最讨厌的浏览器{% endnote %}\n```\n\n5.`no-icon`样式\n\n```markdown\n{% note no-icon %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue no-icon %}2021年快到了....{% endnote %}\n\n{% note pink no-icon %}小心开车 安全至上{% endnote %}\n\n{% note red no-icon %}这是三片呢？还是四片？{% endnote %}\n\n{% note orange no-icon %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple no-icon %}剪刀石头布{% endnote %}\n\n{% note green no-icon %}前端最讨厌的浏览器{% endnote %}\n```\n\n{% endfolding %}\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n\n{% folding blue,  1.自带icon %}\n1.`simple`样式\n{% note simple %}默认 提示块标签{% endnote %}\n\n{% note default simple %}default 提示块标签{% endnote %}\n\n{% note primary simple %}primary 提示块标签{% endnote %}\n\n{% note success simple %}success 提示块标签{% endnote %}\n\n{% note info simple %}info 提示块标签{% endnote %}\n\n{% note warning simple %}warning 提示块标签{% endnote %}\n\n{% note danger simple %}danger 提示块标签{% endnote %}\n2.`modern`样式\n{% note modern %}默认 提示块标签{% endnote %}\n\n{% note default modern %}default 提示块标签{% endnote %}\n\n{% note primary modern %}primary 提示块标签{% endnote %}\n\n{% note success modern %}success 提示块标签{% endnote %}\n\n{% note info modern %}info 提示块标签{% endnote %}\n\n{% note warning modern %}warning 提示块标签{% endnote %}\n\n{% note danger modern %}danger 提示块标签{% endnote %}\n\n3.`flat`样式\n{% note flat %}默认 提示块标签{% endnote %}\n\n{% note default flat %}default 提示块标签{% endnote %}\n\n{% note primary flat %}primary 提示块标签{% endnote %}\n\n{% note success flat %}success 提示块标签{% endnote %}\n\n{% note info flat %}info 提示块标签{% endnote %}\n\n{% note warning flat %}warning 提示块标签{% endnote %}\n\n{% note danger flat %}danger 提示块标签{% endnote %}\n\n4.`disabled`样式\n\n{% note disabled %}默认 提示块标签{% endnote %}\n\n{% note default disabled %}default 提示块标签{% endnote %}\n\n{% note primary disabled %}primary 提示块标签{% endnote %}\n\n{% note success disabled %}success 提示块标签{% endnote %}\n\n{% note info disabled %}info 提示块标签{% endnote %}\n\n{% note warning disabled %}warning 提示块标签{% endnote %}\n\n{% note danger disabled %}danger 提示块标签{% endnote %}\n\n\n5.`no-icon`样式\n\n{% note no-icon %}默认 提示块标签{% endnote %}\n\n{% note default no-icon %}default 提示块标签{% endnote %}\n\n{% note primary no-icon %}primary 提示块标签{% endnote %}\n\n{% note success no-icon %}success 提示块标签{% endnote %}\n\n{% note info no-icon %}info 提示块标签{% endnote %}\n\n{% note warning no-icon %}warning 提示块标签{% endnote %}\n\n{% note danger no-icon %}danger 提示块标签{% endnote %}\n\n{% endfolding %}\n\n\n\n{% folding blue,  2.外部icon %}\n\n1.`simple`样式\n\n{% note 'fab fa-cc-visa' simple %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' simple %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' simple %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' simple%}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' simple %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' simple %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' simple %}前端最讨厌的浏览器{% endnote %}\n\n\n2.`modern`样式\n\n{% note 'fab fa-cc-visa' modern %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' modern %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' modern %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' modern%}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' modern %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' modern %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' modern %}前端最讨厌的浏览器{% endnote %}\n\n\n3.`flat`样式\n\n{% note 'fab fa-cc-visa' flat %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' flat %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' flat %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' flat%}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' flat %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' flat %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' flat %}前端最讨厌的浏览器{% endnote %}\n\n\n4.`disabled`样式\n\n{% note 'fab fa-cc-visa' disabled %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue 'fas fa-bullhorn' disabled %}2021年快到了....{% endnote %}\n\n{% note pink 'fas fa-car-crash' disabled %}小心开车 安全至上{% endnote %}\n\n{% note red 'fas fa-fan' disabled %}这是三片呢？还是四片？{% endnote %}\n\n{% note orange 'fas fa-battery-half' disabled %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple 'far fa-hand-scissors' disabled %}剪刀石头布{% endnote %}\n\n{% note green 'fab fa-internet-explorer' disabled %}前端最讨厌的浏览器{% endnote %}\n\n5.`no-icon`样式\n\n{% note no-icon %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note blue no-icon %}2021年快到了....{% endnote %}\n\n{% note pink no-icon %}小心开车 安全至上{% endnote %}\n\n{% note red no-icon %}这是三片呢？还是四片？{% endnote %}\n\n{% note orange no-icon %}你是刷 Visa 还是 UnionPay{% endnote %}\n\n{% note purple no-icon %}剪刀石头布{% endnote %}\n\n{% note green no-icon %}前端最讨厌的浏览器{% endnote %}\n\n{% endfolding %}\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.5 上标标签 tip\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% tip [参数，可选] %}文本内容{% endtip %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `样式`: success,error,warning,bolt,ban,home,sync,cogs,key,bell\n2. `自定义图标`: 支持fontawesome。\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% tip %}default{% endtip %}\n{% tip info %}info{% endtip %}\n{% tip success %}success{% endtip %}\n{% tip error %}error{% endtip %}\n{% tip warning %}warning{% endtip %}\n{% tip bolt %}bolt{% endtip %}\n{% tip ban %}ban{% endtip %}\n{% tip home %}home{% endtip %}\n{% tip sync %}sync{% endtip %}\n{% tip cogs %}cogs{% endtip %}\n{% tip key %}key{% endtip %}\n{% tip bell %}bell{% endtip %}\n{% tip fa-atom %}自定义font awesome图标{% endtip %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% tip %}default{% endtip %}\n{% tip info %}info{% endtip %}\n{% tip success %}success{% endtip %}\n{% tip error %}error{% endtip %}\n{% tip warning %}warning{% endtip %}\n{% tip bolt %}bolt{% endtip %}\n{% tip ban %}ban{% endtip %}\n{% tip home %}home{% endtip %}\n{% tip sync %}sync{% endtip %}\n{% tip cogs %}cogs{% endtip %}\n{% tip key %}key{% endtip %}\n{% tip bell %}bell{% endtip %}\n{% tip fa-atom %}自定义font awesome图标{% endtip %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 2.6 动态标签 anima\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n{% tip [参数，可选] %}文本内容{% endtip %}\n```\n<!-- endtab -->\n<!-- tab 配置参数 -->\n{% note info flat %}\n\n1. 将所需的CSS类添加到图标（或DOM中的任何元素）。\n2. 对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类`faa-parent animated-hover`。（详情见示例及示例源码）\n   You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow\n3. 可以通过给目标元素添加CSS类`faa-fast`或`faa-slow`来控制动画快慢。\n   {% endnote %}\n   <!-- endtab -->\n   <!-- tab 示例源码 -->\n   1.On DOM load（当页面加载时显示动画）\n\n```Markdown\n{% tip warning faa-horizontal animated %}warning{% endtip %}\n{% tip ban faa-flash animated %}ban{% endtip %}\n```\n2.调整动画速度\n```Markdown\n{% tip warning faa-horizontal animated faa-fast %}warning{% endtip %}\n{% tip ban faa-flash animated faa-slow %}ban{% endtip %}\n```\n3.On hover（当鼠标悬停时显示动画）\n```Markdown\n{% tip warning faa-horizontal animated-hover %}warning{% endtip %}\n{% tip ban faa-flash animated-hover %}ban{% endtip %}\n```\n4.On parent hover（当鼠标悬停在父级元素时显示动画）\n```Markdown\n{% tip warning faa-parent animated-hover %}<p class=\"faa-horizontal\">warning</p>{% endtip %}\n{% tip ban faa-parent animated-hover %}<p class=\"faa-flash\">ban</p>{% endtip %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1.On DOM load（当页面加载时显示动画）\n{% tip warning faa-horizontal animated %}warning{% endtip %}\n{% tip ban faa-flash animated %}ban{% endtip %}\n2.调整动画速度\n{% tip warning faa-horizontal animated faa-fast %}warning{% endtip %}\n{% tip ban faa-flash animated faa-slow %}ban{% endtip %}\n3.On hover（当鼠标悬停时显示动画）\n{% tip warning faa-horizontal animated-hover %}warning{% endtip %}\n{% tip ban faa-flash animated-hover %}ban{% endtip %}\n4.On parent hover（当鼠标悬停在父级元素时显示动画）\n{% tip warning faa-parent animated-hover %}<p class=\"faa-horizontal\">warning</p>{% endtip %}\n{% tip ban faa-parent animated-hover %}<p class=\"faa-flash\">ban</p>{% endtip %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.7 复选列表 checkbox\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% checkbox 样式参数（可选）, 文本（支持简单md） %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `样式`: plus, minus, times\n2. `颜色`: red,yellow,green,cyan,blue,gray\n3. `选中状态`: checked\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% checkbox 纯文本测试 %}\n{% checkbox checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %}\n{% checkbox red, 支持自定义颜色 %}\n{% checkbox green checked, 绿色 + 默认选中 %}\n{% checkbox yellow checked, 黄色 + 默认选中 %}\n{% checkbox cyan checked, 青色 + 默认选中 %}\n{% checkbox blue checked, 蓝色 + 默认选中 %}\n{% checkbox plus green checked, 增加 %}\n{% checkbox minus yellow checked, 减少 %}\n{% checkbox times red checked, 叉 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% checkbox 纯文本测试 %}\n{% checkbox checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %}\n{% checkbox red, 支持自定义颜色 %}\n{% checkbox green checked, 绿色 + 默认选中 %}\n{% checkbox yellow checked, 黄色 + 默认选中 %}\n{% checkbox cyan checked, 青色 + 默认选中 %}\n{% checkbox blue checked, 蓝色 + 默认选中 %}\n{% checkbox plus green checked, 增加 %}\n{% checkbox minus yellow checked, 减少 %}\n{% checkbox times red checked, 叉 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.8 单选列表 radio\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% radio 样式参数（可选）, 文本（支持简单md） %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `颜色`: red,yellow,green,cyan,blue,gray\n2. `选中状态`: checked\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% radio 纯文本测试 %}\n{% radio checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %}\n{% radio red, 支持自定义颜色 %}\n{% radio green, 绿色 %}\n{% radio yellow, 黄色 %}\n{% radio cyan, 青色 %}\n{% radio blue, 蓝色 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% radio 纯文本测试 %}\n{% radio checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %}\n{% radio red, 支持自定义颜色 %}\n{% radio green, 绿色 %}\n{% radio yellow, 黄色 %}\n{% radio cyan, 青色 %}\n{% radio blue, 蓝色 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 2.9 时间轴 timeline\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% timeline 时间线标题（可选）[,color] %}\n<!-- timeline 时间节点（标题） -->\n正文内容\n<!-- endtimeline -->\n<!-- timeline 时间节点（标题） -->\n正文内容\n<!-- endtimeline -->\n{% endtimeline %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `title`:标题/时间线\n2. `color`:`timeline`颜色:default(留空) / blue / pink / red / purple / orange / green\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% timeline 时间轴样式,blue %}\n\n<!-- timeline 2020-07-24 [2.6.6 -> 3.0](https://github.com/volantis-x/hexo-theme-volantis/releases) -->\n\n1. 如果有 `hexo-lazyload-image` 插件，需要删除并重新安装最新版本，设置 `lazyload.isSPA: true`。\n2. 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 `use_cdn: true` 则需要删除。\n3. 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。\n4. 2.x 版本的置顶 `top: true` 改为了 `pin: true`，并且同样适用于 `layout: page` 的页面。\n5. 如果使用了 `hexo-offline` 插件，建议卸载，3.0 版本默认开启了 pjax 服务。\n\n<!-- endtimeline -->\n\n<!-- timeline 2020-05-15 [2.6.3 -> 2.6.6](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6) -->\n\n不需要额外处理。\n\n<!-- endtimeline -->\n\n<!-- timeline 2020-04-20 [2.6.2 -> 2.6.3](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) -->\n\n1. 全局搜索 `seotitle` 并替换为 `seo_title`。\n2. group 组件的索引规则有变，使用 group 组件的文章内，`group: group_name` 对应的组件名必须是 `group_name`。\n2. group 组件的列表名优先显示文章的 `short_title` 其次是 `title`。\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% timeline 时间轴样式,blue %}\n\n<!-- timeline 2020-07-24 [2.6.6 -> 3.0](https://github.com/volantis-x/hexo-theme-volantis/releases) -->\n\n1. 如果有 `hexo-lazyload-image` 插件，需要删除并重新安装最新版本，设置 `lazyload.isSPA: true`。\n2. 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 `use_cdn: true` 则需要删除。\n3. 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。\n4. 2.x 版本的置顶 `top: true` 改为了 `pin: true`，并且同样适用于 `layout: page` 的页面。\n5. 如果使用了 `hexo-offline` 插件，建议卸载，3.0 版本默认开启了 pjax 服务。\n\n<!-- endtimeline -->\n\n<!-- timeline 2020-05-15 [2.6.3 -> 2.6.6](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6) -->\n\n不需要额外处理。\n\n<!-- endtimeline -->\n\n<!-- timeline 2020-04-20 [2.6.2 -> 2.6.3](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) -->\n\n1. 全局搜索 `seotitle` 并替换为 `seo_title`。\n2. group 组件的索引规则有变，使用 group 组件的文章内，`group: group_name` 对应的组件名必须是 `group_name`。\n2. group 组件的列表名优先显示文章的 `short_title` 其次是 `title`。\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.10 链接卡片 link\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% link 标题, 链接, 图片链接（可选） %}\n```\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.11 按钮 btns\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% btns 样式参数 %}\n{% cell 标题, 链接, 图片或者图标 %}\n{% cell 标题, 链接, 图片或者图标 %}\n{% endbtns %}\n```\n\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. 圆角样式：rounded, circle\n2. 增加文字样式：可以在容器内增加 `<b>`标题`</b>`和`<p>`描述文字`</p>`\n3. 布局方式：\n   默认为自动宽度，适合视野内只有一两个的情况。\n\n| 参数   | 含义                                   |\n| ------ | -------------------------------------- |\n| wide   | 宽一点的按钮                           |\n| fill   | 填充布局，自动铺满至少一行，多了会换行 |\n| center | 居中，按钮之间是固定间距               |\n| around | 居中分散                               |\n| grid2  | 等宽最多2列，屏幕变窄会适当减少列数    |\n| grid3  | 等宽最多3列，屏幕变窄会适当减少列数    |\n| grid4  | 等宽最多4列，屏幕变窄会适当减少列数    |\n| grid5  | 等宽最多5列，屏幕变窄会适当减少列数    |\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n1.如果需要显示类似「团队成员」之类的一组含有头像的链接\n\n```markdown\n{% btns circle grid5 %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% endbtns %}\n```\n2.或者含有图标的按钮\n```markdown\n{% btns rounded grid5 %}\n{% cell 下载源码, /, fas fa-download %}\n{% cell 查看文档, /, fas fa-book-open %}\n{% endbtns %}\n```\n\n3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中\n```markdown\n{% btns circle center grid5 %}\n<a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>\n  <i class='fab fa-apple'></i>\n  <b>心率管家</b>\n  {% p red, 专业版 %}\n  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'>\n</a>\n<a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>\n  <i class='fab fa-apple'></i>\n  <b>心率管家</b>\n  {% p green, 免费版 %}\n  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'>\n</a>\n{% endbtns %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n\n1.如果需要显示类似「团队成员」之类的一组含有头像的链接\n{% btns circle grid5 %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %}\n{% endbtns %}\n2.或者含有图标的按钮\n{% btns rounded grid5 %}\n{% cell 下载源码, /, fas fa-download %}\n{% cell 查看文档, /, fas fa-book-open %}\n{% endbtns %}\n3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中\n{% btns circle center grid5 %}\n<a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>\n  <i class='fab fa-apple'></i>\n  <b>心率管家</b>\n  {% p red, 专业版 %}\n  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'>\n</a>\n<a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>\n  <i class='fab fa-apple'></i>\n  <b>心率管家</b>\n  {% p green, 免费版 %}\n  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'>\n</a>\n{% endbtns %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.12 github卡片 ghcard\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% ghcard 用户名, 其它参数（可选） %}\n{% ghcard 用户名/仓库, 其它参数（可选） %}\n```\n\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n使用`,`分割各个参数。写法为：`参数名=参数值`\n以下只写几个常用参数值。\n\n| **参数名**    | 取值                                                         | 释义                             |\n| ------------- | ------------------------------------------------------------ | -------------------------------- |\n| hide          | stars,commits,prs,issues,contribs                            | 隐藏指定统计                     |\n| count_private | true                                                         | 将私人项目贡献添加到总提交计数中 |\n| show_icons    | true                                                         | 显示图标                         |\n| theme         | 查阅:[Available Themes](https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md) | 主题                             |\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n1.用户信息卡片\n\n```Markdown\n| {% ghcard Aruoshui %} | {% ghcard Aruoshui, theme=vue %} |\n| -- | -- |\n| {% ghcard Aruoshui, theme=buefy %} | {% ghcard Aruoshui, theme=solarized-light %} |\n| {% ghcard Aruoshui, theme=onedark %} | {% ghcard Aruoshui, theme=solarized-dark %} |\n| {% ghcard Aruoshui, theme=algolia %} | {% ghcard Aruoshui, theme=calm %} |\n```\n\n2.仓库信息卡片\n\n```markdown\n| {% ghcard Aruoshui/Aruoshui.github.io %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=vue %} |\n| -- | -- |\n| {% ghcard Aruoshui/Aruoshui.github.io, theme=buefy %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=solarized-light %} |\n| {% ghcard Aruoshui/Aruoshui.github.io, theme=onedark %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=solarized-dark %} |\n| {% ghcard Aruoshui/Aruoshui.github.io, theme=algolia %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=calm %} |\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1.用户信息卡片\n\n| {% ghcard Aruoshui %} | {% ghcard Aruoshui, theme=vue %} |\n| -- | -- |\n| {% ghcard Aruoshui, theme=buefy %} | {% ghcard Aruoshui, theme=solarized-light %} |\n| {% ghcard Aruoshui, theme=onedark %} | {% ghcard Aruoshui, theme=solarized-dark %} |\n| {% ghcard Aruoshui, theme=algolia %} | {% ghcard Aruoshui, theme=calm %} |\n\n2.仓库信息卡片\n\n| {% ghcard Aruoshui/Aruoshui.github.io %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=vue %} |\n| -- | -- |\n| {% ghcard Aruoshui/Aruoshui.github.io, theme=buefy %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=solarized-light %} |\n| {% ghcard Aruoshui/Aruoshui.github.io, theme=onedark %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=solarized-dark %} |\n| {% ghcard Aruoshui/Aruoshui.github.io, theme=algolia %} | {% ghcard Aruoshui/Aruoshui.github.io, theme=calm %} |\n\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.13 github徽标 ghbdage\n\n\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% bdage [right],[left],[logo]||[color],[link],[title]||[option] %}\n```\n\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. `left`：徽标左边的信息，必选参数。\n2. `right`: 徽标右边的信息，必选参数，\n3. `logo`：徽标图标，图标名称详见[simpleicons](https://simpleicons.org/)，可选参数。\n4. `color`：徽标右边的颜色，可选参数。\n5.  `link`：指向的链接，可选参数。\n6. `title`：徽标的额外信息，可选参数。主要用于优化SEO，但`object`标签不会像`a`标签一样在鼠标悬停显示`title`信息。\n7. `option`：自定义参数，支持[shields.io](https://shields.io/)的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为`name1=value2&name2=value2`。\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n1.基本参数,定义徽标左右文字和图标\n\n```Markdown\n{% bdage Theme,Butterfly %}\n{% bdage Frame,Hexo,hexo %}\n```\n\n2.信息参数，定义徽标右侧内容背景色，指向链接\n\n```markdown\n{% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %}\n//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割\n{% bdage Source,GitHub,GitHub||,https://github.com/ %}\n```\n\n3.拓展参数，支持shields的API的全部参数内容\n\n```markdown\n{% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&logoWidth=20 %}\n//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割\n{% bdage Hosted,Vercel,Vercel||||style=social&logoWidth=20&logoColor=violet %}\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1.基本参数,定义徽标左右文字和图标\n\n{% bdage Theme,Butterfly %}\n{% bdage Frame,Hexo,hexo %}\n\n2.信息参数，定义徽标右侧内容背景色，指向链接\n\n{% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %}\n//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割\n{% bdage Source,GitHub,GitHub||,https://github.com/ %}\n\n3.拓展参数，支持shields的API的全部参数内容\n\n{% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&logoWidth=20 %}\n//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割\n{% bdage Hosted,Vercel,Vercel||||style=social&logoWidth=20&logoColor=violet %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.14 网站卡片 sites\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% sitegroup %}\n{% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %}\n{% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %}\n{% endsitegroup %}\n```\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% sitegroup %}\n{% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %}\n{% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %}\n{% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %}\n{% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %}\n{% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %}\n{% endsitegroup %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% sitegroup %}\n{% site fomalhaut1998, url=https://fomalhaut1998.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %}\n{% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %}\n{% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %}\n{% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %}\n{% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %}\n{% endsitegroup %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.15 行内图片 inlineimage\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% inlineimage 图片链接, height=高度（可选） %}\n```\n\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. `高度`：height=20px\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n```Markdown\n这是 {% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %} 一段话。\n\n这又是 {% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %} 一段话。\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n这是 {% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %} 一段话。\n\n这又是 {% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %} 一段话。\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.16 单张图片 image\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %}\n```\n\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. 图片宽度高度：width=300px, height=32px\n2. 图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）\n3. 占位背景色：bg=#f2f2f2\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n1.添加描述：\n```Markdown\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %}\n```\n2.指定宽度\n```Markdown\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %}\n```\n3.指定宽度并添加描述：\n```Markdown\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %}\n```\n4.设置占位背景色：\n```Markdown\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1.添加描述：\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %}\n2..指定宽度\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %}\n3.指定宽度并添加描述：\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %}\n4.设置占位背景色：\n{% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.17 音频 audio\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% audio 音频链接 %}\n```\n<!-- endtab -->\n\n\n<!-- tab 示例源码 -->\n\n```Markdown\n{% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.18 视频 video\n\n{% tabs 分栏 %}\n<!-- tab 标签语法 -->\n```Markdown\n{% video 视频链接 %}\n```\n<!-- endtab -->\n\n<!-- tab 标签语法 -->\n\n1. `对齐方向`：left, center, right\n2. `列数`：逗号后面直接写列数，支持 1 ～ 4 列。\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n1.100%宽度\n\n```Markdown\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n```\n2.50%宽度\n```Markdown\n{% videos, 2 %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% endvideos %}\n```\n3.25%宽度\n\n```Markdown\n{% videos, 4 %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% endvideos %}\n```\n<!-- endtab -->\n<!-- tab 渲染演示 -->\n\n1.100%宽度\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n2.50%宽度\n{% videos, 2 %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% endvideos %}\n3.25%宽度\n{% videos, 4 %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n   {% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %}\n{% endvideos %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.19 相册 gallery\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n1.gallerygroup 相册图库\n```Markdown\n<div class=\"gallery-group-main\">\n{% galleryGroup name description link img-url %}\n{% galleryGroup name description link img-url %}\n{% galleryGroup name description link img-url %}\n</div>\n```\n2.gallery 相册\n```Markdown\n{% gallery %}\nmarkdown 圖片格式\n{% endgallery %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n- gallerygroup 相册图库\n\n| 参数名      | 释义                 |\n| ----------- | -------------------- |\n| name        | 图库名字             |\n| description | 图库描述             |\n| link        | 链接到对应相册的地址 |\n| img-url     | 图库封面             |\n\n- gallery 相册\n\n  区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。**建议在粘贴时故意使用长短、大小、横竖不一的图片**，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n1.gallerygroup 相册图库\n\n```Markdown\n<div class=\"gallery-group-main\">\n{% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 '/gallery/MC/' https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %}\n{% galleryGroup Gundam 哦咧哇gundam哒！ '/gallery/Gundam/' https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %}\n{% galleryGroup I-am-Akilar 某种意义上也算自拍吧 '/gallery/I-am-Akilar/' https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %}\n</div>\n```\n2.gallery 相册\n\n```markdown\n{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n{% endgallery %}\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1.gallerygroup 相册图库\n<div class=\"gallery-group-main\">\n{% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 '/gallery/MC/' https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %}\n{% galleryGroup Gundam 哦咧哇gundam哒！ '/gallery/Gundam/' https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %}\n{% galleryGroup I-am-Akilar 某种意义上也算自拍吧 '/gallery/I-am-Akilar/' https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %}\n</div>\n2.gallery 相册\n\n{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n{% endgallery %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.20 折叠框 folding\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n1.gallerygroup 相册图库\n```Markdown\n{% folding 参数（可选）, 标题 %}\n![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)\n{% endfolding %}\n```\n<!-- tab 参数配置 -->\n\n1. `颜色`：blue, cyan, green, yellow, red\n\n2. `状态`：状态填写 open 代表默认打开。\n\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```markdown\n{% folding 查看图片测试 %}\n\n![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)\n\n{% endfolding %}\n\n{% folding cyan open, 查看默认打开的折叠框 %}\n\n这是一个默认打开的折叠框。\n\n{% endfolding %}\n\n{% folding green, 查看代码测试 %}\n假装这里有代码块（代码块没法嵌套代码块）\n{% endfolding %}\n\n{% folding yellow, 查看列表测试 %}\n\n- haha\n- hehe\n\n{% endfolding %}\n\n{% folding red, 查看嵌套测试 %}\n\n{% folding blue, 查看嵌套测试2 %}\n\n{% folding 查看嵌套测试3 %}\n\nhahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span>\n\n{% endfolding %}\n\n{% endfolding %}\n\n{% endfolding %}\n```\n<!-- endtab -->\n<!-- tab 渲染演示 -->\n\n{% folding 查看图片测试 %}\n\n![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)\n\n{% endfolding %}\n\n{% folding cyan open, 查看默认打开的折叠框 %}\n\n这是一个默认打开的折叠框。\n\n{% endfolding %}\n\n{% folding green, 查看代码测试 %}\n假装这里有代码块（代码块没法嵌套代码块）\n{% endfolding %}\n\n{% folding yellow, 查看列表测试 %}\n\n- haha\n- hehe\n\n{% endfolding %}\n\n{% folding red, 查看嵌套测试 %}\n\n{% folding blue, 查看嵌套测试2 %}\n\n{% folding 查看嵌套测试3 %}\n\nhahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span>\n\n{% endfolding %}\n\n{% endfolding %}\n\n{% endfolding %}\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 2.21 分栏 tab\n\n{% tabs 分栏 %}\n<!-- tab 标签语法 -->\n```markdown\n{% tabs Unique name, [index] %}\n<!-- tab [Tab caption] [@icon] -->\nAny content (support inline tags too).\n<!-- endtab -->\n{% endtabs %}\n```\n<!-- endtab -->\n\n<!-- tab 配置参数 -->\n\n1. Unique name :\n\n   - 选项卡块标签的唯一名称，不带逗号。\n\n   - 将在#id中用作每个标签及其索引号的前缀。\n\n   - 如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。\n\n   - 仅当前帖子/页面的URL必须是唯一的！\n\n2. [index]:\n\n   - 活动选项卡的索引号。\n\n   - 如果未指定，将选择第一个标签（1）。\n\n   - 如果index为-1，则不会选择任何选项卡。\n\n   - 可选参数。\n\n3. [Tab caption]:\n\n   - 当前选项卡的标题。\n\n   - 如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。\n\n   - 如果未指定标题，但指定了图标，则标题将为空。\n\n   - 可选参数。\n\n4. [@icon]:\n\n   - FontAwesome图标名称（全名，看起来像“ fas fa-font”）\n\n   - 可以指定带空格或不带空格；\n\n   - 例如’Tab caption @icon’ 和 ‘Tab caption@icon’.\n\n   - 可选参数。\n\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n1.Demo 1 - 预设选择第一个【默认】\n\n```markdown\n{% tabs test1 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n```\n\n2.Demo 2 - 预设选择tabs\n\n```markdown\n{% tabs test2, 3 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n```\n\n3.Demo 3 - 没有预设值\n\n```markdown\n{% tabs test3, -1 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n```\n\n4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名\n\n```markdown\n{% tabs test4 %}\n<!-- tab 第一个Tab -->\n**tab名字为第一个Tab**\n<!-- endtab -->\n\n<!-- tab @fab fa-apple-pay -->\n**只有图标 没有Tab名字**\n<!-- endtab -->\n\n<!-- tab 炸弹@fas fa-bomb -->\n**名字+icon**\n<!-- endtab -->\n{% endtabs %}\n```\n\n\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1.Demo 1 - 预设选择第一个【默认】\n\n{% tabs test1 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n\n2.Demo 2 - 预设选择tabs\n\n{% tabs test2, 3 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n\n3.Demo 3 - 没有预设值\n\n{% tabs test3, -1 %}\n<!-- tab -->\n**This is Tab 1.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 2.**\n<!-- endtab -->\n\n<!-- tab -->\n**This is Tab 3.**\n<!-- endtab -->\n{% endtabs %}\n\n4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名\n\n{% tabs test4 %}\n<!-- tab 第一个Tab -->\n**tab名字为第一个Tab**\n<!-- endtab -->\n\n<!-- tab @fab fa-apple-pay -->\n**只有图标 没有Tab名字**\n<!-- endtab -->\n\n<!-- tab 炸弹@fas fa-bomb -->\n**名字+icon**\n<!-- endtab -->\n{% endtabs %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 2.22 诗词标签 poem\n\n{% tabs 分栏 %}\n\n<!-- tab标签语法 -->\n\n```markdown\n{% poem [title],[author] %}\n诗词内容\n{% endpoem %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. `title`：诗词标题\n2. `author`：作者，可以不写\n   <!-- endtab -->\n   <!-- tab 示例源码 -->\n\n```Markdown\n{% poem 水调歌头,苏轼 %}\n丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。\n明月几时有？把酒问青天。\n不知天上宫阙，今夕是何年？\n我欲乘风归去，又恐琼楼玉宇，高处不胜寒。\n起舞弄清影，何似在人间？\n\n转朱阁，低绮户，照无眠。\n不应有恨，何事长向别时圆？\n人有悲欢离合，月有阴晴圆缺，此事古难全。\n但愿人长久，千里共婵娟。\n{% endpoem %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% poem 水调歌头,苏轼 %}\n丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。\n明月几时有？把酒问青天。\n不知天上宫阙，今夕是何年？\n我欲乘风归去，又恐琼楼玉宇，高处不胜寒。\n起舞弄清影，何似在人间？\n\n转朱阁，低绮户，照无眠。\n不应有恨，何事长向别时圆？\n人有悲欢离合，月有阴晴圆缺，此事古难全。\n但愿人长久，千里共婵娟。\n{% endpoem %}\n<!-- endtab -->\n\n{% endtabs %}\n\n## 2.23 阿里图标 icon\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% icon [icon-xxxx],[font-size] %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. `icon-xxxx`：表示图标`font-class`,可以在自己的阿里矢量图标库项目的`font-class`引用方案内查询并复制。\n2. `font-size`：表示图标大小，直接填写数字即可，单位为`em`。图标大小默认值为`1em`。\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% icon icon-rat_zi %}{% icon icon-rat,2 %}\n\n{% icon icon-ox_chou,3 %}{% icon icon-ox,4 %}\n\n{% icon icon-tiger_yin,5 %}{% icon icon-tiger,6 %}\n\n{% icon icon-rabbit_mao,1 %}{% icon icon-rabbit,2 %}\n\n{% icon icon-dragon_chen,3 %}{% icon icon-dragon,4 %}\n\n{% icon icon-snake_si,5 %}{% icon icon-snake,6 %}\n\n{% icon icon-horse_wu %}{% icon icon-horse,2 %}\n\n{% icon icon-goat_wei,3 %}{% icon icon-goat,4 %}\n\n{% icon icon-monkey_shen,5 %}{% icon icon-monkey,6 %}\n\n{% icon icon-rooster_you %}{% icon icon-rooster,2 %}\n\n{% icon icon-dog_xu,3 %}{% icon icon-dog,4 %}\n\n{% icon icon-boar_hai,5 %}{% icon icon-boar,6 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% icon icon-rat_zi %}{% icon icon-rat,2 %}\n\n{% icon icon-ox_chou,3 %}{% icon icon-ox,4 %}\n\n{% icon icon-tiger_yin,5 %}{% icon icon-tiger,6 %}\n\n{% icon icon-rabbit_mao,1 %}{% icon icon-rabbit,2 %}\n\n{% icon icon-dragon_chen,3 %}{% icon icon-dragon,4 %}\n\n{% icon icon-snake_si,5 %}{% icon icon-snake,6 %}\n\n{% icon icon-horse_wu %}{% icon icon-horse,2 %}\n\n{% icon icon-goat_wei,3 %}{% icon icon-goat,4 %}\n\n{% icon icon-monkey_shen,5 %}{% icon icon-monkey,6 %}\n\n{% icon icon-rooster_you %}{% icon icon-rooster,2 %}\n\n{% icon icon-dog_xu,3 %}{% icon icon-dog,4 %}\n\n{% icon icon-boar_hai,5 %}{% icon icon-boar,6 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.25  进度条 progress\n\n{% note info flat %}\n\n进度条标签参考[沂佰孜猫-给HEXO文章添加彩色进度条](https://rongbuqiu.com/jdt.html)。\n源样式提取自[Cuteen](https://zwying0814.gitbook.io/cuteen/)主题。\n\n{% endnote %}\n\n{% tabs 分栏 %}\n\n<!-- tab 参数配置 -->\n\n```Markdown\n{% progress [width] [color] [text] %}\n```\n<!-- endtab -->\n\n<!-- tab 标签语法 -->\n\n1. `width`: 0到100的阿拉伯数字\n2. `color`: 颜色，取值有red,yellow,green,cyan,blue,gray\n3. `text`:进度条上的文字内容\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% progress 10 red 进度条样式预览 %}\n{% progress 30 yellow 进度条样式预览 %}\n{% progress 50 green 进度条样式预览 %}\n{% progress 70 cyan 进度条样式预览 %}\n{% progress 90 blue 进度条样式预览 %}\n{% progress 100 gray 进度条样式预览 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% progress 10 red 进度条样式预览 %}\n{% progress 30 yellow 进度条样式预览 %}\n{% progress 50 green 进度条样式预览 %}\n{% progress 70 cyan 进度条样式预览 %}\n{% progress 90 blue 进度条样式预览 %}\n{% progress 100 gray 进度条样式预览 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.26 注释 notation\n{% tabs 分栏 %}\n<!-- tab 标签语法 -->\n```Markdown\n{% nota [label] , [text] %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. `label`: 注释词汇\n\n2. `text`: 悬停显示的注解内容\n\n   <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n{% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 2.27 气泡注释 bubble\n\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n\n```Markdown\n{% bubble [content] , [notation] ,[background-color] %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. `content`: 注释词汇\n2. `notation`: 悬停显示的注解内容\n3. `background-color`: 可选，气泡背景色。默认为“#71a4e3”\n <!-- endtab -->\n\n<!-- tab 示例源码 -->\n```Markdown\n最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的{% bubble 兄弟相邻选择器,\"例如 h1 + p {margin-top:50px;}\" %}，{% bubble flex布局,\"Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性\",\"#ec5830\" %}，{% bubble transform变换,\"transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。\",\"#1db675\" %}，animation的{% bubble 贝塞尔速度曲线,\"贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋\",\"#de4489\" %}写法，还有今天刚看到的{% bubble clip-path,\"clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。\",\"#868fd7\" %}属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的{% bubble 兄弟相邻选择器,\"例如 h1 + p {margin-top:50px;}\" %}，{% bubble flex布局,\"Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性\",\"#ec5830\" %}，{% bubble transform变换,\"transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。\",\"#1db675\" %}，animation的{% bubble 贝塞尔速度曲线,\"贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋\",\"#de4489\" %}写法，还有今天刚看到的{% bubble clip-path,\"clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。\",\"#868fd7\" %}属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 2.28 引用文献 reference\n{% tabs 分栏 %}\n\n<!-- tab 标签语法 -->\n```Markdown\n{% referto [id] , [literature] %}\n{% referfrom [id] , [literature] , [url] %}\n```\n<!-- endtab -->\n\n<!-- tab 参数配置 -->\n\n1. referto 引用上标\n\n   - `id`: 上标序号内容，需与referfrom标签的id对应才能实现跳转\n\n   - `literature`: 引用的参考文献名称\n\n2. referfrom 引用出处\n\n   - `id`: 序号内容，需与referto标签的id对应才能实现 跳转\n\n   - `literature`: 引用的参考文献名称\n\n   - `url`: 引用的参考文献链接，可省略\n\n<!-- endtab -->\n\n<!-- tab 示例源码 -->\n\n```Markdown\n{% span center logo large, 历史上的今天 %}\n1. 1475年：意大利文艺复兴时期的雕塑家米开朗基罗{% referto '[1]','米开朗基罗' %}诞生。他是文艺复兴时期最重要的艺术家之一，作品包括《大卫像》和《圣母玛利亚》等。\n2. 1899年：美国发明家、电影制片人威廉·赛勒斯·福克斯{% referto '[2]','电影制片人威廉·赛勒斯·福克斯' %}诞生。他是电影行业的先驱，创立了20世纪福克斯影业公司。\n3. 1974年：计算机科学家维特·柏恩斯·李发表了有关万维网{% referto '[3]','万维网的提案' %}的提案，奠定了互联网发展的基础。\n4.  1998年：谷歌公司成立，创始人拉里·佩奇和谢尔盖·布林将互联网搜索引擎{% referto '[4]','谷歌搜索引擎的历史' %}带入新的高度，成为全球最大的搜索引擎之一。\n5. 2007年：苹果公司推出首款iPhone{% referto '[5]','首款iPhone手机' %}，引领了智能手机革命，改变了人们的通讯和生活方式。\n\n{% referfrom '[1]','米开朗基罗','https://en.wikipedia.org/wiki/Michelangelo' %}\n{% referfrom '[2]','电影制片人威廉·赛勒斯·福克斯','https://en.wikipedia.org/wiki/William_Fox_(producer)' %}\n{% referfrom '[3]','万维网的提案','https://en.wikipedia.org/wiki/Tim_Berners-Lee' %}\n{% referfrom '[4]','谷歌搜索引擎的历史','https://en.wikipedia.org/wiki/History_of_Google' %}\n{% referfrom '[5]','首款iPhone手机','https://en.wikipedia.org/wiki/IPhone_(1st_generation)' %}\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n{% span center logo large, 历史上的今天 %}\n1. 1475年：意大利文艺复兴时期的雕塑家米开朗基罗{% referto '[1]','米开朗基罗' %}诞生。他是文艺复兴时期最重要的艺术家之一，作品包括《大卫像》和《圣母玛利亚》等。\n2. 1899年：美国发明家、电影制片人威廉·赛勒斯·福克斯{% referto '[2]','电影制片人威廉·赛勒斯·福克斯' %}诞生。他是电影行业的先驱，创立了20世纪福克斯影业公司。\n3. 1974年：计算机科学家维特·柏恩斯·李发表了有关万维网{% referto '[3]','万维网的提案' %}的提案，奠定了互联网发展的基础。\n4.  1998年：谷歌公司成立，创始人拉里·佩奇和谢尔盖·布林将互联网搜索引擎{% referto '[4]','谷歌搜索引擎的历史' %}带入新的高度，成为全球最大的搜索引擎之一。\n5. 2007年：苹果公司推出首款iPhone{% referto '[5]','首款iPhone手机' %}，引领了智能手机革命，改变了人们的通讯和生活方式。\n\n{% referfrom '[1]','米开朗基罗','https://en.wikipedia.org/wiki/Michelangelo' %}\n{% referfrom '[2]','电影制片人威廉·赛勒斯·福克斯','https://en.wikipedia.org/wiki/William_Fox_(producer)' %}\n{% referfrom '[3]','万维网的提案','https://en.wikipedia.org/wiki/Tim_Berners-Lee' %}\n{% referfrom '[4]','谷歌搜索引擎的历史','https://en.wikipedia.org/wiki/History_of_Google' %}\n{% referfrom '[5]','首款iPhone手机','https://en.wikipedia.org/wiki/IPhone_(1st_generation)' %}\n\n\n<!-- endtab -->\n\n{% endtabs %}\n\n","slug":"外挂标签","published":1,"updated":"2024-12-31T11:23:39.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io5002gmktt0wqeanzt","content":"<h1>2.外挂标签</h1>\n<p>教程参考店长</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"店长教程贴\" href=\"https://akilar.top/posts/615e2dec/\"><div class=\"left\"><img src=\"https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico\"/></div><div class=\"right\"><p class=\"text\">店长教程贴</p><p class=\"url\">https://akilar.top/posts/615e2dec/</p></div></a></div>\n<h2 id=\"2-1-行内文本样式-text\">2.1 行内文本样式 text</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% u 文本内容 %&#125;</span><br><span class=\"line\">&#123;% emp 文本内容 %&#125;</span><br><span class=\"line\">&#123;% wavy 文本内容 %&#125;</span><br><span class=\"line\">&#123;% del 文本内容 %&#125;</span><br><span class=\"line\">&#123;% kbd 文本内容 %&#125;</span><br><span class=\"line\">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class=\"line\"><span class=\"bullet\">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class=\"line\"><span class=\"bullet\">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class=\"line\"><span class=\"bullet\">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><ol>\n<li>带 <u>下划线</u> 的文本</li>\n<li>带 <emp>着重号</emp> 的文本</li>\n<li>带 <wavy>波浪线</wavy> 的文本</li>\n<li>带 <del>删除线</del> 的文本</li>\n<li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li>\n<li>密码样式的文本：<psw>这里没有验证码</psw></li>\n</ol></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-2-行内文本-span\">2.2 行内文本 span</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>字体</code>: logo, code</li>\n<li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li>\n<li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li>\n<li><code>对齐方向</code>: left, center, right</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> 彩色文字</span><br><span class=\"line\">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 超大号文字</span><br><span class=\"line\">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class=\"line\">&#123;% span center logo large, Volantis %&#125;</span><br><span class=\"line\">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><ul>\n<li>彩色文字<br>\n在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li>\n<li>超大号文字<br>\n文档「开始」页面中的标题部分就是超大号文字。<br>\n<span class='p center logo large'>Volantis</span><br>\n<span class='p center small'>A Wonderful Theme for Hexo</span></li>\n</ul></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-3-段落文本-p\">2.3 段落文本 p</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>字体</code>: logo, code</li>\n<li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li>\n<li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li>\n<li><code>对齐方向</code>: left, center, right</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> 彩色文字</span><br><span class=\"line\">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 超大号文字</span><br><span class=\"line\">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class=\"line\">&#123;% p center logo large, Volantis %&#125;</span><br><span class=\"line\">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><ul>\n<li>彩色文字<br>\n在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li>\n<li>超大号文字<br>\n文档「开始」页面中的标题部分就是超大号文字。</li>\n</ul>\n<p class='p center logo large'>Volantis</p>\n<p class='p center small'>A Wonderful Theme for Hexo</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-4-引用note\">2.4 引用note</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">通用配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">语法格式</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-5\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">note:</span><br><span class=\"line\">  # Note tag style values:</span><br><span class=\"line\">  #  - simple    bs-callout old alert style. Default.</span><br><span class=\"line\">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class=\"line\">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class=\"line\">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class=\"line\">  style: simple</span><br><span class=\"line\">  icons: false</span><br><span class=\"line\">  border<span class=\"emphasis\">_radius: 3</span></span><br><span class=\"line\"><span class=\"emphasis\">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class=\"line\"><span class=\"emphasis\">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class=\"line\"><span class=\"emphasis\">  light_</span>bg<span class=\"emphasis\">_offset: 0</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 自带icon</span></span><br><span class=\"line\">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class=\"line\">Any content (support inline tags too.io).</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br><span class=\"line\"><span class=\"section\"># 外部icon</span></span><br><span class=\"line\">&#123;% note [color] [icon] [style] %&#125;</span><br><span class=\"line\">Any content (support inline tags too.io).</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.自带icon</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>class</td>\n<td style=\"text-align:center\">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td>\n</tr>\n<tr>\n<td>no-icon</td>\n<td style=\"text-align:center\">【可选】不显示 icon</td>\n</tr>\n<tr>\n<td>style</td>\n<td style=\"text-align:center\">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td>\n</tr>\n</tbody>\n</table>\n<p>2.外部icon</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>class</td>\n<td style=\"text-align:center\">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td>\n</tr>\n<tr>\n<td>no-icon</td>\n<td style=\"text-align:center\">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td>\n</tr>\n<tr>\n<td>style</td>\n<td style=\"text-align:center\">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td>\n</tr>\n</tbody>\n</table></div><div class=\"tab-item-content\" id=\"分栏-4\"><details class=\"folding-tag\" blue><summary> 1.自带icon </summary>\n              <div class='content'>\n              <p>1.<code>simple</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<details class=\"folding-tag\" blue><summary> 2.外部icon </summary>\n              <div class='content'>\n              <p>1.<code>simple</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details></div><div class=\"tab-item-content\" id=\"分栏-5\"><details class=\"folding-tag\" blue><summary> 1.自带icon </summary>\n              <div class='content'>\n              <p>1.<code>simple</code>样式</p><div class=\"note simple\"><p>默认 提示块标签</p></div><div class=\"note default simple\"><p>default 提示块标签</p></div><div class=\"note primary simple\"><p>primary 提示块标签</p></div><div class=\"note success simple\"><p>success 提示块标签</p></div><div class=\"note info simple\"><p>info 提示块标签</p></div><div class=\"note warning simple\"><p>warning 提示块标签</p></div><div class=\"note danger simple\"><p>danger 提示块标签</p></div>2.`modern`样式<div class=\"note modern\"><p>默认 提示块标签</p></div><div class=\"note default modern\"><p>default 提示块标签</p></div><div class=\"note primary modern\"><p>primary 提示块标签</p></div><div class=\"note success modern\"><p>success 提示块标签</p></div><div class=\"note info modern\"><p>info 提示块标签</p></div><div class=\"note warning modern\"><p>warning 提示块标签</p></div><div class=\"note danger modern\"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class=\"note flat\"><p>默认 提示块标签</p></div><div class=\"note default flat\"><p>default 提示块标签</p></div><div class=\"note primary flat\"><p>primary 提示块标签</p></div><div class=\"note success flat\"><p>success 提示块标签</p></div><div class=\"note info flat\"><p>info 提示块标签</p></div><div class=\"note warning flat\"><p>warning 提示块标签</p></div><div class=\"note danger flat\"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class=\"note disabled\"><p>默认 提示块标签</p></div><div class=\"note default disabled\"><p>default 提示块标签</p></div><div class=\"note primary disabled\"><p>primary 提示块标签</p></div><div class=\"note success disabled\"><p>success 提示块标签</p></div><div class=\"note info disabled\"><p>info 提示块标签</p></div><div class=\"note warning disabled\"><p>warning 提示块标签</p></div><div class=\"note danger disabled\"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class=\"note no-icon simple\"><p>默认 提示块标签</p></div><div class=\"note default no-icon simple\"><p>default 提示块标签</p></div><div class=\"note primary no-icon simple\"><p>primary 提示块标签</p></div><div class=\"note success no-icon simple\"><p>success 提示块标签</p></div><div class=\"note info no-icon simple\"><p>info 提示块标签</p></div><div class=\"note warning no-icon simple\"><p>warning 提示块标签</p></div><div class=\"note danger no-icon simple\"><p>danger 提示块标签</p></div>\n              </div>\n            </details>\n<details class=\"folding-tag\" blue><summary> 2.外部icon </summary>\n              <div class='content'>\n              <p>1.<code>simple</code>样式</p><div class=\"note icon-padding simple\"><i class=\"note-icon fab fa-cc-visa\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-bullhorn\"></i><p>2021年快到了…</p></div><div class=\"note pink icon-padding simple\"><i class=\"note-icon fas fa-car-crash\"></i><p>小心开车 安全至上</p></div><div class=\"note red icon-padding simple\"><i class=\"note-icon fas fa-fan\"></i><p>这是三片呢？还是四片？</p></div><div class=\"note orange icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note purple icon-padding simple\"><i class=\"note-icon far fa-hand-scissors\"></i><p>剪刀石头布</p></div><div class=\"note green icon-padding simple\"><i class=\"note-icon fab fa-internet-explorer\"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class=\"note icon-padding modern\"><i class=\"note-icon fab fa-cc-visa\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note blue icon-padding modern\"><i class=\"note-icon fas fa-bullhorn\"></i><p>2021年快到了…</p></div><div class=\"note pink icon-padding modern\"><i class=\"note-icon fas fa-car-crash\"></i><p>小心开车 安全至上</p></div><div class=\"note red icon-padding modern\"><i class=\"note-icon fas fa-fan\"></i><p>这是三片呢？还是四片？</p></div><div class=\"note orange icon-padding modern\"><i class=\"note-icon fas fa-battery-half\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note purple icon-padding modern\"><i class=\"note-icon far fa-hand-scissors\"></i><p>剪刀石头布</p></div><div class=\"note green icon-padding modern\"><i class=\"note-icon fab fa-internet-explorer\"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class=\"note icon-padding flat\"><i class=\"note-icon fab fa-cc-visa\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note blue icon-padding flat\"><i class=\"note-icon fas fa-bullhorn\"></i><p>2021年快到了…</p></div><div class=\"note pink icon-padding flat\"><i class=\"note-icon fas fa-car-crash\"></i><p>小心开车 安全至上</p></div><div class=\"note red icon-padding flat\"><i class=\"note-icon fas fa-fan\"></i><p>这是三片呢？还是四片？</p></div><div class=\"note orange icon-padding flat\"><i class=\"note-icon fas fa-battery-half\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note purple icon-padding flat\"><i class=\"note-icon far fa-hand-scissors\"></i><p>剪刀石头布</p></div><div class=\"note green icon-padding flat\"><i class=\"note-icon fab fa-internet-explorer\"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class=\"note icon-padding disabled\"><i class=\"note-icon fab fa-cc-visa\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note blue icon-padding disabled\"><i class=\"note-icon fas fa-bullhorn\"></i><p>2021年快到了…</p></div><div class=\"note pink icon-padding disabled\"><i class=\"note-icon fas fa-car-crash\"></i><p>小心开车 安全至上</p></div><div class=\"note red icon-padding disabled\"><i class=\"note-icon fas fa-fan\"></i><p>这是三片呢？还是四片？</p></div><div class=\"note orange icon-padding disabled\"><i class=\"note-icon fas fa-battery-half\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note purple icon-padding disabled\"><i class=\"note-icon far fa-hand-scissors\"></i><p>剪刀石头布</p></div><div class=\"note green icon-padding disabled\"><i class=\"note-icon fab fa-internet-explorer\"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class=\"note no-icon simple\"><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note blue no-icon simple\"><p>2021年快到了…</p></div><div class=\"note pink no-icon simple\"><p>小心开车 安全至上</p></div><div class=\"note red no-icon simple\"><p>这是三片呢？还是四片？</p></div><div class=\"note orange no-icon simple\"><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note purple no-icon simple\"><p>剪刀石头布</p></div><div class=\"note green no-icon simple\"><p>前端最讨厌的浏览器</p></div>\n              </div>\n            </details></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-5-上标标签-tip\">2.5 上标标签 tip</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li>\n<li><code>自定义图标</code>: 支持fontawesome。</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><div class=\"tip \"><p>default</p>\n</div>\n<div class=\"tip info\"><p>info</p>\n</div>\n<div class=\"tip success\"><p>success</p>\n</div>\n<div class=\"tip error\"><p>error</p>\n</div>\n<div class=\"tip warning\"><p>warning</p>\n</div>\n<div class=\"tip bolt\"><p>bolt</p>\n</div>\n<div class=\"tip ban\"><p>ban</p>\n</div>\n<div class=\"tip home\"><p>home</p>\n</div>\n<div class=\"tip sync\"><p>sync</p>\n</div>\n<div class=\"tip cogs\"><p>cogs</p>\n</div>\n<div class=\"tip key\"><p>key</p>\n</div>\n<div class=\"tip bell\"><p>bell</p>\n</div>\n<div class=\"tip fa-atom\"><p>自定义font awesome图标</p>\n</div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-6-动态标签-anima\">2.6 动态标签 anima</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><div class=\"note info flat\"><ol>\n<li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li>\n<li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>\nYou can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li>\n<li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li>\n</ol>\n</div></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.On DOM load（当页面加载时显示动画）</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<p>2.调整动画速度</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<p>3.On hover（当鼠标悬停时显示动画）</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip warning faa-parent animated-hover %&#125;<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip ban faa-parent animated-hover %&#125;<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.On DOM load（当页面加载时显示动画）</p>\n<div class=\"tip warning faa-horizontal animated\"><p>warning</p>\n</div>\n<div class=\"tip ban faa-flash animated\"><p>ban</p>\n</div>\n2.调整动画速度\n<div class=\"tip warning faa-horizontal animated faa-fast\"><p>warning</p>\n</div>\n<div class=\"tip ban faa-flash animated faa-slow\"><p>ban</p>\n</div>\n3.On hover（当鼠标悬停时显示动画）\n<div class=\"tip warning faa-horizontal animated-hover\"><p>warning</p>\n</div>\n<div class=\"tip ban faa-flash animated-hover\"><p>ban</p>\n</div>\n4.On parent hover（当鼠标悬停在父级元素时显示动画）\n<div class=\"tip warning faa-parent animated-hover\"><p class=\"faa-horizontal\">warning</p></div>\n<div class=\"tip ban faa-parent animated-hover\"><p class=\"faa-flash\">ban</p></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-7-复选列表-checkbox\">2.7 复选列表 checkbox</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>样式</code>: plus, minus, times</li>\n<li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li>\n<li><code>选中状态</code>: checked</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class=\"line\">&#123;% checkbox checked, 支持简单的 [<span class=\"string\">markdown</span>](<span class=\"link\">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class=\"line\">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class=\"line\">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class=\"line\">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class=\"line\">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class=\"line\">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class=\"line\">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class=\"line\">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class=\"line\">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><div class='checkbox'><input type=\"checkbox\" />\n            <p>纯文本测试</p>\n            </div>\n<div class='checkbox checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>支持简单的 <a href=\"https://guides.github.com/features/mastering-markdown/\">markdown</a> 语法</p>\n            </div>\n<div class='checkbox red'><input type=\"checkbox\" />\n            <p>支持自定义颜色</p>\n            </div>\n<div class='checkbox green checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>绿色 + 默认选中</p>\n            </div>\n<div class='checkbox yellow checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>黄色 + 默认选中</p>\n            </div>\n<div class='checkbox cyan checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>青色 + 默认选中</p>\n            </div>\n<div class='checkbox blue checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>蓝色 + 默认选中</p>\n            </div>\n<div class='checkbox plus green checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>增加</p>\n            </div>\n<div class='checkbox minus yellow checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>减少</p>\n            </div>\n<div class='checkbox times red checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>叉</p>\n            </div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-8-单选列表-radio\">2.8 单选列表 radio</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li>\n<li><code>选中状态</code>: checked</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% radio 纯文本测试 %&#125;</span><br><span class=\"line\">&#123;% radio checked, 支持简单的 [<span class=\"string\">markdown</span>](<span class=\"link\">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class=\"line\">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class=\"line\">&#123;% radio green, 绿色 %&#125;</span><br><span class=\"line\">&#123;% radio yellow, 黄色 %&#125;</span><br><span class=\"line\">&#123;% radio cyan, 青色 %&#125;</span><br><span class=\"line\">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><div class='checkbox'><input type=\"radio\" />\n            <p>纯文本测试</p>\n            </div>\n<div class='checkbox checked'><input type=\"radio\" checked=\"checked\"/>\n            <p>支持简单的 <a href=\"https://guides.github.com/features/mastering-markdown/\">markdown</a> 语法</p>\n            </div>\n<div class='checkbox red'><input type=\"radio\" />\n            <p>支持自定义颜色</p>\n            </div>\n<div class='checkbox green'><input type=\"radio\" />\n            <p>绿色</p>\n            </div>\n<div class='checkbox yellow'><input type=\"radio\" />\n            <p>黄色</p>\n            </div>\n<div class='checkbox cyan'><input type=\"radio\" />\n            <p>青色</p>\n            </div>\n<div class='checkbox blue'><input type=\"radio\" />\n            <p>蓝色</p>\n            </div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-9-时间轴-timeline\">2.9 时间轴 timeline</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class=\"line\">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class=\"line\">正文内容</span><br><span class=\"line\">&lt;!-- endtimeline --&gt;</span><br><span class=\"line\">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class=\"line\">正文内容</span><br><span class=\"line\">&lt;!-- endtimeline --&gt;</span><br><span class=\"line\">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>title</code>:标题/时间线</li>\n<li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- timeline 2020-07-24 [<span class=\"string\">2.6.6 -&gt; 3.0</span>](<span class=\"link\">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> 如果有 <span class=\"code\">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class=\"code\">`lazyload.isSPA: true`</span>。</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class=\"code\">`use_cdn: true`</span> 则需要删除。</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class=\"line\"><span class=\"bullet\">4.</span> 2.x 版本的置顶 <span class=\"code\">`top: true`</span> 改为了 <span class=\"code\">`pin: true`</span>，并且同样适用于 <span class=\"code\">`layout: page`</span> 的页面。</span><br><span class=\"line\"><span class=\"bullet\">5.</span> 如果使用了 <span class=\"code\">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- endtimeline --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- timeline 2020-05-15 [<span class=\"string\">2.6.3 -&gt; 2.6.6</span>](<span class=\"link\">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">不需要额外处理。</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- endtimeline --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- timeline 2020-04-20 [<span class=\"string\">2.6.2 -&gt; 2.6.3</span>](<span class=\"link\">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> 全局搜索 <span class=\"code\">`seotitle`</span> 并替换为 <span class=\"code\">`seo_title`</span>。</span><br><span class=\"line\"><span class=\"bullet\">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class=\"code\">`group: group_name`</span> 对应的组件名必须是 <span class=\"code\">`group_name`</span>。</span><br><span class=\"line\"><span class=\"bullet\">2.</span> group 组件的列表名优先显示文章的 <span class=\"code\">`short_title`</span> 其次是 <span class=\"code\">`title`</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- endtimeline --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href=\"https://github.com/volantis-x/hexo-theme-volantis/releases\">2.6.6 -&gt; 3.0</a></p>\n</div></div><div class='timeline-item-content'><ol>\n<li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li>\n<li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li>\n<li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li>\n<li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li>\n<li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li>\n</ol>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href=\"https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6\">2.6.3 -&gt; 2.6.6</a></p>\n</div></div><div class='timeline-item-content'><p>不需要额外处理。</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href=\"https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3\">2.6.2 -&gt; 2.6.3</a></p>\n</div></div><div class='timeline-item-content'><ol>\n<li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li>\n<li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li>\n<li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li>\n</ol>\n</div></div></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-10-链接卡片-link\">2.10 链接卡片 link</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><div class=\"tag link\"><a class=\"link-card\" title=\"糖果屋教程贴\" href=\"https://akilar.top/posts/615e2dec/\"><div class=\"left\"><img src=\"https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico\"/></div><div class=\"right\"><p class=\"text\">糖果屋教程贴</p><p class=\"url\">https://akilar.top/posts/615e2dec/</p></div></a></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-11-按钮-btns\">2.11 按钮 btns</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% btns 样式参数 %&#125;</span><br><span class=\"line\">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class=\"line\">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class=\"line\">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li>圆角样式：rounded, circle</li>\n<li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li>\n<li>布局方式：<br>\n默认为自动宽度，适合视野内只有一两个的情况。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>wide</td>\n<td>宽一点的按钮</td>\n</tr>\n<tr>\n<td>fill</td>\n<td>填充布局，自动铺满至少一行，多了会换行</td>\n</tr>\n<tr>\n<td>center</td>\n<td>居中，按钮之间是固定间距</td>\n</tr>\n<tr>\n<td>around</td>\n<td>居中分散</td>\n</tr>\n<tr>\n<td>grid2</td>\n<td>等宽最多2列，屏幕变窄会适当减少列数</td>\n</tr>\n<tr>\n<td>grid3</td>\n<td>等宽最多3列，屏幕变窄会适当减少列数</td>\n</tr>\n<tr>\n<td>grid4</td>\n<td>等宽最多4列，屏幕变窄会适当减少列数</td>\n</tr>\n<tr>\n<td>grid5</td>\n<td>等宽最多5列，屏幕变窄会适当减少列数</td>\n</tr>\n</tbody>\n</table></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% btns circle grid5 %&#125;</span><br><span class=\"line\">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class=\"line\">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class=\"line\">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class=\"line\">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class=\"line\">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class=\"line\">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure>\n<p>2.或者含有图标的按钮</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% btns rounded grid5 %&#125;</span><br><span class=\"line\">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class=\"line\">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class=\"line\">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure>\n<p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% btns circle center grid5 %&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span>心率管家<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></span><br><span class=\"line\">  &#123;% p red, 专业版 %&#125;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span>心率管家<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></span><br><span class=\"line\">  &#123;% p green, 免费版 %&#125;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p>\n<div class=\"btns circle grid5\">\n            <a class=\"button\" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>\n<a class=\"button\" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>\n<a class=\"button\" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>\n<a class=\"button\" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>\n<a class=\"button\" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>\n          </div>\n2.或者含有图标的按钮\n<div class=\"btns rounded grid5\">\n            <a class=\"button\" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a>\n<a class=\"button\" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>\n          </div>\n3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中\n<div class=\"btns circle center grid5\">\n            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>\n  <i class='fab fa-apple'></i>\n  <b>心率管家</b>\n  <p class='p red'>专业版</p>\n  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'>\n</a>\n<a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>\n  <i class='fab fa-apple'></i>\n  <b>心率管家</b>\n  <p class='p green'>免费版</p>\n  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'>\n</a>\n          </div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-12-github卡片-ghcard\">2.12 github卡片 ghcard</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class=\"line\">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>\n以下只写几个常用参数值。</p>\n<table>\n<thead>\n<tr>\n<th><strong>参数名</strong></th>\n<th>取值</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hide</td>\n<td>stars,commits,prs,issues,contribs</td>\n<td>隐藏指定统计</td>\n</tr>\n<tr>\n<td>count_private</td>\n<td>true</td>\n<td>将私人项目贡献添加到总提交计数中</td>\n</tr>\n<tr>\n<td>show_icons</td>\n<td>true</td>\n<td>显示图标</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>查阅:<a href=\"https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md\">Available Themes</a></td>\n<td>主题</td>\n</tr>\n</tbody>\n</table></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.用户信息卡片</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">| &#123;% ghcard Aruoshui %&#125; | &#123;% ghcard Aruoshui, theme=vue %&#125; |</span><br><span class=\"line\">| -- | -- |</span><br><span class=\"line\">| &#123;% ghcard Aruoshui, theme=buefy %&#125; | &#123;% ghcard Aruoshui, theme=solarized-light %&#125; |</span><br><span class=\"line\">| &#123;% ghcard Aruoshui, theme=onedark %&#125; | &#123;% ghcard Aruoshui, theme=solarized-dark %&#125; |</span><br><span class=\"line\">| &#123;% ghcard Aruoshui, theme=algolia %&#125; | &#123;% ghcard Aruoshui, theme=calm %&#125; |</span><br></pre></td></tr></table></figure>\n<p>2.仓库信息卡片</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">| &#123;% ghcard Aruoshui/Aruoshui.github.io %&#125; | &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=vue %&#125; |</span><br><span class=\"line\">| -- | -- |</span><br><span class=\"line\">| &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=buefy %&#125; | &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=solarized-light %&#125; |</span><br><span class=\"line\">| &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=onedark %&#125; | &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=solarized-dark %&#125; |</span><br><span class=\"line\">| &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=algolia %&#125; | &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=calm %&#125; |</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.用户信息卡片</p>\n<table>\n<thead>\n<tr>\n<th><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&show_owner=true\"/></a></th>\n<th><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=vue&show_owner=true\"/></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=buefy&show_owner=true\"/></a></td>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=solarized-light&show_owner=true\"/></a></td>\n</tr>\n<tr>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=onedark&show_owner=true\"/></a></td>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=solarized-dark&show_owner=true\"/></a></td>\n</tr>\n<tr>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=algolia&show_owner=true\"/></a></td>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=calm&show_owner=true\"/></a></td>\n</tr>\n</tbody>\n</table>\n<p>2.仓库信息卡片</p>\n<table>\n<thead>\n<tr>\n<th><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&show_owner=true\"/></a></th>\n<th><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=vue&show_owner=true\"/></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=buefy&show_owner=true\"/></a></td>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=solarized-light&show_owner=true\"/></a></td>\n</tr>\n<tr>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=onedark&show_owner=true\"/></a></td>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=solarized-dark&show_owner=true\"/></a></td>\n</tr>\n<tr>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=algolia&show_owner=true\"/></a></td>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=calm&show_owner=true\"/></a></td>\n</tr>\n</tbody>\n</table></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-13-github徽标-ghbdage\">2.13 github徽标 ghbdage</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>left</code>：徽标左边的信息，必选参数。</li>\n<li><code>right</code>: 徽标右边的信息，必选参数，</li>\n<li><code>logo</code>：徽标图标，图标名称详见<a href=\"https://simpleicons.org/\">simpleicons</a>，可选参数。</li>\n<li><code>color</code>：徽标右边的颜色，可选参数。</li>\n<li><code>link</code>：指向的链接，可选参数。</li>\n<li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li>\n<li><code>option</code>：自定义参数，支持<a href=\"https://shields.io/\">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.基本参数,定义徽标左右文字和图标</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class=\"line\">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure>\n<p>2.信息参数，定义徽标右侧内容背景色，指向链接</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class=\"line\">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class=\"line\">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure>\n<p>3.拓展参数，支持shields的API的全部参数内容</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class=\"line\">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class=\"line\">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.基本参数,定义徽标左右文字和图标</p>\n<p><object class=\"ghbdage\" style=\"margin-inline:5px\" title=\"\" standby=\"loading...\" data=\"https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&\"></object><br>\n<object class=\"ghbdage\" style=\"margin-inline:5px\" title=\"\" standby=\"loading...\" data=\"https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&\"></object></p>\n<p>2.信息参数，定义徽标右侧内容背景色，指向链接</p>\n<p><object class=\"ghbdage\" style=\"margin-inline:5px\" title=\"本站使用JsDelivr为静态资源提供CDN加速\" standby=\"loading...\" data=\"https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&\"></object><br>\n//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br>\n<object class=\"ghbdage\" style=\"margin-inline:5px\" title=\"\" standby=\"loading...\" data=\"https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&\"></object></p>\n<p>3.拓展参数，支持shields的API的全部参数内容</p>\n<p><object class=\"ghbdage\" style=\"margin-inline:5px\" title=\"本站采用双线部署，默认线路托管于Vercel\" standby=\"loading...\" data=\"https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20\"></object><br>\n//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br>\n<object class=\"ghbdage\" style=\"margin-inline:5px\" title=\"\" standby=\"loading...\" data=\"https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet\"></object></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-14-网站卡片-sites\">2.14 网站卡片 sites</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% sitegroup %&#125;</span><br><span class=\"line\">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class=\"line\">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class=\"line\">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% sitegroup %&#125;</span><br><span class=\"line\">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class=\"line\">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class=\"line\">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class=\"line\">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class=\"line\">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class=\"line\">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><div class=\"site-card-group\"><a class=\"site-card\" href=\"https://fomalhaut1998.com\"><div class=\"img\"><img src=\"https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg\"/></div><div class=\"info\"><img src=\"https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png\"/><span class=\"title\">fomalhaut1998</span><span class=\"desc\">简约风格</span></div></a>\n<a class=\"site-card\" href=\"https://inkss.cn\"><div class=\"img\"><img src=\"https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg\"/></div><div class=\"info\"><img src=\"https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg\"/><span class=\"title\">inkss</span><span class=\"desc\">这是一段关于这个网站的描述文字</span></div></a>\n<a class=\"site-card\" href=\"https://blog.mhuig.top\"><div class=\"img\"><img src=\"https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png\"/></div><div class=\"info\"><img src=\"https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png\"/><span class=\"title\">MHuiG</span><span class=\"desc\">这是一段关于这个网站的描述文字</span></div></a>\n<a class=\"site-card\" href=\"https://colsrch.top\"><div class=\"img\"><img src=\"https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png\"/></div><div class=\"info\"><img src=\"https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg\"/><span class=\"title\">Colsrch</span><span class=\"desc\">这是一段关于这个网站的描述文字</span></div></a>\n<a class=\"site-card\" href=\"https://linhk1606.github.io\"><div class=\"img\"><img src=\"https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png\"/></div><div class=\"info\"><img src=\"https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png\"/><span class=\"title\">Linhk1606</span><span class=\"desc\">这是一段关于这个网站的描述文字</span></div></a></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-15-行内图片-inlineimage\">2.15 行内图片 inlineimage</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>高度</code>：height=20px</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class=\"line\"></span><br><span class=\"line\">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>这是 <img no-lazy class=\"inline\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif\" style=\"height:1.5em\"/> 一段话。</p>\n<p>这又是 <img no-lazy class=\"inline\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif\" style=\"height:40px;\"/> 一段话。</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-16-单张图片-image\">2.16 单张图片 image</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li>图片宽度高度：width=300px, height=32px</li>\n<li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li>\n<li>占位背景色：bg=#f2f2f2</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.添加描述：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure>\n<p>2.指定宽度</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure>\n<p>3.指定宽度并添加描述：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure>\n<p>4.设置占位背景色：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.添加描述：</p>\n<div class=\"img-wrap\"><div class=\"img-bg\"><img class=\"img\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg\" alt=\"每天下课回宿舍的路，没有什么故事。\"/></div><span class=\"image-caption\">每天下课回宿舍的路，没有什么故事。</span></div>\n2..指定宽度\n<div class=\"img-wrap\"><div class=\"img-bg\"><img class=\"img\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg\" style=\"width:400px;\"/></div></div>\n3.指定宽度并添加描述：\n<div class=\"img-wrap\"><div class=\"img-bg\"><img class=\"img\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg\" alt=\"每天下课回宿舍的路，没有什么故事。\" style=\"width:400px;\"/></div><span class=\"image-caption\">每天下课回宿舍的路，没有什么故事。</span></div>\n4.设置占位背景色：\n<div class=\"img-wrap\"><div class=\"img-bg\" style=\"background:#1D0C04\"><img class=\"img\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg\" alt=\"优化不同宽度浏览的观感\" style=\"width:400px;\"/></div><span class=\"image-caption\">优化不同宽度浏览的观感</span></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-17-音频-audio\">2.17 音频 audio</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><div class=\"audio\"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-18-视频-video\">2.18 视频 video</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>对齐方向</code>：left, center, right</li>\n<li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.100%宽度</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure>\n<p>2.50%宽度</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% videos, 2 %&#125;</span><br><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class=\"line\">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure>\n<p>3.25%宽度</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% videos, 4 %&#125;</span><br><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class=\"line\">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.100%宽度</p>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n2.50%宽度\n<div class=\"videos\" col='2'><div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>\n3.25%宽度\n<div class=\"videos\" col='4'><div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-19-相册-gallery\">2.19 相册 gallery</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><p>1.gallerygroup 相册图库</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class=\"line\">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class=\"line\">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class=\"line\">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>2.gallery 相册</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% gallery %&#125;</span><br><span class=\"line\">markdown 圖片格式</span><br><span class=\"line\">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ul>\n<li>gallerygroup 相册图库</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>图库名字</td>\n</tr>\n<tr>\n<td>description</td>\n<td>图库描述</td>\n</tr>\n<tr>\n<td>link</td>\n<td>链接到对应相册的地址</td>\n</tr>\n<tr>\n<td>img-url</td>\n<td>图库封面</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>gallery 相册</p>\n<p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p>\n</li>\n</ul></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.gallerygroup 相册图库</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class=\"line\">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class=\"line\">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class=\"line\">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>2.gallery 相册</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% gallery %&#125;</span><br><span class=\"line\">![](<span class=\"link\">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class=\"line\">![](<span class=\"link\">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class=\"line\">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.gallerygroup 相册图库</p>\n<div class=\"gallery-group-main\">\n<figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">MC</div>\n  <p>在Rikkaの六花服务器里留下的足迹</p>\n  <a href='/gallery/MC/'></a>\n  </figcaption>\n  </figure>\n<figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">Gundam</div>\n  <p>哦咧哇gundam哒！</p>\n  <a href='/gallery/Gundam/'></a>\n  </figcaption>\n  </figure>\n<figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">I-am-Akilar</div>\n  <p>某种意义上也算自拍吧</p>\n  <a href='/gallery/I-am-Akilar/'></a>\n  </figcaption>\n  </figure>\n</div>\n2.gallery 相册\n<div class=\"gallery-container\" data-type=\"data\" data-button=\"\">\n      <div class=\"gallery-data\">[{\"url\":\"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg\",\"alt\":\"\"},{\"url\":\"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg\",\"alt\":\"\"}]</div>\n      <div class=\"gallery-items\">\n      </div>\n    </div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-20-折叠框-folding\">2.20 折叠框 folding</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><p>1.gallerygroup 相册图库</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class=\"line\">![](<span class=\"link\">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure>\n<!-- tab 参数配置 -->\n<ol>\n<li>\n<p><code>颜色</code>：blue, cyan, green, yellow, red</p>\n</li>\n<li>\n<p><code>状态</code>：状态填写 open 代表默认打开。</p>\n</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% folding 查看图片测试 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">![](<span class=\"link\">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">这是一个默认打开的折叠框。</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class=\"line\">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> haha</span><br><span class=\"line\"><span class=\"bullet\">-</span> hehe</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hahaha <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#x27;height:24px&#x27;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><details class=\"folding-tag\" ><summary> 查看图片测试 </summary>\n              <div class='content'>\n              <p><img src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg\" alt=\"\"></p>\n              </div>\n            </details>\n<details class=\"folding-tag\" cyan open><summary> 查看默认打开的折叠框 </summary>\n              <div class='content'>\n              <p>这是一个默认打开的折叠框。</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" green><summary> 查看代码测试 </summary>\n              <div class='content'>\n              <p>假装这里有代码块（代码块没法嵌套代码块）</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" yellow><summary> 查看列表测试 </summary>\n              <div class='content'>\n              <ul><li>haha</li><li>hehe</li></ul>\n              </div>\n            </details>\n<details class=\"folding-tag\" red><summary> 查看嵌套测试 </summary>\n              <div class='content'>\n              <details class=\"folding-tag\" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class=\"folding-tag\" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>\n              </div>\n            </details></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-21-分栏-tab\">2.21 分栏 tab</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Unique name, [index] %&#125;</span><br><span class=\"line\">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class=\"line\">Any content (support inline tags too).</span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li>\n<p>Unique name :</p>\n<ul>\n<li>\n<p>选项卡块标签的唯一名称，不带逗号。</p>\n</li>\n<li>\n<p>将在#id中用作每个标签及其索引号的前缀。</p>\n</li>\n<li>\n<p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p>\n</li>\n<li>\n<p>仅当前帖子/页面的URL必须是唯一的！</p>\n</li>\n</ul>\n</li>\n<li>\n<p>[index]:</p>\n<ul>\n<li>\n<p>活动选项卡的索引号。</p>\n</li>\n<li>\n<p>如果未指定，将选择第一个标签（1）。</p>\n</li>\n<li>\n<p>如果index为-1，则不会选择任何选项卡。</p>\n</li>\n<li>\n<p>可选参数。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>[Tab caption]:</p>\n<ul>\n<li>\n<p>当前选项卡的标题。</p>\n</li>\n<li>\n<p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p>\n</li>\n<li>\n<p>如果未指定标题，但指定了图标，则标题将为空。</p>\n</li>\n<li>\n<p>可选参数。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>[@icon]:</p>\n<ul>\n<li>\n<p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p>\n</li>\n<li>\n<p>可以指定带空格或不带空格；</p>\n</li>\n<li>\n<p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p>\n</li>\n<li>\n<p>可选参数。</p>\n</li>\n</ul>\n</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.Demo 1 - 预设选择第一个【默认】</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs test1 %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n<p>2.Demo 2 - 预设选择tabs</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs test2, 3 %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n<p>3.Demo 3 - 没有预设值</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs test3, -1 %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n<p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs test4 %&#125;</span><br><span class=\"line\">&lt;!-- tab 第一个Tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**tab名字为第一个Tab**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class=\"line\"><span class=\"strong\">**只有图标 没有Tab名字**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class=\"line\"><span class=\"strong\">**名字+icon**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.Demo 1 - 预设选择第一个【默认】</p>\n<div class=\"tabs\" id=\"test1\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"test1-1\">test1 1</button><button type=\"button\" class=\"tab \" data-href=\"test1-2\">test1 2</button><button type=\"button\" class=\"tab \" data-href=\"test1-3\">test1 3</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"test1-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-item-content\" id=\"test1-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-item-content\" id=\"test1-3\"><p><strong>This is Tab 3.</strong></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<p>2.Demo 2 - 预设选择tabs</p>\n<div class=\"tabs\" id=\"test2\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab \" data-href=\"test2-1\">test2 1</button><button type=\"button\" class=\"tab \" data-href=\"test2-2\">test2 2</button><button type=\"button\" class=\"tab  active\" data-href=\"test2-3\">test2 3</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content\" id=\"test2-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-item-content\" id=\"test2-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-item-content active\" id=\"test2-3\"><p><strong>This is Tab 3.</strong></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<p>3.Demo 3 - 没有预设值</p>\n<div class=\"tabs\" id=\"test3\"><ul class=\"nav-tabs no-default\"><button type=\"button\" class=\"tab \" data-href=\"test3-1\">test3 1</button><button type=\"button\" class=\"tab \" data-href=\"test3-2\">test3 2</button><button type=\"button\" class=\"tab \" data-href=\"test3-3\">test3 3</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content\" id=\"test3-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-item-content\" id=\"test3-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-item-content\" id=\"test3-3\"><p><strong>This is Tab 3.</strong></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p>\n<div class=\"tabs\" id=\"test4\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"test4-1\">第一个Tab</button><button type=\"button\" class=\"tab \" data-href=\"test4-2\"><i class=\"fab fa-apple-pay\" style=\"text-align: center;\"></i></button><button type=\"button\" class=\"tab \" data-href=\"test4-3\"><i class=\"fas fa-bomb\"></i>炸弹</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"test4-1\"><p><strong>tab名字为第一个Tab</strong></p></div><div class=\"tab-item-content\" id=\"test4-2\"><p><strong>只有图标 没有Tab名字</strong></p></div><div class=\"tab-item-content\" id=\"test4-3\"><p><strong>名字+icon</strong></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-22-诗词标签-poem\">2.22 诗词标签 poem</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><ol>\n<li><code>title</code>：诗词标题</li>\n<li><code>author</code>：作者，可以不写</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class=\"line\">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class=\"line\">明月几时有？把酒问青天。</span><br><span class=\"line\">不知天上宫阙，今夕是何年？</span><br><span class=\"line\">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class=\"line\">起舞弄清影，何似在人间？</span><br><span class=\"line\"></span><br><span class=\"line\">转朱阁，低绮户，照无眠。</span><br><span class=\"line\">不应有恨，何事长向别时圆？</span><br><span class=\"line\">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class=\"line\">但愿人长久，千里共婵娟。</span><br><span class=\"line\">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>\n明月几时有？把酒问青天。<br>\n不知天上宫阙，今夕是何年？<br>\n我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>\n起舞弄清影，何似在人间？</p>\n<p>转朱阁，低绮户，照无眠。<br>\n不应有恨，何事长向别时圆？<br>\n人有悲欢离合，月有阴晴圆缺，此事古难全。<br>\n但愿人长久，千里共婵娟。</p>\n</div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-23-阿里图标-icon\">2.23 阿里图标 icon</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li>\n<li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% icon icon-rat<span class=\"emphasis\">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% icon icon-tiger<span class=\"emphasis\">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% icon icon-dragon<span class=\"emphasis\">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% icon icon-horse<span class=\"emphasis\">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% icon icon-monkey<span class=\"emphasis\">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% icon icon-dog<span class=\"emphasis\">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p><svg class=\"icon\" style=\"width:1em; height:1em\" aria-hidden=\"true\"><use xlink:href=\"#icon-rat_zi\"></use></svg><svg class=\"icon\" style=\"width:2em; height:2em\" aria-hidden=\"true\"><use xlink:href=\"#icon-rat\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:3em; height:3em\" aria-hidden=\"true\"><use xlink:href=\"#icon-ox_chou\"></use></svg><svg class=\"icon\" style=\"width:4em; height:4em\" aria-hidden=\"true\"><use xlink:href=\"#icon-ox\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:5em; height:5em\" aria-hidden=\"true\"><use xlink:href=\"#icon-tiger_yin\"></use></svg><svg class=\"icon\" style=\"width:6em; height:6em\" aria-hidden=\"true\"><use xlink:href=\"#icon-tiger\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:1em; height:1em\" aria-hidden=\"true\"><use xlink:href=\"#icon-rabbit_mao\"></use></svg><svg class=\"icon\" style=\"width:2em; height:2em\" aria-hidden=\"true\"><use xlink:href=\"#icon-rabbit\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:3em; height:3em\" aria-hidden=\"true\"><use xlink:href=\"#icon-dragon_chen\"></use></svg><svg class=\"icon\" style=\"width:4em; height:4em\" aria-hidden=\"true\"><use xlink:href=\"#icon-dragon\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:5em; height:5em\" aria-hidden=\"true\"><use xlink:href=\"#icon-snake_si\"></use></svg><svg class=\"icon\" style=\"width:6em; height:6em\" aria-hidden=\"true\"><use xlink:href=\"#icon-snake\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:1em; height:1em\" aria-hidden=\"true\"><use xlink:href=\"#icon-horse_wu\"></use></svg><svg class=\"icon\" style=\"width:2em; height:2em\" aria-hidden=\"true\"><use xlink:href=\"#icon-horse\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:3em; height:3em\" aria-hidden=\"true\"><use xlink:href=\"#icon-goat_wei\"></use></svg><svg class=\"icon\" style=\"width:4em; height:4em\" aria-hidden=\"true\"><use xlink:href=\"#icon-goat\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:5em; height:5em\" aria-hidden=\"true\"><use xlink:href=\"#icon-monkey_shen\"></use></svg><svg class=\"icon\" style=\"width:6em; height:6em\" aria-hidden=\"true\"><use xlink:href=\"#icon-monkey\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:1em; height:1em\" aria-hidden=\"true\"><use xlink:href=\"#icon-rooster_you\"></use></svg><svg class=\"icon\" style=\"width:2em; height:2em\" aria-hidden=\"true\"><use xlink:href=\"#icon-rooster\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:3em; height:3em\" aria-hidden=\"true\"><use xlink:href=\"#icon-dog_xu\"></use></svg><svg class=\"icon\" style=\"width:4em; height:4em\" aria-hidden=\"true\"><use xlink:href=\"#icon-dog\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:5em; height:5em\" aria-hidden=\"true\"><use xlink:href=\"#icon-boar_hai\"></use></svg><svg class=\"icon\" style=\"width:6em; height:6em\" aria-hidden=\"true\"><use xlink:href=\"#icon-boar\"></use></svg></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-25-进度条-progress\">2.25  进度条 progress</h2>\n<div class=\"note info flat\"><p>进度条标签参考<a href=\"https://rongbuqiu.com/jdt.html\">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>\n源样式提取自<a href=\"https://zwying0814.gitbook.io/cuteen/\">Cuteen</a>主题。</p>\n</div>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>width</code>: 0到100的阿拉伯数字</li>\n<li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li>\n<li><code>text</code>:进度条上的文字内容</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class=\"line\">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class=\"line\">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class=\"line\">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class=\"line\">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class=\"line\">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><div class=\"progress\"><div class=\"progress-bar-animated progress-bar progress-bar-striped bg-red\"  style=\"width: 10%\" aria-valuenow=\"10\" aria-valuemin=\"0\" aria-valuemax=\"100\"><p>进度条样式预览</p></div></div>\n<div class=\"progress\"><div class=\"progress-bar-animated progress-bar progress-bar-striped bg-yellow\"  style=\"width: 30%\" aria-valuenow=\"30\" aria-valuemin=\"0\" aria-valuemax=\"100\"><p>进度条样式预览</p></div></div>\n<div class=\"progress\"><div class=\"progress-bar-animated progress-bar progress-bar-striped bg-green\"  style=\"width: 50%\" aria-valuenow=\"50\" aria-valuemin=\"0\" aria-valuemax=\"100\"><p>进度条样式预览</p></div></div>\n<div class=\"progress\"><div class=\"progress-bar-animated progress-bar progress-bar-striped bg-cyan\"  style=\"width: 70%\" aria-valuenow=\"70\" aria-valuemin=\"0\" aria-valuemax=\"100\"><p>进度条样式预览</p></div></div>\n<div class=\"progress\"><div class=\"progress-bar-animated progress-bar progress-bar-striped bg-blue\"  style=\"width: 90%\" aria-valuenow=\"90\" aria-valuemin=\"0\" aria-valuemax=\"100\"><p>进度条样式预览</p></div></div>\n<div class=\"progress\"><div class=\"progress-bar-animated progress-bar progress-bar-striped bg-gray\"  style=\"width: 100%\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\"><p>进度条样式预览</p></div></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-26-注释-notation\">2.26 注释 notation</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li>\n<p><code>label</code>: 注释词汇</p>\n</li>\n<li>\n<p><code>text</code>: 悬停显示的注解内容</p>\n</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-27-气泡注释-bubble\">2.27 气泡注释 bubble</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>content</code>: 注释词汇</li>\n<li><code>notation</code>: 悬停显示的注解内容</li>\n<li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class=\"bubble-content\">兄弟相邻选择器</span><span class=\"bubble-notation\"><span class=\"bubble-item\" style=\"background-color:#71a4e3;\">例如 h1 + p {margin-top:50px;}</span></span>，<span class=\"bubble-content\">flex布局</span><span class=\"bubble-notation\"><span class=\"bubble-item\" style=\"background-color:#ec5830;\">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class=\"bubble-content\">transform变换</span><span class=\"bubble-notation\"><span class=\"bubble-item\" style=\"background-color:#1db675;\">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class=\"bubble-content\">贝塞尔速度曲线</span><span class=\"bubble-notation\"><span class=\"bubble-item\" style=\"background-color:#de4489;\">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class=\"bubble-content\">clip-path</span><span class=\"bubble-notation\"><span class=\"bubble-item\" style=\"background-color:#868fd7;\">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-28-引用文献-reference\">2.28 引用文献 reference</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% referto [id] , [literature] %&#125;</span><br><span class=\"line\">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li>\n<p>referto 引用上标</p>\n<ul>\n<li>\n<p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p>\n</li>\n<li>\n<p><code>literature</code>: 引用的参考文献名称</p>\n</li>\n</ul>\n</li>\n<li>\n<p>referfrom 引用出处</p>\n<ul>\n<li>\n<p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p>\n</li>\n<li>\n<p><code>literature</code>: 引用的参考文献名称</p>\n</li>\n<li>\n<p><code>url</code>: 引用的参考文献链接，可省略</p>\n</li>\n</ul>\n</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% span center logo large, 历史上的今天 %&#125;</span><br><span class=\"line\"><span class=\"bullet\">1.</span> 1475年：意大利文艺复兴时期的雕塑家米开朗基罗&#123;% referto &#x27;[1]&#x27;,&#x27;米开朗基罗&#x27; %&#125;诞生。他是文艺复兴时期最重要的艺术家之一，作品包括《大卫像》和《圣母玛利亚》等。</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 1899年：美国发明家、电影制片人威廉·赛勒斯·福克斯&#123;% referto &#x27;[2]&#x27;,&#x27;电影制片人威廉·赛勒斯·福克斯&#x27; %&#125;诞生。他是电影行业的先驱，创立了20世纪福克斯影业公司。</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 1974年：计算机科学家维特·柏恩斯·李发表了有关万维网&#123;% referto &#x27;[3]&#x27;,&#x27;万维网的提案&#x27; %&#125;的提案，奠定了互联网发展的基础。</span><br><span class=\"line\"><span class=\"bullet\">4.</span>  1998年：谷歌公司成立，创始人拉里·佩奇和谢尔盖·布林将互联网搜索引擎&#123;% referto &#x27;[4]&#x27;,&#x27;谷歌搜索引擎的历史&#x27; %&#125;带入新的高度，成为全球最大的搜索引擎之一。</span><br><span class=\"line\"><span class=\"bullet\">5.</span> 2007年：苹果公司推出首款iPhone&#123;% referto &#x27;[5]&#x27;,&#x27;首款iPhone手机&#x27; %&#125;，引领了智能手机革命，改变了人们的通讯和生活方式。</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% referfrom &#x27;[1]&#x27;,&#x27;米开朗基罗&#x27;,&#x27;https://en.wikipedia.org/wiki/Michelangelo&#x27; %&#125;</span><br><span class=\"line\">&#123;% referfrom &#x27;[2]&#x27;,&#x27;电影制片人威廉·赛勒斯·福克斯&#x27;,&#x27;https://en.wikipedia.org/wiki/William<span class=\"emphasis\">_Fox_</span>(producer)&#x27; %&#125;</span><br><span class=\"line\">&#123;% referfrom &#x27;[3]&#x27;,&#x27;万维网的提案&#x27;,&#x27;https://en.wikipedia.org/wiki/Tim<span class=\"emphasis\">_Berners-Lee&#x27; %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% referfrom &#x27;[4]&#x27;,&#x27;谷歌搜索引擎的历史&#x27;,&#x27;https://en.wikipedia.org/wiki/History_</span>of<span class=\"emphasis\">_Google&#x27; %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% referfrom &#x27;[5]&#x27;,&#x27;首款iPhone手机&#x27;,&#x27;https://en.wikipedia.org/wiki/IPhone_</span>(1st<span class=\"emphasis\">_generation)&#x27; %&#125;</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p><span class='p center logo large'>历史上的今天</span></p>\n<ol>\n<li>1475年：意大利文艺复兴时期的雕塑家米开朗基罗<span class=\"hidden-anchor\" id=\"referto_[1]\"></span><sup class=\"reference\"><a href=\"#referfrom_[1]\">[1]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">米开朗基罗</span><span class=\"reference-title\">参考资料</span></span></span>诞生。他是文艺复兴时期最重要的艺术家之一，作品包括《大卫像》和《圣母玛利亚》等。</li>\n<li>1899年：美国发明家、电影制片人威廉·赛勒斯·福克斯<span class=\"hidden-anchor\" id=\"referto_[2]\"></span><sup class=\"reference\"><a href=\"#referfrom_[2]\">[2]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">电影制片人威廉·赛勒斯·福克斯</span><span class=\"reference-title\">参考资料</span></span></span>诞生。他是电影行业的先驱，创立了20世纪福克斯影业公司。</li>\n<li>1974年：计算机科学家维特·柏恩斯·李发表了有关万维网<span class=\"hidden-anchor\" id=\"referto_[3]\"></span><sup class=\"reference\"><a href=\"#referfrom_[3]\">[3]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">万维网的提案</span><span class=\"reference-title\">参考资料</span></span></span>的提案，奠定了互联网发展的基础。</li>\n<li>1998年：谷歌公司成立，创始人拉里·佩奇和谢尔盖·布林将互联网搜索引擎<span class=\"hidden-anchor\" id=\"referto_[4]\"></span><sup class=\"reference\"><a href=\"#referfrom_[4]\">[4]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">谷歌搜索引擎的历史</span><span class=\"reference-title\">参考资料</span></span></span>带入新的高度，成为全球最大的搜索引擎之一。</li>\n<li>2007年：苹果公司推出首款iPhone<span class=\"hidden-anchor\" id=\"referto_[5]\"></span><sup class=\"reference\"><a href=\"#referfrom_[5]\">[5]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">首款iPhone手机</span><span class=\"reference-title\">参考资料</span></span></span>，引领了智能手机革命，改变了人们的通讯和生活方式。</li>\n</ol>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[1]\"></span><a class=\"reference-anchor\" href=\"#referto_[1]\">[1]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/Michelangelo\">米开朗基罗</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[2]\"></span><a class=\"reference-anchor\" href=\"#referto_[2]\">[2]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/William_Fox_(producer)\">电影制片人威廉·赛勒斯·福克斯</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[3]\"></span><a class=\"reference-anchor\" href=\"#referto_[3]\">[3]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/Tim_Berners-Lee\">万维网的提案</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[4]\"></span><a class=\"reference-anchor\" href=\"#referto_[4]\">[4]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/History_of_Google\">谷歌搜索引擎的历史</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[5]\"></span><a class=\"reference-anchor\" href=\"#referto_[5]\">[5]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/IPhone_(1st_generation)\">首款iPhone手机</a></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>2.外挂标签</h1>\n<p>教程参考店长</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"店长教程贴\" href=\"https://akilar.top/posts/615e2dec/\"><div class=\"left\"><img src=\"https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico\"/></div><div class=\"right\"><p class=\"text\">店长教程贴</p><p class=\"url\">https://akilar.top/posts/615e2dec/</p></div></a></div>\n<h2 id=\"2-1-行内文本样式-text\">2.1 行内文本样式 text</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% u 文本内容 %&#125;</span><br><span class=\"line\">&#123;% emp 文本内容 %&#125;</span><br><span class=\"line\">&#123;% wavy 文本内容 %&#125;</span><br><span class=\"line\">&#123;% del 文本内容 %&#125;</span><br><span class=\"line\">&#123;% kbd 文本内容 %&#125;</span><br><span class=\"line\">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class=\"line\"><span class=\"bullet\">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class=\"line\"><span class=\"bullet\">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class=\"line\"><span class=\"bullet\">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><ol>\n<li>带 <u>下划线</u> 的文本</li>\n<li>带 <emp>着重号</emp> 的文本</li>\n<li>带 <wavy>波浪线</wavy> 的文本</li>\n<li>带 <del>删除线</del> 的文本</li>\n<li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li>\n<li>密码样式的文本：<psw>这里没有验证码</psw></li>\n</ol></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-2-行内文本-span\">2.2 行内文本 span</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>字体</code>: logo, code</li>\n<li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li>\n<li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li>\n<li><code>对齐方向</code>: left, center, right</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> 彩色文字</span><br><span class=\"line\">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 超大号文字</span><br><span class=\"line\">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class=\"line\">&#123;% span center logo large, Volantis %&#125;</span><br><span class=\"line\">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><ul>\n<li>彩色文字<br>\n在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li>\n<li>超大号文字<br>\n文档「开始」页面中的标题部分就是超大号文字。<br>\n<span class='p center logo large'>Volantis</span><br>\n<span class='p center small'>A Wonderful Theme for Hexo</span></li>\n</ul></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-3-段落文本-p\">2.3 段落文本 p</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>字体</code>: logo, code</li>\n<li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li>\n<li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li>\n<li><code>对齐方向</code>: left, center, right</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> 彩色文字</span><br><span class=\"line\">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 超大号文字</span><br><span class=\"line\">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class=\"line\">&#123;% p center logo large, Volantis %&#125;</span><br><span class=\"line\">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><ul>\n<li>彩色文字<br>\n在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li>\n<li>超大号文字<br>\n文档「开始」页面中的标题部分就是超大号文字。</li>\n</ul>\n<p class='p center logo large'>Volantis</p>\n<p class='p center small'>A Wonderful Theme for Hexo</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-4-引用note\">2.4 引用note</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">通用配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">语法格式</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-5\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">note:</span><br><span class=\"line\">  # Note tag style values:</span><br><span class=\"line\">  #  - simple    bs-callout old alert style. Default.</span><br><span class=\"line\">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class=\"line\">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class=\"line\">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class=\"line\">  style: simple</span><br><span class=\"line\">  icons: false</span><br><span class=\"line\">  border<span class=\"emphasis\">_radius: 3</span></span><br><span class=\"line\"><span class=\"emphasis\">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class=\"line\"><span class=\"emphasis\">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class=\"line\"><span class=\"emphasis\">  light_</span>bg<span class=\"emphasis\">_offset: 0</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 自带icon</span></span><br><span class=\"line\">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class=\"line\">Any content (support inline tags too.io).</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br><span class=\"line\"><span class=\"section\"># 外部icon</span></span><br><span class=\"line\">&#123;% note [color] [icon] [style] %&#125;</span><br><span class=\"line\">Any content (support inline tags too.io).</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.自带icon</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>class</td>\n<td style=\"text-align:center\">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td>\n</tr>\n<tr>\n<td>no-icon</td>\n<td style=\"text-align:center\">【可选】不显示 icon</td>\n</tr>\n<tr>\n<td>style</td>\n<td style=\"text-align:center\">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td>\n</tr>\n</tbody>\n</table>\n<p>2.外部icon</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>class</td>\n<td style=\"text-align:center\">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td>\n</tr>\n<tr>\n<td>no-icon</td>\n<td style=\"text-align:center\">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td>\n</tr>\n<tr>\n<td>style</td>\n<td style=\"text-align:center\">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td>\n</tr>\n</tbody>\n</table></div><div class=\"tab-item-content\" id=\"分栏-4\"><details class=\"folding-tag\" blue><summary> 1.自带icon </summary>\n              <div class='content'>\n              <p>1.<code>simple</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<details class=\"folding-tag\" blue><summary> 2.外部icon </summary>\n              <div class='content'>\n              <p>1.<code>simple</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details></div><div class=\"tab-item-content\" id=\"分栏-5\"><details class=\"folding-tag\" blue><summary> 1.自带icon </summary>\n              <div class='content'>\n              <p>1.<code>simple</code>样式</p><div class=\"note simple\"><p>默认 提示块标签</p></div><div class=\"note default simple\"><p>default 提示块标签</p></div><div class=\"note primary simple\"><p>primary 提示块标签</p></div><div class=\"note success simple\"><p>success 提示块标签</p></div><div class=\"note info simple\"><p>info 提示块标签</p></div><div class=\"note warning simple\"><p>warning 提示块标签</p></div><div class=\"note danger simple\"><p>danger 提示块标签</p></div>2.`modern`样式<div class=\"note modern\"><p>默认 提示块标签</p></div><div class=\"note default modern\"><p>default 提示块标签</p></div><div class=\"note primary modern\"><p>primary 提示块标签</p></div><div class=\"note success modern\"><p>success 提示块标签</p></div><div class=\"note info modern\"><p>info 提示块标签</p></div><div class=\"note warning modern\"><p>warning 提示块标签</p></div><div class=\"note danger modern\"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class=\"note flat\"><p>默认 提示块标签</p></div><div class=\"note default flat\"><p>default 提示块标签</p></div><div class=\"note primary flat\"><p>primary 提示块标签</p></div><div class=\"note success flat\"><p>success 提示块标签</p></div><div class=\"note info flat\"><p>info 提示块标签</p></div><div class=\"note warning flat\"><p>warning 提示块标签</p></div><div class=\"note danger flat\"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class=\"note disabled\"><p>默认 提示块标签</p></div><div class=\"note default disabled\"><p>default 提示块标签</p></div><div class=\"note primary disabled\"><p>primary 提示块标签</p></div><div class=\"note success disabled\"><p>success 提示块标签</p></div><div class=\"note info disabled\"><p>info 提示块标签</p></div><div class=\"note warning disabled\"><p>warning 提示块标签</p></div><div class=\"note danger disabled\"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class=\"note no-icon simple\"><p>默认 提示块标签</p></div><div class=\"note default no-icon simple\"><p>default 提示块标签</p></div><div class=\"note primary no-icon simple\"><p>primary 提示块标签</p></div><div class=\"note success no-icon simple\"><p>success 提示块标签</p></div><div class=\"note info no-icon simple\"><p>info 提示块标签</p></div><div class=\"note warning no-icon simple\"><p>warning 提示块标签</p></div><div class=\"note danger no-icon simple\"><p>danger 提示块标签</p></div>\n              </div>\n            </details>\n<details class=\"folding-tag\" blue><summary> 2.外部icon </summary>\n              <div class='content'>\n              <p>1.<code>simple</code>样式</p><div class=\"note icon-padding simple\"><i class=\"note-icon fab fa-cc-visa\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-bullhorn\"></i><p>2021年快到了…</p></div><div class=\"note pink icon-padding simple\"><i class=\"note-icon fas fa-car-crash\"></i><p>小心开车 安全至上</p></div><div class=\"note red icon-padding simple\"><i class=\"note-icon fas fa-fan\"></i><p>这是三片呢？还是四片？</p></div><div class=\"note orange icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note purple icon-padding simple\"><i class=\"note-icon far fa-hand-scissors\"></i><p>剪刀石头布</p></div><div class=\"note green icon-padding simple\"><i class=\"note-icon fab fa-internet-explorer\"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class=\"note icon-padding modern\"><i class=\"note-icon fab fa-cc-visa\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note blue icon-padding modern\"><i class=\"note-icon fas fa-bullhorn\"></i><p>2021年快到了…</p></div><div class=\"note pink icon-padding modern\"><i class=\"note-icon fas fa-car-crash\"></i><p>小心开车 安全至上</p></div><div class=\"note red icon-padding modern\"><i class=\"note-icon fas fa-fan\"></i><p>这是三片呢？还是四片？</p></div><div class=\"note orange icon-padding modern\"><i class=\"note-icon fas fa-battery-half\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note purple icon-padding modern\"><i class=\"note-icon far fa-hand-scissors\"></i><p>剪刀石头布</p></div><div class=\"note green icon-padding modern\"><i class=\"note-icon fab fa-internet-explorer\"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class=\"note icon-padding flat\"><i class=\"note-icon fab fa-cc-visa\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note blue icon-padding flat\"><i class=\"note-icon fas fa-bullhorn\"></i><p>2021年快到了…</p></div><div class=\"note pink icon-padding flat\"><i class=\"note-icon fas fa-car-crash\"></i><p>小心开车 安全至上</p></div><div class=\"note red icon-padding flat\"><i class=\"note-icon fas fa-fan\"></i><p>这是三片呢？还是四片？</p></div><div class=\"note orange icon-padding flat\"><i class=\"note-icon fas fa-battery-half\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note purple icon-padding flat\"><i class=\"note-icon far fa-hand-scissors\"></i><p>剪刀石头布</p></div><div class=\"note green icon-padding flat\"><i class=\"note-icon fab fa-internet-explorer\"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class=\"note icon-padding disabled\"><i class=\"note-icon fab fa-cc-visa\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note blue icon-padding disabled\"><i class=\"note-icon fas fa-bullhorn\"></i><p>2021年快到了…</p></div><div class=\"note pink icon-padding disabled\"><i class=\"note-icon fas fa-car-crash\"></i><p>小心开车 安全至上</p></div><div class=\"note red icon-padding disabled\"><i class=\"note-icon fas fa-fan\"></i><p>这是三片呢？还是四片？</p></div><div class=\"note orange icon-padding disabled\"><i class=\"note-icon fas fa-battery-half\"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note purple icon-padding disabled\"><i class=\"note-icon far fa-hand-scissors\"></i><p>剪刀石头布</p></div><div class=\"note green icon-padding disabled\"><i class=\"note-icon fab fa-internet-explorer\"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class=\"note no-icon simple\"><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note blue no-icon simple\"><p>2021年快到了…</p></div><div class=\"note pink no-icon simple\"><p>小心开车 安全至上</p></div><div class=\"note red no-icon simple\"><p>这是三片呢？还是四片？</p></div><div class=\"note orange no-icon simple\"><p>你是刷 Visa 还是 UnionPay</p></div><div class=\"note purple no-icon simple\"><p>剪刀石头布</p></div><div class=\"note green no-icon simple\"><p>前端最讨厌的浏览器</p></div>\n              </div>\n            </details></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-5-上标标签-tip\">2.5 上标标签 tip</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li>\n<li><code>自定义图标</code>: 支持fontawesome。</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><div class=\"tip \"><p>default</p>\n</div>\n<div class=\"tip info\"><p>info</p>\n</div>\n<div class=\"tip success\"><p>success</p>\n</div>\n<div class=\"tip error\"><p>error</p>\n</div>\n<div class=\"tip warning\"><p>warning</p>\n</div>\n<div class=\"tip bolt\"><p>bolt</p>\n</div>\n<div class=\"tip ban\"><p>ban</p>\n</div>\n<div class=\"tip home\"><p>home</p>\n</div>\n<div class=\"tip sync\"><p>sync</p>\n</div>\n<div class=\"tip cogs\"><p>cogs</p>\n</div>\n<div class=\"tip key\"><p>key</p>\n</div>\n<div class=\"tip bell\"><p>bell</p>\n</div>\n<div class=\"tip fa-atom\"><p>自定义font awesome图标</p>\n</div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-6-动态标签-anima\">2.6 动态标签 anima</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><div class=\"note info flat\"><ol>\n<li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li>\n<li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>\nYou can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li>\n<li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li>\n</ol>\n</div></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.On DOM load（当页面加载时显示动画）</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<p>2.调整动画速度</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<p>3.On hover（当鼠标悬停时显示动画）</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tip warning faa-parent animated-hover %&#125;<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class=\"line\">&#123;% tip ban faa-parent animated-hover %&#125;<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.On DOM load（当页面加载时显示动画）</p>\n<div class=\"tip warning faa-horizontal animated\"><p>warning</p>\n</div>\n<div class=\"tip ban faa-flash animated\"><p>ban</p>\n</div>\n2.调整动画速度\n<div class=\"tip warning faa-horizontal animated faa-fast\"><p>warning</p>\n</div>\n<div class=\"tip ban faa-flash animated faa-slow\"><p>ban</p>\n</div>\n3.On hover（当鼠标悬停时显示动画）\n<div class=\"tip warning faa-horizontal animated-hover\"><p>warning</p>\n</div>\n<div class=\"tip ban faa-flash animated-hover\"><p>ban</p>\n</div>\n4.On parent hover（当鼠标悬停在父级元素时显示动画）\n<div class=\"tip warning faa-parent animated-hover\"><p class=\"faa-horizontal\">warning</p></div>\n<div class=\"tip ban faa-parent animated-hover\"><p class=\"faa-flash\">ban</p></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-7-复选列表-checkbox\">2.7 复选列表 checkbox</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>样式</code>: plus, minus, times</li>\n<li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li>\n<li><code>选中状态</code>: checked</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class=\"line\">&#123;% checkbox checked, 支持简单的 [<span class=\"string\">markdown</span>](<span class=\"link\">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class=\"line\">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class=\"line\">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class=\"line\">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class=\"line\">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class=\"line\">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class=\"line\">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class=\"line\">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class=\"line\">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><div class='checkbox'><input type=\"checkbox\" />\n            <p>纯文本测试</p>\n            </div>\n<div class='checkbox checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>支持简单的 <a href=\"https://guides.github.com/features/mastering-markdown/\">markdown</a> 语法</p>\n            </div>\n<div class='checkbox red'><input type=\"checkbox\" />\n            <p>支持自定义颜色</p>\n            </div>\n<div class='checkbox green checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>绿色 + 默认选中</p>\n            </div>\n<div class='checkbox yellow checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>黄色 + 默认选中</p>\n            </div>\n<div class='checkbox cyan checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>青色 + 默认选中</p>\n            </div>\n<div class='checkbox blue checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>蓝色 + 默认选中</p>\n            </div>\n<div class='checkbox plus green checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>增加</p>\n            </div>\n<div class='checkbox minus yellow checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>减少</p>\n            </div>\n<div class='checkbox times red checked'><input type=\"checkbox\" checked=\"checked\"/>\n            <p>叉</p>\n            </div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-8-单选列表-radio\">2.8 单选列表 radio</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li>\n<li><code>选中状态</code>: checked</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% radio 纯文本测试 %&#125;</span><br><span class=\"line\">&#123;% radio checked, 支持简单的 [<span class=\"string\">markdown</span>](<span class=\"link\">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class=\"line\">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class=\"line\">&#123;% radio green, 绿色 %&#125;</span><br><span class=\"line\">&#123;% radio yellow, 黄色 %&#125;</span><br><span class=\"line\">&#123;% radio cyan, 青色 %&#125;</span><br><span class=\"line\">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><div class='checkbox'><input type=\"radio\" />\n            <p>纯文本测试</p>\n            </div>\n<div class='checkbox checked'><input type=\"radio\" checked=\"checked\"/>\n            <p>支持简单的 <a href=\"https://guides.github.com/features/mastering-markdown/\">markdown</a> 语法</p>\n            </div>\n<div class='checkbox red'><input type=\"radio\" />\n            <p>支持自定义颜色</p>\n            </div>\n<div class='checkbox green'><input type=\"radio\" />\n            <p>绿色</p>\n            </div>\n<div class='checkbox yellow'><input type=\"radio\" />\n            <p>黄色</p>\n            </div>\n<div class='checkbox cyan'><input type=\"radio\" />\n            <p>青色</p>\n            </div>\n<div class='checkbox blue'><input type=\"radio\" />\n            <p>蓝色</p>\n            </div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-9-时间轴-timeline\">2.9 时间轴 timeline</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class=\"line\">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class=\"line\">正文内容</span><br><span class=\"line\">&lt;!-- endtimeline --&gt;</span><br><span class=\"line\">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class=\"line\">正文内容</span><br><span class=\"line\">&lt;!-- endtimeline --&gt;</span><br><span class=\"line\">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>title</code>:标题/时间线</li>\n<li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- timeline 2020-07-24 [<span class=\"string\">2.6.6 -&gt; 3.0</span>](<span class=\"link\">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> 如果有 <span class=\"code\">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class=\"code\">`lazyload.isSPA: true`</span>。</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class=\"code\">`use_cdn: true`</span> 则需要删除。</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class=\"line\"><span class=\"bullet\">4.</span> 2.x 版本的置顶 <span class=\"code\">`top: true`</span> 改为了 <span class=\"code\">`pin: true`</span>，并且同样适用于 <span class=\"code\">`layout: page`</span> 的页面。</span><br><span class=\"line\"><span class=\"bullet\">5.</span> 如果使用了 <span class=\"code\">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- endtimeline --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- timeline 2020-05-15 [<span class=\"string\">2.6.3 -&gt; 2.6.6</span>](<span class=\"link\">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">不需要额外处理。</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- endtimeline --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- timeline 2020-04-20 [<span class=\"string\">2.6.2 -&gt; 2.6.3</span>](<span class=\"link\">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> 全局搜索 <span class=\"code\">`seotitle`</span> 并替换为 <span class=\"code\">`seo_title`</span>。</span><br><span class=\"line\"><span class=\"bullet\">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class=\"code\">`group: group_name`</span> 对应的组件名必须是 <span class=\"code\">`group_name`</span>。</span><br><span class=\"line\"><span class=\"bullet\">2.</span> group 组件的列表名优先显示文章的 <span class=\"code\">`short_title`</span> 其次是 <span class=\"code\">`title`</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- endtimeline --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href=\"https://github.com/volantis-x/hexo-theme-volantis/releases\">2.6.6 -&gt; 3.0</a></p>\n</div></div><div class='timeline-item-content'><ol>\n<li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li>\n<li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li>\n<li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li>\n<li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li>\n<li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li>\n</ol>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href=\"https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6\">2.6.3 -&gt; 2.6.6</a></p>\n</div></div><div class='timeline-item-content'><p>不需要额外处理。</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href=\"https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3\">2.6.2 -&gt; 2.6.3</a></p>\n</div></div><div class='timeline-item-content'><ol>\n<li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li>\n<li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li>\n<li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li>\n</ol>\n</div></div></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-10-链接卡片-link\">2.10 链接卡片 link</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><div class=\"tag link\"><a class=\"link-card\" title=\"糖果屋教程贴\" href=\"https://akilar.top/posts/615e2dec/\"><div class=\"left\"><img src=\"https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico\"/></div><div class=\"right\"><p class=\"text\">糖果屋教程贴</p><p class=\"url\">https://akilar.top/posts/615e2dec/</p></div></a></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-11-按钮-btns\">2.11 按钮 btns</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% btns 样式参数 %&#125;</span><br><span class=\"line\">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class=\"line\">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class=\"line\">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li>圆角样式：rounded, circle</li>\n<li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li>\n<li>布局方式：<br>\n默认为自动宽度，适合视野内只有一两个的情况。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>wide</td>\n<td>宽一点的按钮</td>\n</tr>\n<tr>\n<td>fill</td>\n<td>填充布局，自动铺满至少一行，多了会换行</td>\n</tr>\n<tr>\n<td>center</td>\n<td>居中，按钮之间是固定间距</td>\n</tr>\n<tr>\n<td>around</td>\n<td>居中分散</td>\n</tr>\n<tr>\n<td>grid2</td>\n<td>等宽最多2列，屏幕变窄会适当减少列数</td>\n</tr>\n<tr>\n<td>grid3</td>\n<td>等宽最多3列，屏幕变窄会适当减少列数</td>\n</tr>\n<tr>\n<td>grid4</td>\n<td>等宽最多4列，屏幕变窄会适当减少列数</td>\n</tr>\n<tr>\n<td>grid5</td>\n<td>等宽最多5列，屏幕变窄会适当减少列数</td>\n</tr>\n</tbody>\n</table></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% btns circle grid5 %&#125;</span><br><span class=\"line\">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class=\"line\">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class=\"line\">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class=\"line\">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class=\"line\">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class=\"line\">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure>\n<p>2.或者含有图标的按钮</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% btns rounded grid5 %&#125;</span><br><span class=\"line\">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class=\"line\">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class=\"line\">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure>\n<p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% btns circle center grid5 %&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span>心率管家<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></span><br><span class=\"line\">  &#123;% p red, 专业版 %&#125;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span>心率管家<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></span><br><span class=\"line\">  &#123;% p green, 免费版 %&#125;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p>\n<div class=\"btns circle grid5\">\n            <a class=\"button\" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>\n<a class=\"button\" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>\n<a class=\"button\" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>\n<a class=\"button\" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>\n<a class=\"button\" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>\n          </div>\n2.或者含有图标的按钮\n<div class=\"btns rounded grid5\">\n            <a class=\"button\" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a>\n<a class=\"button\" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>\n          </div>\n3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中\n<div class=\"btns circle center grid5\">\n            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>\n  <i class='fab fa-apple'></i>\n  <b>心率管家</b>\n  <p class='p red'>专业版</p>\n  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'>\n</a>\n<a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>\n  <i class='fab fa-apple'></i>\n  <b>心率管家</b>\n  <p class='p green'>免费版</p>\n  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'>\n</a>\n          </div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-12-github卡片-ghcard\">2.12 github卡片 ghcard</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class=\"line\">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>\n以下只写几个常用参数值。</p>\n<table>\n<thead>\n<tr>\n<th><strong>参数名</strong></th>\n<th>取值</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hide</td>\n<td>stars,commits,prs,issues,contribs</td>\n<td>隐藏指定统计</td>\n</tr>\n<tr>\n<td>count_private</td>\n<td>true</td>\n<td>将私人项目贡献添加到总提交计数中</td>\n</tr>\n<tr>\n<td>show_icons</td>\n<td>true</td>\n<td>显示图标</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>查阅:<a href=\"https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md\">Available Themes</a></td>\n<td>主题</td>\n</tr>\n</tbody>\n</table></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.用户信息卡片</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">| &#123;% ghcard Aruoshui %&#125; | &#123;% ghcard Aruoshui, theme=vue %&#125; |</span><br><span class=\"line\">| -- | -- |</span><br><span class=\"line\">| &#123;% ghcard Aruoshui, theme=buefy %&#125; | &#123;% ghcard Aruoshui, theme=solarized-light %&#125; |</span><br><span class=\"line\">| &#123;% ghcard Aruoshui, theme=onedark %&#125; | &#123;% ghcard Aruoshui, theme=solarized-dark %&#125; |</span><br><span class=\"line\">| &#123;% ghcard Aruoshui, theme=algolia %&#125; | &#123;% ghcard Aruoshui, theme=calm %&#125; |</span><br></pre></td></tr></table></figure>\n<p>2.仓库信息卡片</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">| &#123;% ghcard Aruoshui/Aruoshui.github.io %&#125; | &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=vue %&#125; |</span><br><span class=\"line\">| -- | -- |</span><br><span class=\"line\">| &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=buefy %&#125; | &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=solarized-light %&#125; |</span><br><span class=\"line\">| &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=onedark %&#125; | &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=solarized-dark %&#125; |</span><br><span class=\"line\">| &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=algolia %&#125; | &#123;% ghcard Aruoshui/Aruoshui.github.io, theme=calm %&#125; |</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.用户信息卡片</p>\n<table>\n<thead>\n<tr>\n<th><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&show_owner=true\"/></a></th>\n<th><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=vue&show_owner=true\"/></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=buefy&show_owner=true\"/></a></td>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=solarized-light&show_owner=true\"/></a></td>\n</tr>\n<tr>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=onedark&show_owner=true\"/></a></td>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=solarized-dark&show_owner=true\"/></a></td>\n</tr>\n<tr>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=algolia&show_owner=true\"/></a></td>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Aruoshui&theme=calm&show_owner=true\"/></a></td>\n</tr>\n</tbody>\n</table>\n<p>2.仓库信息卡片</p>\n<table>\n<thead>\n<tr>\n<th><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&show_owner=true\"/></a></th>\n<th><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=vue&show_owner=true\"/></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=buefy&show_owner=true\"/></a></td>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=solarized-light&show_owner=true\"/></a></td>\n</tr>\n<tr>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=onedark&show_owner=true\"/></a></td>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=solarized-dark&show_owner=true\"/></a></td>\n</tr>\n<tr>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=algolia&show_owner=true\"/></a></td>\n<td><a class=\"ghcard\" rel=\"external nofollow noopener noreferrer\" href=\"https://github.com/Aruoshui/Aruoshui.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=Aruoshui&repo=Aruoshui.github.io&theme=calm&show_owner=true\"/></a></td>\n</tr>\n</tbody>\n</table></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-13-github徽标-ghbdage\">2.13 github徽标 ghbdage</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>left</code>：徽标左边的信息，必选参数。</li>\n<li><code>right</code>: 徽标右边的信息，必选参数，</li>\n<li><code>logo</code>：徽标图标，图标名称详见<a href=\"https://simpleicons.org/\">simpleicons</a>，可选参数。</li>\n<li><code>color</code>：徽标右边的颜色，可选参数。</li>\n<li><code>link</code>：指向的链接，可选参数。</li>\n<li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li>\n<li><code>option</code>：自定义参数，支持<a href=\"https://shields.io/\">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.基本参数,定义徽标左右文字和图标</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class=\"line\">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure>\n<p>2.信息参数，定义徽标右侧内容背景色，指向链接</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class=\"line\">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class=\"line\">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure>\n<p>3.拓展参数，支持shields的API的全部参数内容</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class=\"line\">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class=\"line\">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.基本参数,定义徽标左右文字和图标</p>\n<p><object class=\"ghbdage\" style=\"margin-inline:5px\" title=\"\" standby=\"loading...\" data=\"https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&\"></object><br>\n<object class=\"ghbdage\" style=\"margin-inline:5px\" title=\"\" standby=\"loading...\" data=\"https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&\"></object></p>\n<p>2.信息参数，定义徽标右侧内容背景色，指向链接</p>\n<p><object class=\"ghbdage\" style=\"margin-inline:5px\" title=\"本站使用JsDelivr为静态资源提供CDN加速\" standby=\"loading...\" data=\"https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&\"></object><br>\n//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br>\n<object class=\"ghbdage\" style=\"margin-inline:5px\" title=\"\" standby=\"loading...\" data=\"https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&\"></object></p>\n<p>3.拓展参数，支持shields的API的全部参数内容</p>\n<p><object class=\"ghbdage\" style=\"margin-inline:5px\" title=\"本站采用双线部署，默认线路托管于Vercel\" standby=\"loading...\" data=\"https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20\"></object><br>\n//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br>\n<object class=\"ghbdage\" style=\"margin-inline:5px\" title=\"\" standby=\"loading...\" data=\"https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet\"></object></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-14-网站卡片-sites\">2.14 网站卡片 sites</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% sitegroup %&#125;</span><br><span class=\"line\">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class=\"line\">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class=\"line\">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% sitegroup %&#125;</span><br><span class=\"line\">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class=\"line\">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class=\"line\">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class=\"line\">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class=\"line\">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class=\"line\">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><div class=\"site-card-group\"><a class=\"site-card\" href=\"https://fomalhaut1998.com\"><div class=\"img\"><img src=\"https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg\"/></div><div class=\"info\"><img src=\"https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png\"/><span class=\"title\">fomalhaut1998</span><span class=\"desc\">简约风格</span></div></a>\n<a class=\"site-card\" href=\"https://inkss.cn\"><div class=\"img\"><img src=\"https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg\"/></div><div class=\"info\"><img src=\"https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg\"/><span class=\"title\">inkss</span><span class=\"desc\">这是一段关于这个网站的描述文字</span></div></a>\n<a class=\"site-card\" href=\"https://blog.mhuig.top\"><div class=\"img\"><img src=\"https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png\"/></div><div class=\"info\"><img src=\"https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png\"/><span class=\"title\">MHuiG</span><span class=\"desc\">这是一段关于这个网站的描述文字</span></div></a>\n<a class=\"site-card\" href=\"https://colsrch.top\"><div class=\"img\"><img src=\"https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png\"/></div><div class=\"info\"><img src=\"https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg\"/><span class=\"title\">Colsrch</span><span class=\"desc\">这是一段关于这个网站的描述文字</span></div></a>\n<a class=\"site-card\" href=\"https://linhk1606.github.io\"><div class=\"img\"><img src=\"https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png\"/></div><div class=\"info\"><img src=\"https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png\"/><span class=\"title\">Linhk1606</span><span class=\"desc\">这是一段关于这个网站的描述文字</span></div></a></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-15-行内图片-inlineimage\">2.15 行内图片 inlineimage</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>高度</code>：height=20px</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class=\"line\"></span><br><span class=\"line\">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>这是 <img no-lazy class=\"inline\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif\" style=\"height:1.5em\"/> 一段话。</p>\n<p>这又是 <img no-lazy class=\"inline\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif\" style=\"height:40px;\"/> 一段话。</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-16-单张图片-image\">2.16 单张图片 image</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li>图片宽度高度：width=300px, height=32px</li>\n<li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li>\n<li>占位背景色：bg=#f2f2f2</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.添加描述：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure>\n<p>2.指定宽度</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure>\n<p>3.指定宽度并添加描述：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure>\n<p>4.设置占位背景色：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.添加描述：</p>\n<div class=\"img-wrap\"><div class=\"img-bg\"><img class=\"img\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg\" alt=\"每天下课回宿舍的路，没有什么故事。\"/></div><span class=\"image-caption\">每天下课回宿舍的路，没有什么故事。</span></div>\n2..指定宽度\n<div class=\"img-wrap\"><div class=\"img-bg\"><img class=\"img\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg\" style=\"width:400px;\"/></div></div>\n3.指定宽度并添加描述：\n<div class=\"img-wrap\"><div class=\"img-bg\"><img class=\"img\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg\" alt=\"每天下课回宿舍的路，没有什么故事。\" style=\"width:400px;\"/></div><span class=\"image-caption\">每天下课回宿舍的路，没有什么故事。</span></div>\n4.设置占位背景色：\n<div class=\"img-wrap\"><div class=\"img-bg\" style=\"background:#1D0C04\"><img class=\"img\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg\" alt=\"优化不同宽度浏览的观感\" style=\"width:400px;\"/></div><span class=\"image-caption\">优化不同宽度浏览的观感</span></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-17-音频-audio\">2.17 音频 audio</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><div class=\"audio\"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-18-视频-video\">2.18 视频 video</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>对齐方向</code>：left, center, right</li>\n<li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.100%宽度</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure>\n<p>2.50%宽度</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% videos, 2 %&#125;</span><br><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class=\"line\">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure>\n<p>3.25%宽度</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% videos, 4 %&#125;</span><br><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class=\"line\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class=\"emphasis\">_0341.mov %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class=\"line\">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.100%宽度</p>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n2.50%宽度\n<div class=\"videos\" col='2'><div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>\n3.25%宽度\n<div class=\"videos\" col='4'><div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>\n<div class=\"video\"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-19-相册-gallery\">2.19 相册 gallery</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><p>1.gallerygroup 相册图库</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class=\"line\">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class=\"line\">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class=\"line\">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>2.gallery 相册</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% gallery %&#125;</span><br><span class=\"line\">markdown 圖片格式</span><br><span class=\"line\">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ul>\n<li>gallerygroup 相册图库</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>图库名字</td>\n</tr>\n<tr>\n<td>description</td>\n<td>图库描述</td>\n</tr>\n<tr>\n<td>link</td>\n<td>链接到对应相册的地址</td>\n</tr>\n<tr>\n<td>img-url</td>\n<td>图库封面</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>gallery 相册</p>\n<p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p>\n</li>\n</ul></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.gallerygroup 相册图库</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class=\"line\">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class=\"line\">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class=\"line\">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>2.gallery 相册</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% gallery %&#125;</span><br><span class=\"line\">![](<span class=\"link\">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class=\"line\">![](<span class=\"link\">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class=\"line\">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.gallerygroup 相册图库</p>\n<div class=\"gallery-group-main\">\n<figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">MC</div>\n  <p>在Rikkaの六花服务器里留下的足迹</p>\n  <a href='/gallery/MC/'></a>\n  </figcaption>\n  </figure>\n<figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">Gundam</div>\n  <p>哦咧哇gundam哒！</p>\n  <a href='/gallery/Gundam/'></a>\n  </figcaption>\n  </figure>\n<figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">I-am-Akilar</div>\n  <p>某种意义上也算自拍吧</p>\n  <a href='/gallery/I-am-Akilar/'></a>\n  </figcaption>\n  </figure>\n</div>\n2.gallery 相册\n<div class=\"gallery-container\" data-type=\"data\" data-button=\"\">\n      <div class=\"gallery-data\">[{\"url\":\"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg\",\"alt\":\"\"},{\"url\":\"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg\",\"alt\":\"\"}]</div>\n      <div class=\"gallery-items\">\n      </div>\n    </div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-20-折叠框-folding\">2.20 折叠框 folding</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><p>1.gallerygroup 相册图库</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class=\"line\">![](<span class=\"link\">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure>\n<!-- tab 参数配置 -->\n<ol>\n<li>\n<p><code>颜色</code>：blue, cyan, green, yellow, red</p>\n</li>\n<li>\n<p><code>状态</code>：状态填写 open 代表默认打开。</p>\n</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% folding 查看图片测试 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">![](<span class=\"link\">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">这是一个默认打开的折叠框。</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class=\"line\">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> haha</span><br><span class=\"line\"><span class=\"bullet\">-</span> hehe</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hahaha <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#x27;height:24px&#x27;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><details class=\"folding-tag\" ><summary> 查看图片测试 </summary>\n              <div class='content'>\n              <p><img src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg\" alt=\"\"></p>\n              </div>\n            </details>\n<details class=\"folding-tag\" cyan open><summary> 查看默认打开的折叠框 </summary>\n              <div class='content'>\n              <p>这是一个默认打开的折叠框。</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" green><summary> 查看代码测试 </summary>\n              <div class='content'>\n              <p>假装这里有代码块（代码块没法嵌套代码块）</p>\n              </div>\n            </details>\n<details class=\"folding-tag\" yellow><summary> 查看列表测试 </summary>\n              <div class='content'>\n              <ul><li>haha</li><li>hehe</li></ul>\n              </div>\n            </details>\n<details class=\"folding-tag\" red><summary> 查看嵌套测试 </summary>\n              <div class='content'>\n              <details class=\"folding-tag\" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class=\"folding-tag\" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>\n              </div>\n            </details></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-21-分栏-tab\">2.21 分栏 tab</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">配置参数</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Unique name, [index] %&#125;</span><br><span class=\"line\">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class=\"line\">Any content (support inline tags too).</span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li>\n<p>Unique name :</p>\n<ul>\n<li>\n<p>选项卡块标签的唯一名称，不带逗号。</p>\n</li>\n<li>\n<p>将在#id中用作每个标签及其索引号的前缀。</p>\n</li>\n<li>\n<p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p>\n</li>\n<li>\n<p>仅当前帖子/页面的URL必须是唯一的！</p>\n</li>\n</ul>\n</li>\n<li>\n<p>[index]:</p>\n<ul>\n<li>\n<p>活动选项卡的索引号。</p>\n</li>\n<li>\n<p>如果未指定，将选择第一个标签（1）。</p>\n</li>\n<li>\n<p>如果index为-1，则不会选择任何选项卡。</p>\n</li>\n<li>\n<p>可选参数。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>[Tab caption]:</p>\n<ul>\n<li>\n<p>当前选项卡的标题。</p>\n</li>\n<li>\n<p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p>\n</li>\n<li>\n<p>如果未指定标题，但指定了图标，则标题将为空。</p>\n</li>\n<li>\n<p>可选参数。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>[@icon]:</p>\n<ul>\n<li>\n<p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p>\n</li>\n<li>\n<p>可以指定带空格或不带空格；</p>\n</li>\n<li>\n<p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p>\n</li>\n<li>\n<p>可选参数。</p>\n</li>\n</ul>\n</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><p>1.Demo 1 - 预设选择第一个【默认】</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs test1 %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n<p>2.Demo 2 - 预设选择tabs</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs test2, 3 %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n<p>3.Demo 3 - 没有预设值</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs test3, -1 %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n<p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs test4 %&#125;</span><br><span class=\"line\">&lt;!-- tab 第一个Tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**tab名字为第一个Tab**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class=\"line\"><span class=\"strong\">**只有图标 没有Tab名字**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class=\"line\"><span class=\"strong\">**名字+icon**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>1.Demo 1 - 预设选择第一个【默认】</p>\n<div class=\"tabs\" id=\"test1\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"test1-1\">test1 1</button><button type=\"button\" class=\"tab \" data-href=\"test1-2\">test1 2</button><button type=\"button\" class=\"tab \" data-href=\"test1-3\">test1 3</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"test1-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-item-content\" id=\"test1-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-item-content\" id=\"test1-3\"><p><strong>This is Tab 3.</strong></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<p>2.Demo 2 - 预设选择tabs</p>\n<div class=\"tabs\" id=\"test2\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab \" data-href=\"test2-1\">test2 1</button><button type=\"button\" class=\"tab \" data-href=\"test2-2\">test2 2</button><button type=\"button\" class=\"tab  active\" data-href=\"test2-3\">test2 3</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content\" id=\"test2-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-item-content\" id=\"test2-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-item-content active\" id=\"test2-3\"><p><strong>This is Tab 3.</strong></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<p>3.Demo 3 - 没有预设值</p>\n<div class=\"tabs\" id=\"test3\"><ul class=\"nav-tabs no-default\"><button type=\"button\" class=\"tab \" data-href=\"test3-1\">test3 1</button><button type=\"button\" class=\"tab \" data-href=\"test3-2\">test3 2</button><button type=\"button\" class=\"tab \" data-href=\"test3-3\">test3 3</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content\" id=\"test3-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-item-content\" id=\"test3-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-item-content\" id=\"test3-3\"><p><strong>This is Tab 3.</strong></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p>\n<div class=\"tabs\" id=\"test4\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"test4-1\">第一个Tab</button><button type=\"button\" class=\"tab \" data-href=\"test4-2\"><i class=\"fab fa-apple-pay\" style=\"text-align: center;\"></i></button><button type=\"button\" class=\"tab \" data-href=\"test4-3\"><i class=\"fas fa-bomb\"></i>炸弹</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"test4-1\"><p><strong>tab名字为第一个Tab</strong></p></div><div class=\"tab-item-content\" id=\"test4-2\"><p><strong>只有图标 没有Tab名字</strong></p></div><div class=\"tab-item-content\" id=\"test4-3\"><p><strong>名字+icon</strong></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-22-诗词标签-poem\">2.22 诗词标签 poem</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><ol>\n<li><code>title</code>：诗词标题</li>\n<li><code>author</code>：作者，可以不写</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class=\"line\">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class=\"line\">明月几时有？把酒问青天。</span><br><span class=\"line\">不知天上宫阙，今夕是何年？</span><br><span class=\"line\">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class=\"line\">起舞弄清影，何似在人间？</span><br><span class=\"line\"></span><br><span class=\"line\">转朱阁，低绮户，照无眠。</span><br><span class=\"line\">不应有恨，何事长向别时圆？</span><br><span class=\"line\">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class=\"line\">但愿人长久，千里共婵娟。</span><br><span class=\"line\">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-3\"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>\n明月几时有？把酒问青天。<br>\n不知天上宫阙，今夕是何年？<br>\n我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>\n起舞弄清影，何似在人间？</p>\n<p>转朱阁，低绮户，照无眠。<br>\n不应有恨，何事长向别时圆？<br>\n人有悲欢离合，月有阴晴圆缺，此事古难全。<br>\n但愿人长久，千里共婵娟。</p>\n</div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-23-阿里图标-icon\">2.23 阿里图标 icon</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li>\n<li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% icon icon-rat<span class=\"emphasis\">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% icon icon-tiger<span class=\"emphasis\">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% icon icon-dragon<span class=\"emphasis\">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% icon icon-horse<span class=\"emphasis\">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% icon icon-monkey<span class=\"emphasis\">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% icon icon-dog<span class=\"emphasis\">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p><svg class=\"icon\" style=\"width:1em; height:1em\" aria-hidden=\"true\"><use xlink:href=\"#icon-rat_zi\"></use></svg><svg class=\"icon\" style=\"width:2em; height:2em\" aria-hidden=\"true\"><use xlink:href=\"#icon-rat\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:3em; height:3em\" aria-hidden=\"true\"><use xlink:href=\"#icon-ox_chou\"></use></svg><svg class=\"icon\" style=\"width:4em; height:4em\" aria-hidden=\"true\"><use xlink:href=\"#icon-ox\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:5em; height:5em\" aria-hidden=\"true\"><use xlink:href=\"#icon-tiger_yin\"></use></svg><svg class=\"icon\" style=\"width:6em; height:6em\" aria-hidden=\"true\"><use xlink:href=\"#icon-tiger\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:1em; height:1em\" aria-hidden=\"true\"><use xlink:href=\"#icon-rabbit_mao\"></use></svg><svg class=\"icon\" style=\"width:2em; height:2em\" aria-hidden=\"true\"><use xlink:href=\"#icon-rabbit\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:3em; height:3em\" aria-hidden=\"true\"><use xlink:href=\"#icon-dragon_chen\"></use></svg><svg class=\"icon\" style=\"width:4em; height:4em\" aria-hidden=\"true\"><use xlink:href=\"#icon-dragon\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:5em; height:5em\" aria-hidden=\"true\"><use xlink:href=\"#icon-snake_si\"></use></svg><svg class=\"icon\" style=\"width:6em; height:6em\" aria-hidden=\"true\"><use xlink:href=\"#icon-snake\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:1em; height:1em\" aria-hidden=\"true\"><use xlink:href=\"#icon-horse_wu\"></use></svg><svg class=\"icon\" style=\"width:2em; height:2em\" aria-hidden=\"true\"><use xlink:href=\"#icon-horse\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:3em; height:3em\" aria-hidden=\"true\"><use xlink:href=\"#icon-goat_wei\"></use></svg><svg class=\"icon\" style=\"width:4em; height:4em\" aria-hidden=\"true\"><use xlink:href=\"#icon-goat\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:5em; height:5em\" aria-hidden=\"true\"><use xlink:href=\"#icon-monkey_shen\"></use></svg><svg class=\"icon\" style=\"width:6em; height:6em\" aria-hidden=\"true\"><use xlink:href=\"#icon-monkey\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:1em; height:1em\" aria-hidden=\"true\"><use xlink:href=\"#icon-rooster_you\"></use></svg><svg class=\"icon\" style=\"width:2em; height:2em\" aria-hidden=\"true\"><use xlink:href=\"#icon-rooster\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:3em; height:3em\" aria-hidden=\"true\"><use xlink:href=\"#icon-dog_xu\"></use></svg><svg class=\"icon\" style=\"width:4em; height:4em\" aria-hidden=\"true\"><use xlink:href=\"#icon-dog\"></use></svg></p>\n<p><svg class=\"icon\" style=\"width:5em; height:5em\" aria-hidden=\"true\"><use xlink:href=\"#icon-boar_hai\"></use></svg><svg class=\"icon\" style=\"width:6em; height:6em\" aria-hidden=\"true\"><use xlink:href=\"#icon-boar\"></use></svg></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-25-进度条-progress\">2.25  进度条 progress</h2>\n<div class=\"note info flat\"><p>进度条标签参考<a href=\"https://rongbuqiu.com/jdt.html\">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>\n源样式提取自<a href=\"https://zwying0814.gitbook.io/cuteen/\">Cuteen</a>主题。</p>\n</div>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>width</code>: 0到100的阿拉伯数字</li>\n<li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li>\n<li><code>text</code>:进度条上的文字内容</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class=\"line\">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class=\"line\">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class=\"line\">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class=\"line\">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class=\"line\">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><div class=\"progress\"><div class=\"progress-bar-animated progress-bar progress-bar-striped bg-red\"  style=\"width: 10%\" aria-valuenow=\"10\" aria-valuemin=\"0\" aria-valuemax=\"100\"><p>进度条样式预览</p></div></div>\n<div class=\"progress\"><div class=\"progress-bar-animated progress-bar progress-bar-striped bg-yellow\"  style=\"width: 30%\" aria-valuenow=\"30\" aria-valuemin=\"0\" aria-valuemax=\"100\"><p>进度条样式预览</p></div></div>\n<div class=\"progress\"><div class=\"progress-bar-animated progress-bar progress-bar-striped bg-green\"  style=\"width: 50%\" aria-valuenow=\"50\" aria-valuemin=\"0\" aria-valuemax=\"100\"><p>进度条样式预览</p></div></div>\n<div class=\"progress\"><div class=\"progress-bar-animated progress-bar progress-bar-striped bg-cyan\"  style=\"width: 70%\" aria-valuenow=\"70\" aria-valuemin=\"0\" aria-valuemax=\"100\"><p>进度条样式预览</p></div></div>\n<div class=\"progress\"><div class=\"progress-bar-animated progress-bar progress-bar-striped bg-blue\"  style=\"width: 90%\" aria-valuenow=\"90\" aria-valuemin=\"0\" aria-valuemax=\"100\"><p>进度条样式预览</p></div></div>\n<div class=\"progress\"><div class=\"progress-bar-animated progress-bar progress-bar-striped bg-gray\"  style=\"width: 100%\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\"><p>进度条样式预览</p></div></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-26-注释-notation\">2.26 注释 notation</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li>\n<p><code>label</code>: 注释词汇</p>\n</li>\n<li>\n<p><code>text</code>: 悬停显示的注解内容</p>\n</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-27-气泡注释-bubble\">2.27 气泡注释 bubble</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li><code>content</code>: 注释词汇</li>\n<li><code>notation</code>: 悬停显示的注解内容</li>\n<li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class=\"bubble-content\">兄弟相邻选择器</span><span class=\"bubble-notation\"><span class=\"bubble-item\" style=\"background-color:#71a4e3;\">例如 h1 + p {margin-top:50px;}</span></span>，<span class=\"bubble-content\">flex布局</span><span class=\"bubble-notation\"><span class=\"bubble-item\" style=\"background-color:#ec5830;\">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class=\"bubble-content\">transform变换</span><span class=\"bubble-notation\"><span class=\"bubble-item\" style=\"background-color:#1db675;\">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class=\"bubble-content\">贝塞尔速度曲线</span><span class=\"bubble-notation\"><span class=\"bubble-item\" style=\"background-color:#de4489;\">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class=\"bubble-content\">clip-path</span><span class=\"bubble-notation\"><span class=\"bubble-item\" style=\"background-color:#868fd7;\">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"2-28-引用文献-reference\">2.28 引用文献 reference</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">标签语法</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">参数配置</button><button type=\"button\" class=\"tab \" data-href=\"分栏-3\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-4\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% referto [id] , [literature] %&#125;</span><br><span class=\"line\">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li>\n<p>referto 引用上标</p>\n<ul>\n<li>\n<p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p>\n</li>\n<li>\n<p><code>literature</code>: 引用的参考文献名称</p>\n</li>\n</ul>\n</li>\n<li>\n<p>referfrom 引用出处</p>\n<ul>\n<li>\n<p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p>\n</li>\n<li>\n<p><code>literature</code>: 引用的参考文献名称</p>\n</li>\n<li>\n<p><code>url</code>: 引用的参考文献链接，可省略</p>\n</li>\n</ul>\n</li>\n</ol></div><div class=\"tab-item-content\" id=\"分栏-3\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% span center logo large, 历史上的今天 %&#125;</span><br><span class=\"line\"><span class=\"bullet\">1.</span> 1475年：意大利文艺复兴时期的雕塑家米开朗基罗&#123;% referto &#x27;[1]&#x27;,&#x27;米开朗基罗&#x27; %&#125;诞生。他是文艺复兴时期最重要的艺术家之一，作品包括《大卫像》和《圣母玛利亚》等。</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 1899年：美国发明家、电影制片人威廉·赛勒斯·福克斯&#123;% referto &#x27;[2]&#x27;,&#x27;电影制片人威廉·赛勒斯·福克斯&#x27; %&#125;诞生。他是电影行业的先驱，创立了20世纪福克斯影业公司。</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 1974年：计算机科学家维特·柏恩斯·李发表了有关万维网&#123;% referto &#x27;[3]&#x27;,&#x27;万维网的提案&#x27; %&#125;的提案，奠定了互联网发展的基础。</span><br><span class=\"line\"><span class=\"bullet\">4.</span>  1998年：谷歌公司成立，创始人拉里·佩奇和谢尔盖·布林将互联网搜索引擎&#123;% referto &#x27;[4]&#x27;,&#x27;谷歌搜索引擎的历史&#x27; %&#125;带入新的高度，成为全球最大的搜索引擎之一。</span><br><span class=\"line\"><span class=\"bullet\">5.</span> 2007年：苹果公司推出首款iPhone&#123;% referto &#x27;[5]&#x27;,&#x27;首款iPhone手机&#x27; %&#125;，引领了智能手机革命，改变了人们的通讯和生活方式。</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% referfrom &#x27;[1]&#x27;,&#x27;米开朗基罗&#x27;,&#x27;https://en.wikipedia.org/wiki/Michelangelo&#x27; %&#125;</span><br><span class=\"line\">&#123;% referfrom &#x27;[2]&#x27;,&#x27;电影制片人威廉·赛勒斯·福克斯&#x27;,&#x27;https://en.wikipedia.org/wiki/William<span class=\"emphasis\">_Fox_</span>(producer)&#x27; %&#125;</span><br><span class=\"line\">&#123;% referfrom &#x27;[3]&#x27;,&#x27;万维网的提案&#x27;,&#x27;https://en.wikipedia.org/wiki/Tim<span class=\"emphasis\">_Berners-Lee&#x27; %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% referfrom &#x27;[4]&#x27;,&#x27;谷歌搜索引擎的历史&#x27;,&#x27;https://en.wikipedia.org/wiki/History_</span>of<span class=\"emphasis\">_Google&#x27; %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% referfrom &#x27;[5]&#x27;,&#x27;首款iPhone手机&#x27;,&#x27;https://en.wikipedia.org/wiki/IPhone_</span>(1st<span class=\"emphasis\">_generation)&#x27; %&#125;</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-4\"><p><span class='p center logo large'>历史上的今天</span></p>\n<ol>\n<li>1475年：意大利文艺复兴时期的雕塑家米开朗基罗<span class=\"hidden-anchor\" id=\"referto_[1]\"></span><sup class=\"reference\"><a href=\"#referfrom_[1]\">[1]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">米开朗基罗</span><span class=\"reference-title\">参考资料</span></span></span>诞生。他是文艺复兴时期最重要的艺术家之一，作品包括《大卫像》和《圣母玛利亚》等。</li>\n<li>1899年：美国发明家、电影制片人威廉·赛勒斯·福克斯<span class=\"hidden-anchor\" id=\"referto_[2]\"></span><sup class=\"reference\"><a href=\"#referfrom_[2]\">[2]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">电影制片人威廉·赛勒斯·福克斯</span><span class=\"reference-title\">参考资料</span></span></span>诞生。他是电影行业的先驱，创立了20世纪福克斯影业公司。</li>\n<li>1974年：计算机科学家维特·柏恩斯·李发表了有关万维网<span class=\"hidden-anchor\" id=\"referto_[3]\"></span><sup class=\"reference\"><a href=\"#referfrom_[3]\">[3]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">万维网的提案</span><span class=\"reference-title\">参考资料</span></span></span>的提案，奠定了互联网发展的基础。</li>\n<li>1998年：谷歌公司成立，创始人拉里·佩奇和谢尔盖·布林将互联网搜索引擎<span class=\"hidden-anchor\" id=\"referto_[4]\"></span><sup class=\"reference\"><a href=\"#referfrom_[4]\">[4]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">谷歌搜索引擎的历史</span><span class=\"reference-title\">参考资料</span></span></span>带入新的高度，成为全球最大的搜索引擎之一。</li>\n<li>2007年：苹果公司推出首款iPhone<span class=\"hidden-anchor\" id=\"referto_[5]\"></span><sup class=\"reference\"><a href=\"#referfrom_[5]\">[5]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">首款iPhone手机</span><span class=\"reference-title\">参考资料</span></span></span>，引领了智能手机革命，改变了人们的通讯和生活方式。</li>\n</ol>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[1]\"></span><a class=\"reference-anchor\" href=\"#referto_[1]\">[1]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/Michelangelo\">米开朗基罗</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[2]\"></span><a class=\"reference-anchor\" href=\"#referto_[2]\">[2]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/William_Fox_(producer)\">电影制片人威廉·赛勒斯·福克斯</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[3]\"></span><a class=\"reference-anchor\" href=\"#referto_[3]\">[3]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/Tim_Berners-Lee\">万维网的提案</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[4]\"></span><a class=\"reference-anchor\" href=\"#referto_[4]\">[4]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/History_of_Google\">谷歌搜索引擎的历史</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[5]\"></span><a class=\"reference-anchor\" href=\"#referto_[5]\">[5]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/IPhone_(1st_generation)\">首款iPhone手机</a></div></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n"},{"title":"抓包工具wireshark的学习笔记","description":"网络包分析工具","abbrlink":26256,"date":"2024-03-21T05:41:03.000Z","cover":"https://image.aruoshui.fun/i/2024/12/31/vsjb7w-0.webp","_content":"\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/3/17 -->\nwireshark的安装和基础使用\n<!-- endtimeline -->\n\n<!-- timeline 2024/3/27 -->\n常见协议的抓包分析\n<!-- endtimeline -->\n\n\n{% endtimeline %}\n\n# 参考文章\n{% link 网络安全工具——Wireshark抓包工具, https://blog.csdn.net/p36273/article/details/130800459, https://blog.csdn.net/weixin_43603658/article/details/130236856 %}\n\n\n\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=524106622&bvid=BV1YM411Y7oU&cid=1000587951&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n\n\n# Wireshark抓包入门操作\n## 常见协议包\n[ARP协议](https://blog.csdn.net/weixin_58783105/article/details/134986414?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=2)\n[ICMP协议](https://blog.csdn.net/zy_dreamer/article/details/132509931)\n[TCP协议](https://zhuanlan.zhihu.com/p/603382668?utm_id=0)\n[UDP协议](https://zhuanlan.zhihu.com/p/357080855)\n[DNS协议](https://www.zhihu.com/question/23099454/answer/3197458866)\n[HTTP协议](https://blog.csdn.net/lfm1010123/article/details/126293176)\n\n## 查看本机要抓包的网络\ncmd输入指令ipconfig找到对应的网络\n\n## wireshark的混杂模式\n混杂模式概述:混杂模式就是接收所有经过网卡的数据包，包括不是发给本机的包，即不验证MAC地址。普通模式下网卡只接收发给本机的包（包括广播包）传递给上层程序，其它的包一律丢弃。\n![](https://s2.loli.net/2024/03/21/nhABoVcsGxSL5If.jpg)\n\n\n## Wireshark过滤器使用\n\n### wireshark常用过滤条件\n1. 常用条件\n```bash\n‘eq’和’==’ 等同\nand 并且\nor 或者\n‘!’ 和’not’ 取反\n```\n\n2. 针对IP地址过滤\n```bash\n1.源地址：ip.src == 192.168…\n2.目的地址：ip.dst == 192.168.xx\n3.不看源或目的地址：ip.addr == 192.168.xx\n```\n3. 针对协议过滤\n```bash\n1.某种协议的数据包 直接输入协议名字\n如：http\n2.排除某种协议\nnot tcp 或者 ！tcp\n```\n4. 针对端口过滤\n```bash\n1.捕获某端口的数据包\ntcp.port == 80\ntcp.srcport == 80\ntcp.dstport == 80\n2.捕获多端口\nudp.port >=2048\n```\n\n5. 针对长度和内容过滤\n```bash\n1.长度过滤\ndata.len > 0\nudp.lenth < 30\nhttp.content_lenth <= 20\n2.数据包内容过滤\nhttp.request.uri matches “vipscu”(匹配http请求中含有vipscu字段的请求信息)\n```\n\n### 开启混淆模式，抓取接口上使用混杂模式直接进行抓包\n![](https://s2.loli.net/2024/03/26/DP2nJ5WewyYztEM.png)\n\n## arp协议分析\nARP（Address Resolution Protocol）协议工作在网络层和数据链路层之间，通常被认为是一个跨两层的协议。简单来说，它就像是一本“翻译词典”，帮助你的电脑将IP地址“翻译”成MAC地址，这样你的电脑才能在网上和其他设备进行通信。\n\n![](https://s2.loli.net/2024/03/26/15GyJuRzl6SXY47.png)\n\n### 抓包分析\n\n#### 数据包格式\n\n![ARP数据包的格式](https://s2.loli.net/2024/03/26/bFTZIovByQpcj18.png)\n\n说明：\n{% note info modern %}\n1. Hardware Type：表示硬件地址类型，一般为MAC地址。它的值为1表示以太网地址。\n2. Protocol Type：表示三层协议地址类型，一般为IP。它的值为0x0800即表示IP地址。它的值与包含IP数据报的以太网数据帧中的类型字段的值相同。\n3. Hardware Length和Protocol Length：表示MAC地址和IP地址的长度，单位是字节。值分别是6和4。(6 * 8bit=48bit，4 * 8bit = 32bit)\n4. Operation Code：指定了ARP报文的类型，包括ARP Request和ARP Reply。（1为ARP请求，2为ARP应答）\n5. Source Hardware Address：指的是发送ARP报文的设备MAC地址（源MAC地址）\n6. Source Protocol Address：指的是发送ARP报文的设备IP地址（源IP地址）。\n7. Destination Hardware Address：指的是接收者MAC地址，在ARP Request报文中，该字段值为0（目的MAC地址）。\n8. Destination Protocol Address：指的是接收者的IP地址（目的MAC地址）。\n{% endnote %}\n\n##### ARP Reply 响应包\n向上边的图片就是一个ARP Reply 响应包\n\n##### ARP Request 请求包\n![ARP Request 请求包](https://s2.loli.net/2024/03/26/KSibOdGtvWDY19N.png)\n\n##### ARP 缓存\n当然如果每次都需要这样一个映射显然效率低下，于是便有了ARP缓存。{% emp 来存放IP地址和MAC地址关联信息 %}\n发送信息前，查找ARP缓存表，存在对方MAC地址，直接封装成帧。\n- 如果不存在，通过发送 ARP Request报文获取对方MAC地址。\n- 如果目标在其他网络，源设备会先查找网关MAC地址，将数据发给网关，再转发。\n- IP和MAC关系映射关系会放入ARP缓存表一段时间，有效期内都可查到，过了这个有效期会自动删除。\n\n##### ARP的请求、响应、代理、IP冲突\n这些点请详见：\n{% note info flat %}参考：[ARP的请求、响应、代理、IP冲突](https://blog.csdn.net/weixin_58783105/article/details/134986414?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=2){% endnote %}\n\n这个博主的例子很详细清楚，我也不抄一遍了。\n\n\n#### ARP存在一个ARP欺骗的问题\n简单理解就是使得目标主机接收错误的IP和MAC绑定关系\n攻击者可以发送虚假的ARP请求或应答报文，使得目标主机接收错误的IP和MAC绑定关系。那么发送给目标的数据就不再走网关了，而是到攻击者那里。如果攻击者拦截数据包不进行转发的话，本机就会断网。\n\n{% note info flat %}参考：[更多详细信息请见](https://blog.csdn.net/weixin_58783105/article/details/134986414?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=2){% endnote %}\n\n\n\n## ICMP协议分析\n### ICMP是什么\nICMP 的全称是 Internet Control Message Protocol(互联网控制协议)，它是一种互联网套件，它用于IP 协议中中传递控制信息和错误消息。\n\nICMP协议的主要功能如下：\n1. 发现网络错误：当一个数据包在传输过程中出现错误时，ICMP协议通过向发送方发送错误通知来发现网络错误。\n2. 检查网络是否可达：通过发送ICMP ECHO请求并接收ICMP ECHO回复消息，可以确定目标主机是否可达。\n3. 发现主机错误：当一个主机无法正常工作时，ICMP协议通过向发送方发送错误通知来发现主机错误。\n4. 发送路由信息：ICMP协议可以向其他主机发送路由信息，以帮助它们在网络中找到合适的路由。\n\n#### 过程\n![通知示意图](https://s2.loli.net/2024/03/26/lEe51a8wGVSQOHn.jpg)\n在这个图中：\n{% note info modern %}\n主机 A 想要给主机 B 发送一个 IP 数据包，主机 A 发送的数据包经过路由器 1 到达了路由器 2 ，由于路由器 2 不知道主机 B 的 MAC 地址，所以路由器 2 发送了一个 ARP 请求，没有回应，再经过重试时间后再次发送，还没有回应。。。。。。经过多次 ARP 请求后没有得到回应后，路由器 2 就会给主机 A 发送一个 ICMP 消息，告诉其发送的 IP 数据包没有到达主机 B 。\n{% endnote %}\n\n#### 抓包分析\n经常使用 ICMP 数据包的两个终端程序是 ping 和 traceroute。这里我ping了一下我的网关地址\n\n##### 请求\n![](https://s2.loli.net/2024/03/26/qB7OYsbeAnLDKhU.jpg)\n\n##### 响应\n![](https://s2.loli.net/2024/03/26/cO5n18fTqbzSELe.jpg)\n\n其中注意type类型：\n![通知类型](https://s2.loli.net/2024/03/26/JLHOoxMANk51vgK.jpg)\n我上边的两个就属于回送请求和回送应答(类型 8 和 类型 0 )\n\n##### 其他ICMP消息和IPv6的ICMPv6\n其他消息和ICMPv6我这不方便测试，想了解的可以查看下边的链接：\n{% note info flat %}参考：[更多的信息请你查看](https://blog.csdn.net/zy_dreamer/article/details/132509931){% endnote %}\n\n\n## TCP\n相信学过计网都很清楚整个过程，这里就不详细赘述了，如果想要了解所有的细节，请你移步：\n{% note info flat %}参考：[TCP详解](https://zhuanlan.zhihu.com/p/603382668?utm_id=0){% endnote %}\n\nTCP有如下的协议格式需要清楚，在抓包时可以针对分析：\n{% note info modern %}\n- 16位源端口号： 数据发送方的端口号，表示数据从哪里来\n- 16位目标端口号：数据接收方的端口号，表示数据要到哪里去\n- 32位序号：每一次通信TCP报文的编号\n- 32确认序号：用于对发送方发送的报文的确认，为接收到的报文序号+1\n- 4位首部长度：表示TCP报文头部有多少个4字节，因为4位最大表示15，所以TCP报文头最大长度为15*4=60\n- 6位标志位：\nURG: 紧急指针是否有效\nACK: 确认应答\nPSH: 提示接收端应用程序立刻从TCP缓冲区把数据读走\nRST: 表示要求对方重新建立连接\nSYN: 请求建立连接，我们把携带SYN标识的称为同步报文段\nFIN: 通知对方本端要关闭了，我们把携带FIN标识的为结束报文段\n- 16位窗口大小：TCP流量控制的一个手段，这里指接收窗口，用于告知发送端本端的TCP缓冲区还能容纳多少字节的数据，这样发送方就可以控制发送的数据量\n- 16位校验和：由发送方填充，接收端对TCP报文段执行CRC校验以检查数据是否损坏，这个校验不仅包含TCP头部，也包含数据部分\n- 16位紧急指针：一个正的偏移量，它与序号字段相加表示最后一个紧急数据的下一个序号，所以这个字段是紧急指针相对当前序号的偏移，用于发送方向接收方发送紧急数据\n- 0-40字节选项数据：存储一些可能需要的额外信息\n{% endnote %}\n\n### TCP三次握手过程\n![](https://s2.loli.net/2024/03/26/PoaYF6ZewhHqtCT.jpg)\n#### 抓包分析\n{% note warning flat %}用到TCP的地方太多了，很不容易专门找一个等待建立连接的点，这个时候想到了之前写的SSH的一篇文章：[与SSH的今生今世😅](https://www.aruoshui.fun/posts/12699.html) 于是考虑在连接服务器或者虚拟机的时候进行抓包，果然成功了。{% endnote %}\n\n以下是对ip：192.168.131.138的一台虚拟机连接的抓包 \n\n![](https://s2.loli.net/2024/03/27/di9PtJzYKoaVhC1.png)\n其中可以非常明显的看到TCP连接过程中如`SYN`，`ACK`等，其实变相帮助理解TCP协议了，比之前上实验课那个过程好太多了。\n\n#### 连接请求\n![连接请求](https://s2.loli.net/2024/03/27/IkuzirSglhtOyA8.png)\n可以看到`Src Port`是本机用来监听的端口（随机），而虚拟机中SSH连接开放的端口 `Dst Port` 是`22` \n\n#### 连接请求确认\n![连接请求确认](https://s2.loli.net/2024/03/27/2TDqpjCF8Vsu1UL.png) \n\n#### 确认\n![确认](https://s2.loli.net/2024/03/27/Ro5ByXTtDb31kaC.png)\n\n#### 利用wireshark自带的流量图工具获得TCP连接过程\n在统计任务栏中选择流量图，点击之后流类型选择为TCP流，就可以更加清晰的了解整个过程了\n![流量图](https://s2.loli.net/2024/03/27/qQ7gTbxuRGLN3fI.png)\n\n\n\n### TCP连接断开的四次挥手\n同样的断开连接我这里还是利用虚拟机\n![](https://s2.loli.net/2024/03/27/SdOQf4YEXqsP8FA.png)\n细节就不分析了：\n![](https://s2.loli.net/2024/03/27/7T9eDZPdvb4LUIN.png)\n![](https://s2.loli.net/2024/03/27/Dn5vGcP28sulzNo.png)\n\n## HTTP协议\n### 什么是HTTP协议\nHTTP 协议简单来说就是客户端与服务器之间一发一收的模型\n![HTTP协议的核心过程](https://s2.loli.net/2024/03/27/POgYUjucWlDAmx1.jpg)\n### HTTP协议的抓包分析\n这里利用`curl -I baidu.com`访问百度网站，触发HTTP协议\n![](https://s2.loli.net/2024/03/27/hoEgIiAmXPdD5x6.png)\n#### 建立TCP连接\n这里就不过多赘述\n#### 请求报文和响应报文\n在请求和响应部分：\n第一个包是，`我`向`百度`发送了一个「HTTP请求」，请求类型是HEAD\n第三个包是，`百度`向`我`发送了一个「HTTP响应」，响应状态码是 200 OK\n#### 释放连接\n这里也不过多赘述\n\n#### 分析HTTP协议报文\n请求报文分为三个部分：请求行、请求头、请求体\n响应报文分为四个部分：状态行、响应头、响应空行、响应体\n\n##### 请求报文\n![](https://s2.loli.net/2024/03/27/KZon164DcXCtbsN.png)\n请求行：包含请求方法、请求URL、HTTP版本\n请求头：包含请求的客户端的信息，一行一个请求头\n请求体：POST等类型的请求才有请求体，这里没有\n\n点开请求行，看里面的三个字段：\n1. Request Method：请求方法，这里的请求方法是HEAD，用来获取报文首部\n2. Request URI：请求的URL，因为我们没指定，所以默认是/\n3. Request Version：请求的版本，因为用的是HTTP协议，所以这里显示HTTP协议的版本\n  \n请求头部分：\nHost：目标主机\nUser-Agent：代理，也就是浏览器的类型。我们用的不是浏览器，所以这里显示的是命令curl\nAccept：浏览器可接受的MIME类型\n\n##### 响应报文\n![](https://s2.loli.net/2024/03/27/4zVGmdrfe7oDPjE.png)\n状态行：包含版本和响应状态码、状态信息\n响应头：包含响应的服务器的资源信息，一行一个响应头 \n\n点开状态行，可以看到里面有三个字段：\n![](https://s2.loli.net/2024/03/27/bpDYtwJyr2Uu3ij.png)\n1. Response Version：响应版本，因为使用的是HTTP协议，所以这里显示了HTTP的版本\n2. Status Code：响应状态码，这里的 200 表示请求成功。\n3. Response Phrase：响应状态码的提示信息\n\n另外响应头：\n{% note info modern %}\nDate：服务端发送响应报文的时间\nServer：服务器和相对应的版本\nLast-Modified：请求的对象创建或者最后修改的时间\nETag：对象的标志值，如果对象修改了，这个值也会变，用来判断对象是否改变\nAccept-Ranges：支持的范围单位\nContent-Length：内容长度\nCache-Control：缓存控制\nExpires：这个时间前，可以直接访问缓存副本\nConnection：连接类型，Keep-Alive表示这是一个长链接，可以继续用这个连接通信\nContent-Type：资源文件类型\n{% endnote %}\n\n##### HTTP追踪流\n选中HTTP协议的数据包 - 右键 - 【追踪流】-【HTTP追踪流】可以看到请求跟响应的报文\n![](https://s2.loli.net/2024/03/27/IxFOwLWZTRcuNUC.png)\n\n\n## 黑客利用wireshark来获取用户账号密码\n详细测试过程请自行搜索，我也在学习过程中\n这是我自己找的一个教程：\n\n{% link Wireshark抓取网站用户名密码, https://www.cnblogs.com/thespace/p/12731638.html %}\n\n最后想说的就是要注意互联网安全！","source":"_posts/抓包工具wireshark的学习笔记.md","raw":"---\ntitle: 抓包工具wireshark的学习笔记\ndescription: \"网络包分析工具\"\nabbrlink: 26256\ndate: 2024-03-21 13:41:03\ncover: https://image.aruoshui.fun/i/2024/12/31/vsjb7w-0.webp\ntags:\n - 抓包\ncategories:\n  - 必学开发技能 \n---\n\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/3/17 -->\nwireshark的安装和基础使用\n<!-- endtimeline -->\n\n<!-- timeline 2024/3/27 -->\n常见协议的抓包分析\n<!-- endtimeline -->\n\n\n{% endtimeline %}\n\n# 参考文章\n{% link 网络安全工具——Wireshark抓包工具, https://blog.csdn.net/p36273/article/details/130800459, https://blog.csdn.net/weixin_43603658/article/details/130236856 %}\n\n\n\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=524106622&bvid=BV1YM411Y7oU&cid=1000587951&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n\n\n# Wireshark抓包入门操作\n## 常见协议包\n[ARP协议](https://blog.csdn.net/weixin_58783105/article/details/134986414?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=2)\n[ICMP协议](https://blog.csdn.net/zy_dreamer/article/details/132509931)\n[TCP协议](https://zhuanlan.zhihu.com/p/603382668?utm_id=0)\n[UDP协议](https://zhuanlan.zhihu.com/p/357080855)\n[DNS协议](https://www.zhihu.com/question/23099454/answer/3197458866)\n[HTTP协议](https://blog.csdn.net/lfm1010123/article/details/126293176)\n\n## 查看本机要抓包的网络\ncmd输入指令ipconfig找到对应的网络\n\n## wireshark的混杂模式\n混杂模式概述:混杂模式就是接收所有经过网卡的数据包，包括不是发给本机的包，即不验证MAC地址。普通模式下网卡只接收发给本机的包（包括广播包）传递给上层程序，其它的包一律丢弃。\n![](https://s2.loli.net/2024/03/21/nhABoVcsGxSL5If.jpg)\n\n\n## Wireshark过滤器使用\n\n### wireshark常用过滤条件\n1. 常用条件\n```bash\n‘eq’和’==’ 等同\nand 并且\nor 或者\n‘!’ 和’not’ 取反\n```\n\n2. 针对IP地址过滤\n```bash\n1.源地址：ip.src == 192.168…\n2.目的地址：ip.dst == 192.168.xx\n3.不看源或目的地址：ip.addr == 192.168.xx\n```\n3. 针对协议过滤\n```bash\n1.某种协议的数据包 直接输入协议名字\n如：http\n2.排除某种协议\nnot tcp 或者 ！tcp\n```\n4. 针对端口过滤\n```bash\n1.捕获某端口的数据包\ntcp.port == 80\ntcp.srcport == 80\ntcp.dstport == 80\n2.捕获多端口\nudp.port >=2048\n```\n\n5. 针对长度和内容过滤\n```bash\n1.长度过滤\ndata.len > 0\nudp.lenth < 30\nhttp.content_lenth <= 20\n2.数据包内容过滤\nhttp.request.uri matches “vipscu”(匹配http请求中含有vipscu字段的请求信息)\n```\n\n### 开启混淆模式，抓取接口上使用混杂模式直接进行抓包\n![](https://s2.loli.net/2024/03/26/DP2nJ5WewyYztEM.png)\n\n## arp协议分析\nARP（Address Resolution Protocol）协议工作在网络层和数据链路层之间，通常被认为是一个跨两层的协议。简单来说，它就像是一本“翻译词典”，帮助你的电脑将IP地址“翻译”成MAC地址，这样你的电脑才能在网上和其他设备进行通信。\n\n![](https://s2.loli.net/2024/03/26/15GyJuRzl6SXY47.png)\n\n### 抓包分析\n\n#### 数据包格式\n\n![ARP数据包的格式](https://s2.loli.net/2024/03/26/bFTZIovByQpcj18.png)\n\n说明：\n{% note info modern %}\n1. Hardware Type：表示硬件地址类型，一般为MAC地址。它的值为1表示以太网地址。\n2. Protocol Type：表示三层协议地址类型，一般为IP。它的值为0x0800即表示IP地址。它的值与包含IP数据报的以太网数据帧中的类型字段的值相同。\n3. Hardware Length和Protocol Length：表示MAC地址和IP地址的长度，单位是字节。值分别是6和4。(6 * 8bit=48bit，4 * 8bit = 32bit)\n4. Operation Code：指定了ARP报文的类型，包括ARP Request和ARP Reply。（1为ARP请求，2为ARP应答）\n5. Source Hardware Address：指的是发送ARP报文的设备MAC地址（源MAC地址）\n6. Source Protocol Address：指的是发送ARP报文的设备IP地址（源IP地址）。\n7. Destination Hardware Address：指的是接收者MAC地址，在ARP Request报文中，该字段值为0（目的MAC地址）。\n8. Destination Protocol Address：指的是接收者的IP地址（目的MAC地址）。\n{% endnote %}\n\n##### ARP Reply 响应包\n向上边的图片就是一个ARP Reply 响应包\n\n##### ARP Request 请求包\n![ARP Request 请求包](https://s2.loli.net/2024/03/26/KSibOdGtvWDY19N.png)\n\n##### ARP 缓存\n当然如果每次都需要这样一个映射显然效率低下，于是便有了ARP缓存。{% emp 来存放IP地址和MAC地址关联信息 %}\n发送信息前，查找ARP缓存表，存在对方MAC地址，直接封装成帧。\n- 如果不存在，通过发送 ARP Request报文获取对方MAC地址。\n- 如果目标在其他网络，源设备会先查找网关MAC地址，将数据发给网关，再转发。\n- IP和MAC关系映射关系会放入ARP缓存表一段时间，有效期内都可查到，过了这个有效期会自动删除。\n\n##### ARP的请求、响应、代理、IP冲突\n这些点请详见：\n{% note info flat %}参考：[ARP的请求、响应、代理、IP冲突](https://blog.csdn.net/weixin_58783105/article/details/134986414?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=2){% endnote %}\n\n这个博主的例子很详细清楚，我也不抄一遍了。\n\n\n#### ARP存在一个ARP欺骗的问题\n简单理解就是使得目标主机接收错误的IP和MAC绑定关系\n攻击者可以发送虚假的ARP请求或应答报文，使得目标主机接收错误的IP和MAC绑定关系。那么发送给目标的数据就不再走网关了，而是到攻击者那里。如果攻击者拦截数据包不进行转发的话，本机就会断网。\n\n{% note info flat %}参考：[更多详细信息请见](https://blog.csdn.net/weixin_58783105/article/details/134986414?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=2){% endnote %}\n\n\n\n## ICMP协议分析\n### ICMP是什么\nICMP 的全称是 Internet Control Message Protocol(互联网控制协议)，它是一种互联网套件，它用于IP 协议中中传递控制信息和错误消息。\n\nICMP协议的主要功能如下：\n1. 发现网络错误：当一个数据包在传输过程中出现错误时，ICMP协议通过向发送方发送错误通知来发现网络错误。\n2. 检查网络是否可达：通过发送ICMP ECHO请求并接收ICMP ECHO回复消息，可以确定目标主机是否可达。\n3. 发现主机错误：当一个主机无法正常工作时，ICMP协议通过向发送方发送错误通知来发现主机错误。\n4. 发送路由信息：ICMP协议可以向其他主机发送路由信息，以帮助它们在网络中找到合适的路由。\n\n#### 过程\n![通知示意图](https://s2.loli.net/2024/03/26/lEe51a8wGVSQOHn.jpg)\n在这个图中：\n{% note info modern %}\n主机 A 想要给主机 B 发送一个 IP 数据包，主机 A 发送的数据包经过路由器 1 到达了路由器 2 ，由于路由器 2 不知道主机 B 的 MAC 地址，所以路由器 2 发送了一个 ARP 请求，没有回应，再经过重试时间后再次发送，还没有回应。。。。。。经过多次 ARP 请求后没有得到回应后，路由器 2 就会给主机 A 发送一个 ICMP 消息，告诉其发送的 IP 数据包没有到达主机 B 。\n{% endnote %}\n\n#### 抓包分析\n经常使用 ICMP 数据包的两个终端程序是 ping 和 traceroute。这里我ping了一下我的网关地址\n\n##### 请求\n![](https://s2.loli.net/2024/03/26/qB7OYsbeAnLDKhU.jpg)\n\n##### 响应\n![](https://s2.loli.net/2024/03/26/cO5n18fTqbzSELe.jpg)\n\n其中注意type类型：\n![通知类型](https://s2.loli.net/2024/03/26/JLHOoxMANk51vgK.jpg)\n我上边的两个就属于回送请求和回送应答(类型 8 和 类型 0 )\n\n##### 其他ICMP消息和IPv6的ICMPv6\n其他消息和ICMPv6我这不方便测试，想了解的可以查看下边的链接：\n{% note info flat %}参考：[更多的信息请你查看](https://blog.csdn.net/zy_dreamer/article/details/132509931){% endnote %}\n\n\n## TCP\n相信学过计网都很清楚整个过程，这里就不详细赘述了，如果想要了解所有的细节，请你移步：\n{% note info flat %}参考：[TCP详解](https://zhuanlan.zhihu.com/p/603382668?utm_id=0){% endnote %}\n\nTCP有如下的协议格式需要清楚，在抓包时可以针对分析：\n{% note info modern %}\n- 16位源端口号： 数据发送方的端口号，表示数据从哪里来\n- 16位目标端口号：数据接收方的端口号，表示数据要到哪里去\n- 32位序号：每一次通信TCP报文的编号\n- 32确认序号：用于对发送方发送的报文的确认，为接收到的报文序号+1\n- 4位首部长度：表示TCP报文头部有多少个4字节，因为4位最大表示15，所以TCP报文头最大长度为15*4=60\n- 6位标志位：\nURG: 紧急指针是否有效\nACK: 确认应答\nPSH: 提示接收端应用程序立刻从TCP缓冲区把数据读走\nRST: 表示要求对方重新建立连接\nSYN: 请求建立连接，我们把携带SYN标识的称为同步报文段\nFIN: 通知对方本端要关闭了，我们把携带FIN标识的为结束报文段\n- 16位窗口大小：TCP流量控制的一个手段，这里指接收窗口，用于告知发送端本端的TCP缓冲区还能容纳多少字节的数据，这样发送方就可以控制发送的数据量\n- 16位校验和：由发送方填充，接收端对TCP报文段执行CRC校验以检查数据是否损坏，这个校验不仅包含TCP头部，也包含数据部分\n- 16位紧急指针：一个正的偏移量，它与序号字段相加表示最后一个紧急数据的下一个序号，所以这个字段是紧急指针相对当前序号的偏移，用于发送方向接收方发送紧急数据\n- 0-40字节选项数据：存储一些可能需要的额外信息\n{% endnote %}\n\n### TCP三次握手过程\n![](https://s2.loli.net/2024/03/26/PoaYF6ZewhHqtCT.jpg)\n#### 抓包分析\n{% note warning flat %}用到TCP的地方太多了，很不容易专门找一个等待建立连接的点，这个时候想到了之前写的SSH的一篇文章：[与SSH的今生今世😅](https://www.aruoshui.fun/posts/12699.html) 于是考虑在连接服务器或者虚拟机的时候进行抓包，果然成功了。{% endnote %}\n\n以下是对ip：192.168.131.138的一台虚拟机连接的抓包 \n\n![](https://s2.loli.net/2024/03/27/di9PtJzYKoaVhC1.png)\n其中可以非常明显的看到TCP连接过程中如`SYN`，`ACK`等，其实变相帮助理解TCP协议了，比之前上实验课那个过程好太多了。\n\n#### 连接请求\n![连接请求](https://s2.loli.net/2024/03/27/IkuzirSglhtOyA8.png)\n可以看到`Src Port`是本机用来监听的端口（随机），而虚拟机中SSH连接开放的端口 `Dst Port` 是`22` \n\n#### 连接请求确认\n![连接请求确认](https://s2.loli.net/2024/03/27/2TDqpjCF8Vsu1UL.png) \n\n#### 确认\n![确认](https://s2.loli.net/2024/03/27/Ro5ByXTtDb31kaC.png)\n\n#### 利用wireshark自带的流量图工具获得TCP连接过程\n在统计任务栏中选择流量图，点击之后流类型选择为TCP流，就可以更加清晰的了解整个过程了\n![流量图](https://s2.loli.net/2024/03/27/qQ7gTbxuRGLN3fI.png)\n\n\n\n### TCP连接断开的四次挥手\n同样的断开连接我这里还是利用虚拟机\n![](https://s2.loli.net/2024/03/27/SdOQf4YEXqsP8FA.png)\n细节就不分析了：\n![](https://s2.loli.net/2024/03/27/7T9eDZPdvb4LUIN.png)\n![](https://s2.loli.net/2024/03/27/Dn5vGcP28sulzNo.png)\n\n## HTTP协议\n### 什么是HTTP协议\nHTTP 协议简单来说就是客户端与服务器之间一发一收的模型\n![HTTP协议的核心过程](https://s2.loli.net/2024/03/27/POgYUjucWlDAmx1.jpg)\n### HTTP协议的抓包分析\n这里利用`curl -I baidu.com`访问百度网站，触发HTTP协议\n![](https://s2.loli.net/2024/03/27/hoEgIiAmXPdD5x6.png)\n#### 建立TCP连接\n这里就不过多赘述\n#### 请求报文和响应报文\n在请求和响应部分：\n第一个包是，`我`向`百度`发送了一个「HTTP请求」，请求类型是HEAD\n第三个包是，`百度`向`我`发送了一个「HTTP响应」，响应状态码是 200 OK\n#### 释放连接\n这里也不过多赘述\n\n#### 分析HTTP协议报文\n请求报文分为三个部分：请求行、请求头、请求体\n响应报文分为四个部分：状态行、响应头、响应空行、响应体\n\n##### 请求报文\n![](https://s2.loli.net/2024/03/27/KZon164DcXCtbsN.png)\n请求行：包含请求方法、请求URL、HTTP版本\n请求头：包含请求的客户端的信息，一行一个请求头\n请求体：POST等类型的请求才有请求体，这里没有\n\n点开请求行，看里面的三个字段：\n1. Request Method：请求方法，这里的请求方法是HEAD，用来获取报文首部\n2. Request URI：请求的URL，因为我们没指定，所以默认是/\n3. Request Version：请求的版本，因为用的是HTTP协议，所以这里显示HTTP协议的版本\n  \n请求头部分：\nHost：目标主机\nUser-Agent：代理，也就是浏览器的类型。我们用的不是浏览器，所以这里显示的是命令curl\nAccept：浏览器可接受的MIME类型\n\n##### 响应报文\n![](https://s2.loli.net/2024/03/27/4zVGmdrfe7oDPjE.png)\n状态行：包含版本和响应状态码、状态信息\n响应头：包含响应的服务器的资源信息，一行一个响应头 \n\n点开状态行，可以看到里面有三个字段：\n![](https://s2.loli.net/2024/03/27/bpDYtwJyr2Uu3ij.png)\n1. Response Version：响应版本，因为使用的是HTTP协议，所以这里显示了HTTP的版本\n2. Status Code：响应状态码，这里的 200 表示请求成功。\n3. Response Phrase：响应状态码的提示信息\n\n另外响应头：\n{% note info modern %}\nDate：服务端发送响应报文的时间\nServer：服务器和相对应的版本\nLast-Modified：请求的对象创建或者最后修改的时间\nETag：对象的标志值，如果对象修改了，这个值也会变，用来判断对象是否改变\nAccept-Ranges：支持的范围单位\nContent-Length：内容长度\nCache-Control：缓存控制\nExpires：这个时间前，可以直接访问缓存副本\nConnection：连接类型，Keep-Alive表示这是一个长链接，可以继续用这个连接通信\nContent-Type：资源文件类型\n{% endnote %}\n\n##### HTTP追踪流\n选中HTTP协议的数据包 - 右键 - 【追踪流】-【HTTP追踪流】可以看到请求跟响应的报文\n![](https://s2.loli.net/2024/03/27/IxFOwLWZTRcuNUC.png)\n\n\n## 黑客利用wireshark来获取用户账号密码\n详细测试过程请自行搜索，我也在学习过程中\n这是我自己找的一个教程：\n\n{% link Wireshark抓取网站用户名密码, https://www.cnblogs.com/thespace/p/12731638.html %}\n\n最后想说的就是要注意互联网安全！","slug":"抓包工具wireshark的学习笔记","published":1,"updated":"2024-12-31T11:24:31.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io6002imkttfn997tdt","content":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/17</p>\n</div></div><div class='timeline-item-content'><p>wireshark的安装和基础使用</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/27</p>\n</div></div><div class='timeline-item-content'><p>常见协议的抓包分析</p>\n</div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"网络安全工具——Wireshark抓包工具\" href=\"https://blog.csdn.net/p36273/article/details/130800459\"><div class=\"left\"><img src=\"https://blog.csdn.net/weixin_43603658/article/details/130236856\"/></div><div class=\"right\"><p class=\"text\">网络安全工具——Wireshark抓包工具</p><p class=\"url\">https://blog.csdn.net/p36273/article/details/130800459</p></div></a></div>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=524106622&bvid=BV1YM411Y7oU&cid=1000587951&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<h1>Wireshark抓包入门操作</h1>\n<h2 id=\"常见协议包\">常见协议包</h2>\n<p><a href=\"https://blog.csdn.net/weixin_58783105/article/details/134986414?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=2\">ARP协议</a><br>\n<a href=\"https://blog.csdn.net/zy_dreamer/article/details/132509931\">ICMP协议</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/603382668?utm_id=0\">TCP协议</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/357080855\">UDP协议</a><br>\n<a href=\"https://www.zhihu.com/question/23099454/answer/3197458866\">DNS协议</a><br>\n<a href=\"https://blog.csdn.net/lfm1010123/article/details/126293176\">HTTP协议</a></p>\n<h2 id=\"查看本机要抓包的网络\">查看本机要抓包的网络</h2>\n<p>cmd输入指令ipconfig找到对应的网络</p>\n<h2 id=\"wireshark的混杂模式\">wireshark的混杂模式</h2>\n<p>混杂模式概述:混杂模式就是接收所有经过网卡的数据包，包括不是发给本机的包，即不验证MAC地址。普通模式下网卡只接收发给本机的包（包括广播包）传递给上层程序，其它的包一律丢弃。<br>\n<img src=\"https://s2.loli.net/2024/03/21/nhABoVcsGxSL5If.jpg\" alt=\"\"></p>\n<h2 id=\"Wireshark过滤器使用\">Wireshark过滤器使用</h2>\n<h3 id=\"wireshark常用过滤条件\">wireshark常用过滤条件</h3>\n<ol>\n<li>常用条件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">‘eq’和’==’ 等同</span><br><span class=\"line\">and 并且</span><br><span class=\"line\">or 或者</span><br><span class=\"line\">‘!’ 和’not’ 取反</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>针对IP地址过滤</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.源地址：ip.src == 192.168…</span><br><span class=\"line\">2.目的地址：ip.dst == 192.168.xx</span><br><span class=\"line\">3.不看源或目的地址：ip.addr == 192.168.xx</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>针对协议过滤</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.某种协议的数据包 直接输入协议名字</span><br><span class=\"line\">如：http</span><br><span class=\"line\">2.排除某种协议</span><br><span class=\"line\">not tcp 或者 ！tcp</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>针对端口过滤</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.捕获某端口的数据包</span><br><span class=\"line\">tcp.port == 80</span><br><span class=\"line\">tcp.srcport == 80</span><br><span class=\"line\">tcp.dstport == 80</span><br><span class=\"line\">2.捕获多端口</span><br><span class=\"line\">udp.port &gt;=2048</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>针对长度和内容过滤</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.长度过滤</span><br><span class=\"line\">data.len &gt; 0</span><br><span class=\"line\">udp.lenth &lt; 30</span><br><span class=\"line\">http.content_lenth &lt;= 20</span><br><span class=\"line\">2.数据包内容过滤</span><br><span class=\"line\">http.request.uri matches “vipscu”(匹配http请求中含有vipscu字段的请求信息)</span><br></pre></td></tr></table></figure>\n<h3 id=\"开启混淆模式，抓取接口上使用混杂模式直接进行抓包\">开启混淆模式，抓取接口上使用混杂模式直接进行抓包</h3>\n<p><img src=\"https://s2.loli.net/2024/03/26/DP2nJ5WewyYztEM.png\" alt=\"\"></p>\n<h2 id=\"arp协议分析\">arp协议分析</h2>\n<p>ARP（Address Resolution Protocol）协议工作在网络层和数据链路层之间，通常被认为是一个跨两层的协议。简单来说，它就像是一本“翻译词典”，帮助你的电脑将IP地址“翻译”成MAC地址，这样你的电脑才能在网上和其他设备进行通信。</p>\n<p><img src=\"https://s2.loli.net/2024/03/26/15GyJuRzl6SXY47.png\" alt=\"\"></p>\n<h3 id=\"抓包分析\">抓包分析</h3>\n<h4 id=\"数据包格式\">数据包格式</h4>\n<p><img src=\"https://s2.loli.net/2024/03/26/bFTZIovByQpcj18.png\" alt=\"ARP数据包的格式\"></p>\n<p>说明：</p>\n<div class=\"note info modern\"><ol>\n<li>Hardware Type：表示硬件地址类型，一般为MAC地址。它的值为1表示以太网地址。</li>\n<li>Protocol Type：表示三层协议地址类型，一般为IP。它的值为0x0800即表示IP地址。它的值与包含IP数据报的以太网数据帧中的类型字段的值相同。</li>\n<li>Hardware Length和Protocol Length：表示MAC地址和IP地址的长度，单位是字节。值分别是6和4。(6 * 8bit=48bit，4 * 8bit = 32bit)</li>\n<li>Operation Code：指定了ARP报文的类型，包括ARP Request和ARP Reply。（1为ARP请求，2为ARP应答）</li>\n<li>Source Hardware Address：指的是发送ARP报文的设备MAC地址（源MAC地址）</li>\n<li>Source Protocol Address：指的是发送ARP报文的设备IP地址（源IP地址）。</li>\n<li>Destination Hardware Address：指的是接收者MAC地址，在ARP Request报文中，该字段值为0（目的MAC地址）。</li>\n<li>Destination Protocol Address：指的是接收者的IP地址（目的MAC地址）。</li>\n</ol>\n</div>\n<h5 id=\"ARP-Reply-响应包\">ARP Reply 响应包</h5>\n<p>向上边的图片就是一个ARP Reply 响应包</p>\n<h5 id=\"ARP-Request-请求包\">ARP Request 请求包</h5>\n<p><img src=\"https://s2.loli.net/2024/03/26/KSibOdGtvWDY19N.png\" alt=\"ARP Request 请求包\"></p>\n<h5 id=\"ARP-缓存\">ARP 缓存</h5>\n<p>当然如果每次都需要这样一个映射显然效率低下，于是便有了ARP缓存。<emp>来存放IP地址和MAC地址关联信息</emp><br>\n发送信息前，查找ARP缓存表，存在对方MAC地址，直接封装成帧。</p>\n<ul>\n<li>如果不存在，通过发送 ARP Request报文获取对方MAC地址。</li>\n<li>如果目标在其他网络，源设备会先查找网关MAC地址，将数据发给网关，再转发。</li>\n<li>IP和MAC关系映射关系会放入ARP缓存表一段时间，有效期内都可查到，过了这个有效期会自动删除。</li>\n</ul>\n<h5 id=\"ARP的请求、响应、代理、IP冲突\">ARP的请求、响应、代理、IP冲突</h5>\n<p>这些点请详见：</p>\n<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/weixin_58783105/article/details/134986414?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=2\">ARP的请求、响应、代理、IP冲突</a></p>\n</div>\n<p>这个博主的例子很详细清楚，我也不抄一遍了。</p>\n<h4 id=\"ARP存在一个ARP欺骗的问题\">ARP存在一个ARP欺骗的问题</h4>\n<p>简单理解就是使得目标主机接收错误的IP和MAC绑定关系<br>\n攻击者可以发送虚假的ARP请求或应答报文，使得目标主机接收错误的IP和MAC绑定关系。那么发送给目标的数据就不再走网关了，而是到攻击者那里。如果攻击者拦截数据包不进行转发的话，本机就会断网。</p>\n<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/weixin_58783105/article/details/134986414?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=2\">更多详细信息请见</a></p>\n</div>\n<h2 id=\"ICMP协议分析\">ICMP协议分析</h2>\n<h3 id=\"ICMP是什么\">ICMP是什么</h3>\n<p>ICMP 的全称是 Internet Control Message Protocol(互联网控制协议)，它是一种互联网套件，它用于IP 协议中中传递控制信息和错误消息。</p>\n<p>ICMP协议的主要功能如下：</p>\n<ol>\n<li>发现网络错误：当一个数据包在传输过程中出现错误时，ICMP协议通过向发送方发送错误通知来发现网络错误。</li>\n<li>检查网络是否可达：通过发送ICMP ECHO请求并接收ICMP ECHO回复消息，可以确定目标主机是否可达。</li>\n<li>发现主机错误：当一个主机无法正常工作时，ICMP协议通过向发送方发送错误通知来发现主机错误。</li>\n<li>发送路由信息：ICMP协议可以向其他主机发送路由信息，以帮助它们在网络中找到合适的路由。</li>\n</ol>\n<h4 id=\"过程\">过程</h4>\n<p><img src=\"https://s2.loli.net/2024/03/26/lEe51a8wGVSQOHn.jpg\" alt=\"通知示意图\"><br>\n在这个图中：</p>\n<div class=\"note info modern\"><p>主机 A 想要给主机 B 发送一个 IP 数据包，主机 A 发送的数据包经过路由器 1 到达了路由器 2 ，由于路由器 2 不知道主机 B 的 MAC 地址，所以路由器 2 发送了一个 ARP 请求，没有回应，再经过重试时间后再次发送，还没有回应。。。。。。经过多次 ARP 请求后没有得到回应后，路由器 2 就会给主机 A 发送一个 ICMP 消息，告诉其发送的 IP 数据包没有到达主机 B 。</p>\n</div>\n<h4 id=\"抓包分析-2\">抓包分析</h4>\n<p>经常使用 ICMP 数据包的两个终端程序是 ping 和 traceroute。这里我ping了一下我的网关地址</p>\n<h5 id=\"请求\">请求</h5>\n<p><img src=\"https://s2.loli.net/2024/03/26/qB7OYsbeAnLDKhU.jpg\" alt=\"\"></p>\n<h5 id=\"响应\">响应</h5>\n<p><img src=\"https://s2.loli.net/2024/03/26/cO5n18fTqbzSELe.jpg\" alt=\"\"></p>\n<p>其中注意type类型：<br>\n<img src=\"https://s2.loli.net/2024/03/26/JLHOoxMANk51vgK.jpg\" alt=\"通知类型\"><br>\n我上边的两个就属于回送请求和回送应答(类型 8 和 类型 0 )</p>\n<h5 id=\"其他ICMP消息和IPv6的ICMPv6\">其他ICMP消息和IPv6的ICMPv6</h5>\n<p>其他消息和ICMPv6我这不方便测试，想了解的可以查看下边的链接：</p>\n<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/zy_dreamer/article/details/132509931\">更多的信息请你查看</a></p>\n</div>\n<h2 id=\"TCP\">TCP</h2>\n<p>相信学过计网都很清楚整个过程，这里就不详细赘述了，如果想要了解所有的细节，请你移步：</p>\n<div class=\"note info flat\"><p>参考：<a href=\"https://zhuanlan.zhihu.com/p/603382668?utm_id=0\">TCP详解</a></p>\n</div>\n<p>TCP有如下的协议格式需要清楚，在抓包时可以针对分析：</p>\n<div class=\"note info modern\"><ul>\n<li>16位源端口号： 数据发送方的端口号，表示数据从哪里来</li>\n<li>16位目标端口号：数据接收方的端口号，表示数据要到哪里去</li>\n<li>32位序号：每一次通信TCP报文的编号</li>\n<li>32确认序号：用于对发送方发送的报文的确认，为接收到的报文序号+1</li>\n<li>4位首部长度：表示TCP报文头部有多少个4字节，因为4位最大表示15，所以TCP报文头最大长度为15*4=60</li>\n<li>6位标志位：<br>\nURG: 紧急指针是否有效<br>\nACK: 确认应答<br>\nPSH: 提示接收端应用程序立刻从TCP缓冲区把数据读走<br>\nRST: 表示要求对方重新建立连接<br>\nSYN: 请求建立连接，我们把携带SYN标识的称为同步报文段<br>\nFIN: 通知对方本端要关闭了，我们把携带FIN标识的为结束报文段</li>\n<li>16位窗口大小：TCP流量控制的一个手段，这里指接收窗口，用于告知发送端本端的TCP缓冲区还能容纳多少字节的数据，这样发送方就可以控制发送的数据量</li>\n<li>16位校验和：由发送方填充，接收端对TCP报文段执行CRC校验以检查数据是否损坏，这个校验不仅包含TCP头部，也包含数据部分</li>\n<li>16位紧急指针：一个正的偏移量，它与序号字段相加表示最后一个紧急数据的下一个序号，所以这个字段是紧急指针相对当前序号的偏移，用于发送方向接收方发送紧急数据</li>\n<li>0-40字节选项数据：存储一些可能需要的额外信息</li>\n</ul>\n</div>\n<h3 id=\"TCP三次握手过程\">TCP三次握手过程</h3>\n<p><img src=\"https://s2.loli.net/2024/03/26/PoaYF6ZewhHqtCT.jpg\" alt=\"\"></p>\n<h4 id=\"抓包分析-3\">抓包分析</h4>\n<div class=\"note warning flat\"><p>用到TCP的地方太多了，很不容易专门找一个等待建立连接的点，这个时候想到了之前写的SSH的一篇文章：<a href=\"https://www.aruoshui.fun/posts/12699.html\">与SSH的今生今世😅</a> 于是考虑在连接服务器或者虚拟机的时候进行抓包，果然成功了。</p>\n</div>\n<p>以下是对ip：192.168.131.138的一台虚拟机连接的抓包</p>\n<p><img src=\"https://s2.loli.net/2024/03/27/di9PtJzYKoaVhC1.png\" alt=\"\"><br>\n其中可以非常明显的看到TCP连接过程中如<code>SYN</code>，<code>ACK</code>等，其实变相帮助理解TCP协议了，比之前上实验课那个过程好太多了。</p>\n<h4 id=\"连接请求\">连接请求</h4>\n<p><img src=\"https://s2.loli.net/2024/03/27/IkuzirSglhtOyA8.png\" alt=\"连接请求\"><br>\n可以看到<code>Src Port</code>是本机用来监听的端口（随机），而虚拟机中SSH连接开放的端口 <code>Dst Port</code> 是<code>22</code></p>\n<h4 id=\"连接请求确认\">连接请求确认</h4>\n<p><img src=\"https://s2.loli.net/2024/03/27/2TDqpjCF8Vsu1UL.png\" alt=\"连接请求确认\"></p>\n<h4 id=\"确认\">确认</h4>\n<p><img src=\"https://s2.loli.net/2024/03/27/Ro5ByXTtDb31kaC.png\" alt=\"确认\"></p>\n<h4 id=\"利用wireshark自带的流量图工具获得TCP连接过程\">利用wireshark自带的流量图工具获得TCP连接过程</h4>\n<p>在统计任务栏中选择流量图，点击之后流类型选择为TCP流，就可以更加清晰的了解整个过程了<br>\n<img src=\"https://s2.loli.net/2024/03/27/qQ7gTbxuRGLN3fI.png\" alt=\"流量图\"></p>\n<h3 id=\"TCP连接断开的四次挥手\">TCP连接断开的四次挥手</h3>\n<p>同样的断开连接我这里还是利用虚拟机<br>\n<img src=\"https://s2.loli.net/2024/03/27/SdOQf4YEXqsP8FA.png\" alt=\"\"><br>\n细节就不分析了：<br>\n<img src=\"https://s2.loli.net/2024/03/27/7T9eDZPdvb4LUIN.png\" alt=\"\"><br>\n<img src=\"https://s2.loli.net/2024/03/27/Dn5vGcP28sulzNo.png\" alt=\"\"></p>\n<h2 id=\"HTTP协议\">HTTP协议</h2>\n<h3 id=\"什么是HTTP协议\">什么是HTTP协议</h3>\n<p>HTTP 协议简单来说就是客户端与服务器之间一发一收的模型<br>\n<img src=\"https://s2.loli.net/2024/03/27/POgYUjucWlDAmx1.jpg\" alt=\"HTTP协议的核心过程\"></p>\n<h3 id=\"HTTP协议的抓包分析\">HTTP协议的抓包分析</h3>\n<p>这里利用<code>curl -I baidu.com</code>访问百度网站，触发HTTP协议<br>\n<img src=\"https://s2.loli.net/2024/03/27/hoEgIiAmXPdD5x6.png\" alt=\"\"></p>\n<h4 id=\"建立TCP连接\">建立TCP连接</h4>\n<p>这里就不过多赘述</p>\n<h4 id=\"请求报文和响应报文\">请求报文和响应报文</h4>\n<p>在请求和响应部分：<br>\n第一个包是，<code>我</code>向<code>百度</code>发送了一个「HTTP请求」，请求类型是HEAD<br>\n第三个包是，<code>百度</code>向<code>我</code>发送了一个「HTTP响应」，响应状态码是 200 OK</p>\n<h4 id=\"释放连接\">释放连接</h4>\n<p>这里也不过多赘述</p>\n<h4 id=\"分析HTTP协议报文\">分析HTTP协议报文</h4>\n<p>请求报文分为三个部分：请求行、请求头、请求体<br>\n响应报文分为四个部分：状态行、响应头、响应空行、响应体</p>\n<h5 id=\"请求报文\">请求报文</h5>\n<p><img src=\"https://s2.loli.net/2024/03/27/KZon164DcXCtbsN.png\" alt=\"\"><br>\n请求行：包含请求方法、请求URL、HTTP版本<br>\n请求头：包含请求的客户端的信息，一行一个请求头<br>\n请求体：POST等类型的请求才有请求体，这里没有</p>\n<p>点开请求行，看里面的三个字段：</p>\n<ol>\n<li>Request Method：请求方法，这里的请求方法是HEAD，用来获取报文首部</li>\n<li>Request URI：请求的URL，因为我们没指定，所以默认是/</li>\n<li>Request Version：请求的版本，因为用的是HTTP协议，所以这里显示HTTP协议的版本</li>\n</ol>\n<p>请求头部分：<br>\nHost：目标主机<br>\nUser-Agent：代理，也就是浏览器的类型。我们用的不是浏览器，所以这里显示的是命令curl<br>\nAccept：浏览器可接受的MIME类型</p>\n<h5 id=\"响应报文\">响应报文</h5>\n<p><img src=\"https://s2.loli.net/2024/03/27/4zVGmdrfe7oDPjE.png\" alt=\"\"><br>\n状态行：包含版本和响应状态码、状态信息<br>\n响应头：包含响应的服务器的资源信息，一行一个响应头</p>\n<p>点开状态行，可以看到里面有三个字段：<br>\n<img src=\"https://s2.loli.net/2024/03/27/bpDYtwJyr2Uu3ij.png\" alt=\"\"></p>\n<ol>\n<li>Response Version：响应版本，因为使用的是HTTP协议，所以这里显示了HTTP的版本</li>\n<li>Status Code：响应状态码，这里的 200 表示请求成功。</li>\n<li>Response Phrase：响应状态码的提示信息</li>\n</ol>\n<p>另外响应头：</p>\n<div class=\"note info modern\"><p>Date：服务端发送响应报文的时间<br>\nServer：服务器和相对应的版本<br>\nLast-Modified：请求的对象创建或者最后修改的时间<br>\nETag：对象的标志值，如果对象修改了，这个值也会变，用来判断对象是否改变<br>\nAccept-Ranges：支持的范围单位<br>\nContent-Length：内容长度<br>\nCache-Control：缓存控制<br>\nExpires：这个时间前，可以直接访问缓存副本<br>\nConnection：连接类型，Keep-Alive表示这是一个长链接，可以继续用这个连接通信<br>\nContent-Type：资源文件类型</p>\n</div>\n<h5 id=\"HTTP追踪流\">HTTP追踪流</h5>\n<p>选中HTTP协议的数据包 - 右键 - 【追踪流】-【HTTP追踪流】可以看到请求跟响应的报文<br>\n<img src=\"https://s2.loli.net/2024/03/27/IxFOwLWZTRcuNUC.png\" alt=\"\"></p>\n<h2 id=\"黑客利用wireshark来获取用户账号密码\">黑客利用wireshark来获取用户账号密码</h2>\n<p>详细测试过程请自行搜索，我也在学习过程中<br>\n这是我自己找的一个教程：</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"Wireshark抓取网站用户名密码\" href=\"https://www.cnblogs.com/thespace/p/12731638.html\"><div class=\"left\"><img src=\"/img/link.png\"/></div><div class=\"right\"><p class=\"text\">Wireshark抓取网站用户名密码</p><p class=\"url\">https://www.cnblogs.com/thespace/p/12731638.html</p></div></a></div>\n<p>最后想说的就是要注意互联网安全！</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/17</p>\n</div></div><div class='timeline-item-content'><p>wireshark的安装和基础使用</p>\n</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/3/27</p>\n</div></div><div class='timeline-item-content'><p>常见协议的抓包分析</p>\n</div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"网络安全工具——Wireshark抓包工具\" href=\"https://blog.csdn.net/p36273/article/details/130800459\"><div class=\"left\"><img src=\"https://blog.csdn.net/weixin_43603658/article/details/130236856\"/></div><div class=\"right\"><p class=\"text\">网络安全工具——Wireshark抓包工具</p><p class=\"url\">https://blog.csdn.net/p36273/article/details/130800459</p></div></a></div>\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=524106622&bvid=BV1YM411Y7oU&cid=1000587951&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<h1>Wireshark抓包入门操作</h1>\n<h2 id=\"常见协议包\">常见协议包</h2>\n<p><a href=\"https://blog.csdn.net/weixin_58783105/article/details/134986414?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=2\">ARP协议</a><br>\n<a href=\"https://blog.csdn.net/zy_dreamer/article/details/132509931\">ICMP协议</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/603382668?utm_id=0\">TCP协议</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/357080855\">UDP协议</a><br>\n<a href=\"https://www.zhihu.com/question/23099454/answer/3197458866\">DNS协议</a><br>\n<a href=\"https://blog.csdn.net/lfm1010123/article/details/126293176\">HTTP协议</a></p>\n<h2 id=\"查看本机要抓包的网络\">查看本机要抓包的网络</h2>\n<p>cmd输入指令ipconfig找到对应的网络</p>\n<h2 id=\"wireshark的混杂模式\">wireshark的混杂模式</h2>\n<p>混杂模式概述:混杂模式就是接收所有经过网卡的数据包，包括不是发给本机的包，即不验证MAC地址。普通模式下网卡只接收发给本机的包（包括广播包）传递给上层程序，其它的包一律丢弃。<br>\n<img src=\"https://s2.loli.net/2024/03/21/nhABoVcsGxSL5If.jpg\" alt=\"\"></p>\n<h2 id=\"Wireshark过滤器使用\">Wireshark过滤器使用</h2>\n<h3 id=\"wireshark常用过滤条件\">wireshark常用过滤条件</h3>\n<ol>\n<li>常用条件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">‘eq’和’==’ 等同</span><br><span class=\"line\">and 并且</span><br><span class=\"line\">or 或者</span><br><span class=\"line\">‘!’ 和’not’ 取反</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>针对IP地址过滤</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.源地址：ip.src == 192.168…</span><br><span class=\"line\">2.目的地址：ip.dst == 192.168.xx</span><br><span class=\"line\">3.不看源或目的地址：ip.addr == 192.168.xx</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>针对协议过滤</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.某种协议的数据包 直接输入协议名字</span><br><span class=\"line\">如：http</span><br><span class=\"line\">2.排除某种协议</span><br><span class=\"line\">not tcp 或者 ！tcp</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>针对端口过滤</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.捕获某端口的数据包</span><br><span class=\"line\">tcp.port == 80</span><br><span class=\"line\">tcp.srcport == 80</span><br><span class=\"line\">tcp.dstport == 80</span><br><span class=\"line\">2.捕获多端口</span><br><span class=\"line\">udp.port &gt;=2048</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>针对长度和内容过滤</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.长度过滤</span><br><span class=\"line\">data.len &gt; 0</span><br><span class=\"line\">udp.lenth &lt; 30</span><br><span class=\"line\">http.content_lenth &lt;= 20</span><br><span class=\"line\">2.数据包内容过滤</span><br><span class=\"line\">http.request.uri matches “vipscu”(匹配http请求中含有vipscu字段的请求信息)</span><br></pre></td></tr></table></figure>\n<h3 id=\"开启混淆模式，抓取接口上使用混杂模式直接进行抓包\">开启混淆模式，抓取接口上使用混杂模式直接进行抓包</h3>\n<p><img src=\"https://s2.loli.net/2024/03/26/DP2nJ5WewyYztEM.png\" alt=\"\"></p>\n<h2 id=\"arp协议分析\">arp协议分析</h2>\n<p>ARP（Address Resolution Protocol）协议工作在网络层和数据链路层之间，通常被认为是一个跨两层的协议。简单来说，它就像是一本“翻译词典”，帮助你的电脑将IP地址“翻译”成MAC地址，这样你的电脑才能在网上和其他设备进行通信。</p>\n<p><img src=\"https://s2.loli.net/2024/03/26/15GyJuRzl6SXY47.png\" alt=\"\"></p>\n<h3 id=\"抓包分析\">抓包分析</h3>\n<h4 id=\"数据包格式\">数据包格式</h4>\n<p><img src=\"https://s2.loli.net/2024/03/26/bFTZIovByQpcj18.png\" alt=\"ARP数据包的格式\"></p>\n<p>说明：</p>\n<div class=\"note info modern\"><ol>\n<li>Hardware Type：表示硬件地址类型，一般为MAC地址。它的值为1表示以太网地址。</li>\n<li>Protocol Type：表示三层协议地址类型，一般为IP。它的值为0x0800即表示IP地址。它的值与包含IP数据报的以太网数据帧中的类型字段的值相同。</li>\n<li>Hardware Length和Protocol Length：表示MAC地址和IP地址的长度，单位是字节。值分别是6和4。(6 * 8bit=48bit，4 * 8bit = 32bit)</li>\n<li>Operation Code：指定了ARP报文的类型，包括ARP Request和ARP Reply。（1为ARP请求，2为ARP应答）</li>\n<li>Source Hardware Address：指的是发送ARP报文的设备MAC地址（源MAC地址）</li>\n<li>Source Protocol Address：指的是发送ARP报文的设备IP地址（源IP地址）。</li>\n<li>Destination Hardware Address：指的是接收者MAC地址，在ARP Request报文中，该字段值为0（目的MAC地址）。</li>\n<li>Destination Protocol Address：指的是接收者的IP地址（目的MAC地址）。</li>\n</ol>\n</div>\n<h5 id=\"ARP-Reply-响应包\">ARP Reply 响应包</h5>\n<p>向上边的图片就是一个ARP Reply 响应包</p>\n<h5 id=\"ARP-Request-请求包\">ARP Request 请求包</h5>\n<p><img src=\"https://s2.loli.net/2024/03/26/KSibOdGtvWDY19N.png\" alt=\"ARP Request 请求包\"></p>\n<h5 id=\"ARP-缓存\">ARP 缓存</h5>\n<p>当然如果每次都需要这样一个映射显然效率低下，于是便有了ARP缓存。<emp>来存放IP地址和MAC地址关联信息</emp><br>\n发送信息前，查找ARP缓存表，存在对方MAC地址，直接封装成帧。</p>\n<ul>\n<li>如果不存在，通过发送 ARP Request报文获取对方MAC地址。</li>\n<li>如果目标在其他网络，源设备会先查找网关MAC地址，将数据发给网关，再转发。</li>\n<li>IP和MAC关系映射关系会放入ARP缓存表一段时间，有效期内都可查到，过了这个有效期会自动删除。</li>\n</ul>\n<h5 id=\"ARP的请求、响应、代理、IP冲突\">ARP的请求、响应、代理、IP冲突</h5>\n<p>这些点请详见：</p>\n<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/weixin_58783105/article/details/134986414?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=2\">ARP的请求、响应、代理、IP冲突</a></p>\n</div>\n<p>这个博主的例子很详细清楚，我也不抄一遍了。</p>\n<h4 id=\"ARP存在一个ARP欺骗的问题\">ARP存在一个ARP欺骗的问题</h4>\n<p>简单理解就是使得目标主机接收错误的IP和MAC绑定关系<br>\n攻击者可以发送虚假的ARP请求或应答报文，使得目标主机接收错误的IP和MAC绑定关系。那么发送给目标的数据就不再走网关了，而是到攻击者那里。如果攻击者拦截数据包不进行转发的话，本机就会断网。</p>\n<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/weixin_58783105/article/details/134986414?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-134986414-blog-131233662.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=2\">更多详细信息请见</a></p>\n</div>\n<h2 id=\"ICMP协议分析\">ICMP协议分析</h2>\n<h3 id=\"ICMP是什么\">ICMP是什么</h3>\n<p>ICMP 的全称是 Internet Control Message Protocol(互联网控制协议)，它是一种互联网套件，它用于IP 协议中中传递控制信息和错误消息。</p>\n<p>ICMP协议的主要功能如下：</p>\n<ol>\n<li>发现网络错误：当一个数据包在传输过程中出现错误时，ICMP协议通过向发送方发送错误通知来发现网络错误。</li>\n<li>检查网络是否可达：通过发送ICMP ECHO请求并接收ICMP ECHO回复消息，可以确定目标主机是否可达。</li>\n<li>发现主机错误：当一个主机无法正常工作时，ICMP协议通过向发送方发送错误通知来发现主机错误。</li>\n<li>发送路由信息：ICMP协议可以向其他主机发送路由信息，以帮助它们在网络中找到合适的路由。</li>\n</ol>\n<h4 id=\"过程\">过程</h4>\n<p><img src=\"https://s2.loli.net/2024/03/26/lEe51a8wGVSQOHn.jpg\" alt=\"通知示意图\"><br>\n在这个图中：</p>\n<div class=\"note info modern\"><p>主机 A 想要给主机 B 发送一个 IP 数据包，主机 A 发送的数据包经过路由器 1 到达了路由器 2 ，由于路由器 2 不知道主机 B 的 MAC 地址，所以路由器 2 发送了一个 ARP 请求，没有回应，再经过重试时间后再次发送，还没有回应。。。。。。经过多次 ARP 请求后没有得到回应后，路由器 2 就会给主机 A 发送一个 ICMP 消息，告诉其发送的 IP 数据包没有到达主机 B 。</p>\n</div>\n<h4 id=\"抓包分析-2\">抓包分析</h4>\n<p>经常使用 ICMP 数据包的两个终端程序是 ping 和 traceroute。这里我ping了一下我的网关地址</p>\n<h5 id=\"请求\">请求</h5>\n<p><img src=\"https://s2.loli.net/2024/03/26/qB7OYsbeAnLDKhU.jpg\" alt=\"\"></p>\n<h5 id=\"响应\">响应</h5>\n<p><img src=\"https://s2.loli.net/2024/03/26/cO5n18fTqbzSELe.jpg\" alt=\"\"></p>\n<p>其中注意type类型：<br>\n<img src=\"https://s2.loli.net/2024/03/26/JLHOoxMANk51vgK.jpg\" alt=\"通知类型\"><br>\n我上边的两个就属于回送请求和回送应答(类型 8 和 类型 0 )</p>\n<h5 id=\"其他ICMP消息和IPv6的ICMPv6\">其他ICMP消息和IPv6的ICMPv6</h5>\n<p>其他消息和ICMPv6我这不方便测试，想了解的可以查看下边的链接：</p>\n<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/zy_dreamer/article/details/132509931\">更多的信息请你查看</a></p>\n</div>\n<h2 id=\"TCP\">TCP</h2>\n<p>相信学过计网都很清楚整个过程，这里就不详细赘述了，如果想要了解所有的细节，请你移步：</p>\n<div class=\"note info flat\"><p>参考：<a href=\"https://zhuanlan.zhihu.com/p/603382668?utm_id=0\">TCP详解</a></p>\n</div>\n<p>TCP有如下的协议格式需要清楚，在抓包时可以针对分析：</p>\n<div class=\"note info modern\"><ul>\n<li>16位源端口号： 数据发送方的端口号，表示数据从哪里来</li>\n<li>16位目标端口号：数据接收方的端口号，表示数据要到哪里去</li>\n<li>32位序号：每一次通信TCP报文的编号</li>\n<li>32确认序号：用于对发送方发送的报文的确认，为接收到的报文序号+1</li>\n<li>4位首部长度：表示TCP报文头部有多少个4字节，因为4位最大表示15，所以TCP报文头最大长度为15*4=60</li>\n<li>6位标志位：<br>\nURG: 紧急指针是否有效<br>\nACK: 确认应答<br>\nPSH: 提示接收端应用程序立刻从TCP缓冲区把数据读走<br>\nRST: 表示要求对方重新建立连接<br>\nSYN: 请求建立连接，我们把携带SYN标识的称为同步报文段<br>\nFIN: 通知对方本端要关闭了，我们把携带FIN标识的为结束报文段</li>\n<li>16位窗口大小：TCP流量控制的一个手段，这里指接收窗口，用于告知发送端本端的TCP缓冲区还能容纳多少字节的数据，这样发送方就可以控制发送的数据量</li>\n<li>16位校验和：由发送方填充，接收端对TCP报文段执行CRC校验以检查数据是否损坏，这个校验不仅包含TCP头部，也包含数据部分</li>\n<li>16位紧急指针：一个正的偏移量，它与序号字段相加表示最后一个紧急数据的下一个序号，所以这个字段是紧急指针相对当前序号的偏移，用于发送方向接收方发送紧急数据</li>\n<li>0-40字节选项数据：存储一些可能需要的额外信息</li>\n</ul>\n</div>\n<h3 id=\"TCP三次握手过程\">TCP三次握手过程</h3>\n<p><img src=\"https://s2.loli.net/2024/03/26/PoaYF6ZewhHqtCT.jpg\" alt=\"\"></p>\n<h4 id=\"抓包分析-3\">抓包分析</h4>\n<div class=\"note warning flat\"><p>用到TCP的地方太多了，很不容易专门找一个等待建立连接的点，这个时候想到了之前写的SSH的一篇文章：<a href=\"https://www.aruoshui.fun/posts/12699.html\">与SSH的今生今世😅</a> 于是考虑在连接服务器或者虚拟机的时候进行抓包，果然成功了。</p>\n</div>\n<p>以下是对ip：192.168.131.138的一台虚拟机连接的抓包</p>\n<p><img src=\"https://s2.loli.net/2024/03/27/di9PtJzYKoaVhC1.png\" alt=\"\"><br>\n其中可以非常明显的看到TCP连接过程中如<code>SYN</code>，<code>ACK</code>等，其实变相帮助理解TCP协议了，比之前上实验课那个过程好太多了。</p>\n<h4 id=\"连接请求\">连接请求</h4>\n<p><img src=\"https://s2.loli.net/2024/03/27/IkuzirSglhtOyA8.png\" alt=\"连接请求\"><br>\n可以看到<code>Src Port</code>是本机用来监听的端口（随机），而虚拟机中SSH连接开放的端口 <code>Dst Port</code> 是<code>22</code></p>\n<h4 id=\"连接请求确认\">连接请求确认</h4>\n<p><img src=\"https://s2.loli.net/2024/03/27/2TDqpjCF8Vsu1UL.png\" alt=\"连接请求确认\"></p>\n<h4 id=\"确认\">确认</h4>\n<p><img src=\"https://s2.loli.net/2024/03/27/Ro5ByXTtDb31kaC.png\" alt=\"确认\"></p>\n<h4 id=\"利用wireshark自带的流量图工具获得TCP连接过程\">利用wireshark自带的流量图工具获得TCP连接过程</h4>\n<p>在统计任务栏中选择流量图，点击之后流类型选择为TCP流，就可以更加清晰的了解整个过程了<br>\n<img src=\"https://s2.loli.net/2024/03/27/qQ7gTbxuRGLN3fI.png\" alt=\"流量图\"></p>\n<h3 id=\"TCP连接断开的四次挥手\">TCP连接断开的四次挥手</h3>\n<p>同样的断开连接我这里还是利用虚拟机<br>\n<img src=\"https://s2.loli.net/2024/03/27/SdOQf4YEXqsP8FA.png\" alt=\"\"><br>\n细节就不分析了：<br>\n<img src=\"https://s2.loli.net/2024/03/27/7T9eDZPdvb4LUIN.png\" alt=\"\"><br>\n<img src=\"https://s2.loli.net/2024/03/27/Dn5vGcP28sulzNo.png\" alt=\"\"></p>\n<h2 id=\"HTTP协议\">HTTP协议</h2>\n<h3 id=\"什么是HTTP协议\">什么是HTTP协议</h3>\n<p>HTTP 协议简单来说就是客户端与服务器之间一发一收的模型<br>\n<img src=\"https://s2.loli.net/2024/03/27/POgYUjucWlDAmx1.jpg\" alt=\"HTTP协议的核心过程\"></p>\n<h3 id=\"HTTP协议的抓包分析\">HTTP协议的抓包分析</h3>\n<p>这里利用<code>curl -I baidu.com</code>访问百度网站，触发HTTP协议<br>\n<img src=\"https://s2.loli.net/2024/03/27/hoEgIiAmXPdD5x6.png\" alt=\"\"></p>\n<h4 id=\"建立TCP连接\">建立TCP连接</h4>\n<p>这里就不过多赘述</p>\n<h4 id=\"请求报文和响应报文\">请求报文和响应报文</h4>\n<p>在请求和响应部分：<br>\n第一个包是，<code>我</code>向<code>百度</code>发送了一个「HTTP请求」，请求类型是HEAD<br>\n第三个包是，<code>百度</code>向<code>我</code>发送了一个「HTTP响应」，响应状态码是 200 OK</p>\n<h4 id=\"释放连接\">释放连接</h4>\n<p>这里也不过多赘述</p>\n<h4 id=\"分析HTTP协议报文\">分析HTTP协议报文</h4>\n<p>请求报文分为三个部分：请求行、请求头、请求体<br>\n响应报文分为四个部分：状态行、响应头、响应空行、响应体</p>\n<h5 id=\"请求报文\">请求报文</h5>\n<p><img src=\"https://s2.loli.net/2024/03/27/KZon164DcXCtbsN.png\" alt=\"\"><br>\n请求行：包含请求方法、请求URL、HTTP版本<br>\n请求头：包含请求的客户端的信息，一行一个请求头<br>\n请求体：POST等类型的请求才有请求体，这里没有</p>\n<p>点开请求行，看里面的三个字段：</p>\n<ol>\n<li>Request Method：请求方法，这里的请求方法是HEAD，用来获取报文首部</li>\n<li>Request URI：请求的URL，因为我们没指定，所以默认是/</li>\n<li>Request Version：请求的版本，因为用的是HTTP协议，所以这里显示HTTP协议的版本</li>\n</ol>\n<p>请求头部分：<br>\nHost：目标主机<br>\nUser-Agent：代理，也就是浏览器的类型。我们用的不是浏览器，所以这里显示的是命令curl<br>\nAccept：浏览器可接受的MIME类型</p>\n<h5 id=\"响应报文\">响应报文</h5>\n<p><img src=\"https://s2.loli.net/2024/03/27/4zVGmdrfe7oDPjE.png\" alt=\"\"><br>\n状态行：包含版本和响应状态码、状态信息<br>\n响应头：包含响应的服务器的资源信息，一行一个响应头</p>\n<p>点开状态行，可以看到里面有三个字段：<br>\n<img src=\"https://s2.loli.net/2024/03/27/bpDYtwJyr2Uu3ij.png\" alt=\"\"></p>\n<ol>\n<li>Response Version：响应版本，因为使用的是HTTP协议，所以这里显示了HTTP的版本</li>\n<li>Status Code：响应状态码，这里的 200 表示请求成功。</li>\n<li>Response Phrase：响应状态码的提示信息</li>\n</ol>\n<p>另外响应头：</p>\n<div class=\"note info modern\"><p>Date：服务端发送响应报文的时间<br>\nServer：服务器和相对应的版本<br>\nLast-Modified：请求的对象创建或者最后修改的时间<br>\nETag：对象的标志值，如果对象修改了，这个值也会变，用来判断对象是否改变<br>\nAccept-Ranges：支持的范围单位<br>\nContent-Length：内容长度<br>\nCache-Control：缓存控制<br>\nExpires：这个时间前，可以直接访问缓存副本<br>\nConnection：连接类型，Keep-Alive表示这是一个长链接，可以继续用这个连接通信<br>\nContent-Type：资源文件类型</p>\n</div>\n<h5 id=\"HTTP追踪流\">HTTP追踪流</h5>\n<p>选中HTTP协议的数据包 - 右键 - 【追踪流】-【HTTP追踪流】可以看到请求跟响应的报文<br>\n<img src=\"https://s2.loli.net/2024/03/27/IxFOwLWZTRcuNUC.png\" alt=\"\"></p>\n<h2 id=\"黑客利用wireshark来获取用户账号密码\">黑客利用wireshark来获取用户账号密码</h2>\n<p>详细测试过程请自行搜索，我也在学习过程中<br>\n这是我自己找的一个教程：</p>\n<div class=\"tag link\"><a class=\"link-card\" title=\"Wireshark抓取网站用户名密码\" href=\"https://www.cnblogs.com/thespace/p/12731638.html\"><div class=\"left\"><img src=\"/img/link.png\"/></div><div class=\"right\"><p class=\"text\">Wireshark抓取网站用户名密码</p><p class=\"url\">https://www.cnblogs.com/thespace/p/12731638.html</p></div></a></div>\n<p>最后想说的就是要注意互联网安全！</p>\n"},{"title":"无人机研究报告","abbrlink":61504,"date":"2024-08-03T14:24:19.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vshvfz-0.webp","swiper_index":null,"_content":"\n\n# 无人机产业链结构\n## 用途分类\n![用途分类](https://s2.loli.net/2024/08/03/lhTdpPUIYSAXRbe.png)\n1. 军用无人机：主要用于侦察预警、跟踪定位、军事打击和战场搜救等任务。\n2. 民用无人机：包括消费级无人机和工业级无人机，应用于航空拍摄、农林植保、物流运输、环境监测等多方领域。\n![外卖配送](https://s2.loli.net/2024/08/03/Q8OpznYbgwhMVU4.png)\n![农药喷洒](https://s2.loli.net/2024/08/03/V9NHFZYuxcjd1GC.png)\n\n## 现代产业结构\n![产业结构说明](https://s2.loli.net/2024/08/03/reXBnCga9GpPlUQ.png)\n1. 无人机产业链上游为无人机设计研发及关键原材料的生产\n2. 中游无人机整机制造包括飞行系统、地面系统、任务载荷系统三个方面，是无人机制造的核心部分\n3. 无人机产业链下游是无人机的应用场景，应用场景涵盖生活方方面面\n\n\n# 无人机重要模块介绍\n## 飞行控制系统（Flight Control System, FCS）\n这是无人机的“大脑”，负责控制飞行轨迹、高度和速度等参数。飞控系统通常由控制器、传感器和GPS等组成。\n![无人机坐标系](https://s2.loli.net/2024/08/03/Z1jD6hToUVwtB3g.png)\n\n### 悬停\n在悬停状态下，四个旋翼具有相等的转速，产生的上升合力正好与自身重力相等。并且因为旋翼转速大小相等，前后端转速和左右端转速方向相反，从而使得飞行器总扭矩为零，使得飞行器静止在空中，实现悬停状态。\n![悬停](https://s2.loli.net/2024/08/03/IDlBfquRhZagez5.png)\n\n### 垂直运动\n垂直运动是五种运动状态中较为简单的一种，在保证四旋翼无人机每个旋转速度大小相等的倩况下，同时对每个旋翼增加或减小大小相等的转速，便可实现飞行器的垂直运动。\n\n当同时増加四个旋翼转速时，使得旋翼产生的总升力大小超过四旋翼无人机的重力时，即，四旋翼无人机便会垂直上升；反之，当同时减小旋翼转速时，使得每个旋翼产生的总升力小于自身重力时，即，四旋翼无人机便会垂直下降，从而实现四旋翼无人机的垂直升降控制。\n![垂直运动](https://s2.loli.net/2024/08/03/XkUz15lhSWyxPmp.png)\n\n### 翻滚运动\n翻滚运动是在保持四旋翼无人机前后端旋翼转速不变的情况下，通过改变左右端的旋翼转速，使得左右旋翼之间形成一定的升力差，从而使得沿飞行器机体左右对称轴上产生一定力矩，导致在方向上产生角加速度实现控制的。\n\n如图所示，增加旋翼1的转速，减小旋翼3的转速，则飞行器倾斜于右侧飞行；相反，减小旋翼４，增加旋翼２，则飞行器向左倾斜飞行。\n![翻滚运动](https://s2.loli.net/2024/08/03/XYUSAZnWjfOGNK8.png)\n\n### 俯仰运动\n四旋翼飞行器的俯仰运动和滚动运动相似，是在保持机身左右端旋翼转速不变的前提下，通过改变前后端旋翼转速形成前后旋翼升力差，从而在机身前后端对称轴上形成一定力矩，引起角方向上的角加速度实现控制的。\n\n如图所示，增加旋翼３的转速，减小旋翼１的转速，则飞行器向前倾斜飞行；反之，则飞行器向后倾斜。\n![俯仰](https://s2.loli.net/2024/08/03/gGp3YxyBmv5eQnF.png)\n\n### 偏航运动\n四旋翼的偏转运动是通过同时两两控制四个旋翼转速实现控制的。\n\n保持前后端或左右端旋翼转速相同时，其便不会发生俯仰或滚动运动；而当每组内的两个旋翼与另一组旋翼转速不同时，由于两组旋翼旋转方向不同，便会导致反扭矩力的不平衡，此时便会产生绕机身中心轴的反作用力，引起沿角角加速度。\n\n如图所示，当前后端旋翼的转速相等并大于左右端旋翼转速时，因为前者沿顺时针方向旋转，后者相反，总的反扭矩沿逆时针方向，反作用力作用在机身中心轴上沿逆时针方向，引起逆时针偏航运动；反之，则会引起飞行器的顺时针偏航运动\n![偏航](https://s2.loli.net/2024/08/03/UdnQhsYNlRObALC.png)\n\n\n## 传感器模块\n包括陀螺仪、加速度计、磁罗盘、气压计和GPS模块等，用于测量无人机的姿态、速度和位置。\n\n1. 陀螺仪：监测三轴的角速度\n2. 加速度计：提供无人机在XYZ三轴方向所承受的加速力。它也能决定无人机在静止状态时的倾斜角度。 \n3. 磁罗盘：为无人机提供方向感\n4. 气压计：利用大气压力换算出高度，协助无人机导航\n5. GPS模块：定经度纬度进行自动飞行，还是保持定位进行悬停\n\n## 动力系统\n包括电机和螺旋桨，提供无人机的飞行动力。\n![无刷电机](https://s2.loli.net/2024/08/03/wTASpYXa4jW9z85.png)\n![螺旋桨](https://s2.loli.net/2024/08/03/GMdum7VsPCI8Fpl.png)\n\n# 无人机主流控制算法\n## 捷联式惯性导航系统\n利用加速度计和陀螺仪测量飞行器的角运动和线运动信息，通过计算模块推算出飞行器的姿态、速度、航向和位置等导航参数。\n\n![惯导控制](https://s2.loli.net/2024/08/03/wKLaGgYQnW9Bc4P.png)\n\n## PID控制算法\n一种线性控制器，通过P比例、I积分和D微分的关系来调节控制量，以实现飞行器的姿态和轨迹控制。PID控制算法在多旋翼无人机中应用广泛。\n这里以无人车控制为例子：\n### P比例:\n想让这个小车沿着绿线向前走，我们给P设置一个固定的值，这个值可以让离开绿线的小车向绿线的方向行驶，离的越远，方向盘打的角度越大，离的越近，方向盘打的角度越小。橙色的箭头表示小车行进的方向\n![P](https://i-blog.csdnimg.cn/blog_migrate/2806d61852f636da61a3279d17558822.png)\n1. 如果我们把P值设置的比较大，它的路径就如上图，因为方向盘打的角度比较大，所以小车比中等P值的时候较早的到达绿线，但同样因为惯性的原因会多次往返绿线的两侧，也是一次比一次接近绿线，因为它方向盘角度打的比较大，所以会比中等P值往返的次数要多，最终经过多次往返，理论上它会离绿线越来越近，最终到达绿线上方。\n\n2. 如果我们把P值设置的比较小，也就是方向盘打的角度比较小，它的路径是这样的，小车会较晚到达绿线，因为惯性会往返绿线两侧，但是因为方向盘角度小，小车可以在较少的往复次数下接近绿线。\n   \n**在小车与绿线相同距离的情况下，P值越大，小车的反应越快，P值越小，小车的反应越慢，所以这三个小车第一次到达绿线的时间是不一样的**\n\n### D微分：\n我们为了不让这个小车冲过头，我们再给它加一个力，这个力就是D，让这个力来起一个作用，就是让小车越接近绿线的时候，接近绿线的速度越慢，小车越远离绿线的时候，接近绿线的速度相对较快，这个接近绿线的速度不是小车前进的速度，是小车与绿线平行线之间的相对速度。这个D大家可以理解为小车靠近绿线的一个阻力。\n![阻尼](https://i-blog.csdnimg.cn/blog_migrate/d829222489c1bd71ceca9cfe06768fbb.png)\n\n\n1. 如果D值过大，也就是小车靠近绿线的阻力过大，这样会让小车需要比较长的时间才能到达绿线上方。\n2. 如果D值设置的过小，也就是小车靠近绿线的阻力过小，那微分控制(D)就不会对比例控制产生大的影响，所以虽然小车能够较快到达绿线，但小车需要多调整几次，在绿线的两侧往复几次后才能到达绿线上方行驶。\n![阻尼大小](https://i-blog.csdnimg.cn/blog_migrate/92c4a1ceb5185ad17064ff2acaedefc4.png)\n\n\n### I积分：\n设置合适的P值和D值，可以让小车很好的沿着绿线一直走，但路上不是很平坦，会有些坑坑包包，或者其他的一些干扰，路况不好就会让小车的行进路线发生偏移，比如小车在这里遇到了坑坑包包，它的行进路线 就会变成这样，稍微偏离了绿线一点，因为微分控制（D）让小车离绿线越近时，靠近绿线的速度越慢，比例控制（P）让小车在接近绿线时，方向盘又打的比较小，所以小车要走一段路才回到绿线上面。\n![波动](https://i-blog.csdnimg.cn/blog_migrate/284ec2342132a44a2841ac10984dc164.png)\n\n有没有办法让它**更快回到绿线上面**呢，所以我们再给它加一个力，这个力就是I，积分控制。我们让积分控制起这样的作用：如果P和D的调节不是很理想的话，就让I帮他俩一把，向P的方向上加一个力，这样可以让小车更快回到目的路径。\n\n设置了I以后，I会根据误差和误差经历的时间进行积分，然后决定施加给目标方向的力的大小，就能够让小车回到目标轨迹上。\n![积分](https://i-blog.csdnimg.cn/blog_migrate/6325d696e9e150316a5ea9af724f5425.png)\n\n# 发展展望\n## 以自主控制为代表的无人机智能化水平在未来将得到大幅度提升。\n![未来发展展望](https://s2.loli.net/2024/08/03/W2kmGSze6Rnci4Y.png)\n\n### 军用\n在采用人工智能和群体智能优化技术后，军用无人机/机群可远在几百公里甚至几千公里外自主完成自动寻的、确定攻击目标先后次序、选定适宜的打击手段、进行战术协同执行攻击等一系列战术动作。\n\n### 民用\n随着民用无人机应用场景的不断拓展，基于大数据和人工智能的技术加持，民用无人机将在警用、保值、配送、检测等众多应用领域充分发挥其作用。\n\n#### 浙江大学全自主微型飞行机器人集群\n1. 构建轨迹规划器，根据来自机载传感器的有限信息及时准确地运行。\n2. 规划问题满足飞行效率、避障、机器人间碰撞避免、动力学可行性、群体协同等多种任务需求，实现可扩展的规划器。\n3. 具有机载感知、定位和控制功能，在轨迹质量和计算时间方面的卓越性能。\n[视频](https://www.bilibili.com/video/BV1qv4y1K7Y6/?t=74.26794&spm_id_from=333.1350.jump_directly&vd_source=6718fb46dbdd603565f483b04b4cdb50)\n\n#### 苏黎世大学基于视觉飞行的开源和开源硬件敏捷四旋翼飞行器\n70km/h的运动捕捉系统的轨迹跟踪，以及仅使用机载感知在结构化和非结构化环境中进行基于视觉的特技飞行和避障。\n![基于视觉飞行的开源和开源硬件敏捷四旋翼飞行器](../img/fly_speed.gif)","source":"_posts/无人机研究报告.md","raw":"---\ntitle: 无人机研究报告\nabbrlink: 61504\ndate: 2024-08-03 22:24:19\ntags:\ndescription:\ncategories:\ncover: https://image.aruoshui.fun/i/2024/12/31/vshvfz-0.webp\nswiper_index:\n---\n\n\n# 无人机产业链结构\n## 用途分类\n![用途分类](https://s2.loli.net/2024/08/03/lhTdpPUIYSAXRbe.png)\n1. 军用无人机：主要用于侦察预警、跟踪定位、军事打击和战场搜救等任务。\n2. 民用无人机：包括消费级无人机和工业级无人机，应用于航空拍摄、农林植保、物流运输、环境监测等多方领域。\n![外卖配送](https://s2.loli.net/2024/08/03/Q8OpznYbgwhMVU4.png)\n![农药喷洒](https://s2.loli.net/2024/08/03/V9NHFZYuxcjd1GC.png)\n\n## 现代产业结构\n![产业结构说明](https://s2.loli.net/2024/08/03/reXBnCga9GpPlUQ.png)\n1. 无人机产业链上游为无人机设计研发及关键原材料的生产\n2. 中游无人机整机制造包括飞行系统、地面系统、任务载荷系统三个方面，是无人机制造的核心部分\n3. 无人机产业链下游是无人机的应用场景，应用场景涵盖生活方方面面\n\n\n# 无人机重要模块介绍\n## 飞行控制系统（Flight Control System, FCS）\n这是无人机的“大脑”，负责控制飞行轨迹、高度和速度等参数。飞控系统通常由控制器、传感器和GPS等组成。\n![无人机坐标系](https://s2.loli.net/2024/08/03/Z1jD6hToUVwtB3g.png)\n\n### 悬停\n在悬停状态下，四个旋翼具有相等的转速，产生的上升合力正好与自身重力相等。并且因为旋翼转速大小相等，前后端转速和左右端转速方向相反，从而使得飞行器总扭矩为零，使得飞行器静止在空中，实现悬停状态。\n![悬停](https://s2.loli.net/2024/08/03/IDlBfquRhZagez5.png)\n\n### 垂直运动\n垂直运动是五种运动状态中较为简单的一种，在保证四旋翼无人机每个旋转速度大小相等的倩况下，同时对每个旋翼增加或减小大小相等的转速，便可实现飞行器的垂直运动。\n\n当同时増加四个旋翼转速时，使得旋翼产生的总升力大小超过四旋翼无人机的重力时，即，四旋翼无人机便会垂直上升；反之，当同时减小旋翼转速时，使得每个旋翼产生的总升力小于自身重力时，即，四旋翼无人机便会垂直下降，从而实现四旋翼无人机的垂直升降控制。\n![垂直运动](https://s2.loli.net/2024/08/03/XkUz15lhSWyxPmp.png)\n\n### 翻滚运动\n翻滚运动是在保持四旋翼无人机前后端旋翼转速不变的情况下，通过改变左右端的旋翼转速，使得左右旋翼之间形成一定的升力差，从而使得沿飞行器机体左右对称轴上产生一定力矩，导致在方向上产生角加速度实现控制的。\n\n如图所示，增加旋翼1的转速，减小旋翼3的转速，则飞行器倾斜于右侧飞行；相反，减小旋翼４，增加旋翼２，则飞行器向左倾斜飞行。\n![翻滚运动](https://s2.loli.net/2024/08/03/XYUSAZnWjfOGNK8.png)\n\n### 俯仰运动\n四旋翼飞行器的俯仰运动和滚动运动相似，是在保持机身左右端旋翼转速不变的前提下，通过改变前后端旋翼转速形成前后旋翼升力差，从而在机身前后端对称轴上形成一定力矩，引起角方向上的角加速度实现控制的。\n\n如图所示，增加旋翼３的转速，减小旋翼１的转速，则飞行器向前倾斜飞行；反之，则飞行器向后倾斜。\n![俯仰](https://s2.loli.net/2024/08/03/gGp3YxyBmv5eQnF.png)\n\n### 偏航运动\n四旋翼的偏转运动是通过同时两两控制四个旋翼转速实现控制的。\n\n保持前后端或左右端旋翼转速相同时，其便不会发生俯仰或滚动运动；而当每组内的两个旋翼与另一组旋翼转速不同时，由于两组旋翼旋转方向不同，便会导致反扭矩力的不平衡，此时便会产生绕机身中心轴的反作用力，引起沿角角加速度。\n\n如图所示，当前后端旋翼的转速相等并大于左右端旋翼转速时，因为前者沿顺时针方向旋转，后者相反，总的反扭矩沿逆时针方向，反作用力作用在机身中心轴上沿逆时针方向，引起逆时针偏航运动；反之，则会引起飞行器的顺时针偏航运动\n![偏航](https://s2.loli.net/2024/08/03/UdnQhsYNlRObALC.png)\n\n\n## 传感器模块\n包括陀螺仪、加速度计、磁罗盘、气压计和GPS模块等，用于测量无人机的姿态、速度和位置。\n\n1. 陀螺仪：监测三轴的角速度\n2. 加速度计：提供无人机在XYZ三轴方向所承受的加速力。它也能决定无人机在静止状态时的倾斜角度。 \n3. 磁罗盘：为无人机提供方向感\n4. 气压计：利用大气压力换算出高度，协助无人机导航\n5. GPS模块：定经度纬度进行自动飞行，还是保持定位进行悬停\n\n## 动力系统\n包括电机和螺旋桨，提供无人机的飞行动力。\n![无刷电机](https://s2.loli.net/2024/08/03/wTASpYXa4jW9z85.png)\n![螺旋桨](https://s2.loli.net/2024/08/03/GMdum7VsPCI8Fpl.png)\n\n# 无人机主流控制算法\n## 捷联式惯性导航系统\n利用加速度计和陀螺仪测量飞行器的角运动和线运动信息，通过计算模块推算出飞行器的姿态、速度、航向和位置等导航参数。\n\n![惯导控制](https://s2.loli.net/2024/08/03/wKLaGgYQnW9Bc4P.png)\n\n## PID控制算法\n一种线性控制器，通过P比例、I积分和D微分的关系来调节控制量，以实现飞行器的姿态和轨迹控制。PID控制算法在多旋翼无人机中应用广泛。\n这里以无人车控制为例子：\n### P比例:\n想让这个小车沿着绿线向前走，我们给P设置一个固定的值，这个值可以让离开绿线的小车向绿线的方向行驶，离的越远，方向盘打的角度越大，离的越近，方向盘打的角度越小。橙色的箭头表示小车行进的方向\n![P](https://i-blog.csdnimg.cn/blog_migrate/2806d61852f636da61a3279d17558822.png)\n1. 如果我们把P值设置的比较大，它的路径就如上图，因为方向盘打的角度比较大，所以小车比中等P值的时候较早的到达绿线，但同样因为惯性的原因会多次往返绿线的两侧，也是一次比一次接近绿线，因为它方向盘角度打的比较大，所以会比中等P值往返的次数要多，最终经过多次往返，理论上它会离绿线越来越近，最终到达绿线上方。\n\n2. 如果我们把P值设置的比较小，也就是方向盘打的角度比较小，它的路径是这样的，小车会较晚到达绿线，因为惯性会往返绿线两侧，但是因为方向盘角度小，小车可以在较少的往复次数下接近绿线。\n   \n**在小车与绿线相同距离的情况下，P值越大，小车的反应越快，P值越小，小车的反应越慢，所以这三个小车第一次到达绿线的时间是不一样的**\n\n### D微分：\n我们为了不让这个小车冲过头，我们再给它加一个力，这个力就是D，让这个力来起一个作用，就是让小车越接近绿线的时候，接近绿线的速度越慢，小车越远离绿线的时候，接近绿线的速度相对较快，这个接近绿线的速度不是小车前进的速度，是小车与绿线平行线之间的相对速度。这个D大家可以理解为小车靠近绿线的一个阻力。\n![阻尼](https://i-blog.csdnimg.cn/blog_migrate/d829222489c1bd71ceca9cfe06768fbb.png)\n\n\n1. 如果D值过大，也就是小车靠近绿线的阻力过大，这样会让小车需要比较长的时间才能到达绿线上方。\n2. 如果D值设置的过小，也就是小车靠近绿线的阻力过小，那微分控制(D)就不会对比例控制产生大的影响，所以虽然小车能够较快到达绿线，但小车需要多调整几次，在绿线的两侧往复几次后才能到达绿线上方行驶。\n![阻尼大小](https://i-blog.csdnimg.cn/blog_migrate/92c4a1ceb5185ad17064ff2acaedefc4.png)\n\n\n### I积分：\n设置合适的P值和D值，可以让小车很好的沿着绿线一直走，但路上不是很平坦，会有些坑坑包包，或者其他的一些干扰，路况不好就会让小车的行进路线发生偏移，比如小车在这里遇到了坑坑包包，它的行进路线 就会变成这样，稍微偏离了绿线一点，因为微分控制（D）让小车离绿线越近时，靠近绿线的速度越慢，比例控制（P）让小车在接近绿线时，方向盘又打的比较小，所以小车要走一段路才回到绿线上面。\n![波动](https://i-blog.csdnimg.cn/blog_migrate/284ec2342132a44a2841ac10984dc164.png)\n\n有没有办法让它**更快回到绿线上面**呢，所以我们再给它加一个力，这个力就是I，积分控制。我们让积分控制起这样的作用：如果P和D的调节不是很理想的话，就让I帮他俩一把，向P的方向上加一个力，这样可以让小车更快回到目的路径。\n\n设置了I以后，I会根据误差和误差经历的时间进行积分，然后决定施加给目标方向的力的大小，就能够让小车回到目标轨迹上。\n![积分](https://i-blog.csdnimg.cn/blog_migrate/6325d696e9e150316a5ea9af724f5425.png)\n\n# 发展展望\n## 以自主控制为代表的无人机智能化水平在未来将得到大幅度提升。\n![未来发展展望](https://s2.loli.net/2024/08/03/W2kmGSze6Rnci4Y.png)\n\n### 军用\n在采用人工智能和群体智能优化技术后，军用无人机/机群可远在几百公里甚至几千公里外自主完成自动寻的、确定攻击目标先后次序、选定适宜的打击手段、进行战术协同执行攻击等一系列战术动作。\n\n### 民用\n随着民用无人机应用场景的不断拓展，基于大数据和人工智能的技术加持，民用无人机将在警用、保值、配送、检测等众多应用领域充分发挥其作用。\n\n#### 浙江大学全自主微型飞行机器人集群\n1. 构建轨迹规划器，根据来自机载传感器的有限信息及时准确地运行。\n2. 规划问题满足飞行效率、避障、机器人间碰撞避免、动力学可行性、群体协同等多种任务需求，实现可扩展的规划器。\n3. 具有机载感知、定位和控制功能，在轨迹质量和计算时间方面的卓越性能。\n[视频](https://www.bilibili.com/video/BV1qv4y1K7Y6/?t=74.26794&spm_id_from=333.1350.jump_directly&vd_source=6718fb46dbdd603565f483b04b4cdb50)\n\n#### 苏黎世大学基于视觉飞行的开源和开源硬件敏捷四旋翼飞行器\n70km/h的运动捕捉系统的轨迹跟踪，以及仅使用机载感知在结构化和非结构化环境中进行基于视觉的特技飞行和避障。\n![基于视觉飞行的开源和开源硬件敏捷四旋翼飞行器](../img/fly_speed.gif)","slug":"无人机研究报告","published":1,"updated":"2024-12-31T11:23:55.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io6002lmkttcj1kgt71","content":"<h1>无人机产业链结构</h1>\n<h2 id=\"用途分类\">用途分类</h2>\n<p><img src=\"https://s2.loli.net/2024/08/03/lhTdpPUIYSAXRbe.png\" alt=\"用途分类\"></p>\n<ol>\n<li>军用无人机：主要用于侦察预警、跟踪定位、军事打击和战场搜救等任务。</li>\n<li>民用无人机：包括消费级无人机和工业级无人机，应用于航空拍摄、农林植保、物流运输、环境监测等多方领域。<br>\n<img src=\"https://s2.loli.net/2024/08/03/Q8OpznYbgwhMVU4.png\" alt=\"外卖配送\"><br>\n<img src=\"https://s2.loli.net/2024/08/03/V9NHFZYuxcjd1GC.png\" alt=\"农药喷洒\"></li>\n</ol>\n<h2 id=\"现代产业结构\">现代产业结构</h2>\n<p><img src=\"https://s2.loli.net/2024/08/03/reXBnCga9GpPlUQ.png\" alt=\"产业结构说明\"></p>\n<ol>\n<li>无人机产业链上游为无人机设计研发及关键原材料的生产</li>\n<li>中游无人机整机制造包括飞行系统、地面系统、任务载荷系统三个方面，是无人机制造的核心部分</li>\n<li>无人机产业链下游是无人机的应用场景，应用场景涵盖生活方方面面</li>\n</ol>\n<h1>无人机重要模块介绍</h1>\n<h2 id=\"飞行控制系统（Flight-Control-System-FCS）\">飞行控制系统（Flight Control System, FCS）</h2>\n<p>这是无人机的“大脑”，负责控制飞行轨迹、高度和速度等参数。飞控系统通常由控制器、传感器和GPS等组成。<br>\n<img src=\"https://s2.loli.net/2024/08/03/Z1jD6hToUVwtB3g.png\" alt=\"无人机坐标系\"></p>\n<h3 id=\"悬停\">悬停</h3>\n<p>在悬停状态下，四个旋翼具有相等的转速，产生的上升合力正好与自身重力相等。并且因为旋翼转速大小相等，前后端转速和左右端转速方向相反，从而使得飞行器总扭矩为零，使得飞行器静止在空中，实现悬停状态。<br>\n<img src=\"https://s2.loli.net/2024/08/03/IDlBfquRhZagez5.png\" alt=\"悬停\"></p>\n<h3 id=\"垂直运动\">垂直运动</h3>\n<p>垂直运动是五种运动状态中较为简单的一种，在保证四旋翼无人机每个旋转速度大小相等的倩况下，同时对每个旋翼增加或减小大小相等的转速，便可实现飞行器的垂直运动。</p>\n<p>当同时増加四个旋翼转速时，使得旋翼产生的总升力大小超过四旋翼无人机的重力时，即，四旋翼无人机便会垂直上升；反之，当同时减小旋翼转速时，使得每个旋翼产生的总升力小于自身重力时，即，四旋翼无人机便会垂直下降，从而实现四旋翼无人机的垂直升降控制。<br>\n<img src=\"https://s2.loli.net/2024/08/03/XkUz15lhSWyxPmp.png\" alt=\"垂直运动\"></p>\n<h3 id=\"翻滚运动\">翻滚运动</h3>\n<p>翻滚运动是在保持四旋翼无人机前后端旋翼转速不变的情况下，通过改变左右端的旋翼转速，使得左右旋翼之间形成一定的升力差，从而使得沿飞行器机体左右对称轴上产生一定力矩，导致在方向上产生角加速度实现控制的。</p>\n<p>如图所示，增加旋翼1的转速，减小旋翼3的转速，则飞行器倾斜于右侧飞行；相反，减小旋翼４，增加旋翼２，则飞行器向左倾斜飞行。<br>\n<img src=\"https://s2.loli.net/2024/08/03/XYUSAZnWjfOGNK8.png\" alt=\"翻滚运动\"></p>\n<h3 id=\"俯仰运动\">俯仰运动</h3>\n<p>四旋翼飞行器的俯仰运动和滚动运动相似，是在保持机身左右端旋翼转速不变的前提下，通过改变前后端旋翼转速形成前后旋翼升力差，从而在机身前后端对称轴上形成一定力矩，引起角方向上的角加速度实现控制的。</p>\n<p>如图所示，增加旋翼３的转速，减小旋翼１的转速，则飞行器向前倾斜飞行；反之，则飞行器向后倾斜。<br>\n<img src=\"https://s2.loli.net/2024/08/03/gGp3YxyBmv5eQnF.png\" alt=\"俯仰\"></p>\n<h3 id=\"偏航运动\">偏航运动</h3>\n<p>四旋翼的偏转运动是通过同时两两控制四个旋翼转速实现控制的。</p>\n<p>保持前后端或左右端旋翼转速相同时，其便不会发生俯仰或滚动运动；而当每组内的两个旋翼与另一组旋翼转速不同时，由于两组旋翼旋转方向不同，便会导致反扭矩力的不平衡，此时便会产生绕机身中心轴的反作用力，引起沿角角加速度。</p>\n<p>如图所示，当前后端旋翼的转速相等并大于左右端旋翼转速时，因为前者沿顺时针方向旋转，后者相反，总的反扭矩沿逆时针方向，反作用力作用在机身中心轴上沿逆时针方向，引起逆时针偏航运动；反之，则会引起飞行器的顺时针偏航运动<br>\n<img src=\"https://s2.loli.net/2024/08/03/UdnQhsYNlRObALC.png\" alt=\"偏航\"></p>\n<h2 id=\"传感器模块\">传感器模块</h2>\n<p>包括陀螺仪、加速度计、磁罗盘、气压计和GPS模块等，用于测量无人机的姿态、速度和位置。</p>\n<ol>\n<li>陀螺仪：监测三轴的角速度</li>\n<li>加速度计：提供无人机在XYZ三轴方向所承受的加速力。它也能决定无人机在静止状态时的倾斜角度。</li>\n<li>磁罗盘：为无人机提供方向感</li>\n<li>气压计：利用大气压力换算出高度，协助无人机导航</li>\n<li>GPS模块：定经度纬度进行自动飞行，还是保持定位进行悬停</li>\n</ol>\n<h2 id=\"动力系统\">动力系统</h2>\n<p>包括电机和螺旋桨，提供无人机的飞行动力。<br>\n<img src=\"https://s2.loli.net/2024/08/03/wTASpYXa4jW9z85.png\" alt=\"无刷电机\"><br>\n<img src=\"https://s2.loli.net/2024/08/03/GMdum7VsPCI8Fpl.png\" alt=\"螺旋桨\"></p>\n<h1>无人机主流控制算法</h1>\n<h2 id=\"捷联式惯性导航系统\">捷联式惯性导航系统</h2>\n<p>利用加速度计和陀螺仪测量飞行器的角运动和线运动信息，通过计算模块推算出飞行器的姿态、速度、航向和位置等导航参数。</p>\n<p><img src=\"https://s2.loli.net/2024/08/03/wKLaGgYQnW9Bc4P.png\" alt=\"惯导控制\"></p>\n<h2 id=\"PID控制算法\">PID控制算法</h2>\n<p>一种线性控制器，通过P比例、I积分和D微分的关系来调节控制量，以实现飞行器的姿态和轨迹控制。PID控制算法在多旋翼无人机中应用广泛。<br>\n这里以无人车控制为例子：</p>\n<h3 id=\"P比例\">P比例:</h3>\n<p>想让这个小车沿着绿线向前走，我们给P设置一个固定的值，这个值可以让离开绿线的小车向绿线的方向行驶，离的越远，方向盘打的角度越大，离的越近，方向盘打的角度越小。橙色的箭头表示小车行进的方向<br>\n<img src=\"https://i-blog.csdnimg.cn/blog_migrate/2806d61852f636da61a3279d17558822.png\" alt=\"P\"></p>\n<ol>\n<li>\n<p>如果我们把P值设置的比较大，它的路径就如上图，因为方向盘打的角度比较大，所以小车比中等P值的时候较早的到达绿线，但同样因为惯性的原因会多次往返绿线的两侧，也是一次比一次接近绿线，因为它方向盘角度打的比较大，所以会比中等P值往返的次数要多，最终经过多次往返，理论上它会离绿线越来越近，最终到达绿线上方。</p>\n</li>\n<li>\n<p>如果我们把P值设置的比较小，也就是方向盘打的角度比较小，它的路径是这样的，小车会较晚到达绿线，因为惯性会往返绿线两侧，但是因为方向盘角度小，小车可以在较少的往复次数下接近绿线。</p>\n</li>\n</ol>\n<p><strong>在小车与绿线相同距离的情况下，P值越大，小车的反应越快，P值越小，小车的反应越慢，所以这三个小车第一次到达绿线的时间是不一样的</strong></p>\n<h3 id=\"D微分：\">D微分：</h3>\n<p>我们为了不让这个小车冲过头，我们再给它加一个力，这个力就是D，让这个力来起一个作用，就是让小车越接近绿线的时候，接近绿线的速度越慢，小车越远离绿线的时候，接近绿线的速度相对较快，这个接近绿线的速度不是小车前进的速度，是小车与绿线平行线之间的相对速度。这个D大家可以理解为小车靠近绿线的一个阻力。<br>\n<img src=\"https://i-blog.csdnimg.cn/blog_migrate/d829222489c1bd71ceca9cfe06768fbb.png\" alt=\"阻尼\"></p>\n<ol>\n<li>如果D值过大，也就是小车靠近绿线的阻力过大，这样会让小车需要比较长的时间才能到达绿线上方。</li>\n<li>如果D值设置的过小，也就是小车靠近绿线的阻力过小，那微分控制(D)就不会对比例控制产生大的影响，所以虽然小车能够较快到达绿线，但小车需要多调整几次，在绿线的两侧往复几次后才能到达绿线上方行驶。<br>\n<img src=\"https://i-blog.csdnimg.cn/blog_migrate/92c4a1ceb5185ad17064ff2acaedefc4.png\" alt=\"阻尼大小\"></li>\n</ol>\n<h3 id=\"I积分：\">I积分：</h3>\n<p>设置合适的P值和D值，可以让小车很好的沿着绿线一直走，但路上不是很平坦，会有些坑坑包包，或者其他的一些干扰，路况不好就会让小车的行进路线发生偏移，比如小车在这里遇到了坑坑包包，它的行进路线 就会变成这样，稍微偏离了绿线一点，因为微分控制（D）让小车离绿线越近时，靠近绿线的速度越慢，比例控制（P）让小车在接近绿线时，方向盘又打的比较小，所以小车要走一段路才回到绿线上面。<br>\n<img src=\"https://i-blog.csdnimg.cn/blog_migrate/284ec2342132a44a2841ac10984dc164.png\" alt=\"波动\"></p>\n<p>有没有办法让它<strong>更快回到绿线上面</strong>呢，所以我们再给它加一个力，这个力就是I，积分控制。我们让积分控制起这样的作用：如果P和D的调节不是很理想的话，就让I帮他俩一把，向P的方向上加一个力，这样可以让小车更快回到目的路径。</p>\n<p>设置了I以后，I会根据误差和误差经历的时间进行积分，然后决定施加给目标方向的力的大小，就能够让小车回到目标轨迹上。<br>\n<img src=\"https://i-blog.csdnimg.cn/blog_migrate/6325d696e9e150316a5ea9af724f5425.png\" alt=\"积分\"></p>\n<h1>发展展望</h1>\n<h2 id=\"以自主控制为代表的无人机智能化水平在未来将得到大幅度提升。\">以自主控制为代表的无人机智能化水平在未来将得到大幅度提升。</h2>\n<p><img src=\"https://s2.loli.net/2024/08/03/W2kmGSze6Rnci4Y.png\" alt=\"未来发展展望\"></p>\n<h3 id=\"军用\">军用</h3>\n<p>在采用人工智能和群体智能优化技术后，军用无人机/机群可远在几百公里甚至几千公里外自主完成自动寻的、确定攻击目标先后次序、选定适宜的打击手段、进行战术协同执行攻击等一系列战术动作。</p>\n<h3 id=\"民用\">民用</h3>\n<p>随着民用无人机应用场景的不断拓展，基于大数据和人工智能的技术加持，民用无人机将在警用、保值、配送、检测等众多应用领域充分发挥其作用。</p>\n<h4 id=\"浙江大学全自主微型飞行机器人集群\">浙江大学全自主微型飞行机器人集群</h4>\n<ol>\n<li>构建轨迹规划器，根据来自机载传感器的有限信息及时准确地运行。</li>\n<li>规划问题满足飞行效率、避障、机器人间碰撞避免、动力学可行性、群体协同等多种任务需求，实现可扩展的规划器。</li>\n<li>具有机载感知、定位和控制功能，在轨迹质量和计算时间方面的卓越性能。<br>\n<a href=\"https://www.bilibili.com/video/BV1qv4y1K7Y6/?t=74.26794&amp;spm_id_from=333.1350.jump_directly&amp;vd_source=6718fb46dbdd603565f483b04b4cdb50\">视频</a></li>\n</ol>\n<h4 id=\"苏黎世大学基于视觉飞行的开源和开源硬件敏捷四旋翼飞行器\">苏黎世大学基于视觉飞行的开源和开源硬件敏捷四旋翼飞行器</h4>\n<p>70km/h的运动捕捉系统的轨迹跟踪，以及仅使用机载感知在结构化和非结构化环境中进行基于视觉的特技飞行和避障。<br>\n<img src=\"../img/fly_speed.gif\" alt=\"基于视觉飞行的开源和开源硬件敏捷四旋翼飞行器\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>无人机产业链结构</h1>\n<h2 id=\"用途分类\">用途分类</h2>\n<p><img src=\"https://s2.loli.net/2024/08/03/lhTdpPUIYSAXRbe.png\" alt=\"用途分类\"></p>\n<ol>\n<li>军用无人机：主要用于侦察预警、跟踪定位、军事打击和战场搜救等任务。</li>\n<li>民用无人机：包括消费级无人机和工业级无人机，应用于航空拍摄、农林植保、物流运输、环境监测等多方领域。<br>\n<img src=\"https://s2.loli.net/2024/08/03/Q8OpznYbgwhMVU4.png\" alt=\"外卖配送\"><br>\n<img src=\"https://s2.loli.net/2024/08/03/V9NHFZYuxcjd1GC.png\" alt=\"农药喷洒\"></li>\n</ol>\n<h2 id=\"现代产业结构\">现代产业结构</h2>\n<p><img src=\"https://s2.loli.net/2024/08/03/reXBnCga9GpPlUQ.png\" alt=\"产业结构说明\"></p>\n<ol>\n<li>无人机产业链上游为无人机设计研发及关键原材料的生产</li>\n<li>中游无人机整机制造包括飞行系统、地面系统、任务载荷系统三个方面，是无人机制造的核心部分</li>\n<li>无人机产业链下游是无人机的应用场景，应用场景涵盖生活方方面面</li>\n</ol>\n<h1>无人机重要模块介绍</h1>\n<h2 id=\"飞行控制系统（Flight-Control-System-FCS）\">飞行控制系统（Flight Control System, FCS）</h2>\n<p>这是无人机的“大脑”，负责控制飞行轨迹、高度和速度等参数。飞控系统通常由控制器、传感器和GPS等组成。<br>\n<img src=\"https://s2.loli.net/2024/08/03/Z1jD6hToUVwtB3g.png\" alt=\"无人机坐标系\"></p>\n<h3 id=\"悬停\">悬停</h3>\n<p>在悬停状态下，四个旋翼具有相等的转速，产生的上升合力正好与自身重力相等。并且因为旋翼转速大小相等，前后端转速和左右端转速方向相反，从而使得飞行器总扭矩为零，使得飞行器静止在空中，实现悬停状态。<br>\n<img src=\"https://s2.loli.net/2024/08/03/IDlBfquRhZagez5.png\" alt=\"悬停\"></p>\n<h3 id=\"垂直运动\">垂直运动</h3>\n<p>垂直运动是五种运动状态中较为简单的一种，在保证四旋翼无人机每个旋转速度大小相等的倩况下，同时对每个旋翼增加或减小大小相等的转速，便可实现飞行器的垂直运动。</p>\n<p>当同时増加四个旋翼转速时，使得旋翼产生的总升力大小超过四旋翼无人机的重力时，即，四旋翼无人机便会垂直上升；反之，当同时减小旋翼转速时，使得每个旋翼产生的总升力小于自身重力时，即，四旋翼无人机便会垂直下降，从而实现四旋翼无人机的垂直升降控制。<br>\n<img src=\"https://s2.loli.net/2024/08/03/XkUz15lhSWyxPmp.png\" alt=\"垂直运动\"></p>\n<h3 id=\"翻滚运动\">翻滚运动</h3>\n<p>翻滚运动是在保持四旋翼无人机前后端旋翼转速不变的情况下，通过改变左右端的旋翼转速，使得左右旋翼之间形成一定的升力差，从而使得沿飞行器机体左右对称轴上产生一定力矩，导致在方向上产生角加速度实现控制的。</p>\n<p>如图所示，增加旋翼1的转速，减小旋翼3的转速，则飞行器倾斜于右侧飞行；相反，减小旋翼４，增加旋翼２，则飞行器向左倾斜飞行。<br>\n<img src=\"https://s2.loli.net/2024/08/03/XYUSAZnWjfOGNK8.png\" alt=\"翻滚运动\"></p>\n<h3 id=\"俯仰运动\">俯仰运动</h3>\n<p>四旋翼飞行器的俯仰运动和滚动运动相似，是在保持机身左右端旋翼转速不变的前提下，通过改变前后端旋翼转速形成前后旋翼升力差，从而在机身前后端对称轴上形成一定力矩，引起角方向上的角加速度实现控制的。</p>\n<p>如图所示，增加旋翼３的转速，减小旋翼１的转速，则飞行器向前倾斜飞行；反之，则飞行器向后倾斜。<br>\n<img src=\"https://s2.loli.net/2024/08/03/gGp3YxyBmv5eQnF.png\" alt=\"俯仰\"></p>\n<h3 id=\"偏航运动\">偏航运动</h3>\n<p>四旋翼的偏转运动是通过同时两两控制四个旋翼转速实现控制的。</p>\n<p>保持前后端或左右端旋翼转速相同时，其便不会发生俯仰或滚动运动；而当每组内的两个旋翼与另一组旋翼转速不同时，由于两组旋翼旋转方向不同，便会导致反扭矩力的不平衡，此时便会产生绕机身中心轴的反作用力，引起沿角角加速度。</p>\n<p>如图所示，当前后端旋翼的转速相等并大于左右端旋翼转速时，因为前者沿顺时针方向旋转，后者相反，总的反扭矩沿逆时针方向，反作用力作用在机身中心轴上沿逆时针方向，引起逆时针偏航运动；反之，则会引起飞行器的顺时针偏航运动<br>\n<img src=\"https://s2.loli.net/2024/08/03/UdnQhsYNlRObALC.png\" alt=\"偏航\"></p>\n<h2 id=\"传感器模块\">传感器模块</h2>\n<p>包括陀螺仪、加速度计、磁罗盘、气压计和GPS模块等，用于测量无人机的姿态、速度和位置。</p>\n<ol>\n<li>陀螺仪：监测三轴的角速度</li>\n<li>加速度计：提供无人机在XYZ三轴方向所承受的加速力。它也能决定无人机在静止状态时的倾斜角度。</li>\n<li>磁罗盘：为无人机提供方向感</li>\n<li>气压计：利用大气压力换算出高度，协助无人机导航</li>\n<li>GPS模块：定经度纬度进行自动飞行，还是保持定位进行悬停</li>\n</ol>\n<h2 id=\"动力系统\">动力系统</h2>\n<p>包括电机和螺旋桨，提供无人机的飞行动力。<br>\n<img src=\"https://s2.loli.net/2024/08/03/wTASpYXa4jW9z85.png\" alt=\"无刷电机\"><br>\n<img src=\"https://s2.loli.net/2024/08/03/GMdum7VsPCI8Fpl.png\" alt=\"螺旋桨\"></p>\n<h1>无人机主流控制算法</h1>\n<h2 id=\"捷联式惯性导航系统\">捷联式惯性导航系统</h2>\n<p>利用加速度计和陀螺仪测量飞行器的角运动和线运动信息，通过计算模块推算出飞行器的姿态、速度、航向和位置等导航参数。</p>\n<p><img src=\"https://s2.loli.net/2024/08/03/wKLaGgYQnW9Bc4P.png\" alt=\"惯导控制\"></p>\n<h2 id=\"PID控制算法\">PID控制算法</h2>\n<p>一种线性控制器，通过P比例、I积分和D微分的关系来调节控制量，以实现飞行器的姿态和轨迹控制。PID控制算法在多旋翼无人机中应用广泛。<br>\n这里以无人车控制为例子：</p>\n<h3 id=\"P比例\">P比例:</h3>\n<p>想让这个小车沿着绿线向前走，我们给P设置一个固定的值，这个值可以让离开绿线的小车向绿线的方向行驶，离的越远，方向盘打的角度越大，离的越近，方向盘打的角度越小。橙色的箭头表示小车行进的方向<br>\n<img src=\"https://i-blog.csdnimg.cn/blog_migrate/2806d61852f636da61a3279d17558822.png\" alt=\"P\"></p>\n<ol>\n<li>\n<p>如果我们把P值设置的比较大，它的路径就如上图，因为方向盘打的角度比较大，所以小车比中等P值的时候较早的到达绿线，但同样因为惯性的原因会多次往返绿线的两侧，也是一次比一次接近绿线，因为它方向盘角度打的比较大，所以会比中等P值往返的次数要多，最终经过多次往返，理论上它会离绿线越来越近，最终到达绿线上方。</p>\n</li>\n<li>\n<p>如果我们把P值设置的比较小，也就是方向盘打的角度比较小，它的路径是这样的，小车会较晚到达绿线，因为惯性会往返绿线两侧，但是因为方向盘角度小，小车可以在较少的往复次数下接近绿线。</p>\n</li>\n</ol>\n<p><strong>在小车与绿线相同距离的情况下，P值越大，小车的反应越快，P值越小，小车的反应越慢，所以这三个小车第一次到达绿线的时间是不一样的</strong></p>\n<h3 id=\"D微分：\">D微分：</h3>\n<p>我们为了不让这个小车冲过头，我们再给它加一个力，这个力就是D，让这个力来起一个作用，就是让小车越接近绿线的时候，接近绿线的速度越慢，小车越远离绿线的时候，接近绿线的速度相对较快，这个接近绿线的速度不是小车前进的速度，是小车与绿线平行线之间的相对速度。这个D大家可以理解为小车靠近绿线的一个阻力。<br>\n<img src=\"https://i-blog.csdnimg.cn/blog_migrate/d829222489c1bd71ceca9cfe06768fbb.png\" alt=\"阻尼\"></p>\n<ol>\n<li>如果D值过大，也就是小车靠近绿线的阻力过大，这样会让小车需要比较长的时间才能到达绿线上方。</li>\n<li>如果D值设置的过小，也就是小车靠近绿线的阻力过小，那微分控制(D)就不会对比例控制产生大的影响，所以虽然小车能够较快到达绿线，但小车需要多调整几次，在绿线的两侧往复几次后才能到达绿线上方行驶。<br>\n<img src=\"https://i-blog.csdnimg.cn/blog_migrate/92c4a1ceb5185ad17064ff2acaedefc4.png\" alt=\"阻尼大小\"></li>\n</ol>\n<h3 id=\"I积分：\">I积分：</h3>\n<p>设置合适的P值和D值，可以让小车很好的沿着绿线一直走，但路上不是很平坦，会有些坑坑包包，或者其他的一些干扰，路况不好就会让小车的行进路线发生偏移，比如小车在这里遇到了坑坑包包，它的行进路线 就会变成这样，稍微偏离了绿线一点，因为微分控制（D）让小车离绿线越近时，靠近绿线的速度越慢，比例控制（P）让小车在接近绿线时，方向盘又打的比较小，所以小车要走一段路才回到绿线上面。<br>\n<img src=\"https://i-blog.csdnimg.cn/blog_migrate/284ec2342132a44a2841ac10984dc164.png\" alt=\"波动\"></p>\n<p>有没有办法让它<strong>更快回到绿线上面</strong>呢，所以我们再给它加一个力，这个力就是I，积分控制。我们让积分控制起这样的作用：如果P和D的调节不是很理想的话，就让I帮他俩一把，向P的方向上加一个力，这样可以让小车更快回到目的路径。</p>\n<p>设置了I以后，I会根据误差和误差经历的时间进行积分，然后决定施加给目标方向的力的大小，就能够让小车回到目标轨迹上。<br>\n<img src=\"https://i-blog.csdnimg.cn/blog_migrate/6325d696e9e150316a5ea9af724f5425.png\" alt=\"积分\"></p>\n<h1>发展展望</h1>\n<h2 id=\"以自主控制为代表的无人机智能化水平在未来将得到大幅度提升。\">以自主控制为代表的无人机智能化水平在未来将得到大幅度提升。</h2>\n<p><img src=\"https://s2.loli.net/2024/08/03/W2kmGSze6Rnci4Y.png\" alt=\"未来发展展望\"></p>\n<h3 id=\"军用\">军用</h3>\n<p>在采用人工智能和群体智能优化技术后，军用无人机/机群可远在几百公里甚至几千公里外自主完成自动寻的、确定攻击目标先后次序、选定适宜的打击手段、进行战术协同执行攻击等一系列战术动作。</p>\n<h3 id=\"民用\">民用</h3>\n<p>随着民用无人机应用场景的不断拓展，基于大数据和人工智能的技术加持，民用无人机将在警用、保值、配送、检测等众多应用领域充分发挥其作用。</p>\n<h4 id=\"浙江大学全自主微型飞行机器人集群\">浙江大学全自主微型飞行机器人集群</h4>\n<ol>\n<li>构建轨迹规划器，根据来自机载传感器的有限信息及时准确地运行。</li>\n<li>规划问题满足飞行效率、避障、机器人间碰撞避免、动力学可行性、群体协同等多种任务需求，实现可扩展的规划器。</li>\n<li>具有机载感知、定位和控制功能，在轨迹质量和计算时间方面的卓越性能。<br>\n<a href=\"https://www.bilibili.com/video/BV1qv4y1K7Y6/?t=74.26794&amp;spm_id_from=333.1350.jump_directly&amp;vd_source=6718fb46dbdd603565f483b04b4cdb50\">视频</a></li>\n</ol>\n<h4 id=\"苏黎世大学基于视觉飞行的开源和开源硬件敏捷四旋翼飞行器\">苏黎世大学基于视觉飞行的开源和开源硬件敏捷四旋翼飞行器</h4>\n<p>70km/h的运动捕捉系统的轨迹跟踪，以及仅使用机载感知在结构化和非结构化环境中进行基于视觉的特技飞行和避障。<br>\n<img src=\"../img/fly_speed.gif\" alt=\"基于视觉飞行的开源和开源硬件敏捷四旋翼飞行器\"></p>\n"},{"title":"数据结构复习","abbrlink":11651,"date":"2024-06-21T13:33:57.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqtxn1-0.webp","swiper_index":null,"_content":"\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n{% link 参考文章, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %} ","source":"_posts/数据结构复习.md","raw":"---\ntitle: 数据结构复习\nabbrlink: 11651\ndate: 2024-06-21 21:33:57\ntags:\ndescription:\ncategories:\ncover:\nswiper_index:\n---\n\n{% timeline 跟踪日志,blue %}\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n\n<!-- timeline 2024/**/** -->\n\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n# 参考文章\n{% link 参考文章, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %} ","slug":"数据结构复习","published":1,"updated":"2024-06-28T12:01:07.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io7002omktten9nebkl","content":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> ","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>跟踪日志</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/<strong>/</strong></p>\n</div></div><div class='timeline-item-content'></div></div></div>\n<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> "},{"title":"无线链路Wifibroadcast","abbrlink":22013,"date":"2025-01-14T09:29:35.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2024/12/31/vqssft-0.webp","swiper_index":null,"_content":"\n\n# 参考文章\n{% link 参考文章, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %} \n\n\n\n\n# 远程无线编写\n\n通过无线网卡接收带有 radiotap 头的 802.11 数据包，并进行解析、过滤、FEC（前向纠错）、加密解密等处理。我们可以将其划分为几个模块来分析其功能和设计思路。\n\n---\n\n## 🧩 模块结构概览\n\n| 模块 | 类名 | 主要职责 |\n|------|------|----------|\n| 接收器 | `Receiver` | 负责打开网卡设备、设置混杂模式、过滤特定数据包、循环读取原始数据包 |\n| 聚合器 | `Aggregator` | 负责 FEC 解码、数据包去重、会话密钥管理、丢包恢复等 |\n| 数据流 | - | 实际上聚合器还负责将数据流输出到指定的目的地 |\n\n---\n\n## 🔍 Receiver 类详解\n\n### 构造函数：初始化网卡\n\n```cpp\nReceiver::Receiver(const char *wlan, int wlan_idx, uint32_t channel_id, BaseAggregator *agg, int rcv_buf_size)\n```\n\n- 使用 `pcap_create()` 创建一个 pcap 设备。\n- 设置混杂模式（promiscuous mode）、超时时间、非阻塞模式等。\n- 检查链路层封装类型是否为 `DLT_IEEE802_11_RADIO`（即包含 radiotap header）。\n- 编译 BPF 过滤器，只捕获特定以太网头部格式的数据包：\n  \n  ```cpp\n  ether[0x0a:2]==0x5742 && ether[0x0c:4] == 0x%08x\n  ```\n  \n  这表示只接收 EtherType 为 `0x5742` 并且特定字段匹配 `channel_id` 的数据包。\n\n- 将 pcap 设置为非阻塞模式，并获取可轮询的文件描述符用于后续事件监听。\n\n### 析构函数：释放资源\n\n```cpp\nReceiver::~Receiver()\n{\n    close(fd);\n    pcap_close(ppcap);\n}\n```\n\n### 核心方法：接收并处理数据包\n\n```cpp\nvoid Receiver::loop_iter(void)\n```\n\n该函数每次调用都会尝试从 pcap 中读取一个数据包，然后：\n\n1. 使用 `ieee80211_radiotap_iterator` 解析 radiotap 头部，提取以下信息：\n   - 天线编号（antenna）\n   - 频率（freq）\n   - RSSI（信号强度）\n   - 噪声（noise）\n   - MCS 索引（调制编码策略）\n   - 带宽（bandwidth）\n   - 是否自注入包（self_injected）\n\n2. 对 FCS 和错误帧进行检查与处理。\n\n3. 移除 radiotap 头部后，将数据体传给 Aggregator 的 `process_packet()` 方法。\n\n---\n\n## 🧠 Aggregator 类详解\n\n### 构造函数：初始化 FEC、会话密钥等\n\n```cpp\nAggregator::Aggregator(const string &keypair, uint64_t epoch, uint32_t channel_id)\n```\n\n- 加载公私钥对（用于解密接收到的数据包）。\n- 初始化 FEC 参数（k/n），以及 FEC 缓冲区环（ring buffer）。\n- 初始化统计计数器（如丢包、纠错成功等）。\n\n### FEC 相关方法\n\n#### 初始化 FEC\n\n```cpp\nvoid Aggregator::init_fec(int k, int n)\n```\n\n- 分配内存空间，初始化 FEC 编解码器（使用外部库，如 `libfec`）。\n- 清空 FEC 缓冲区环。\n\n#### 释放 FEC 资源\n\n```cpp\nvoid Aggregator::deinit_fec()\n```\n\n- 释放所有 FEC 缓存空间，关闭 FEC 引擎。\n\n### 核心逻辑：数据包处理\n\n```cpp\nvoid Aggregator::process_packet(...)\n```\n\n虽然你没有提供这部分完整代码，但根据上下文可以推断它完成了以下任务：\n\n1. **解密**：使用 libsodium 库对接收到的数据包进行解密。\n2. **FEC 解码**：\n   - 将数据包加入 FEC 缓冲环中。\n   - 当收集到足够数量的 fragment 后尝试恢复丢失的 packet。\n3. **数据重组**：\n   - 如果 FEC 成功恢复数据，则重新组装成完整数据块。\n   - 若失败则标记为丢包或错误包。\n4. **输出数据**：\n   - 将恢复后的数据发送到下一个阶段（例如视频流播放、写入文件、转发等）。\n\n---\n\n## 🛡️ 安全与加密机制\n\n- 使用了 **NaCl/libsodium** 提供的安全通信接口：\n  - `crypto_box_SECRETKEYBYTES`\n  - `crypto_box_PUBLICKEYBYTES`\n  - 用于对传输数据进行加密和解密，确保数据在空中传输时的安全性。\n\n---\n\n## ⚙️ FEC 前向纠错机制\n\n- 使用了 Reed-Solomon 或类似 FEC 编码方式（由 `libfec` 提供）。\n- 允许接收端在部分数据包丢失的情况下仍能恢复原始数据。\n- 在无人机图传、远程控制等场景下非常重要，可以容忍一定程度的网络丢包。\n\n---\n\n## 📊 统计与调试信息\n\n- 包含大量统计数据：\n  - `count_p_all`: 总共收到的包数\n  - `count_p_dec_err`: 解密错误的包数\n  - `count_p_lost`: 丢失的包数\n  - `count_p_fec_recovered`: FEC 恢复成功的包数\n- 可用于性能监控、丢包率评估、QoS 控制等。\n\n---\n\n## 📌 总结：整个系统的工作流程\n\n1. **启动 Receiver**：\n   - 打开指定网卡设备，设置混杂模式、BPF 过滤器。\n2. **持续接收数据包**：\n   - 每次调用 `loop_iter()` 获取一批数据包。\n   - 解析 radiotap header，提取元数据（天线、频率、RSSI、MCS 等）。\n3. **交给 Aggregator 处理**：\n   - 解密 → FEC 解码 → 数据重组 → 输出到目的地。\n4. **统计与反馈**：\n   - 记录各种状态，可用于前端显示或自动调整 FEC 参数等。\n\n---\n\n## ✅ 可优化点 / 注意事项\n\n- **性能瓶颈**：频繁的内存分配/释放（尤其在 FEC 缓冲区中），建议使用对象池或预分配机制。\n- **多线程支持**：当前代码是单线程处理，若需高性能可考虑引入多线程模型。\n- **FEC 动态调整**：可根据实时信道质量动态调整 FEC 的 k/n 比例，提升带宽利用率。\n- **错误处理增强**：目前很多异常直接抛出 runtime_error，建议更详细的日志记录或回调机制。\n\n---\n\n如果你还有其他部分的代码需要解析（比如 `process_packet` 函数、FEC 实现细节、或者发射端 wfb-tx 的代码），欢迎继续提供！","source":"_posts/无线链路Wifibroadcast.md","raw":"---\ntitle: 无线链路Wifibroadcast\nabbrlink: 22013\ndate: 2025-01-14 17:29:35\ntags:\ndescription:\ncategories:\ncover: https://image.aruoshui.fun/i/2024/12/31/vqssft-0.webp\nswiper_index:\n---\n\n\n# 参考文章\n{% link 参考文章, https://zhuanlan.zhihu.com/p/666861211, https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300 %} \n\n\n\n\n# 远程无线编写\n\n通过无线网卡接收带有 radiotap 头的 802.11 数据包，并进行解析、过滤、FEC（前向纠错）、加密解密等处理。我们可以将其划分为几个模块来分析其功能和设计思路。\n\n---\n\n## 🧩 模块结构概览\n\n| 模块 | 类名 | 主要职责 |\n|------|------|----------|\n| 接收器 | `Receiver` | 负责打开网卡设备、设置混杂模式、过滤特定数据包、循环读取原始数据包 |\n| 聚合器 | `Aggregator` | 负责 FEC 解码、数据包去重、会话密钥管理、丢包恢复等 |\n| 数据流 | - | 实际上聚合器还负责将数据流输出到指定的目的地 |\n\n---\n\n## 🔍 Receiver 类详解\n\n### 构造函数：初始化网卡\n\n```cpp\nReceiver::Receiver(const char *wlan, int wlan_idx, uint32_t channel_id, BaseAggregator *agg, int rcv_buf_size)\n```\n\n- 使用 `pcap_create()` 创建一个 pcap 设备。\n- 设置混杂模式（promiscuous mode）、超时时间、非阻塞模式等。\n- 检查链路层封装类型是否为 `DLT_IEEE802_11_RADIO`（即包含 radiotap header）。\n- 编译 BPF 过滤器，只捕获特定以太网头部格式的数据包：\n  \n  ```cpp\n  ether[0x0a:2]==0x5742 && ether[0x0c:4] == 0x%08x\n  ```\n  \n  这表示只接收 EtherType 为 `0x5742` 并且特定字段匹配 `channel_id` 的数据包。\n\n- 将 pcap 设置为非阻塞模式，并获取可轮询的文件描述符用于后续事件监听。\n\n### 析构函数：释放资源\n\n```cpp\nReceiver::~Receiver()\n{\n    close(fd);\n    pcap_close(ppcap);\n}\n```\n\n### 核心方法：接收并处理数据包\n\n```cpp\nvoid Receiver::loop_iter(void)\n```\n\n该函数每次调用都会尝试从 pcap 中读取一个数据包，然后：\n\n1. 使用 `ieee80211_radiotap_iterator` 解析 radiotap 头部，提取以下信息：\n   - 天线编号（antenna）\n   - 频率（freq）\n   - RSSI（信号强度）\n   - 噪声（noise）\n   - MCS 索引（调制编码策略）\n   - 带宽（bandwidth）\n   - 是否自注入包（self_injected）\n\n2. 对 FCS 和错误帧进行检查与处理。\n\n3. 移除 radiotap 头部后，将数据体传给 Aggregator 的 `process_packet()` 方法。\n\n---\n\n## 🧠 Aggregator 类详解\n\n### 构造函数：初始化 FEC、会话密钥等\n\n```cpp\nAggregator::Aggregator(const string &keypair, uint64_t epoch, uint32_t channel_id)\n```\n\n- 加载公私钥对（用于解密接收到的数据包）。\n- 初始化 FEC 参数（k/n），以及 FEC 缓冲区环（ring buffer）。\n- 初始化统计计数器（如丢包、纠错成功等）。\n\n### FEC 相关方法\n\n#### 初始化 FEC\n\n```cpp\nvoid Aggregator::init_fec(int k, int n)\n```\n\n- 分配内存空间，初始化 FEC 编解码器（使用外部库，如 `libfec`）。\n- 清空 FEC 缓冲区环。\n\n#### 释放 FEC 资源\n\n```cpp\nvoid Aggregator::deinit_fec()\n```\n\n- 释放所有 FEC 缓存空间，关闭 FEC 引擎。\n\n### 核心逻辑：数据包处理\n\n```cpp\nvoid Aggregator::process_packet(...)\n```\n\n虽然你没有提供这部分完整代码，但根据上下文可以推断它完成了以下任务：\n\n1. **解密**：使用 libsodium 库对接收到的数据包进行解密。\n2. **FEC 解码**：\n   - 将数据包加入 FEC 缓冲环中。\n   - 当收集到足够数量的 fragment 后尝试恢复丢失的 packet。\n3. **数据重组**：\n   - 如果 FEC 成功恢复数据，则重新组装成完整数据块。\n   - 若失败则标记为丢包或错误包。\n4. **输出数据**：\n   - 将恢复后的数据发送到下一个阶段（例如视频流播放、写入文件、转发等）。\n\n---\n\n## 🛡️ 安全与加密机制\n\n- 使用了 **NaCl/libsodium** 提供的安全通信接口：\n  - `crypto_box_SECRETKEYBYTES`\n  - `crypto_box_PUBLICKEYBYTES`\n  - 用于对传输数据进行加密和解密，确保数据在空中传输时的安全性。\n\n---\n\n## ⚙️ FEC 前向纠错机制\n\n- 使用了 Reed-Solomon 或类似 FEC 编码方式（由 `libfec` 提供）。\n- 允许接收端在部分数据包丢失的情况下仍能恢复原始数据。\n- 在无人机图传、远程控制等场景下非常重要，可以容忍一定程度的网络丢包。\n\n---\n\n## 📊 统计与调试信息\n\n- 包含大量统计数据：\n  - `count_p_all`: 总共收到的包数\n  - `count_p_dec_err`: 解密错误的包数\n  - `count_p_lost`: 丢失的包数\n  - `count_p_fec_recovered`: FEC 恢复成功的包数\n- 可用于性能监控、丢包率评估、QoS 控制等。\n\n---\n\n## 📌 总结：整个系统的工作流程\n\n1. **启动 Receiver**：\n   - 打开指定网卡设备，设置混杂模式、BPF 过滤器。\n2. **持续接收数据包**：\n   - 每次调用 `loop_iter()` 获取一批数据包。\n   - 解析 radiotap header，提取元数据（天线、频率、RSSI、MCS 等）。\n3. **交给 Aggregator 处理**：\n   - 解密 → FEC 解码 → 数据重组 → 输出到目的地。\n4. **统计与反馈**：\n   - 记录各种状态，可用于前端显示或自动调整 FEC 参数等。\n\n---\n\n## ✅ 可优化点 / 注意事项\n\n- **性能瓶颈**：频繁的内存分配/释放（尤其在 FEC 缓冲区中），建议使用对象池或预分配机制。\n- **多线程支持**：当前代码是单线程处理，若需高性能可考虑引入多线程模型。\n- **FEC 动态调整**：可根据实时信道质量动态调整 FEC 的 k/n 比例，提升带宽利用率。\n- **错误处理增强**：目前很多异常直接抛出 runtime_error，建议更详细的日志记录或回调机制。\n\n---\n\n如果你还有其他部分的代码需要解析（比如 `process_packet` 函数、FEC 实现细节、或者发射端 wfb-tx 的代码），欢迎继续提供！","slug":"无线链路Wifibroadcast","published":1,"updated":"2025-05-27T10:25:11.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io7002qmktt7nmd1s43","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<h1>远程无线编写</h1>\n<p>通过无线网卡接收带有 radiotap 头的 802.11 数据包，并进行解析、过滤、FEC（前向纠错）、加密解密等处理。我们可以将其划分为几个模块来分析其功能和设计思路。</p>\n<hr>\n<h2 id=\"🧩-模块结构概览\">🧩 模块结构概览</h2>\n<table>\n<thead>\n<tr>\n<th>模块</th>\n<th>类名</th>\n<th>主要职责</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>接收器</td>\n<td><code>Receiver</code></td>\n<td>负责打开网卡设备、设置混杂模式、过滤特定数据包、循环读取原始数据包</td>\n</tr>\n<tr>\n<td>聚合器</td>\n<td><code>Aggregator</code></td>\n<td>负责 FEC 解码、数据包去重、会话密钥管理、丢包恢复等</td>\n</tr>\n<tr>\n<td>数据流</td>\n<td>-</td>\n<td>实际上聚合器还负责将数据流输出到指定的目的地</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"🔍-Receiver-类详解\">🔍 Receiver 类详解</h2>\n<h3 id=\"构造函数：初始化网卡\">构造函数：初始化网卡</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">Receiver::<span class=\"built_in\">Receiver</span>(<span class=\"type\">const</span> <span class=\"type\">char</span> *wlan, <span class=\"type\">int</span> wlan_idx, <span class=\"type\">uint32_t</span> channel_id, BaseAggregator *agg, <span class=\"type\">int</span> rcv_buf_size)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>使用 <code>pcap_create()</code> 创建一个 pcap 设备。</p>\n</li>\n<li>\n<p>设置混杂模式（promiscuous mode）、超时时间、非阻塞模式等。</p>\n</li>\n<li>\n<p>检查链路层封装类型是否为 <code>DLT_IEEE802_11_RADIO</code>（即包含 radiotap header）。</p>\n</li>\n<li>\n<p>编译 BPF 过滤器，只捕获特定以太网头部格式的数据包：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">ether[<span class=\"number\">0x0a</span>:<span class=\"number\">2</span>]==<span class=\"number\">0x5742</span> &amp;&amp; ether[<span class=\"number\">0x0c</span>:<span class=\"number\">4</span>] == <span class=\"number\">0</span>x%<span class=\"number\">08</span>x</span><br></pre></td></tr></table></figure>\n<p>这表示只接收 EtherType 为 <code>0x5742</code> 并且特定字段匹配 <code>channel_id</code> 的数据包。</p>\n</li>\n<li>\n<p>将 pcap 设置为非阻塞模式，并获取可轮询的文件描述符用于后续事件监听。</p>\n</li>\n</ul>\n<h3 id=\"析构函数：释放资源\">析构函数：释放资源</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">Receiver::~<span class=\"built_in\">Receiver</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(fd);</span><br><span class=\"line\">    <span class=\"built_in\">pcap_close</span>(ppcap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"核心方法：接收并处理数据包\">核心方法：接收并处理数据包</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Receiver::loop_iter</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br></pre></td></tr></table></figure>\n<p>该函数每次调用都会尝试从 pcap 中读取一个数据包，然后：</p>\n<ol>\n<li>\n<p>使用 <code>ieee80211_radiotap_iterator</code> 解析 radiotap 头部，提取以下信息：</p>\n<ul>\n<li>天线编号（antenna）</li>\n<li>频率（freq）</li>\n<li>RSSI（信号强度）</li>\n<li>噪声（noise）</li>\n<li>MCS 索引（调制编码策略）</li>\n<li>带宽（bandwidth）</li>\n<li>是否自注入包（self_injected）</li>\n</ul>\n</li>\n<li>\n<p>对 FCS 和错误帧进行检查与处理。</p>\n</li>\n<li>\n<p>移除 radiotap 头部后，将数据体传给 Aggregator 的 <code>process_packet()</code> 方法。</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"🧠-Aggregator-类详解\">🧠 Aggregator 类详解</h2>\n<h3 id=\"构造函数：初始化-FEC、会话密钥等\">构造函数：初始化 FEC、会话密钥等</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">Aggregator::<span class=\"built_in\">Aggregator</span>(<span class=\"type\">const</span> string &amp;keypair, <span class=\"type\">uint64_t</span> epoch, <span class=\"type\">uint32_t</span> channel_id)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加载公私钥对（用于解密接收到的数据包）。</li>\n<li>初始化 FEC 参数（k/n），以及 FEC 缓冲区环（ring buffer）。</li>\n<li>初始化统计计数器（如丢包、纠错成功等）。</li>\n</ul>\n<h3 id=\"FEC-相关方法\">FEC 相关方法</h3>\n<h4 id=\"初始化-FEC\">初始化 FEC</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Aggregator::init_fec</span><span class=\"params\">(<span class=\"type\">int</span> k, <span class=\"type\">int</span> n)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>分配内存空间，初始化 FEC 编解码器（使用外部库，如 <code>libfec</code>）。</li>\n<li>清空 FEC 缓冲区环。</li>\n</ul>\n<h4 id=\"释放-FEC-资源\">释放 FEC 资源</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Aggregator::deinit_fec</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>释放所有 FEC 缓存空间，关闭 FEC 引擎。</li>\n</ul>\n<h3 id=\"核心逻辑：数据包处理\">核心逻辑：数据包处理</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Aggregator::process_packet</span><span class=\"params\">(...)</span></span></span><br></pre></td></tr></table></figure>\n<p>虽然你没有提供这部分完整代码，但根据上下文可以推断它完成了以下任务：</p>\n<ol>\n<li><strong>解密</strong>：使用 libsodium 库对接收到的数据包进行解密。</li>\n<li><strong>FEC 解码</strong>：\n<ul>\n<li>将数据包加入 FEC 缓冲环中。</li>\n<li>当收集到足够数量的 fragment 后尝试恢复丢失的 packet。</li>\n</ul>\n</li>\n<li><strong>数据重组</strong>：\n<ul>\n<li>如果 FEC 成功恢复数据，则重新组装成完整数据块。</li>\n<li>若失败则标记为丢包或错误包。</li>\n</ul>\n</li>\n<li><strong>输出数据</strong>：\n<ul>\n<li>将恢复后的数据发送到下一个阶段（例如视频流播放、写入文件、转发等）。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"🛡️-安全与加密机制\">🛡️ 安全与加密机制</h2>\n<ul>\n<li>使用了 <strong>NaCl/libsodium</strong> 提供的安全通信接口：\n<ul>\n<li><code>crypto_box_SECRETKEYBYTES</code></li>\n<li><code>crypto_box_PUBLICKEYBYTES</code></li>\n<li>用于对传输数据进行加密和解密，确保数据在空中传输时的安全性。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"⚙️-FEC-前向纠错机制\">⚙️ FEC 前向纠错机制</h2>\n<ul>\n<li>使用了 Reed-Solomon 或类似 FEC 编码方式（由 <code>libfec</code> 提供）。</li>\n<li>允许接收端在部分数据包丢失的情况下仍能恢复原始数据。</li>\n<li>在无人机图传、远程控制等场景下非常重要，可以容忍一定程度的网络丢包。</li>\n</ul>\n<hr>\n<h2 id=\"📊-统计与调试信息\">📊 统计与调试信息</h2>\n<ul>\n<li>包含大量统计数据：\n<ul>\n<li><code>count_p_all</code>: 总共收到的包数</li>\n<li><code>count_p_dec_err</code>: 解密错误的包数</li>\n<li><code>count_p_lost</code>: 丢失的包数</li>\n<li><code>count_p_fec_recovered</code>: FEC 恢复成功的包数</li>\n</ul>\n</li>\n<li>可用于性能监控、丢包率评估、QoS 控制等。</li>\n</ul>\n<hr>\n<h2 id=\"📌-总结：整个系统的工作流程\">📌 总结：整个系统的工作流程</h2>\n<ol>\n<li><strong>启动 Receiver</strong>：\n<ul>\n<li>打开指定网卡设备，设置混杂模式、BPF 过滤器。</li>\n</ul>\n</li>\n<li><strong>持续接收数据包</strong>：\n<ul>\n<li>每次调用 <code>loop_iter()</code> 获取一批数据包。</li>\n<li>解析 radiotap header，提取元数据（天线、频率、RSSI、MCS 等）。</li>\n</ul>\n</li>\n<li><strong>交给 Aggregator 处理</strong>：\n<ul>\n<li>解密 → FEC 解码 → 数据重组 → 输出到目的地。</li>\n</ul>\n</li>\n<li><strong>统计与反馈</strong>：\n<ul>\n<li>记录各种状态，可用于前端显示或自动调整 FEC 参数等。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"✅-可优化点-注意事项\">✅ 可优化点 / 注意事项</h2>\n<ul>\n<li><strong>性能瓶颈</strong>：频繁的内存分配/释放（尤其在 FEC 缓冲区中），建议使用对象池或预分配机制。</li>\n<li><strong>多线程支持</strong>：当前代码是单线程处理，若需高性能可考虑引入多线程模型。</li>\n<li><strong>FEC 动态调整</strong>：可根据实时信道质量动态调整 FEC 的 k/n 比例，提升带宽利用率。</li>\n<li><strong>错误处理增强</strong>：目前很多异常直接抛出 runtime_error，建议更详细的日志记录或回调机制。</li>\n</ul>\n<hr>\n<p>如果你还有其他部分的代码需要解析（比如 <code>process_packet</code> 函数、FEC 实现细节、或者发射端 wfb-tx 的代码），欢迎继续提供！</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"参考文章\" href=\"https://zhuanlan.zhihu.com/p/666861211\"><div class=\"left\"><img src=\"https://img95.699pic.com/xsj/17/7k/tc.jpg%21/fh/300\"/></div><div class=\"right\"><p class=\"text\">参考文章</p><p class=\"url\">https://zhuanlan.zhihu.com/p/666861211</p></div></a></div> \n<h1>远程无线编写</h1>\n<p>通过无线网卡接收带有 radiotap 头的 802.11 数据包，并进行解析、过滤、FEC（前向纠错）、加密解密等处理。我们可以将其划分为几个模块来分析其功能和设计思路。</p>\n<hr>\n<h2 id=\"🧩-模块结构概览\">🧩 模块结构概览</h2>\n<table>\n<thead>\n<tr>\n<th>模块</th>\n<th>类名</th>\n<th>主要职责</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>接收器</td>\n<td><code>Receiver</code></td>\n<td>负责打开网卡设备、设置混杂模式、过滤特定数据包、循环读取原始数据包</td>\n</tr>\n<tr>\n<td>聚合器</td>\n<td><code>Aggregator</code></td>\n<td>负责 FEC 解码、数据包去重、会话密钥管理、丢包恢复等</td>\n</tr>\n<tr>\n<td>数据流</td>\n<td>-</td>\n<td>实际上聚合器还负责将数据流输出到指定的目的地</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"🔍-Receiver-类详解\">🔍 Receiver 类详解</h2>\n<h3 id=\"构造函数：初始化网卡\">构造函数：初始化网卡</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">Receiver::<span class=\"built_in\">Receiver</span>(<span class=\"type\">const</span> <span class=\"type\">char</span> *wlan, <span class=\"type\">int</span> wlan_idx, <span class=\"type\">uint32_t</span> channel_id, BaseAggregator *agg, <span class=\"type\">int</span> rcv_buf_size)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>使用 <code>pcap_create()</code> 创建一个 pcap 设备。</p>\n</li>\n<li>\n<p>设置混杂模式（promiscuous mode）、超时时间、非阻塞模式等。</p>\n</li>\n<li>\n<p>检查链路层封装类型是否为 <code>DLT_IEEE802_11_RADIO</code>（即包含 radiotap header）。</p>\n</li>\n<li>\n<p>编译 BPF 过滤器，只捕获特定以太网头部格式的数据包：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">ether[<span class=\"number\">0x0a</span>:<span class=\"number\">2</span>]==<span class=\"number\">0x5742</span> &amp;&amp; ether[<span class=\"number\">0x0c</span>:<span class=\"number\">4</span>] == <span class=\"number\">0</span>x%<span class=\"number\">08</span>x</span><br></pre></td></tr></table></figure>\n<p>这表示只接收 EtherType 为 <code>0x5742</code> 并且特定字段匹配 <code>channel_id</code> 的数据包。</p>\n</li>\n<li>\n<p>将 pcap 设置为非阻塞模式，并获取可轮询的文件描述符用于后续事件监听。</p>\n</li>\n</ul>\n<h3 id=\"析构函数：释放资源\">析构函数：释放资源</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">Receiver::~<span class=\"built_in\">Receiver</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(fd);</span><br><span class=\"line\">    <span class=\"built_in\">pcap_close</span>(ppcap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"核心方法：接收并处理数据包\">核心方法：接收并处理数据包</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Receiver::loop_iter</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br></pre></td></tr></table></figure>\n<p>该函数每次调用都会尝试从 pcap 中读取一个数据包，然后：</p>\n<ol>\n<li>\n<p>使用 <code>ieee80211_radiotap_iterator</code> 解析 radiotap 头部，提取以下信息：</p>\n<ul>\n<li>天线编号（antenna）</li>\n<li>频率（freq）</li>\n<li>RSSI（信号强度）</li>\n<li>噪声（noise）</li>\n<li>MCS 索引（调制编码策略）</li>\n<li>带宽（bandwidth）</li>\n<li>是否自注入包（self_injected）</li>\n</ul>\n</li>\n<li>\n<p>对 FCS 和错误帧进行检查与处理。</p>\n</li>\n<li>\n<p>移除 radiotap 头部后，将数据体传给 Aggregator 的 <code>process_packet()</code> 方法。</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"🧠-Aggregator-类详解\">🧠 Aggregator 类详解</h2>\n<h3 id=\"构造函数：初始化-FEC、会话密钥等\">构造函数：初始化 FEC、会话密钥等</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">Aggregator::<span class=\"built_in\">Aggregator</span>(<span class=\"type\">const</span> string &amp;keypair, <span class=\"type\">uint64_t</span> epoch, <span class=\"type\">uint32_t</span> channel_id)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加载公私钥对（用于解密接收到的数据包）。</li>\n<li>初始化 FEC 参数（k/n），以及 FEC 缓冲区环（ring buffer）。</li>\n<li>初始化统计计数器（如丢包、纠错成功等）。</li>\n</ul>\n<h3 id=\"FEC-相关方法\">FEC 相关方法</h3>\n<h4 id=\"初始化-FEC\">初始化 FEC</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Aggregator::init_fec</span><span class=\"params\">(<span class=\"type\">int</span> k, <span class=\"type\">int</span> n)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>分配内存空间，初始化 FEC 编解码器（使用外部库，如 <code>libfec</code>）。</li>\n<li>清空 FEC 缓冲区环。</li>\n</ul>\n<h4 id=\"释放-FEC-资源\">释放 FEC 资源</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Aggregator::deinit_fec</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>释放所有 FEC 缓存空间，关闭 FEC 引擎。</li>\n</ul>\n<h3 id=\"核心逻辑：数据包处理\">核心逻辑：数据包处理</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Aggregator::process_packet</span><span class=\"params\">(...)</span></span></span><br></pre></td></tr></table></figure>\n<p>虽然你没有提供这部分完整代码，但根据上下文可以推断它完成了以下任务：</p>\n<ol>\n<li><strong>解密</strong>：使用 libsodium 库对接收到的数据包进行解密。</li>\n<li><strong>FEC 解码</strong>：\n<ul>\n<li>将数据包加入 FEC 缓冲环中。</li>\n<li>当收集到足够数量的 fragment 后尝试恢复丢失的 packet。</li>\n</ul>\n</li>\n<li><strong>数据重组</strong>：\n<ul>\n<li>如果 FEC 成功恢复数据，则重新组装成完整数据块。</li>\n<li>若失败则标记为丢包或错误包。</li>\n</ul>\n</li>\n<li><strong>输出数据</strong>：\n<ul>\n<li>将恢复后的数据发送到下一个阶段（例如视频流播放、写入文件、转发等）。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"🛡️-安全与加密机制\">🛡️ 安全与加密机制</h2>\n<ul>\n<li>使用了 <strong>NaCl/libsodium</strong> 提供的安全通信接口：\n<ul>\n<li><code>crypto_box_SECRETKEYBYTES</code></li>\n<li><code>crypto_box_PUBLICKEYBYTES</code></li>\n<li>用于对传输数据进行加密和解密，确保数据在空中传输时的安全性。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"⚙️-FEC-前向纠错机制\">⚙️ FEC 前向纠错机制</h2>\n<ul>\n<li>使用了 Reed-Solomon 或类似 FEC 编码方式（由 <code>libfec</code> 提供）。</li>\n<li>允许接收端在部分数据包丢失的情况下仍能恢复原始数据。</li>\n<li>在无人机图传、远程控制等场景下非常重要，可以容忍一定程度的网络丢包。</li>\n</ul>\n<hr>\n<h2 id=\"📊-统计与调试信息\">📊 统计与调试信息</h2>\n<ul>\n<li>包含大量统计数据：\n<ul>\n<li><code>count_p_all</code>: 总共收到的包数</li>\n<li><code>count_p_dec_err</code>: 解密错误的包数</li>\n<li><code>count_p_lost</code>: 丢失的包数</li>\n<li><code>count_p_fec_recovered</code>: FEC 恢复成功的包数</li>\n</ul>\n</li>\n<li>可用于性能监控、丢包率评估、QoS 控制等。</li>\n</ul>\n<hr>\n<h2 id=\"📌-总结：整个系统的工作流程\">📌 总结：整个系统的工作流程</h2>\n<ol>\n<li><strong>启动 Receiver</strong>：\n<ul>\n<li>打开指定网卡设备，设置混杂模式、BPF 过滤器。</li>\n</ul>\n</li>\n<li><strong>持续接收数据包</strong>：\n<ul>\n<li>每次调用 <code>loop_iter()</code> 获取一批数据包。</li>\n<li>解析 radiotap header，提取元数据（天线、频率、RSSI、MCS 等）。</li>\n</ul>\n</li>\n<li><strong>交给 Aggregator 处理</strong>：\n<ul>\n<li>解密 → FEC 解码 → 数据重组 → 输出到目的地。</li>\n</ul>\n</li>\n<li><strong>统计与反馈</strong>：\n<ul>\n<li>记录各种状态，可用于前端显示或自动调整 FEC 参数等。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"✅-可优化点-注意事项\">✅ 可优化点 / 注意事项</h2>\n<ul>\n<li><strong>性能瓶颈</strong>：频繁的内存分配/释放（尤其在 FEC 缓冲区中），建议使用对象池或预分配机制。</li>\n<li><strong>多线程支持</strong>：当前代码是单线程处理，若需高性能可考虑引入多线程模型。</li>\n<li><strong>FEC 动态调整</strong>：可根据实时信道质量动态调整 FEC 的 k/n 比例，提升带宽利用率。</li>\n<li><strong>错误处理增强</strong>：目前很多异常直接抛出 runtime_error，建议更详细的日志记录或回调机制。</li>\n</ul>\n<hr>\n<p>如果你还有其他部分的代码需要解析（比如 <code>process_packet</code> 函数、FEC 实现细节、或者发射端 wfb-tx 的代码），欢迎继续提供！</p>\n"},{"title":"生活离不开git","description":"虽然知道工作要用但是还是喜欢复制粘贴重命名","abbrlink":42679,"date":"2024-03-14T13:02:05.000Z","cover":"https://image.aruoshui.fun/i/2024/12/31/vsi0ft-0.webp","_content":"\n\n# 参考文章\n{% link git指令学习游戏, https://learngitbranching.js.org/, http://image.aruoshui.fun/i/2024/12/31/qkt009-0.webp %}\nLearning Git Branching 可以说是目前为止最好的教程了，详细的就不多说了，这里只是记录一些关键点\n\n# 注意点\n## git2.23版本 git switch取代 git checkout\ncheckout 作为单个命令有点超载（它承载了很多独立的功能），可以详见这[一篇文章](https://git-scm.com/docs/git-switch/zh_HANS-CN)\n例如，切换到 \"HEAD~3\" 并创建分支 \"fixup\"：\n`git switch -c fixup HEAD~3`\n\n## 分离头HEAD\nHEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。\n- HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。\n- HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。\n- 如果想看 HEAD 指向，可以通过 cat .git/HEAD 查看， 如果 HEAD 指向的是一个引用，还可以用` git symbolic-ref HEAD `查看它的指向。\n这里经常使用`^`和`~`来相对引用，例如`git branch -f main HEAD~3` 将 main 分支强制指向 HEAD 的第 3 级父提交。\n\n## Git Tags\nGit 的 tag 可以（在某种程度上 —— 因为标签可以被删除后重新在另外一个位置创建同名的标签）永久地将某个特定的提交命名为里程碑，然后就可以像分支一样引用了。\n它们并不会随着新的提交而移动。你也不能切换到某个标签上面进行修改提交，它就像是提交树上的一个锚点，标识了某个特定的位置。——在tag上进行新`git commit --amend`会创建新分支。\n场景：当你用 git bisect（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时， 可能会用到这个命令。\n\n语法是：git describe <ref>\n\n<ref> 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（HEAD）\n输出结果为：<tag>_<numCommits>_g<hash>\n\ntag 表示的是离 ref 最近的标签， numCommits 是表示这个 ref 与 tag 相差有多少个提交记录， hash 表示的是你所给定的 ref 所表示的提交记录哈希值的前几位。\n当 ref 提交记录上有某个标签时，则只输出标签名称\n\n## Git Fetch\n运行git fetch，远程最新提交被下载到本地，同时远程分支 o/main 也被更新\n\n从远程仓库下载本地仓库中缺失的提交记录\n更新远程分支指针(如 o/main)\n远程分支反映了远程仓库在你最后一次与它通信时的状态，git fetch 就是你与远程仓库通信的方式了\n\n不能做的事：不会改变你本地仓库的状态。它不会更新你的 main 分支，也不会修改你磁盘上的文件。\n\n## 偏离的提交历史\n例子\n假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是 —— 天啊！你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目旧版的代码，与远程仓库最新的代码不匹配了。\n\n此时是不允许push的\n它会强制你先合并远程最新的代码，然后才能分享你的工作。\n演示\ngit push 失效，因为远程仓库有未拉取到本地的提交\n你需要做的就是使你的工作基于最新的远程分支——最直接的方法就是通过 rebase 调整你的工作\n方法1：\n\n`git fetch; git rebase o/main; git push `或` git pull --rebase; git push`\n方法2：\n\n`git fetch; git merge o/main; git push `或`git pull; git push`\n\n## 锁定的main\n大型项目中，main（master）分支被锁定保护，需要一些Pull Request流程来合并修改\n\n\n\n\n\n\n","source":"_posts/生活离不开git.md","raw":"---\ntitle: 生活离不开git\ndescription: \"虽然知道工作要用但是还是喜欢复制粘贴重命名\"\nabbrlink: 42679\ndate: 2024-03-14 21:02:05\ntags:\n  - 分布式版本控制系统\n  - 开发\ncategories:\n  - 必学开发技能\ncover: 'https://image.aruoshui.fun/i/2024/12/31/vsi0ft-0.webp'\n---\n\n\n# 参考文章\n{% link git指令学习游戏, https://learngitbranching.js.org/, http://image.aruoshui.fun/i/2024/12/31/qkt009-0.webp %}\nLearning Git Branching 可以说是目前为止最好的教程了，详细的就不多说了，这里只是记录一些关键点\n\n# 注意点\n## git2.23版本 git switch取代 git checkout\ncheckout 作为单个命令有点超载（它承载了很多独立的功能），可以详见这[一篇文章](https://git-scm.com/docs/git-switch/zh_HANS-CN)\n例如，切换到 \"HEAD~3\" 并创建分支 \"fixup\"：\n`git switch -c fixup HEAD~3`\n\n## 分离头HEAD\nHEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。\n- HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。\n- HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。\n- 如果想看 HEAD 指向，可以通过 cat .git/HEAD 查看， 如果 HEAD 指向的是一个引用，还可以用` git symbolic-ref HEAD `查看它的指向。\n这里经常使用`^`和`~`来相对引用，例如`git branch -f main HEAD~3` 将 main 分支强制指向 HEAD 的第 3 级父提交。\n\n## Git Tags\nGit 的 tag 可以（在某种程度上 —— 因为标签可以被删除后重新在另外一个位置创建同名的标签）永久地将某个特定的提交命名为里程碑，然后就可以像分支一样引用了。\n它们并不会随着新的提交而移动。你也不能切换到某个标签上面进行修改提交，它就像是提交树上的一个锚点，标识了某个特定的位置。——在tag上进行新`git commit --amend`会创建新分支。\n场景：当你用 git bisect（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时， 可能会用到这个命令。\n\n语法是：git describe <ref>\n\n<ref> 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（HEAD）\n输出结果为：<tag>_<numCommits>_g<hash>\n\ntag 表示的是离 ref 最近的标签， numCommits 是表示这个 ref 与 tag 相差有多少个提交记录， hash 表示的是你所给定的 ref 所表示的提交记录哈希值的前几位。\n当 ref 提交记录上有某个标签时，则只输出标签名称\n\n## Git Fetch\n运行git fetch，远程最新提交被下载到本地，同时远程分支 o/main 也被更新\n\n从远程仓库下载本地仓库中缺失的提交记录\n更新远程分支指针(如 o/main)\n远程分支反映了远程仓库在你最后一次与它通信时的状态，git fetch 就是你与远程仓库通信的方式了\n\n不能做的事：不会改变你本地仓库的状态。它不会更新你的 main 分支，也不会修改你磁盘上的文件。\n\n## 偏离的提交历史\n例子\n假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是 —— 天啊！你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目旧版的代码，与远程仓库最新的代码不匹配了。\n\n此时是不允许push的\n它会强制你先合并远程最新的代码，然后才能分享你的工作。\n演示\ngit push 失效，因为远程仓库有未拉取到本地的提交\n你需要做的就是使你的工作基于最新的远程分支——最直接的方法就是通过 rebase 调整你的工作\n方法1：\n\n`git fetch; git rebase o/main; git push `或` git pull --rebase; git push`\n方法2：\n\n`git fetch; git merge o/main; git push `或`git pull; git push`\n\n## 锁定的main\n大型项目中，main（master）分支被锁定保护，需要一些Pull Request流程来合并修改\n\n\n\n\n\n\n","slug":"生活离不开git","published":1,"updated":"2024-12-31T11:23:21.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io7002tmktt8fyv5an0","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"git指令学习游戏\" href=\"https://learngitbranching.js.org/\"><div class=\"left\"><img src=\"http://image.aruoshui.fun/i/2024/12/31/qkt009-0.webp\"/></div><div class=\"right\"><p class=\"text\">git指令学习游戏</p><p class=\"url\">https://learngitbranching.js.org/</p></div></a></div>\n<p>Learning Git Branching 可以说是目前为止最好的教程了，详细的就不多说了，这里只是记录一些关键点</p>\n<h1>注意点</h1>\n<h2 id=\"git2-23版本-git-switch取代-git-checkout\">git2.23版本 git switch取代 git checkout</h2>\n<p>checkout 作为单个命令有点超载（它承载了很多独立的功能），可以详见这<a href=\"https://git-scm.com/docs/git-switch/zh_HANS-CN\">一篇文章</a><br>\n例如，切换到 “HEAD~3” 并创建分支 “fixup”：<br>\n<code>git switch -c fixup HEAD~3</code></p>\n<h2 id=\"分离头HEAD\">分离头HEAD</h2>\n<p>HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</p>\n<ul>\n<li>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</li>\n<li>HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</li>\n<li>如果想看 HEAD 指向，可以通过 cat .git/HEAD 查看， 如果 HEAD 指向的是一个引用，还可以用<code>git symbolic-ref HEAD</code>查看它的指向。<br>\n这里经常使用<code>^</code>和<code>~</code>来相对引用，例如<code>git branch -f main HEAD~3</code> 将 main 分支强制指向 HEAD 的第 3 级父提交。</li>\n</ul>\n<h2 id=\"Git-Tags\">Git Tags</h2>\n<p>Git 的 tag 可以（在某种程度上 —— 因为标签可以被删除后重新在另外一个位置创建同名的标签）永久地将某个特定的提交命名为里程碑，然后就可以像分支一样引用了。<br>\n它们并不会随着新的提交而移动。你也不能切换到某个标签上面进行修改提交，它就像是提交树上的一个锚点，标识了某个特定的位置。——在tag上进行新<code>git commit --amend</code>会创建新分支。<br>\n场景：当你用 git bisect（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时， 可能会用到这个命令。</p>\n<p>语法是：git describe <ref></p>\n<p><ref> 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（HEAD）<br>\n输出结果为：<tag>_<numCommits>_g<hash></p>\n<p>tag 表示的是离 ref 最近的标签， numCommits 是表示这个 ref 与 tag 相差有多少个提交记录， hash 表示的是你所给定的 ref 所表示的提交记录哈希值的前几位。<br>\n当 ref 提交记录上有某个标签时，则只输出标签名称</p>\n<h2 id=\"Git-Fetch\">Git Fetch</h2>\n<p>运行git fetch，远程最新提交被下载到本地，同时远程分支 o/main 也被更新</p>\n<p>从远程仓库下载本地仓库中缺失的提交记录<br>\n更新远程分支指针(如 o/main)<br>\n远程分支反映了远程仓库在你最后一次与它通信时的状态，git fetch 就是你与远程仓库通信的方式了</p>\n<p>不能做的事：不会改变你本地仓库的状态。它不会更新你的 main 分支，也不会修改你磁盘上的文件。</p>\n<h2 id=\"偏离的提交历史\">偏离的提交历史</h2>\n<p>例子<br>\n假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是 —— 天啊！你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目旧版的代码，与远程仓库最新的代码不匹配了。</p>\n<p>此时是不允许push的<br>\n它会强制你先合并远程最新的代码，然后才能分享你的工作。<br>\n演示<br>\ngit push 失效，因为远程仓库有未拉取到本地的提交<br>\n你需要做的就是使你的工作基于最新的远程分支——最直接的方法就是通过 rebase 调整你的工作<br>\n方法1：</p>\n<p><code>git fetch; git rebase o/main; git push </code>或<code> git pull --rebase; git push</code><br>\n方法2：</p>\n<p><code>git fetch; git merge o/main; git push </code>或<code>git pull; git push</code></p>\n<h2 id=\"锁定的main\">锁定的main</h2>\n<p>大型项目中，main（master）分支被锁定保护，需要一些Pull Request流程来合并修改</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"git指令学习游戏\" href=\"https://learngitbranching.js.org/\"><div class=\"left\"><img src=\"http://image.aruoshui.fun/i/2024/12/31/qkt009-0.webp\"/></div><div class=\"right\"><p class=\"text\">git指令学习游戏</p><p class=\"url\">https://learngitbranching.js.org/</p></div></a></div>\n<p>Learning Git Branching 可以说是目前为止最好的教程了，详细的就不多说了，这里只是记录一些关键点</p>\n<h1>注意点</h1>\n<h2 id=\"git2-23版本-git-switch取代-git-checkout\">git2.23版本 git switch取代 git checkout</h2>\n<p>checkout 作为单个命令有点超载（它承载了很多独立的功能），可以详见这<a href=\"https://git-scm.com/docs/git-switch/zh_HANS-CN\">一篇文章</a><br>\n例如，切换到 “HEAD~3” 并创建分支 “fixup”：<br>\n<code>git switch -c fixup HEAD~3</code></p>\n<h2 id=\"分离头HEAD\">分离头HEAD</h2>\n<p>HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</p>\n<ul>\n<li>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</li>\n<li>HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</li>\n<li>如果想看 HEAD 指向，可以通过 cat .git/HEAD 查看， 如果 HEAD 指向的是一个引用，还可以用<code>git symbolic-ref HEAD</code>查看它的指向。<br>\n这里经常使用<code>^</code>和<code>~</code>来相对引用，例如<code>git branch -f main HEAD~3</code> 将 main 分支强制指向 HEAD 的第 3 级父提交。</li>\n</ul>\n<h2 id=\"Git-Tags\">Git Tags</h2>\n<p>Git 的 tag 可以（在某种程度上 —— 因为标签可以被删除后重新在另外一个位置创建同名的标签）永久地将某个特定的提交命名为里程碑，然后就可以像分支一样引用了。<br>\n它们并不会随着新的提交而移动。你也不能切换到某个标签上面进行修改提交，它就像是提交树上的一个锚点，标识了某个特定的位置。——在tag上进行新<code>git commit --amend</code>会创建新分支。<br>\n场景：当你用 git bisect（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时， 可能会用到这个命令。</p>\n<p>语法是：git describe <ref></p>\n<p><ref> 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（HEAD）<br>\n输出结果为：<tag>_<numCommits>_g<hash></p>\n<p>tag 表示的是离 ref 最近的标签， numCommits 是表示这个 ref 与 tag 相差有多少个提交记录， hash 表示的是你所给定的 ref 所表示的提交记录哈希值的前几位。<br>\n当 ref 提交记录上有某个标签时，则只输出标签名称</p>\n<h2 id=\"Git-Fetch\">Git Fetch</h2>\n<p>运行git fetch，远程最新提交被下载到本地，同时远程分支 o/main 也被更新</p>\n<p>从远程仓库下载本地仓库中缺失的提交记录<br>\n更新远程分支指针(如 o/main)<br>\n远程分支反映了远程仓库在你最后一次与它通信时的状态，git fetch 就是你与远程仓库通信的方式了</p>\n<p>不能做的事：不会改变你本地仓库的状态。它不会更新你的 main 分支，也不会修改你磁盘上的文件。</p>\n<h2 id=\"偏离的提交历史\">偏离的提交历史</h2>\n<p>例子<br>\n假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是 —— 天啊！你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目旧版的代码，与远程仓库最新的代码不匹配了。</p>\n<p>此时是不允许push的<br>\n它会强制你先合并远程最新的代码，然后才能分享你的工作。<br>\n演示<br>\ngit push 失效，因为远程仓库有未拉取到本地的提交<br>\n你需要做的就是使你的工作基于最新的远程分支——最直接的方法就是通过 rebase 调整你的工作<br>\n方法1：</p>\n<p><code>git fetch; git rebase o/main; git push </code>或<code> git pull --rebase; git push</code><br>\n方法2：</p>\n<p><code>git fetch; git merge o/main; git push </code>或<code>git pull; git push</code></p>\n<h2 id=\"锁定的main\">锁定的main</h2>\n<p>大型项目中，main（master）分支被锁定保护，需要一些Pull Request流程来合并修改</p>\n"},{"title":"视频编码技术","abbrlink":43574,"date":"2024-10-01T10:56:02.000Z","description":null,"cover":"https://image.aruoshui.fun/i/2025/01/01/upbt9a-0.webp","swiper_index":null,"_content":"\n# 参考文章\n{% link h.264基础解析, https://blog.csdn.net/weixin_60610210/article/details/144188041, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=37424012&bvid=BV1nt411Q7S6&cid=65779111&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n\n{% note flat %}默认 提示块标签{% endnote %}\n\n{% note default flat %}default 提示块标签{% endnote %}\n\n{% note primary flat %}primary 提示块标签{% endnote %}\n\n{% note success flat %}success 提示块标签{% endnote %}\n\n{% note info flat %}info 提示块标签{% endnote %}\n\n{% note warning flat %}warning 提示块标签{% endnote %}\n\n{% note danger flat %}danger 提示块标签{% endnote %}\n\n# 视频编码技术\n所谓视频编码方式就是指通过压缩技术，将原始视频格式的文件转换成另一种视频格式文件的方式。视频流传输中最为重要的编解码标准有国际电联的H.261、H.263、H.264，运动静止图像专家组的M-JPEG和国际标准化组织运动图像专家组的MPEG系列标准，此外在互联网上被广泛应用的还有Real-Networks的RealVideo、微软公司的WMV以及Apple公司的QuickTime等。\n\n# 为什么会有视频编解码技术\n&nbsp;&nbsp;通常视频文件都非常庞大，如果直接存储或者传输，那么对内存大小和传输速度的要求将会变的非常高，进而降低用户的体验，也不利于整个生态的发展。\n&nbsp;&nbsp;因此为了解决上述问题，才有了视频编解码技术，其通过一些技巧，对视频大小进行压缩，例如删除重复信息、利用相似图片等，将视频数据压缩成更小的体积。  \n\n{% note info flat %}\n&nbsp;&nbsp;如果我不使用任何视频编码技术，我现在想存储1080p 60fps的一帧画面，我需要多大的存储空间：\n\n$分辨率为1080p，即1920 \\times 1080像素。$\n$每帧的像素数为： 1920 \\times 1080 = 2,073,600 \\text{ 像素}$\n$通常每个像素使用24位色深，即每个像素占用3字节（24位 = 3字节）。$\n$\\text{存储空间} = \\text{像素数} \\times \\text{每个像素的字节数}$\n$\\text{存储空间} = 2,073,600 \\times 3 \\, \\text{字节} = 6,220,800 \\, \\text{字节}$\n$将字节转换为MB（1MB = 1024 × 1024字节）：$\n$\\text{存储空间} = \\frac{6,220,800}{1024 \\times 1024} \\approx 5.94 \\, \\text{MB}$\n$\\text{一秒的视频} = 5.94 \\, \\text{MB} \\times 60 = 356.4 \\, \\text{MB} $\n\n{% endnote %}\n\n# 压缩什么\n压缩之所以可能，是因为存在冗余数据。视频序列帧图像的冗余数据主要有：\n1. 空间冗余：同一个物体表面上采样点的颜色，存在空间连续性，是相同或相近的。\n2. 时间冗余：连续画面之间存在相关性，例如两人在房间里聊天，背景没有变化，人也只有位置和动作的变化。\n3. 结构冗余：某些结构是简单图像模式的重复，如蜂窝，方格地板。\n4. 知识冗余：某些图像的理解，跟知识有相关性。如人脸有固定的结构，包含眼、鼻子、嘴巴，按一定位置排列。可以对具备固定结构的图像元素，构造模型，结合图像库，只需要几个参数就可以表征。\n5. 视觉冗余：人眼对图像场的敏感性是非均匀和非线性的。对色度相对不敏感，对亮度更敏感。在高亮度区，人眼对亮度变化敏感度下降。对物体边缘敏感，对内部区域不敏感。可以根据这些视觉特性，对图像信息进行取舍。\n\n\n# 码率\n播放一段视频每秒所需的数据量就是它的 Bit rate 比特率（即常说的 码率）；\n1. 恒定码率（CBR）\n   ![](https://image.aruoshui.fun/i/2025/01/02/p1niwf-0.webp)\n2. 可变码率（VBR）\n   ![]https://image.aruoshui.fun/i/2025/01/02/p3sn21-0.webp\n3. 固定质量模式（CRF）\n   ![]https://image.aruoshui.fun/i/2025/01/02/p5bnha-0.webp\n   在没有码率限制的情况下首选\n4. 平均码率（ABR）\n   相当于码率波动更小的VBR\n\n# H.264\nH.264是由ITU-T Video Coding Experts Group（视频编码专家组）和ISO/IEC Moving Picture Experts Group（运动图像专家组）联合制定的标准，属于视频压缩领域的经典编码标准。自2003年推出以来，H.264已经成为广泛使用的视频压缩标准，特别是在视频会议、流媒体、蓝光光盘、YouTube和直播等领域。\n## 核心算法 \n&nbsp;&nbsp;H264采用的核心算法是**帧内压缩**和**帧间压缩**.\n1. 帧内（Intraframe）压缩也称为空间压缩（Spatialcompression）。\n当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。帧内一般采用有损压缩算法，由于帧内压缩是编码一个完整的图像，所以可以独立的解码、显示。帧内压缩一般达不到很高的压缩，跟编码jpeg差不多。\n![](https://image.aruoshui.fun/i/2025/01/02/nnlafy-0.webp)\n\n1. 帧间（Interframe）压缩的原理是：相邻几帧的数据有很大的相关性，或者说前后两帧信息变化很小的特点。也即连续的视频其相邻帧之间具有冗余信息,根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。  \n帧间压缩也称为时间压缩（Temporalcompression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的。帧差值（Framedifferencing）算法是一种典型的时间压缩法，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。\n![](https://image.aruoshui.fun/i/2025/01/02/no7ahj-0.webp)\n\n## 具体解释\n在H.264中，帧内压缩是生成I帧的算法，帧间压缩是生成B帧和P帧的算法。\n1. I帧\n   I 帧:即Intra-coded picture（帧内编码图像帧），I帧表示关键帧，你可以理解为这一帧画面的完整保留；解码时只需要本帧数据就可以完成（因为包含完整画面）。\n{% note info flat %}\n- 它是一个全帧压缩编码帧。它将全帧图像信息进行JPEG压缩编码及传输;\n- 解码时仅用I帧的数据就可重构完整图像;\n- I帧描述了图像背景和运动主体的详情;\n- I帧不需要参考其他画面而生成;\n- I帧是P帧和B帧的参考帧(其质量直接影响到同组中以后各帧的质量);\n- I帧是帧组GOP的基础帧(第一帧),在一组中只有一个I帧;\n- I帧不需要考虑运动矢量;\n- I帧所占数据的信息量比较大。\n{% endnote %}\n\n2. P帧\n   P帧:即Predictive-coded Picture（前向预测编码图像帧）。P帧表示的是这一帧跟之前的一个关键帧（或P帧）的差别，解码时需要用之前缓存的画面叠加上本帧定义的差别，生成最终画面。（也就是差别帧，P帧没有完整画面数据，只有与前一帧的画面差别的数据）\n   **P帧是以I帧为参考帧,在I帧中找出P帧“某点”的预测值和运动矢量,取预测差值和运动矢量 (MV) 一起传送。在接收端根据运动矢量从I帧中找出P帧“某点”的预测值并与差值相加以得到P帧“某点”样值,从而可得到完整的P帧。**\n   把编码时候记录变化，解码时再预测回去\n   ![核心](https://image.aruoshui.fun/i/2025/01/02/o17bqj-0.webp)\n    {% note info flat %}\n    解码时必须将I帧中的预测值与预测误差求和后才能重构完整的P帧图像;\n    P帧属于前向预测的帧间编码。它只参考前面最靠近它的I帧或P帧;\n    由于是差值传送,P帧的压缩比较高。\n    **P帧是参考帧,它可能造成解码错误的扩散;**\n    {% endnote %}\n\n3. B帧\n   B帧:即Bidirectionally predicted picture（双向预测编码图像帧）。  \n   B帧是双向差别帧，也就是B帧记录的是本帧与前后帧的差别，换言之，要解码B帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是解码时CPU会比较累。\n   {% note info flat %}\n    B帧是由前面的I或P帧和后面的P帧来进行预测的;\n    B帧传送的是它与前面的I帧或P帧和后面的P帧之间的预测误差及运动矢量;\n    B帧是双向预测编码帧;\n    B帧压缩比最高,因为它只反映丙参考帧间运动主体的变化情况,预测比较准确;\n    B帧不是参考帧,不会造成解码错误的扩散\n   {% endnote %}\n  \n   **为什么需要B帧**\n   I和P的解码算法比较简单，资源占用也比较少，I只要自己完成就行了，P呢，也只需要解码器把前一个画面缓存一下，遇到P时就使用之前缓存的画面就好了，如果视频流只有I和P，解码器可以不管后面的数据，边读边解码，线性前进，大家很舒服。那么为什么还要引入B帧？\n\n   网络上的电影很多都采用了B帧，因为B帧记录的是前后帧的差别，比P帧能节约更多的空间，但这样一来，文件小了，解码器就麻烦了，因为在解码时，不仅要用之前缓存的画面，还要知道下一个I或者P的画面（也就是说要预读预解码），而且，B帧不能简单地丢掉，因为B帧其实也包含了画面信息，如果简单丢掉，并用之前的画面简单重复，就会造成画面卡（其实就是丢帧了），并且由于网络上的电影为了节约空间，往往使用相当多的B帧，B帧用的多，对不支持B帧的播放器就造成更大的困扰，画面也就越卡。\n\n4. 帧间关系\n   ![](https://image.aruoshui.fun/i/2025/01/02/ovg0wy-0.webp)\n\n## GOP\nGOP即每一组IPB帧的序列包含了多少帧，换句话说就是一个I帧之后多少帧才会出现下一个I帧\n**GOP越大，B和P帧越多，视频质量越高**，压缩率上去了，更多的闲置码率去提升质量\n\n\n# H.265\n是为了应对更高分辨率视频（如4K、8K）的需求而开发的。它的主要优势在于其更高的压缩效率，相比H.264，它能够在保持相同视频质量的情况下，将视频数据量减少大约30% - 50%。- 例如，一个原本大小为 1GB 的 H.264 编码的 1080P 视频，若采用 H.265 进行编码，其文件大小可能会缩减至 500MB - 700MB 左右。这种高效的压缩能力使得 H.265 在高清和超高清视频的存储与传输方面展现出了巨大的优势，特别是在网络带宽资源紧张或者存储空间有限的云桌面应用场景中。- 再比如，在云桌面远程办公场景中，用户需要访问存储在云端的高清视频资料，H.265 编码可以让视频更快地加载和播放，减少等待时间，提高工作效率。\n\n相同的视频H265编码的文件会比H264编码的文件小很多，一些时候甚至接近50%。\n\n所以理论上，在相同带宽的前提下，H265的在线视频、直播流会拥有更高的画质，相同画质的情况下，H265也能更节省带宽/流量。\n\n但这是建立在编码、解码计算量为代价的，也就是说，播放H265视频，会比H264视频更消耗性能。\n\n这是H264、H265最大的区别，H265比H264拥有压缩率更高的压缩算法。但同时，也损耗更多的性能，H264、H265的选择，更多是根据实际场景下，容量、带宽对比用户、服务器性能，哪个更为重要的考量。\n\n\n\n\n\n\n# 参考文献\n{% span center logo large, 历史上的今天 %}\n1. 1475年：意大利文艺复兴时期的雕塑家米开朗基罗{% referto '[1]','米开朗基罗' %}诞生。他是文艺复兴时期最重要的艺术家之一，作品包括《大卫像》和《圣母玛利亚》等。\n2. 1899年：美国发明家、电影制片人威廉·赛勒斯·福克斯{% referto '[2]','电影制片人威廉·赛勒斯·福克斯' %}诞生。他是电影行业的先驱，创立了20世纪福克斯影业公司。\n3. 1974年：计算机科学家维特·柏恩斯·李发表了有关万维网{% referto '[3]','万维网的提案' %}的提案，奠定了互联网发展的基础。\n4.  1998年：谷歌公司成立，创始人拉里·佩奇和谢尔盖·布林将互联网搜索引擎{% referto '[4]','谷歌搜索引擎的历史' %}带入新的高度，成为全球最大的搜索引擎之一。\n5. 2007年：苹果公司推出首款iPhone{% referto '[5]','首款iPhone手机' %}，引领了智能手机革命，改变了人们的通讯和生活方式。\n\n{% referfrom '[1]','米开朗基罗','https://en.wikipedia.org/wiki/Michelangelo' %}\n{% referfrom '[2]','电影制片人威廉·赛勒斯·福克斯','https://en.wikipedia.org/wiki/William_Fox_(producer)' %}\n{% referfrom '[3]','万维网的提案','https://en.wikipedia.org/wiki/Tim_Berners-Lee' %}\n{% referfrom '[4]','谷歌搜索引擎的历史','https://en.wikipedia.org/wiki/History_of_Google' %}\n{% referfrom '[5]','首款iPhone手机','https://en.wikipedia.org/wiki/IPhone_(1st_generation)' %}\n\n1. [1]徐瑶.基于H.264的视频压缩技术及其在视频监控系统中的应用[D].安徽大学,2014.\n\n","source":"_posts/视频编码技术.md","raw":"---\ntitle: 视频编码技术\nabbrlink: 43574\ndate: 2024-10-01 18:56:02\ntags: \n - 音视频开发\ndescription:\ncategories:\n - 开发基础\ncover: https://image.aruoshui.fun/i/2025/01/01/upbt9a-0.webp\nswiper_index:\n---\n\n# 参考文章\n{% link h.264基础解析, https://blog.csdn.net/weixin_60610210/article/details/144188041, https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp %} \n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=37424012&bvid=BV1nt411Q7S6&cid=65779111&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n\n\n{% note flat %}默认 提示块标签{% endnote %}\n\n{% note default flat %}default 提示块标签{% endnote %}\n\n{% note primary flat %}primary 提示块标签{% endnote %}\n\n{% note success flat %}success 提示块标签{% endnote %}\n\n{% note info flat %}info 提示块标签{% endnote %}\n\n{% note warning flat %}warning 提示块标签{% endnote %}\n\n{% note danger flat %}danger 提示块标签{% endnote %}\n\n# 视频编码技术\n所谓视频编码方式就是指通过压缩技术，将原始视频格式的文件转换成另一种视频格式文件的方式。视频流传输中最为重要的编解码标准有国际电联的H.261、H.263、H.264，运动静止图像专家组的M-JPEG和国际标准化组织运动图像专家组的MPEG系列标准，此外在互联网上被广泛应用的还有Real-Networks的RealVideo、微软公司的WMV以及Apple公司的QuickTime等。\n\n# 为什么会有视频编解码技术\n&nbsp;&nbsp;通常视频文件都非常庞大，如果直接存储或者传输，那么对内存大小和传输速度的要求将会变的非常高，进而降低用户的体验，也不利于整个生态的发展。\n&nbsp;&nbsp;因此为了解决上述问题，才有了视频编解码技术，其通过一些技巧，对视频大小进行压缩，例如删除重复信息、利用相似图片等，将视频数据压缩成更小的体积。  \n\n{% note info flat %}\n&nbsp;&nbsp;如果我不使用任何视频编码技术，我现在想存储1080p 60fps的一帧画面，我需要多大的存储空间：\n\n$分辨率为1080p，即1920 \\times 1080像素。$\n$每帧的像素数为： 1920 \\times 1080 = 2,073,600 \\text{ 像素}$\n$通常每个像素使用24位色深，即每个像素占用3字节（24位 = 3字节）。$\n$\\text{存储空间} = \\text{像素数} \\times \\text{每个像素的字节数}$\n$\\text{存储空间} = 2,073,600 \\times 3 \\, \\text{字节} = 6,220,800 \\, \\text{字节}$\n$将字节转换为MB（1MB = 1024 × 1024字节）：$\n$\\text{存储空间} = \\frac{6,220,800}{1024 \\times 1024} \\approx 5.94 \\, \\text{MB}$\n$\\text{一秒的视频} = 5.94 \\, \\text{MB} \\times 60 = 356.4 \\, \\text{MB} $\n\n{% endnote %}\n\n# 压缩什么\n压缩之所以可能，是因为存在冗余数据。视频序列帧图像的冗余数据主要有：\n1. 空间冗余：同一个物体表面上采样点的颜色，存在空间连续性，是相同或相近的。\n2. 时间冗余：连续画面之间存在相关性，例如两人在房间里聊天，背景没有变化，人也只有位置和动作的变化。\n3. 结构冗余：某些结构是简单图像模式的重复，如蜂窝，方格地板。\n4. 知识冗余：某些图像的理解，跟知识有相关性。如人脸有固定的结构，包含眼、鼻子、嘴巴，按一定位置排列。可以对具备固定结构的图像元素，构造模型，结合图像库，只需要几个参数就可以表征。\n5. 视觉冗余：人眼对图像场的敏感性是非均匀和非线性的。对色度相对不敏感，对亮度更敏感。在高亮度区，人眼对亮度变化敏感度下降。对物体边缘敏感，对内部区域不敏感。可以根据这些视觉特性，对图像信息进行取舍。\n\n\n# 码率\n播放一段视频每秒所需的数据量就是它的 Bit rate 比特率（即常说的 码率）；\n1. 恒定码率（CBR）\n   ![](https://image.aruoshui.fun/i/2025/01/02/p1niwf-0.webp)\n2. 可变码率（VBR）\n   ![]https://image.aruoshui.fun/i/2025/01/02/p3sn21-0.webp\n3. 固定质量模式（CRF）\n   ![]https://image.aruoshui.fun/i/2025/01/02/p5bnha-0.webp\n   在没有码率限制的情况下首选\n4. 平均码率（ABR）\n   相当于码率波动更小的VBR\n\n# H.264\nH.264是由ITU-T Video Coding Experts Group（视频编码专家组）和ISO/IEC Moving Picture Experts Group（运动图像专家组）联合制定的标准，属于视频压缩领域的经典编码标准。自2003年推出以来，H.264已经成为广泛使用的视频压缩标准，特别是在视频会议、流媒体、蓝光光盘、YouTube和直播等领域。\n## 核心算法 \n&nbsp;&nbsp;H264采用的核心算法是**帧内压缩**和**帧间压缩**.\n1. 帧内（Intraframe）压缩也称为空间压缩（Spatialcompression）。\n当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。帧内一般采用有损压缩算法，由于帧内压缩是编码一个完整的图像，所以可以独立的解码、显示。帧内压缩一般达不到很高的压缩，跟编码jpeg差不多。\n![](https://image.aruoshui.fun/i/2025/01/02/nnlafy-0.webp)\n\n1. 帧间（Interframe）压缩的原理是：相邻几帧的数据有很大的相关性，或者说前后两帧信息变化很小的特点。也即连续的视频其相邻帧之间具有冗余信息,根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。  \n帧间压缩也称为时间压缩（Temporalcompression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的。帧差值（Framedifferencing）算法是一种典型的时间压缩法，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。\n![](https://image.aruoshui.fun/i/2025/01/02/no7ahj-0.webp)\n\n## 具体解释\n在H.264中，帧内压缩是生成I帧的算法，帧间压缩是生成B帧和P帧的算法。\n1. I帧\n   I 帧:即Intra-coded picture（帧内编码图像帧），I帧表示关键帧，你可以理解为这一帧画面的完整保留；解码时只需要本帧数据就可以完成（因为包含完整画面）。\n{% note info flat %}\n- 它是一个全帧压缩编码帧。它将全帧图像信息进行JPEG压缩编码及传输;\n- 解码时仅用I帧的数据就可重构完整图像;\n- I帧描述了图像背景和运动主体的详情;\n- I帧不需要参考其他画面而生成;\n- I帧是P帧和B帧的参考帧(其质量直接影响到同组中以后各帧的质量);\n- I帧是帧组GOP的基础帧(第一帧),在一组中只有一个I帧;\n- I帧不需要考虑运动矢量;\n- I帧所占数据的信息量比较大。\n{% endnote %}\n\n2. P帧\n   P帧:即Predictive-coded Picture（前向预测编码图像帧）。P帧表示的是这一帧跟之前的一个关键帧（或P帧）的差别，解码时需要用之前缓存的画面叠加上本帧定义的差别，生成最终画面。（也就是差别帧，P帧没有完整画面数据，只有与前一帧的画面差别的数据）\n   **P帧是以I帧为参考帧,在I帧中找出P帧“某点”的预测值和运动矢量,取预测差值和运动矢量 (MV) 一起传送。在接收端根据运动矢量从I帧中找出P帧“某点”的预测值并与差值相加以得到P帧“某点”样值,从而可得到完整的P帧。**\n   把编码时候记录变化，解码时再预测回去\n   ![核心](https://image.aruoshui.fun/i/2025/01/02/o17bqj-0.webp)\n    {% note info flat %}\n    解码时必须将I帧中的预测值与预测误差求和后才能重构完整的P帧图像;\n    P帧属于前向预测的帧间编码。它只参考前面最靠近它的I帧或P帧;\n    由于是差值传送,P帧的压缩比较高。\n    **P帧是参考帧,它可能造成解码错误的扩散;**\n    {% endnote %}\n\n3. B帧\n   B帧:即Bidirectionally predicted picture（双向预测编码图像帧）。  \n   B帧是双向差别帧，也就是B帧记录的是本帧与前后帧的差别，换言之，要解码B帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是解码时CPU会比较累。\n   {% note info flat %}\n    B帧是由前面的I或P帧和后面的P帧来进行预测的;\n    B帧传送的是它与前面的I帧或P帧和后面的P帧之间的预测误差及运动矢量;\n    B帧是双向预测编码帧;\n    B帧压缩比最高,因为它只反映丙参考帧间运动主体的变化情况,预测比较准确;\n    B帧不是参考帧,不会造成解码错误的扩散\n   {% endnote %}\n  \n   **为什么需要B帧**\n   I和P的解码算法比较简单，资源占用也比较少，I只要自己完成就行了，P呢，也只需要解码器把前一个画面缓存一下，遇到P时就使用之前缓存的画面就好了，如果视频流只有I和P，解码器可以不管后面的数据，边读边解码，线性前进，大家很舒服。那么为什么还要引入B帧？\n\n   网络上的电影很多都采用了B帧，因为B帧记录的是前后帧的差别，比P帧能节约更多的空间，但这样一来，文件小了，解码器就麻烦了，因为在解码时，不仅要用之前缓存的画面，还要知道下一个I或者P的画面（也就是说要预读预解码），而且，B帧不能简单地丢掉，因为B帧其实也包含了画面信息，如果简单丢掉，并用之前的画面简单重复，就会造成画面卡（其实就是丢帧了），并且由于网络上的电影为了节约空间，往往使用相当多的B帧，B帧用的多，对不支持B帧的播放器就造成更大的困扰，画面也就越卡。\n\n4. 帧间关系\n   ![](https://image.aruoshui.fun/i/2025/01/02/ovg0wy-0.webp)\n\n## GOP\nGOP即每一组IPB帧的序列包含了多少帧，换句话说就是一个I帧之后多少帧才会出现下一个I帧\n**GOP越大，B和P帧越多，视频质量越高**，压缩率上去了，更多的闲置码率去提升质量\n\n\n# H.265\n是为了应对更高分辨率视频（如4K、8K）的需求而开发的。它的主要优势在于其更高的压缩效率，相比H.264，它能够在保持相同视频质量的情况下，将视频数据量减少大约30% - 50%。- 例如，一个原本大小为 1GB 的 H.264 编码的 1080P 视频，若采用 H.265 进行编码，其文件大小可能会缩减至 500MB - 700MB 左右。这种高效的压缩能力使得 H.265 在高清和超高清视频的存储与传输方面展现出了巨大的优势，特别是在网络带宽资源紧张或者存储空间有限的云桌面应用场景中。- 再比如，在云桌面远程办公场景中，用户需要访问存储在云端的高清视频资料，H.265 编码可以让视频更快地加载和播放，减少等待时间，提高工作效率。\n\n相同的视频H265编码的文件会比H264编码的文件小很多，一些时候甚至接近50%。\n\n所以理论上，在相同带宽的前提下，H265的在线视频、直播流会拥有更高的画质，相同画质的情况下，H265也能更节省带宽/流量。\n\n但这是建立在编码、解码计算量为代价的，也就是说，播放H265视频，会比H264视频更消耗性能。\n\n这是H264、H265最大的区别，H265比H264拥有压缩率更高的压缩算法。但同时，也损耗更多的性能，H264、H265的选择，更多是根据实际场景下，容量、带宽对比用户、服务器性能，哪个更为重要的考量。\n\n\n\n\n\n\n# 参考文献\n{% span center logo large, 历史上的今天 %}\n1. 1475年：意大利文艺复兴时期的雕塑家米开朗基罗{% referto '[1]','米开朗基罗' %}诞生。他是文艺复兴时期最重要的艺术家之一，作品包括《大卫像》和《圣母玛利亚》等。\n2. 1899年：美国发明家、电影制片人威廉·赛勒斯·福克斯{% referto '[2]','电影制片人威廉·赛勒斯·福克斯' %}诞生。他是电影行业的先驱，创立了20世纪福克斯影业公司。\n3. 1974年：计算机科学家维特·柏恩斯·李发表了有关万维网{% referto '[3]','万维网的提案' %}的提案，奠定了互联网发展的基础。\n4.  1998年：谷歌公司成立，创始人拉里·佩奇和谢尔盖·布林将互联网搜索引擎{% referto '[4]','谷歌搜索引擎的历史' %}带入新的高度，成为全球最大的搜索引擎之一。\n5. 2007年：苹果公司推出首款iPhone{% referto '[5]','首款iPhone手机' %}，引领了智能手机革命，改变了人们的通讯和生活方式。\n\n{% referfrom '[1]','米开朗基罗','https://en.wikipedia.org/wiki/Michelangelo' %}\n{% referfrom '[2]','电影制片人威廉·赛勒斯·福克斯','https://en.wikipedia.org/wiki/William_Fox_(producer)' %}\n{% referfrom '[3]','万维网的提案','https://en.wikipedia.org/wiki/Tim_Berners-Lee' %}\n{% referfrom '[4]','谷歌搜索引擎的历史','https://en.wikipedia.org/wiki/History_of_Google' %}\n{% referfrom '[5]','首款iPhone手机','https://en.wikipedia.org/wiki/IPhone_(1st_generation)' %}\n\n1. [1]徐瑶.基于H.264的视频压缩技术及其在视频监控系统中的应用[D].安徽大学,2014.\n\n","slug":"视频编码技术","published":1,"updated":"2025-01-02T07:33:33.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io8002vmktte194c5ru","content":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"h.264基础解析\" href=\"https://blog.csdn.net/weixin_60610210/article/details/144188041\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">h.264基础解析</p><p class=\"url\">https://blog.csdn.net/weixin_60610210/article/details/144188041</p></div></a></div> \n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=37424012&bvid=BV1nt411Q7S6&cid=65779111&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<div class=\"note flat\"><p>默认 提示块标签</p>\n</div>\n<div class=\"note default flat\"><p>default 提示块标签</p>\n</div>\n<div class=\"note primary flat\"><p>primary 提示块标签</p>\n</div>\n<div class=\"note success flat\"><p>success 提示块标签</p>\n</div>\n<div class=\"note info flat\"><p>info 提示块标签</p>\n</div>\n<div class=\"note warning flat\"><p>warning 提示块标签</p>\n</div>\n<div class=\"note danger flat\"><p>danger 提示块标签</p>\n</div>\n<h1>视频编码技术</h1>\n<p>所谓视频编码方式就是指通过压缩技术，将原始视频格式的文件转换成另一种视频格式文件的方式。视频流传输中最为重要的编解码标准有国际电联的H.261、H.263、H.264，运动静止图像专家组的M-JPEG和国际标准化组织运动图像专家组的MPEG系列标准，此外在互联网上被广泛应用的还有Real-Networks的RealVideo、微软公司的WMV以及Apple公司的QuickTime等。</p>\n<h1>为什么会有视频编解码技术</h1>\n<p>  通常视频文件都非常庞大，如果直接存储或者传输，那么对内存大小和传输速度的要求将会变的非常高，进而降低用户的体验，也不利于整个生态的发展。<br>\n  因此为了解决上述问题，才有了视频编解码技术，其通过一些技巧，对视频大小进行压缩，例如删除重复信息、利用相似图片等，将视频数据压缩成更小的体积。</p>\n<div class=\"note info flat\"><p>  如果我不使用任何视频编码技术，我现在想存储1080p 60fps的一帧画面，我需要多大的存储空间：</p>\n<p>$分辨率为1080p，即1920 \\times 1080像素。$<br>\n$每帧的像素数为： 1920 \\times 1080 = 2,073,600 \\text{ 像素}$<br>\n$通常每个像素使用24位色深，即每个像素占用3字节（24位 = 3字节）。$<br>\n$\\text{存储空间} = \\text{像素数} \\times \\text{每个像素的字节数}$<br>\n$\\text{存储空间} = 2,073,600 \\times 3 , \\text{字节} = 6,220,800 , \\text{字节}$<br>\n$将字节转换为MB（1MB = 1024 × 1024字节）：$<br>\n$\\text{存储空间} = \\frac{6,220,800}{1024 \\times 1024} \\approx 5.94 , \\text{MB}$<br>\n$\\text{一秒的视频} = 5.94 , \\text{MB} \\times 60 = 356.4 , \\text{MB} $</p>\n</div>\n<h1>压缩什么</h1>\n<p>压缩之所以可能，是因为存在冗余数据。视频序列帧图像的冗余数据主要有：</p>\n<ol>\n<li>空间冗余：同一个物体表面上采样点的颜色，存在空间连续性，是相同或相近的。</li>\n<li>时间冗余：连续画面之间存在相关性，例如两人在房间里聊天，背景没有变化，人也只有位置和动作的变化。</li>\n<li>结构冗余：某些结构是简单图像模式的重复，如蜂窝，方格地板。</li>\n<li>知识冗余：某些图像的理解，跟知识有相关性。如人脸有固定的结构，包含眼、鼻子、嘴巴，按一定位置排列。可以对具备固定结构的图像元素，构造模型，结合图像库，只需要几个参数就可以表征。</li>\n<li>视觉冗余：人眼对图像场的敏感性是非均匀和非线性的。对色度相对不敏感，对亮度更敏感。在高亮度区，人眼对亮度变化敏感度下降。对物体边缘敏感，对内部区域不敏感。可以根据这些视觉特性，对图像信息进行取舍。</li>\n</ol>\n<h1>码率</h1>\n<p>播放一段视频每秒所需的数据量就是它的 Bit rate 比特率（即常说的 码率）；</p>\n<ol>\n<li>恒定码率（CBR）<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/p1niwf-0.webp\" alt=\"\"></li>\n<li>可变码率（VBR）<br>\n![]<a href=\"https://image.aruoshui.fun/i/2025/01/02/p3sn21-0.webp\">https://image.aruoshui.fun/i/2025/01/02/p3sn21-0.webp</a></li>\n<li>固定质量模式（CRF）<br>\n![]<a href=\"https://image.aruoshui.fun/i/2025/01/02/p5bnha-0.webp\">https://image.aruoshui.fun/i/2025/01/02/p5bnha-0.webp</a><br>\n在没有码率限制的情况下首选</li>\n<li>平均码率（ABR）<br>\n相当于码率波动更小的VBR</li>\n</ol>\n<h1>H.264</h1>\n<p>H.264是由ITU-T Video Coding Experts Group（视频编码专家组）和ISO/IEC Moving Picture Experts Group（运动图像专家组）联合制定的标准，属于视频压缩领域的经典编码标准。自2003年推出以来，H.264已经成为广泛使用的视频压缩标准，特别是在视频会议、流媒体、蓝光光盘、YouTube和直播等领域。</p>\n<h2 id=\"核心算法\">核心算法</h2>\n<p>  H264采用的核心算法是<strong>帧内压缩</strong>和<strong>帧间压缩</strong>.</p>\n<ol>\n<li>\n<p>帧内（Intraframe）压缩也称为空间压缩（Spatialcompression）。<br>\n当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。帧内一般采用有损压缩算法，由于帧内压缩是编码一个完整的图像，所以可以独立的解码、显示。帧内压缩一般达不到很高的压缩，跟编码jpeg差不多。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/nnlafy-0.webp\" alt=\"\"></p>\n</li>\n<li>\n<p>帧间（Interframe）压缩的原理是：相邻几帧的数据有很大的相关性，或者说前后两帧信息变化很小的特点。也即连续的视频其相邻帧之间具有冗余信息,根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。<br>\n帧间压缩也称为时间压缩（Temporalcompression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的。帧差值（Framedifferencing）算法是一种典型的时间压缩法，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/no7ahj-0.webp\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"具体解释\">具体解释</h2>\n<p>在H.264中，帧内压缩是生成I帧的算法，帧间压缩是生成B帧和P帧的算法。</p>\n<ol>\n<li>I帧<br>\nI 帧:即Intra-coded picture（帧内编码图像帧），I帧表示关键帧，你可以理解为这一帧画面的完整保留；解码时只需要本帧数据就可以完成（因为包含完整画面）。</li>\n</ol>\n<div class=\"note info flat\"><ul>\n<li>它是一个全帧压缩编码帧。它将全帧图像信息进行JPEG压缩编码及传输;</li>\n<li>解码时仅用I帧的数据就可重构完整图像;</li>\n<li>I帧描述了图像背景和运动主体的详情;</li>\n<li>I帧不需要参考其他画面而生成;</li>\n<li>I帧是P帧和B帧的参考帧(其质量直接影响到同组中以后各帧的质量);</li>\n<li>I帧是帧组GOP的基础帧(第一帧),在一组中只有一个I帧;</li>\n<li>I帧不需要考虑运动矢量;</li>\n<li>I帧所占数据的信息量比较大。</li>\n</ul>\n</div>\n<ol start=\"2\">\n<li>\n<p>P帧<br>\nP帧:即Predictive-coded Picture（前向预测编码图像帧）。P帧表示的是这一帧跟之前的一个关键帧（或P帧）的差别，解码时需要用之前缓存的画面叠加上本帧定义的差别，生成最终画面。（也就是差别帧，P帧没有完整画面数据，只有与前一帧的画面差别的数据）<br>\n<strong>P帧是以I帧为参考帧,在I帧中找出P帧“某点”的预测值和运动矢量,取预测差值和运动矢量 (MV) 一起传送。在接收端根据运动矢量从I帧中找出P帧“某点”的预测值并与差值相加以得到P帧“某点”样值,从而可得到完整的P帧。</strong><br>\n把编码时候记录变化，解码时再预测回去<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/o17bqj-0.webp\" alt=\"核心\"></p>\n <div class=\"note info flat\"><p>解码时必须将I帧中的预测值与预测误差求和后才能重构完整的P帧图像;<br>\nP帧属于前向预测的帧间编码。它只参考前面最靠近它的I帧或P帧;<br>\n由于是差值传送,P帧的压缩比较高。<br>\n<strong>P帧是参考帧,它可能造成解码错误的扩散;</strong></p>\n</div>\n</li>\n<li>\n<p>B帧<br>\nB帧:即Bidirectionally predicted picture（双向预测编码图像帧）。<br>\nB帧是双向差别帧，也就是B帧记录的是本帧与前后帧的差别，换言之，要解码B帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是解码时CPU会比较累。</p>\n<div class=\"note info flat\"><p>B帧是由前面的I或P帧和后面的P帧来进行预测的;<br>\nB帧传送的是它与前面的I帧或P帧和后面的P帧之间的预测误差及运动矢量;<br>\nB帧是双向预测编码帧;<br>\nB帧压缩比最高,因为它只反映丙参考帧间运动主体的变化情况,预测比较准确;<br>\nB帧不是参考帧,不会造成解码错误的扩散</p>\n</div>\n<p><strong>为什么需要B帧</strong><br>\nI和P的解码算法比较简单，资源占用也比较少，I只要自己完成就行了，P呢，也只需要解码器把前一个画面缓存一下，遇到P时就使用之前缓存的画面就好了，如果视频流只有I和P，解码器可以不管后面的数据，边读边解码，线性前进，大家很舒服。那么为什么还要引入B帧？</p>\n<p>网络上的电影很多都采用了B帧，因为B帧记录的是前后帧的差别，比P帧能节约更多的空间，但这样一来，文件小了，解码器就麻烦了，因为在解码时，不仅要用之前缓存的画面，还要知道下一个I或者P的画面（也就是说要预读预解码），而且，B帧不能简单地丢掉，因为B帧其实也包含了画面信息，如果简单丢掉，并用之前的画面简单重复，就会造成画面卡（其实就是丢帧了），并且由于网络上的电影为了节约空间，往往使用相当多的B帧，B帧用的多，对不支持B帧的播放器就造成更大的困扰，画面也就越卡。</p>\n</li>\n<li>\n<p>帧间关系<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/ovg0wy-0.webp\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"GOP\">GOP</h2>\n<p>GOP即每一组IPB帧的序列包含了多少帧，换句话说就是一个I帧之后多少帧才会出现下一个I帧<br>\n<strong>GOP越大，B和P帧越多，视频质量越高</strong>，压缩率上去了，更多的闲置码率去提升质量</p>\n<h1>H.265</h1>\n<p>是为了应对更高分辨率视频（如4K、8K）的需求而开发的。它的主要优势在于其更高的压缩效率，相比H.264，它能够在保持相同视频质量的情况下，将视频数据量减少大约30% - 50%。- 例如，一个原本大小为 1GB 的 H.264 编码的 1080P 视频，若采用 H.265 进行编码，其文件大小可能会缩减至 500MB - 700MB 左右。这种高效的压缩能力使得 H.265 在高清和超高清视频的存储与传输方面展现出了巨大的优势，特别是在网络带宽资源紧张或者存储空间有限的云桌面应用场景中。- 再比如，在云桌面远程办公场景中，用户需要访问存储在云端的高清视频资料，H.265 编码可以让视频更快地加载和播放，减少等待时间，提高工作效率。</p>\n<p>相同的视频H265编码的文件会比H264编码的文件小很多，一些时候甚至接近50%。</p>\n<p>所以理论上，在相同带宽的前提下，H265的在线视频、直播流会拥有更高的画质，相同画质的情况下，H265也能更节省带宽/流量。</p>\n<p>但这是建立在编码、解码计算量为代价的，也就是说，播放H265视频，会比H264视频更消耗性能。</p>\n<p>这是H264、H265最大的区别，H265比H264拥有压缩率更高的压缩算法。但同时，也损耗更多的性能，H264、H265的选择，更多是根据实际场景下，容量、带宽对比用户、服务器性能，哪个更为重要的考量。</p>\n<h1>参考文献</h1>\n<span class='p center logo large'>历史上的今天</span>\n<ol>\n<li>1475年：意大利文艺复兴时期的雕塑家米开朗基罗<span class=\"hidden-anchor\" id=\"referto_[1]\"></span><sup class=\"reference\"><a href=\"#referfrom_[1]\">[1]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">米开朗基罗</span><span class=\"reference-title\">参考资料</span></span></span>诞生。他是文艺复兴时期最重要的艺术家之一，作品包括《大卫像》和《圣母玛利亚》等。</li>\n<li>1899年：美国发明家、电影制片人威廉·赛勒斯·福克斯<span class=\"hidden-anchor\" id=\"referto_[2]\"></span><sup class=\"reference\"><a href=\"#referfrom_[2]\">[2]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">电影制片人威廉·赛勒斯·福克斯</span><span class=\"reference-title\">参考资料</span></span></span>诞生。他是电影行业的先驱，创立了20世纪福克斯影业公司。</li>\n<li>1974年：计算机科学家维特·柏恩斯·李发表了有关万维网<span class=\"hidden-anchor\" id=\"referto_[3]\"></span><sup class=\"reference\"><a href=\"#referfrom_[3]\">[3]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">万维网的提案</span><span class=\"reference-title\">参考资料</span></span></span>的提案，奠定了互联网发展的基础。</li>\n<li>1998年：谷歌公司成立，创始人拉里·佩奇和谢尔盖·布林将互联网搜索引擎<span class=\"hidden-anchor\" id=\"referto_[4]\"></span><sup class=\"reference\"><a href=\"#referfrom_[4]\">[4]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">谷歌搜索引擎的历史</span><span class=\"reference-title\">参考资料</span></span></span>带入新的高度，成为全球最大的搜索引擎之一。</li>\n<li>2007年：苹果公司推出首款iPhone<span class=\"hidden-anchor\" id=\"referto_[5]\"></span><sup class=\"reference\"><a href=\"#referfrom_[5]\">[5]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">首款iPhone手机</span><span class=\"reference-title\">参考资料</span></span></span>，引领了智能手机革命，改变了人们的通讯和生活方式。</li>\n</ol>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[1]\"></span><a class=\"reference-anchor\" href=\"#referto_[1]\">[1]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/Michelangelo\">米开朗基罗</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[2]\"></span><a class=\"reference-anchor\" href=\"#referto_[2]\">[2]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/William_Fox_(producer)\">电影制片人威廉·赛勒斯·福克斯</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[3]\"></span><a class=\"reference-anchor\" href=\"#referto_[3]\">[3]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/Tim_Berners-Lee\">万维网的提案</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[4]\"></span><a class=\"reference-anchor\" href=\"#referto_[4]\">[4]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/History_of_Google\">谷歌搜索引擎的历史</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[5]\"></span><a class=\"reference-anchor\" href=\"#referto_[5]\">[5]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/IPhone_(1st_generation)\">首款iPhone手机</a></div>\n<ol>\n<li>[1]徐瑶.基于H.264的视频压缩技术及其在视频监控系统中的应用[D].安徽大学,2014.</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1>参考文章</h1>\n<div class=\"tag link\"><a class=\"link-card\" title=\"h.264基础解析\" href=\"https://blog.csdn.net/weixin_60610210/article/details/144188041\"><div class=\"left\"><img src=\"https://image.aruoshui.fun/i/2025/01/02/ni2zi4-0.webp\"/></div><div class=\"right\"><p class=\"text\">h.264基础解析</p><p class=\"url\">https://blog.csdn.net/weixin_60610210/article/details/144188041</p></div></a></div> \n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=37424012&bvid=BV1nt411Q7S6&cid=65779111&p=1\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n<div class=\"note flat\"><p>默认 提示块标签</p>\n</div>\n<div class=\"note default flat\"><p>default 提示块标签</p>\n</div>\n<div class=\"note primary flat\"><p>primary 提示块标签</p>\n</div>\n<div class=\"note success flat\"><p>success 提示块标签</p>\n</div>\n<div class=\"note info flat\"><p>info 提示块标签</p>\n</div>\n<div class=\"note warning flat\"><p>warning 提示块标签</p>\n</div>\n<div class=\"note danger flat\"><p>danger 提示块标签</p>\n</div>\n<h1>视频编码技术</h1>\n<p>所谓视频编码方式就是指通过压缩技术，将原始视频格式的文件转换成另一种视频格式文件的方式。视频流传输中最为重要的编解码标准有国际电联的H.261、H.263、H.264，运动静止图像专家组的M-JPEG和国际标准化组织运动图像专家组的MPEG系列标准，此外在互联网上被广泛应用的还有Real-Networks的RealVideo、微软公司的WMV以及Apple公司的QuickTime等。</p>\n<h1>为什么会有视频编解码技术</h1>\n<p>  通常视频文件都非常庞大，如果直接存储或者传输，那么对内存大小和传输速度的要求将会变的非常高，进而降低用户的体验，也不利于整个生态的发展。<br>\n  因此为了解决上述问题，才有了视频编解码技术，其通过一些技巧，对视频大小进行压缩，例如删除重复信息、利用相似图片等，将视频数据压缩成更小的体积。</p>\n<div class=\"note info flat\"><p>  如果我不使用任何视频编码技术，我现在想存储1080p 60fps的一帧画面，我需要多大的存储空间：</p>\n<p>$分辨率为1080p，即1920 \\times 1080像素。$<br>\n$每帧的像素数为： 1920 \\times 1080 = 2,073,600 \\text{ 像素}$<br>\n$通常每个像素使用24位色深，即每个像素占用3字节（24位 = 3字节）。$<br>\n$\\text{存储空间} = \\text{像素数} \\times \\text{每个像素的字节数}$<br>\n$\\text{存储空间} = 2,073,600 \\times 3 , \\text{字节} = 6,220,800 , \\text{字节}$<br>\n$将字节转换为MB（1MB = 1024 × 1024字节）：$<br>\n$\\text{存储空间} = \\frac{6,220,800}{1024 \\times 1024} \\approx 5.94 , \\text{MB}$<br>\n$\\text{一秒的视频} = 5.94 , \\text{MB} \\times 60 = 356.4 , \\text{MB} $</p>\n</div>\n<h1>压缩什么</h1>\n<p>压缩之所以可能，是因为存在冗余数据。视频序列帧图像的冗余数据主要有：</p>\n<ol>\n<li>空间冗余：同一个物体表面上采样点的颜色，存在空间连续性，是相同或相近的。</li>\n<li>时间冗余：连续画面之间存在相关性，例如两人在房间里聊天，背景没有变化，人也只有位置和动作的变化。</li>\n<li>结构冗余：某些结构是简单图像模式的重复，如蜂窝，方格地板。</li>\n<li>知识冗余：某些图像的理解，跟知识有相关性。如人脸有固定的结构，包含眼、鼻子、嘴巴，按一定位置排列。可以对具备固定结构的图像元素，构造模型，结合图像库，只需要几个参数就可以表征。</li>\n<li>视觉冗余：人眼对图像场的敏感性是非均匀和非线性的。对色度相对不敏感，对亮度更敏感。在高亮度区，人眼对亮度变化敏感度下降。对物体边缘敏感，对内部区域不敏感。可以根据这些视觉特性，对图像信息进行取舍。</li>\n</ol>\n<h1>码率</h1>\n<p>播放一段视频每秒所需的数据量就是它的 Bit rate 比特率（即常说的 码率）；</p>\n<ol>\n<li>恒定码率（CBR）<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/p1niwf-0.webp\" alt=\"\"></li>\n<li>可变码率（VBR）<br>\n![]<a href=\"https://image.aruoshui.fun/i/2025/01/02/p3sn21-0.webp\">https://image.aruoshui.fun/i/2025/01/02/p3sn21-0.webp</a></li>\n<li>固定质量模式（CRF）<br>\n![]<a href=\"https://image.aruoshui.fun/i/2025/01/02/p5bnha-0.webp\">https://image.aruoshui.fun/i/2025/01/02/p5bnha-0.webp</a><br>\n在没有码率限制的情况下首选</li>\n<li>平均码率（ABR）<br>\n相当于码率波动更小的VBR</li>\n</ol>\n<h1>H.264</h1>\n<p>H.264是由ITU-T Video Coding Experts Group（视频编码专家组）和ISO/IEC Moving Picture Experts Group（运动图像专家组）联合制定的标准，属于视频压缩领域的经典编码标准。自2003年推出以来，H.264已经成为广泛使用的视频压缩标准，特别是在视频会议、流媒体、蓝光光盘、YouTube和直播等领域。</p>\n<h2 id=\"核心算法\">核心算法</h2>\n<p>  H264采用的核心算法是<strong>帧内压缩</strong>和<strong>帧间压缩</strong>.</p>\n<ol>\n<li>\n<p>帧内（Intraframe）压缩也称为空间压缩（Spatialcompression）。<br>\n当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。帧内一般采用有损压缩算法，由于帧内压缩是编码一个完整的图像，所以可以独立的解码、显示。帧内压缩一般达不到很高的压缩，跟编码jpeg差不多。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/nnlafy-0.webp\" alt=\"\"></p>\n</li>\n<li>\n<p>帧间（Interframe）压缩的原理是：相邻几帧的数据有很大的相关性，或者说前后两帧信息变化很小的特点。也即连续的视频其相邻帧之间具有冗余信息,根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。<br>\n帧间压缩也称为时间压缩（Temporalcompression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的。帧差值（Framedifferencing）算法是一种典型的时间压缩法，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/no7ahj-0.webp\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"具体解释\">具体解释</h2>\n<p>在H.264中，帧内压缩是生成I帧的算法，帧间压缩是生成B帧和P帧的算法。</p>\n<ol>\n<li>I帧<br>\nI 帧:即Intra-coded picture（帧内编码图像帧），I帧表示关键帧，你可以理解为这一帧画面的完整保留；解码时只需要本帧数据就可以完成（因为包含完整画面）。</li>\n</ol>\n<div class=\"note info flat\"><ul>\n<li>它是一个全帧压缩编码帧。它将全帧图像信息进行JPEG压缩编码及传输;</li>\n<li>解码时仅用I帧的数据就可重构完整图像;</li>\n<li>I帧描述了图像背景和运动主体的详情;</li>\n<li>I帧不需要参考其他画面而生成;</li>\n<li>I帧是P帧和B帧的参考帧(其质量直接影响到同组中以后各帧的质量);</li>\n<li>I帧是帧组GOP的基础帧(第一帧),在一组中只有一个I帧;</li>\n<li>I帧不需要考虑运动矢量;</li>\n<li>I帧所占数据的信息量比较大。</li>\n</ul>\n</div>\n<ol start=\"2\">\n<li>\n<p>P帧<br>\nP帧:即Predictive-coded Picture（前向预测编码图像帧）。P帧表示的是这一帧跟之前的一个关键帧（或P帧）的差别，解码时需要用之前缓存的画面叠加上本帧定义的差别，生成最终画面。（也就是差别帧，P帧没有完整画面数据，只有与前一帧的画面差别的数据）<br>\n<strong>P帧是以I帧为参考帧,在I帧中找出P帧“某点”的预测值和运动矢量,取预测差值和运动矢量 (MV) 一起传送。在接收端根据运动矢量从I帧中找出P帧“某点”的预测值并与差值相加以得到P帧“某点”样值,从而可得到完整的P帧。</strong><br>\n把编码时候记录变化，解码时再预测回去<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/o17bqj-0.webp\" alt=\"核心\"></p>\n <div class=\"note info flat\"><p>解码时必须将I帧中的预测值与预测误差求和后才能重构完整的P帧图像;<br>\nP帧属于前向预测的帧间编码。它只参考前面最靠近它的I帧或P帧;<br>\n由于是差值传送,P帧的压缩比较高。<br>\n<strong>P帧是参考帧,它可能造成解码错误的扩散;</strong></p>\n</div>\n</li>\n<li>\n<p>B帧<br>\nB帧:即Bidirectionally predicted picture（双向预测编码图像帧）。<br>\nB帧是双向差别帧，也就是B帧记录的是本帧与前后帧的差别，换言之，要解码B帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是解码时CPU会比较累。</p>\n<div class=\"note info flat\"><p>B帧是由前面的I或P帧和后面的P帧来进行预测的;<br>\nB帧传送的是它与前面的I帧或P帧和后面的P帧之间的预测误差及运动矢量;<br>\nB帧是双向预测编码帧;<br>\nB帧压缩比最高,因为它只反映丙参考帧间运动主体的变化情况,预测比较准确;<br>\nB帧不是参考帧,不会造成解码错误的扩散</p>\n</div>\n<p><strong>为什么需要B帧</strong><br>\nI和P的解码算法比较简单，资源占用也比较少，I只要自己完成就行了，P呢，也只需要解码器把前一个画面缓存一下，遇到P时就使用之前缓存的画面就好了，如果视频流只有I和P，解码器可以不管后面的数据，边读边解码，线性前进，大家很舒服。那么为什么还要引入B帧？</p>\n<p>网络上的电影很多都采用了B帧，因为B帧记录的是前后帧的差别，比P帧能节约更多的空间，但这样一来，文件小了，解码器就麻烦了，因为在解码时，不仅要用之前缓存的画面，还要知道下一个I或者P的画面（也就是说要预读预解码），而且，B帧不能简单地丢掉，因为B帧其实也包含了画面信息，如果简单丢掉，并用之前的画面简单重复，就会造成画面卡（其实就是丢帧了），并且由于网络上的电影为了节约空间，往往使用相当多的B帧，B帧用的多，对不支持B帧的播放器就造成更大的困扰，画面也就越卡。</p>\n</li>\n<li>\n<p>帧间关系<br>\n<img src=\"https://image.aruoshui.fun/i/2025/01/02/ovg0wy-0.webp\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"GOP\">GOP</h2>\n<p>GOP即每一组IPB帧的序列包含了多少帧，换句话说就是一个I帧之后多少帧才会出现下一个I帧<br>\n<strong>GOP越大，B和P帧越多，视频质量越高</strong>，压缩率上去了，更多的闲置码率去提升质量</p>\n<h1>H.265</h1>\n<p>是为了应对更高分辨率视频（如4K、8K）的需求而开发的。它的主要优势在于其更高的压缩效率，相比H.264，它能够在保持相同视频质量的情况下，将视频数据量减少大约30% - 50%。- 例如，一个原本大小为 1GB 的 H.264 编码的 1080P 视频，若采用 H.265 进行编码，其文件大小可能会缩减至 500MB - 700MB 左右。这种高效的压缩能力使得 H.265 在高清和超高清视频的存储与传输方面展现出了巨大的优势，特别是在网络带宽资源紧张或者存储空间有限的云桌面应用场景中。- 再比如，在云桌面远程办公场景中，用户需要访问存储在云端的高清视频资料，H.265 编码可以让视频更快地加载和播放，减少等待时间，提高工作效率。</p>\n<p>相同的视频H265编码的文件会比H264编码的文件小很多，一些时候甚至接近50%。</p>\n<p>所以理论上，在相同带宽的前提下，H265的在线视频、直播流会拥有更高的画质，相同画质的情况下，H265也能更节省带宽/流量。</p>\n<p>但这是建立在编码、解码计算量为代价的，也就是说，播放H265视频，会比H264视频更消耗性能。</p>\n<p>这是H264、H265最大的区别，H265比H264拥有压缩率更高的压缩算法。但同时，也损耗更多的性能，H264、H265的选择，更多是根据实际场景下，容量、带宽对比用户、服务器性能，哪个更为重要的考量。</p>\n<h1>参考文献</h1>\n<span class='p center logo large'>历史上的今天</span>\n<ol>\n<li>1475年：意大利文艺复兴时期的雕塑家米开朗基罗<span class=\"hidden-anchor\" id=\"referto_[1]\"></span><sup class=\"reference\"><a href=\"#referfrom_[1]\">[1]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">米开朗基罗</span><span class=\"reference-title\">参考资料</span></span></span>诞生。他是文艺复兴时期最重要的艺术家之一，作品包括《大卫像》和《圣母玛利亚》等。</li>\n<li>1899年：美国发明家、电影制片人威廉·赛勒斯·福克斯<span class=\"hidden-anchor\" id=\"referto_[2]\"></span><sup class=\"reference\"><a href=\"#referfrom_[2]\">[2]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">电影制片人威廉·赛勒斯·福克斯</span><span class=\"reference-title\">参考资料</span></span></span>诞生。他是电影行业的先驱，创立了20世纪福克斯影业公司。</li>\n<li>1974年：计算机科学家维特·柏恩斯·李发表了有关万维网<span class=\"hidden-anchor\" id=\"referto_[3]\"></span><sup class=\"reference\"><a href=\"#referfrom_[3]\">[3]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">万维网的提案</span><span class=\"reference-title\">参考资料</span></span></span>的提案，奠定了互联网发展的基础。</li>\n<li>1998年：谷歌公司成立，创始人拉里·佩奇和谢尔盖·布林将互联网搜索引擎<span class=\"hidden-anchor\" id=\"referto_[4]\"></span><sup class=\"reference\"><a href=\"#referfrom_[4]\">[4]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">谷歌搜索引擎的历史</span><span class=\"reference-title\">参考资料</span></span></span>带入新的高度，成为全球最大的搜索引擎之一。</li>\n<li>2007年：苹果公司推出首款iPhone<span class=\"hidden-anchor\" id=\"referto_[5]\"></span><sup class=\"reference\"><a href=\"#referfrom_[5]\">[5]</a></sup><span class=\"reference-bubble\"><span class=\"reference-item\"><span class=\"reference-literature\">首款iPhone手机</span><span class=\"reference-title\">参考资料</span></span></span>，引领了智能手机革命，改变了人们的通讯和生活方式。</li>\n</ol>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[1]\"></span><a class=\"reference-anchor\" href=\"#referto_[1]\">[1]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/Michelangelo\">米开朗基罗</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[2]\"></span><a class=\"reference-anchor\" href=\"#referto_[2]\">[2]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/William_Fox_(producer)\">电影制片人威廉·赛勒斯·福克斯</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[3]\"></span><a class=\"reference-anchor\" href=\"#referto_[3]\">[3]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/Tim_Berners-Lee\">万维网的提案</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[4]\"></span><a class=\"reference-anchor\" href=\"#referto_[4]\">[4]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/History_of_Google\">谷歌搜索引擎的历史</a></div>\n<div class=\"reference-source\"><span class=\"hidden-anchor\" id=\"referfrom_[5]\"></span><a class=\"reference-anchor\" href=\"#referto_[5]\">[5]<div class=\"reference-anchor-up fa-solid fa-angles-up\"></div></a><a class=\"reference-link\" href=\"https://en.wikipedia.org/wiki/IPhone_(1st_generation)\">首款iPhone手机</a></div>\n<ol>\n<li>[1]徐瑶.基于H.264的视频压缩技术及其在视频监控系统中的应用[D].安徽大学,2014.</li>\n</ol>\n"},{"title":"语法","description":"本文汇总Markdown格式在网页端的渲染效果，可作为文档进行查询","mathjax":true,"abbrlink":13495,"swiper_index":2,"date":"2024-01-31T02:28:48.000Z","_content":"\n\n# 1.Markdown语法自带格式\n<!-- more -->\n{% note info flat %}参考：[Markdown语法图文全面详解(10分钟学会)](https://blog.csdn.net/u014061630/article/details/81359144){% endnote %}\n\n{% note warning flat %}注意：此页面偶尔会存在CSS冲突问题!{% endnote %}\n\n## 1.1 代码块\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```shell\n\\```shell\n# VSCode终端\nhexo clean; hexo s\nhexo clean; hexo g; hexo d\ngit add .; git commit -m \"npm publish\"; npm version patch; \ngit push\n\n# Cmder终端\nhexo clean && hexo s\nhexo clean && hexo g && hexo d\ngit add . && git commit -m \"npm publish\" && npm version patch\ngit push\n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n```shell\n# VSCode终端\nhexo clean; hexo s\nhexo clean; hexo g; hexo d\ngit add .; git commit -m \"npm publish\"; npm version patch; \ngit push\n\n# Cmder终端\nhexo clean && hexo s\nhexo clean && hexo g && hexo d\ngit add . && git commit -m \"npm publish\" && npm version patch\ngit push\n```\n<!-- endtab -->\n\n{% endtabs %}\n\n## 1.2 多级标题\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n见本文章标题!\n<!-- endtab -->\n\n{% endtabs %}\n\n## 1.3 文字样式\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n<u>下划线演示</u>\n\n文字**加粗**演示\n\n文字*斜体*演示\n\n文本`高亮`演示\n\n文本~~删除~~线演示\n\n<font size = 5>5号字</font>\n<font face=\"黑体\">黑体</font>\n<font color=blue>蓝色</font>\n\n<table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table>\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n<u>下划线演示</u>\n\n文字**加粗**演示\n\n文字*斜体*演示\n\n文本`高亮`演示\n\n文本~~删除~~线演示\n\n<font size = 5>5号字</font>\n<font face=\"黑体\">黑体</font>\n<font color=blue>蓝色</font>\n\n<table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table>\n<!-- endtab -->\n\n{% endtabs %}\n\n{% note info flat %}上述要点可参考:[【Markdown语法】字体颜色大小及文字底色设置](https://blog.csdn.net/qq_43732429/article/details/108034518)\n{% endnote %}\n\n\n## 1.4 引用\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n>  Java\n> 二级引用演示\n> MySQL\n> >外键\n> >\n> >事务\n> >\n> >**行级锁**(引用内部一样可以用格式)\n> \n> ....\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n>  Java\n> 二级引用演示\n> MySQL\n> >外键\n> >\n> >事务\n> >\n> >**行级锁**(引用内部一样可以用格式)\n> \n> ....\n<!-- endtab -->\n\n{% endtabs %}\n\n## 1.6 列表(*,+,-跟空格都可以)\n### 1.6.1 无序列表\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n* Java\n* Python\n* ...\n\n+ Java\n+ Python\n+ ...\n\n- Java\n- Python\n- ...\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n* Java\n* Python\n* ...\n\n+ Java\n+ Python\n+ ...\n\n- Java\n- Python\n- ...\n<!-- endtab -->\n\n{% endtabs %}\n\n### 1.6.2 有序列表\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n# 注意后面有空格\n1. \n2. \n3. \n4. \n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1. \n2. \n3. \n4. \n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 1.7 图片\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n# 本地图片\n<img src=\"/assets/pusheencode.webp\" alt=\"示例图片\" style=\"zoom:50%;\" />\n# 在线图片\n![code](https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png)\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n本地图片:\n<img src=\"/assets/pusheencode.webp\" alt=\"示例图片\" style=\"zoom:50%;\" />\n在线图片:\n![code](https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png)\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 1.8 表格\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n| 项目标号 | 资金     | 备注 |\n| -------- | -------- | ---- |\n| 1        | 100，000 | 无   |\n| 2        | 200，000 | 无   |\n| 3        | 300,600  | 重要 |\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n| 项目标号 | 资金     | 备注 |\n| -------- | -------- | ---- |\n| 1        | 100，000 | 无   |\n| 2        | 200，000 | 无   |\n| 3        | 300,600  | 重要 |\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 1.9 公式\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n$\\lim_{x \\to \\infty}f(x)$\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$\\lim_{x \\to \\infty}f(x)$\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n","source":"_posts/语法.md","raw":"---\ntitle: 语法\ndescription: 本文汇总Markdown格式在网页端的渲染效果，可作为文档进行查询\n\ntags:\n  - Markdown\n  - 外挂标签\ncategories:\n  - 演示\nmathjax: true\nabbrlink: 13495\n\nswiper_index: 2 #置顶轮播图顺序，非负整数，数字越大越靠前\ndate: 2024-1-31 10:28:48\n---\n\n\n# 1.Markdown语法自带格式\n<!-- more -->\n{% note info flat %}参考：[Markdown语法图文全面详解(10分钟学会)](https://blog.csdn.net/u014061630/article/details/81359144){% endnote %}\n\n{% note warning flat %}注意：此页面偶尔会存在CSS冲突问题!{% endnote %}\n\n## 1.1 代码块\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```shell\n\\```shell\n# VSCode终端\nhexo clean; hexo s\nhexo clean; hexo g; hexo d\ngit add .; git commit -m \"npm publish\"; npm version patch; \ngit push\n\n# Cmder终端\nhexo clean && hexo s\nhexo clean && hexo g && hexo d\ngit add . && git commit -m \"npm publish\" && npm version patch\ngit push\n\\```\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n```shell\n# VSCode终端\nhexo clean; hexo s\nhexo clean; hexo g; hexo d\ngit add .; git commit -m \"npm publish\"; npm version patch; \ngit push\n\n# Cmder终端\nhexo clean && hexo s\nhexo clean && hexo g && hexo d\ngit add . && git commit -m \"npm publish\" && npm version patch\ngit push\n```\n<!-- endtab -->\n\n{% endtabs %}\n\n## 1.2 多级标题\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```md\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n```\n\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n见本文章标题!\n<!-- endtab -->\n\n{% endtabs %}\n\n## 1.3 文字样式\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n<u>下划线演示</u>\n\n文字**加粗**演示\n\n文字*斜体*演示\n\n文本`高亮`演示\n\n文本~~删除~~线演示\n\n<font size = 5>5号字</font>\n<font face=\"黑体\">黑体</font>\n<font color=blue>蓝色</font>\n\n<table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table>\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n<u>下划线演示</u>\n\n文字**加粗**演示\n\n文字*斜体*演示\n\n文本`高亮`演示\n\n文本~~删除~~线演示\n\n<font size = 5>5号字</font>\n<font face=\"黑体\">黑体</font>\n<font color=blue>蓝色</font>\n\n<table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table>\n<!-- endtab -->\n\n{% endtabs %}\n\n{% note info flat %}上述要点可参考:[【Markdown语法】字体颜色大小及文字底色设置](https://blog.csdn.net/qq_43732429/article/details/108034518)\n{% endnote %}\n\n\n## 1.4 引用\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n>  Java\n> 二级引用演示\n> MySQL\n> >外键\n> >\n> >事务\n> >\n> >**行级锁**(引用内部一样可以用格式)\n> \n> ....\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n>  Java\n> 二级引用演示\n> MySQL\n> >外键\n> >\n> >事务\n> >\n> >**行级锁**(引用内部一样可以用格式)\n> \n> ....\n<!-- endtab -->\n\n{% endtabs %}\n\n## 1.6 列表(*,+,-跟空格都可以)\n### 1.6.1 无序列表\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n* Java\n* Python\n* ...\n\n+ Java\n+ Python\n+ ...\n\n- Java\n- Python\n- ...\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n* Java\n* Python\n* ...\n\n+ Java\n+ Python\n+ ...\n\n- Java\n- Python\n- ...\n<!-- endtab -->\n\n{% endtabs %}\n\n### 1.6.2 有序列表\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n# 注意后面有空格\n1. \n2. \n3. \n4. \n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n1. \n2. \n3. \n4. \n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 1.7 图片\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n# 本地图片\n<img src=\"/assets/pusheencode.webp\" alt=\"示例图片\" style=\"zoom:50%;\" />\n# 在线图片\n![code](https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png)\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n本地图片:\n<img src=\"/assets/pusheencode.webp\" alt=\"示例图片\" style=\"zoom:50%;\" />\n在线图片:\n![code](https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png)\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 1.8 表格\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n| 项目标号 | 资金     | 备注 |\n| -------- | -------- | ---- |\n| 1        | 100，000 | 无   |\n| 2        | 200，000 | 无   |\n| 3        | 300,600  | 重要 |\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n| 项目标号 | 资金     | 备注 |\n| -------- | -------- | ---- |\n| 1        | 100，000 | 无   |\n| 2        | 200，000 | 无   |\n| 3        | 300,600  | 重要 |\n<!-- endtab -->\n\n{% endtabs %}\n\n\n## 1.9 公式\n\n{% tabs 分栏 %}\n\n<!-- tab 示例源码 -->\n```Markdown\n$\\lim_{x \\to \\infty}f(x)$\n```\n<!-- endtab -->\n\n<!-- tab 渲染演示 -->\n$\\lim_{x \\to \\infty}f(x)$\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n","slug":"语法","published":1,"updated":"2024-03-05T13:02:38.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6io8002xmkttao7g8g8b","content":"<h1>1.Markdown语法自带格式</h1>\n<span id=\"more\"></span>\n<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/u014061630/article/details/81359144\">Markdown语法图文全面详解(10分钟学会)</a></p>\n</div>\n<div class=\"note warning flat\"><p>注意：此页面偶尔会存在CSS冲突问题!</p>\n</div>\n<h2 id=\"1-1-代码块\">1.1 代码块</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\```shell</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">VSCode终端</span></span><br><span class=\"line\">hexo clean; hexo s</span><br><span class=\"line\">hexo clean; hexo g; hexo d</span><br><span class=\"line\">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class=\"line\">git push</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Cmder终端</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo s</span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class=\"line\">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class=\"line\">git push</span><br><span class=\"line\">\\```</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">VSCode终端</span></span><br><span class=\"line\">hexo clean; hexo s</span><br><span class=\"line\">hexo clean; hexo g; hexo d</span><br><span class=\"line\">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class=\"line\">git push</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Cmder终端</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo s</span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class=\"line\">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"1-2-多级标题\">1.2 多级标题</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># H1</span></span><br><span class=\"line\"><span class=\"section\">## H2</span></span><br><span class=\"line\"><span class=\"section\">### H3</span></span><br><span class=\"line\"><span class=\"section\">#### H4</span></span><br><span class=\"line\"><span class=\"section\">##### H5</span></span><br><span class=\"line\"><span class=\"section\">###### H6</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>见本文章标题!</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"1-3-文字样式\">1.3 文字样式</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span></span>下划线演示<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">文字<span class=\"strong\">**加粗**</span>演示</span><br><span class=\"line\"></span><br><span class=\"line\">文字<span class=\"emphasis\">*斜体*</span>演示</span><br><span class=\"line\"></span><br><span class=\"line\">文本<span class=\"code\">`高亮`</span>演示</span><br><span class=\"line\"></span><br><span class=\"line\">文本~~删除~~线演示</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">size</span> = <span class=\"string\">5</span>&gt;</span></span>5号字<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">face</span>=<span class=\"string\">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">blue</span>&gt;</span></span>蓝色<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">bgcolor</span>=<span class=\"string\">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p><u>下划线演示</u></p>\n<p>文字<strong>加粗</strong>演示</p>\n<p>文字<em>斜体</em>演示</p>\n<p>文本<code>高亮</code>演示</p>\n<p>文本<s>删除</s>线演示</p>\n<p><font size = 5>5号字</font><br>\n<font face=\"黑体\">黑体</font><br>\n<font color=blue>蓝色</font></p>\n<table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<div class=\"note info flat\"><p>上述要点可参考:<a href=\"https://blog.csdn.net/qq_43732429/article/details/108034518\">【Markdown语法】字体颜色大小及文字底色设置</a></p>\n</div>\n<h2 id=\"1-4-引用\">1.4 引用</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt;  Java</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 二级引用演示</span></span><br><span class=\"line\"><span class=\"quote\">&gt; MySQL</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt;外键</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt;</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt;事务</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt;</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt;<span class=\"strong\">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class=\"line\"><span class=\"quote\">&gt; </span></span><br><span class=\"line\"><span class=\"quote\">&gt; ....</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><blockquote>\n<p>Java<br>\n二级引用演示<br>\nMySQL</p>\n<blockquote>\n<p>外键</p>\n<p>事务</p>\n<p><strong>行级锁</strong>(引用内部一样可以用格式)</p>\n</blockquote>\n<p>…</p>\n</blockquote></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"1-6-列表-跟空格都可以\">1.6 列表(*,+,-跟空格都可以)</h2>\n<h3 id=\"1-6-1-无序列表\">1.6.1 无序列表</h3>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> Java</span><br><span class=\"line\"><span class=\"bullet\">*</span> Python</span><br><span class=\"line\"><span class=\"bullet\">*</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">+</span> Java</span><br><span class=\"line\"><span class=\"bullet\">+</span> Python</span><br><span class=\"line\"><span class=\"bullet\">+</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> Java</span><br><span class=\"line\"><span class=\"bullet\">-</span> Python</span><br><span class=\"line\"><span class=\"bullet\">-</span> ...</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ul>\n<li>Java</li>\n<li>Python</li>\n<li>…</li>\n</ul>\n<ul>\n<li>Java</li>\n<li>Python</li>\n<li>…</li>\n</ul>\n<ul>\n<li>Java</li>\n<li>Python</li>\n<li>…</li>\n</ul></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h3 id=\"1-6-2-有序列表\">1.6.2 有序列表</h3>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 注意后面有空格</span></span><br><span class=\"line\"><span class=\"bullet\">1.</span> </span><br><span class=\"line\"><span class=\"bullet\">2.</span> </span><br><span class=\"line\"><span class=\"bullet\">3.</span> </span><br><span class=\"line\"><span class=\"bullet\">4.</span> </span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li></li>\n<li></li>\n<li></li>\n<li></li>\n</ol></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"1-7-图片\">1.7 图片</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 本地图片</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/pusheencode.webp&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;示例图片&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"section\"># 在线图片</span></span><br><span class=\"line\">![<span class=\"string\">code</span>](<span class=\"link\">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>本地图片:<br>\n<img src=\"/assets/pusheencode.webp\" alt=\"示例图片\" style=\"zoom:50%;\" /><br>\n在线图片:<br>\n<img src=\"https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png\" alt=\"code\"></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"1-8-表格\">1.8 表格</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">| 项目标号 | 资金     | 备注 |</span><br><span class=\"line\">| -------- | -------- | ---- |</span><br><span class=\"line\">| 1        | 100，000 | 无   |</span><br><span class=\"line\">| 2        | 200，000 | 无   |</span><br><span class=\"line\">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><table>\n<thead>\n<tr>\n<th>项目标号</th>\n<th>资金</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>100，000</td>\n<td>无</td>\n</tr>\n<tr>\n<td>2</td>\n<td>200，000</td>\n<td>无</td>\n</tr>\n<tr>\n<td>3</td>\n<td>300,600</td>\n<td>重要</td>\n</tr>\n</tbody>\n</table></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"1-9-公式\">1.9 公式</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">$\\lim<span class=\"emphasis\">_&#123;x \\to \\infty&#125;f(x)$</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$\\lim_{x \\to \\infty}f(x)$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://image.aruoshui.fun/i/2024/12/31/vqt6nt-0.webp","cover_type":"img","excerpt":"<h1>1.Markdown语法自带格式</h1>","more":"<div class=\"note info flat\"><p>参考：<a href=\"https://blog.csdn.net/u014061630/article/details/81359144\">Markdown语法图文全面详解(10分钟学会)</a></p>\n</div>\n<div class=\"note warning flat\"><p>注意：此页面偶尔会存在CSS冲突问题!</p>\n</div>\n<h2 id=\"1-1-代码块\">1.1 代码块</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\```shell</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">VSCode终端</span></span><br><span class=\"line\">hexo clean; hexo s</span><br><span class=\"line\">hexo clean; hexo g; hexo d</span><br><span class=\"line\">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class=\"line\">git push</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Cmder终端</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo s</span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class=\"line\">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class=\"line\">git push</span><br><span class=\"line\">\\```</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">VSCode终端</span></span><br><span class=\"line\">hexo clean; hexo s</span><br><span class=\"line\">hexo clean; hexo g; hexo d</span><br><span class=\"line\">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class=\"line\">git push</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Cmder终端</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo s</span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class=\"line\">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"1-2-多级标题\">1.2 多级标题</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># H1</span></span><br><span class=\"line\"><span class=\"section\">## H2</span></span><br><span class=\"line\"><span class=\"section\">### H3</span></span><br><span class=\"line\"><span class=\"section\">#### H4</span></span><br><span class=\"line\"><span class=\"section\">##### H5</span></span><br><span class=\"line\"><span class=\"section\">###### H6</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>见本文章标题!</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"1-3-文字样式\">1.3 文字样式</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span></span>下划线演示<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">文字<span class=\"strong\">**加粗**</span>演示</span><br><span class=\"line\"></span><br><span class=\"line\">文字<span class=\"emphasis\">*斜体*</span>演示</span><br><span class=\"line\"></span><br><span class=\"line\">文本<span class=\"code\">`高亮`</span>演示</span><br><span class=\"line\"></span><br><span class=\"line\">文本~~删除~~线演示</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">size</span> = <span class=\"string\">5</span>&gt;</span></span>5号字<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">face</span>=<span class=\"string\">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">blue</span>&gt;</span></span>蓝色<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">bgcolor</span>=<span class=\"string\">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p><u>下划线演示</u></p>\n<p>文字<strong>加粗</strong>演示</p>\n<p>文字<em>斜体</em>演示</p>\n<p>文本<code>高亮</code>演示</p>\n<p>文本<s>删除</s>线演示</p>\n<p><font size = 5>5号字</font><br>\n<font face=\"黑体\">黑体</font><br>\n<font color=blue>蓝色</font></p>\n<table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<div class=\"note info flat\"><p>上述要点可参考:<a href=\"https://blog.csdn.net/qq_43732429/article/details/108034518\">【Markdown语法】字体颜色大小及文字底色设置</a></p>\n</div>\n<h2 id=\"1-4-引用\">1.4 引用</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt;  Java</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 二级引用演示</span></span><br><span class=\"line\"><span class=\"quote\">&gt; MySQL</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt;外键</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt;</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt;事务</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt;</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt;<span class=\"strong\">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class=\"line\"><span class=\"quote\">&gt; </span></span><br><span class=\"line\"><span class=\"quote\">&gt; ....</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><blockquote>\n<p>Java<br>\n二级引用演示<br>\nMySQL</p>\n<blockquote>\n<p>外键</p>\n<p>事务</p>\n<p><strong>行级锁</strong>(引用内部一样可以用格式)</p>\n</blockquote>\n<p>…</p>\n</blockquote></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"1-6-列表-跟空格都可以\">1.6 列表(*,+,-跟空格都可以)</h2>\n<h3 id=\"1-6-1-无序列表\">1.6.1 无序列表</h3>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> Java</span><br><span class=\"line\"><span class=\"bullet\">*</span> Python</span><br><span class=\"line\"><span class=\"bullet\">*</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">+</span> Java</span><br><span class=\"line\"><span class=\"bullet\">+</span> Python</span><br><span class=\"line\"><span class=\"bullet\">+</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> Java</span><br><span class=\"line\"><span class=\"bullet\">-</span> Python</span><br><span class=\"line\"><span class=\"bullet\">-</span> ...</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ul>\n<li>Java</li>\n<li>Python</li>\n<li>…</li>\n</ul>\n<ul>\n<li>Java</li>\n<li>Python</li>\n<li>…</li>\n</ul>\n<ul>\n<li>Java</li>\n<li>Python</li>\n<li>…</li>\n</ul></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h3 id=\"1-6-2-有序列表\">1.6.2 有序列表</h3>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 注意后面有空格</span></span><br><span class=\"line\"><span class=\"bullet\">1.</span> </span><br><span class=\"line\"><span class=\"bullet\">2.</span> </span><br><span class=\"line\"><span class=\"bullet\">3.</span> </span><br><span class=\"line\"><span class=\"bullet\">4.</span> </span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><ol>\n<li></li>\n<li></li>\n<li></li>\n<li></li>\n</ol></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"1-7-图片\">1.7 图片</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 本地图片</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/pusheencode.webp&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;示例图片&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"section\"># 在线图片</span></span><br><span class=\"line\">![<span class=\"string\">code</span>](<span class=\"link\">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>本地图片:<br>\n<img src=\"/assets/pusheencode.webp\" alt=\"示例图片\" style=\"zoom:50%;\" /><br>\n在线图片:<br>\n<img src=\"https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png\" alt=\"code\"></p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"1-8-表格\">1.8 表格</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">| 项目标号 | 资金     | 备注 |</span><br><span class=\"line\">| -------- | -------- | ---- |</span><br><span class=\"line\">| 1        | 100，000 | 无   |</span><br><span class=\"line\">| 2        | 200，000 | 无   |</span><br><span class=\"line\">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><table>\n<thead>\n<tr>\n<th>项目标号</th>\n<th>资金</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>100，000</td>\n<td>无</td>\n</tr>\n<tr>\n<td>2</td>\n<td>200，000</td>\n<td>无</td>\n</tr>\n<tr>\n<td>3</td>\n<td>300,600</td>\n<td>重要</td>\n</tr>\n</tbody>\n</table></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>\n<h2 id=\"1-9-公式\">1.9 公式</h2>\n<div class=\"tabs\" id=\"分栏\"><ul class=\"nav-tabs\"><button type=\"button\" class=\"tab  active\" data-href=\"分栏-1\">示例源码</button><button type=\"button\" class=\"tab \" data-href=\"分栏-2\">渲染演示</button></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"分栏-1\"><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">$\\lim<span class=\"emphasis\">_&#123;x \\to \\infty&#125;f(x)$</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-item-content\" id=\"分栏-2\"><p>$\\lim_{x \\to \\infty}f(x)$</p></div></div><div class=\"tab-to-top\"><button type=\"button\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div>"},{"title":"这是个小秘密噢","description":"你需要输入密码哦","password":"hello","abstract":"有东西被加密了, 请输入密码查看.","message":"您好, 这里需要密码.","theme":"xray","wrong_pass_message":"抱歉, 这个密码看着不太对, 请再试试.","wrong_hash_message":"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.","cover":"https://image.aruoshui.fun/i/2024/12/31/vqvf20-0.webp","abbrlink":53696,"date":"2024-02-17T11:07:18.000Z","_content":"\n\n# 你居然破解了密码","source":"_posts/这是个小秘密噢.md","raw":"---\ntitle: 这是个小秘密噢\ndescription: 你需要输入密码哦\ntags:\n  - 加密文章\npassword: hello\nabstract: 有东西被加密了, 请输入密码查看.\nmessage: 您好, 这里需要密码.\ntheme: xray\nwrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试.\nwrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\ncategories:\n  - 写作\ncover: 'https://image.aruoshui.fun/i/2024/12/31/vqvf20-0.webp'\nabbrlink: 53696\ndate: 2024-02-17 19:07:18\n---\n\n\n# 你居然破解了密码","slug":"这是个小秘密噢","published":1,"updated":"2024-12-31T11:24:21.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cme1h6ioa003ymktt0pvn8mhf","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试.\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"35fdba304abd5fe65735e67267fd372b3d83f3927ec199680acd0b1e46b834e7\">10d79030e8222445804370796b90fca14389babe2a7ca857de8508ede3af6fe7641a432e4ab31962fcbf3da3a41a1ea83c5d20b196481b4b93d0e21fd5f36036</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-xray\">\n      <input class=\"hbe hbe-input-field hbe-input-field-xray\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-xray\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-xray\">您好, 这里需要密码.</span>\n      </label>\n      <svg class=\"hbe hbe-graphic hbe-graphic-xray\" width=\"300%\" height=\"100%\" viewBox=\"0 0 1200 60\" preserveAspectRatio=\"none\">\n        <path d=\"M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0\"></path>\n        <path d=\"M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0\"></path>\n      </svg>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"值得推荐","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"bilibili","link":"https://www.bilibili.com/","avatar":"https://gimg3.baidu.com/topone/src=https%3A%2F%2Fbkimg.cdn.bcebos.com%2Fsmart%2F500fd9f9d72a6059252d68b95363239b033b5bb50c42-bkimg-process%2Cv_1%2Crw_1%2Crh_1%2Cmaxl_800%2Cpad_1%3Fx-bce-process%3Dimage%2Fresize%2Cm_pad%2Cw_348%2Ch_348%2Ccolor_ffffff&refer=http%3A%2F%2Fwww.baidu.com&app=2011&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1709312400&t=48b6a8dc03e7c1286cf66368bbdd1452","descr":"真正的985 211"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"有东西被加密了, 请输入密码查看.","more":"有东西被加密了, 请输入密码查看.","origin":"<h1>你居然破解了密码</h1>\n","encrypt":true}],"PostAsset":[],"PostCategory":[{"post_id":"cme1h6inr0003mktt5xigb3c9","category_id":"cme1h6ins0006mktt5ds5cvc7","_id":"cme1h6inw000lmktt5hvh0xnc"},{"post_id":"cme1h6inr0005mkttckqqdmwo","category_id":"cme1h6inu000emktt2ri74af5","_id":"cme1h6inx000smktt8m0u0l8y"},{"post_id":"cme1h6int0009mktt94vh9760","category_id":"cme1h6inw000mmktt38e00n4o","_id":"cme1h6iny0010mktt33v1245x"},{"post_id":"cme1h6inu000bmktt1u33bx2l","category_id":"cme1h6inx000tmktt38rb0trq","_id":"cme1h6inz0018mkttg8i7b8cr"},{"post_id":"cme1h6iny0013mktte55ge7lb","category_id":"cme1h6inu000emktt2ri74af5","_id":"cme1h6io0001dmkttfzgk6bj2"},{"post_id":"cme1h6inu000dmktthfrk6143","category_id":"cme1h6inw000mmktt38e00n4o","_id":"cme1h6io0001fmktt6mtaf3t5"},{"post_id":"cme1h6inv000kmktt7mpfa21p","category_id":"cme1h6inz0017mktt6w5g54ks","_id":"cme1h6io1001lmkttfk19fuxg"},{"post_id":"cme1h6inw000pmkttc1rw9mv5","category_id":"cme1h6io0001gmkttf7ugdhqx","_id":"cme1h6io2001rmkttb4ch568k"},{"post_id":"cme1h6inz0015mkttejueb7oc","category_id":"cme1h6io1001nmkttcdpu9hbn","_id":"cme1h6io2001umktt1d7t4a3i"},{"post_id":"cme1h6io0001cmktt94ba8eyf","category_id":"cme1h6io2001smktt6ibg2kl1","_id":"cme1h6io2001ymktt1xlu7x51"},{"post_id":"cme1h6io0001emkttf2vfg7zq","category_id":"cme1h6io0001gmkttf7ugdhqx","_id":"cme1h6io20022mktt9njs40rs"},{"post_id":"cme1h6io40026mktt567ahn33","category_id":"cme1h6io0001gmkttf7ugdhqx","_id":"cme1h6io5002bmkttc1te11fp"},{"post_id":"cme1h6io40029mktt9tlbcngg","category_id":"cme1h6io2001smktt6ibg2kl1","_id":"cme1h6io5002fmktt1sh83aur"},{"post_id":"cme1h6io6002imkttfn997tdt","category_id":"cme1h6io2001smktt6ibg2kl1","_id":"cme1h6io7002rmktt2r3yd360"},{"post_id":"cme1h6io5002emkttf87c6yeo","category_id":"cme1h6io0001gmkttf7ugdhqx","_id":"cme1h6io8002umktt6j9b50eo"},{"post_id":"cme1h6io5002emkttf87c6yeo","category_id":"cme1h6io6002jmkttep8s67fv","_id":"cme1h6io8002wmktt0btbh2wa"},{"post_id":"cme1h6io5002gmktt0wqeanzt","category_id":"cme1h6io7002pmktt1az20ixs","_id":"cme1h6io8002zmktt2opu04t1"},{"post_id":"cme1h6io7002tmktt8fyv5an0","category_id":"cme1h6io2001smktt6ibg2kl1","_id":"cme1h6io80031mkttaz08bork"},{"post_id":"cme1h6io8002xmkttao7g8g8b","category_id":"cme1h6io7002pmktt1az20ixs","_id":"cme1h6io80033mkttgffu92lt"},{"post_id":"cme1h6io8002vmktte194c5ru","category_id":"cme1h6io80030mktt6jxkfiv9","_id":"cme1h6io90037mkttftyq16ru"},{"post_id":"cme1h6ioa003ymktt0pvn8mhf","category_id":"cme1h6ioa003zmktt94s0d423","_id":"cme1h6ioa0042mkttfsl49oa6"}],"PostTag":[{"post_id":"cme1h6inr0003mktt5xigb3c9","tag_id":"cme1h6int0007mkttgli2epi9","_id":"cme1h6inv000gmktt0zfqgbnp"},{"post_id":"cme1h6inr0005mkttckqqdmwo","tag_id":"cme1h6inu000fmktt2e405wb2","_id":"cme1h6iny000xmktthxnn0b1z"},{"post_id":"cme1h6inr0005mkttckqqdmwo","tag_id":"cme1h6inw000nmktt240656k9","_id":"cme1h6iny000zmkttbz9o7uhy"},{"post_id":"cme1h6inu000bmktt1u33bx2l","tag_id":"cme1h6inx000umktt5mx6gybi","_id":"cme1h6inz0014mktt1da83skl"},{"post_id":"cme1h6iny0013mktte55ge7lb","tag_id":"cme1h6inu000fmktt2e405wb2","_id":"cme1h6inz0016mkttexr9bcmd"},{"post_id":"cme1h6iny0013mktte55ge7lb","tag_id":"cme1h6inw000nmktt240656k9","_id":"cme1h6io0001bmktt6mvh836g"},{"post_id":"cme1h6inv000kmktt7mpfa21p","tag_id":"cme1h6iny0012mkttf8rigdy2","_id":"cme1h6io1001jmktt2r2t736j"},{"post_id":"cme1h6inv000kmktt7mpfa21p","tag_id":"cme1h6io0001amkttcgfq16ug","_id":"cme1h6io1001mmktt9rnvcy5l"},{"post_id":"cme1h6inw000pmkttc1rw9mv5","tag_id":"cme1h6io0001hmktte3nce10l","_id":"cme1h6io1001qmktt2gg89uwh"},{"post_id":"cme1h6inz0015mkttejueb7oc","tag_id":"cme1h6io1001omktt2maih0rh","_id":"cme1h6io2001xmktt9gt18hus"},{"post_id":"cme1h6inz0015mkttejueb7oc","tag_id":"cme1h6io2001tmktthw853q27","_id":"cme1h6io2001zmkttc3p74k7g"},{"post_id":"cme1h6io0001cmktt94ba8eyf","tag_id":"cme1h6io2001wmkttb51s1ptd","_id":"cme1h6io20021mktt1uw0cqgq"},{"post_id":"cme1h6io0001emkttf2vfg7zq","tag_id":"cme1h6io20020mktt34qz1b1i","_id":"cme1h6io20023mktt1nr683c9"},{"post_id":"cme1h6io40026mktt567ahn33","tag_id":"cme1h6io40028mktth9r5730e","_id":"cme1h6io6002kmktt6mo92kvi"},{"post_id":"cme1h6io40026mktt567ahn33","tag_id":"cme1h6io5002dmkttbh4of70m","_id":"cme1h6io6002mmkttf2cm76h7"},{"post_id":"cme1h6io40029mktt9tlbcngg","tag_id":"cme1h6io6002hmkttfzcj9and","_id":"cme1h6io80034mktt6f5r3chj"},{"post_id":"cme1h6io40029mktt9tlbcngg","tag_id":"cme1h6io7002nmktt39g6hmkp","_id":"cme1h6io80035mktth5opfei9"},{"post_id":"cme1h6io40029mktt9tlbcngg","tag_id":"cme1h6io7002smkttg9lvbo7b","_id":"cme1h6io90038mktt7zzc7l00"},{"post_id":"cme1h6io40029mktt9tlbcngg","tag_id":"cme1h6io8002ymktt4vlydry4","_id":"cme1h6io90039mktt7v2s2hqq"},{"post_id":"cme1h6io5002emkttf87c6yeo","tag_id":"cme1h6io80032mkttdkq5cd7t","_id":"cme1h6io9003emktt6wvedy74"},{"post_id":"cme1h6io5002emkttf87c6yeo","tag_id":"cme1h6io90036mkttdd144fov","_id":"cme1h6io9003fmktthtz3b12o"},{"post_id":"cme1h6io5002emkttf87c6yeo","tag_id":"cme1h6io9003amktt5vd3gu9y","_id":"cme1h6io9003hmkttekco7d06"},{"post_id":"cme1h6io5002emkttf87c6yeo","tag_id":"cme1h6io9003bmktthjml9g8n","_id":"cme1h6io9003imktt2o5p0gqq"},{"post_id":"cme1h6io5002emkttf87c6yeo","tag_id":"cme1h6io9003cmkttek9wg63c","_id":"cme1h6io9003kmkttegdneaxl"},{"post_id":"cme1h6io5002gmktt0wqeanzt","tag_id":"cme1h6io9003dmktt8t5k8wec","_id":"cme1h6io9003lmktt88q2bo2f"},{"post_id":"cme1h6io5002gmktt0wqeanzt","tag_id":"cme1h6io9003gmkttbe4rhkey","_id":"cme1h6io9003nmktt1eglfehx"},{"post_id":"cme1h6io6002imkttfn997tdt","tag_id":"cme1h6io9003jmktt1w0z7zzo","_id":"cme1h6io9003omktt6yfzdu0p"},{"post_id":"cme1h6io7002tmktt8fyv5an0","tag_id":"cme1h6io9003mmktte8gzesis","_id":"cme1h6io9003rmkttfyi6fjy9"},{"post_id":"cme1h6io7002tmktt8fyv5an0","tag_id":"cme1h6io9003pmktt23ko3bbn","_id":"cme1h6io9003smktt55onesnc"},{"post_id":"cme1h6io8002vmktte194c5ru","tag_id":"cme1h6io9003qmktthudwg4nj","_id":"cme1h6ioa003umktt7nv8ckdi"},{"post_id":"cme1h6io8002xmkttao7g8g8b","tag_id":"cme1h6io9003dmktt8t5k8wec","_id":"cme1h6ioa003wmkttf1pfh56b"},{"post_id":"cme1h6io8002xmkttao7g8g8b","tag_id":"cme1h6io9003gmkttbe4rhkey","_id":"cme1h6ioa003xmktthsc34c0r"},{"post_id":"cme1h6ioa003ymktt0pvn8mhf","tag_id":"cme1h6ioa0040mktt1eoddwi7","_id":"cme1h6ioa0041mktt39gw53rt"}],"Tag":[{"name":"OpenCV","_id":"cme1h6int0007mkttgli2epi9"},{"name":"BEV","_id":"cme1h6inu000fmktt2e405wb2"},{"name":"目标检测","_id":"cme1h6inw000nmktt240656k9"},{"name":"语音识别","_id":"cme1h6inx000umktt5mx6gybi"},{"name":"科研工具","_id":"cme1h6iny0012mkttf8rigdy2"},{"name":"数学表达式","_id":"cme1h6io0001amkttcgfq16ug"},{"name":"嵌入式操作系统","_id":"cme1h6io0001hmktte3nce10l"},{"name":"数字图传","_id":"cme1h6io1001omktt2maih0rh"},{"name":"无线链路传输","_id":"cme1h6io2001tmktthw853q27"},{"name":"容器","_id":"cme1h6io2001wmkttb51s1ptd"},{"name":"Bootloader","_id":"cme1h6io20020mktt34qz1b1i"},{"name":"飞控","_id":"cme1h6io40028mktth9r5730e"},{"name":"单片机","_id":"cme1h6io5002dmkttbh4of70m"},{"name":"端口","_id":"cme1h6io6002hmkttfzcj9and"},{"name":"网络传输协议","_id":"cme1h6io7002nmktt39g6hmkp"},{"name":"加密","_id":"cme1h6io7002smkttg9lvbo7b"},{"name":"网络安全","_id":"cme1h6io8002ymktt4vlydry4"},{"name":"3D视觉","_id":"cme1h6io80032mkttdkq5cd7t"},{"name":"BEVDet","_id":"cme1h6io90036mkttdd144fov"},{"name":"TensorRT","_id":"cme1h6io9003amktt5vd3gu9y"},{"name":"ROS","_id":"cme1h6io9003bmktthjml9g8n"},{"name":"巡检机器人","_id":"cme1h6io9003cmkttek9wg63c"},{"name":"Markdown","_id":"cme1h6io9003dmktt8t5k8wec"},{"name":"外挂标签","_id":"cme1h6io9003gmkttbe4rhkey"},{"name":"抓包","_id":"cme1h6io9003jmktt1w0z7zzo"},{"name":"分布式版本控制系统","_id":"cme1h6io9003mmktte8gzesis"},{"name":"开发","_id":"cme1h6io9003pmktt23ko3bbn"},{"name":"音视频开发","_id":"cme1h6io9003qmktthudwg4nj"},{"name":"加密文章","_id":"cme1h6ioa0040mktt1eoddwi7"}]}}